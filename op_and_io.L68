00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2017 1:54:39 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C2              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001126             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012DC             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00002080             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 00001219             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 000020D6             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001145             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012DC             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00002080             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 00001219             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 000020F0             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012EC             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 0000207C             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C                            80                   
0000109C                            81                   ;MOVE.W  (A2), D3
0000109C                            82  
0000109C                            83                   * TEST OPCODES
0000109C                            84                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109C                            85                   ;MOVE.W  #$4E71,D3 * NOP
0000109C                            86                   ; MOVE.W  #$4E75,D3 * RTS
0000109C                            87                   ; MOVE.W  #$4EB0,D3 * JSR
0000109C                            88                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109C                            89                   ;MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109C                            90                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109C                            91                   ;MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109C                            92                    ; MOVE.W    #$5613, D3    *ADDQ.B #$3, (A3)
0000109C                            93                   ; MOVE.W     #$7E70, D3 *MOVEQ
0000109C                            94                   ; MOVE.W     #$80C0, D3 *DIVU
0000109C                            95                   ; MOVE.W     #$86D9, D3 *DIVU (A1)+,D3                      
0000109C                            96                   ; MOVE.W     #$8000, D3 * OR
0000109C                            97                   ; MOVE.W        #$9000, D3 * SUB
0000109C  363C B000                 98                    MOVE.W        #$B000, D3 * CMP
000010A0                            99                   ; MOVE.W        #$C1C0, D3 * MULS
000010A0                           100                   ; MOVE.W        #$C000, D3 * AND
000010A0                           101                   ; MOVE.W        #$E0F8, D3  *ASR
000010A0                           102                   ; MOVE.W        #$E1E2, D3  *ASL
000010A0                           103                   ; MOVE.W        #$E393, D3  *LSL
000010A0                           104                   ; MOVE.W        #$E2DC, D3  *LSR
000010A0                           105                    ; MOVE.W        #$8E62, D3  *OR.W        -(A2),D7
000010A0                           106                        
000010A0                           107  
000010A0  4EB9 00001D0A            108                   JSR    PRINT_ADDRESS
000010A6  544A                     109                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010A8  3A03                     110                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AA  183C 000C                111                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010AE  E86B                     112                   LSR.W   D4,D3       *Move the bits
000010B0  C6FC 0006                113                   MULU    #6,D3       *Form offset     
000010B4  4EB0 3000                114                   JSR     0(A0,D3)   *Jump indirect with index
000010B8  4EB9 00001D2A            115                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010BE                           116                   
000010BE                           117                   ;CMP     A3,A2
000010BE                           118                   ;BGT     EXIT
000010BE                           119                   ;BRA     MAIN_LOOP
000010BE                           120                   
000010BE  6000 0227                121                   BRA      EXIT
000010C2                           122                                  
000010C2                           123      INCLUDE 'definitions.x68'
000010C2                           124  
000010C2  =0000000D                125  CR              EQU     $0D         carriage return
000010C2  =0000000A                126  LF              EQU     $0A         line feed
000010C2= 43 53 53 20 34 32 ...    127  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010E6= 42 79 20 54 65 61 ...    128                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001126= 45 6E 74 65 72 20 ...    129  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001145= 45 6E 74 65 72 20 ...    130  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001162= 41 64 64 72 65 73 ...    131  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
00001189= 45 6E 64 69 6E 67 ...    132  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C3= 50 72 65 73 73 20 ...    133  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011DD= 52 65 61 63 68 65 ...    134  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011F8= 54 72 79 20 61 6E ...    135                      DC.B    'Try another location? (yes/no): ',0
00001219= 0D 0A 00                 136  linebreak           DC.B    CR,LF,0
0000121C                           137                      
0000121C= 44 41 54 41 00           138  Invalid_disp        DC.B    'DATA',0
00001221= 57 52 4F 4E 47 45 ...    139  InvalidEA_disp      DC.B    'WRONGEA',0
00001229                           140  
00001229= 4E 4F 50 00              141  NOP_disp            DC.B    'NOP',0
0000122D= 4D 4F 56 45 00           142  MOVE_disp           DC.B    'MOVE',0
00001232= 4D 4F 56 45 41 00        143  MOVEA_disp          DC.B    'MOVEA',0
00001238= 4D 4F 56 45 51 00        144  MOVEQ_disp          DC.B    'MOVEQ',0
0000123E= 4D 4F 56 45 4D 00        145  MOVEM_disp          DC.B    'MOVEM',0
00001244= 41 44 44 00              146  ADD_disp            DC.B    'ADD',0
00001248= 41 44 44 41 00           147  ADDA_disp           DC.B    'ADDA',0
0000124D= 41 44 44 49 00           148  ADDI_disp           DC.B    'ADDI',0
00001252= 41 44 44 51 00           149  ADDQ_disp           DC.B    'ADDQ',0
00001257= 53 55 42 00              150  SUB_disp            DC.B    'SUB',0
0000125B= 4D 55 4C 53 00           151  MULS_disp           DC.B    'MULS',0
00001260= 44 49 56 55 00           152  DIVU_disp           DC.B    'DIVU',0
00001265= 4C 45 41 00              153  LEA_disp            DC.B    'LEA',0
00001269= 43 4C 52 00              154  CLR_disp            DC.B    'CLR',0
0000126D= 41 4E 44 00              155  AND_disp            DC.B    'AND',0
00001271= 4F 52 00                 156  OR_disp             DC.B    'OR',0
00001274= 4C 53 4C 00              157  LSL_disp            DC.B    'LSL',0
00001278= 4C 53 52 00              158  LSR_disp            DC.B    'LSR',0
0000127C= 41 53 4C 00              159  ASL_disp            DC.B    'ASL',0
00001280= 41 53 52 00              160  ASR_disp            DC.B    'ASR',0
00001284= 52 4F 4C 00              161  ROL_disp            DC.B    'ROL',0
00001288= 52 4F 52 00              162  ROR_disp            DC.B    'ROR',0
0000128C= 4A 53 52 00              163  JSR_disp            DC.B    'JSR',0
00001290= 52 54 53 00              164  RTS_disp            DC.B    'RTS',0
00001294= 42 43 43 00              165  BCC_disp            DC.B    'BCC',0
00001298= 42 47 54 00              166  BGT_disp            DC.B    'BGT',0    
0000129C= 42 4C 45 00              167  BLE_disp            DC.b    'BLE',0
000012A0                           168  
000012A0                           169  
000012A0= 30 00                    170  hexaTable               DC.B    '0',0
000012A2= 31 00                    171                          DC.B    '1',0
000012A4= 32 00                    172                          DC.B    '2',0
000012A6= 33 00                    173                          DC.B    '3',0
000012A8= 34 00                    174                          DC.B    '4',0
000012AA= 35 00                    175                          DC.B    '5',0
000012AC= 36 00                    176                          DC.B    '6',0
000012AE= 37 00                    177                          DC.B    '7',0
000012B0= 38 00                    178                          DC.B    '8',0
000012B2= 39 00                    179                          DC.B    '9',0
000012B4= 41 00                    180                          DC.B    'A',0
000012B6= 42 00                    181                          DC.B    'B',0
000012B8= 43 00                    182                          DC.B    'C',0
000012BA= 44 00                    183                          DC.B    'D',0
000012BC= 45 00                    184                          DC.B    'E',0
000012BE= 46 00                    185                          DC.B    'F',0
000012C0= 23 00                    186  poundsign               DC.B    '#',0
000012C2= 24 00                    187  dollarsign              DC.B    '$',0
000012C4= 2B 00                    188  plussign                DC.B    '+',0
000012C6= 2D 00                    189  minussign               DC.B    '-',0
000012C8= 2C 00                    190  commasign               DC.B    ',',0
000012CA= 2F 00                    191  backslashsigh           DC.B    '/',0
000012CC= 28 00                    192  openparen               DC.B    '(',0
000012CE= 29 00                    193  closeparen              DC.B    ')',0
000012D0= 20 00                    194  space                   DC.B    ' ',0   
000012D2= 2E 42 00                 195  size_b                  DC.B    '.B',0
000012D5= 2E 57 00                 196  size_w                  DC.B    '.W',0        
000012D8= 2E 4C 00                 197  size_l                  DC.B    '.L',0
000012DB                           198  
000012DB                           199  linecount               DS.B    1       *storeage for lines on a screen
000012DC= 01                       200  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012DE                           201  location_startData      DS.L    1       *location on where to start reading data
000012E2                           202  location_endData        DS.L    1       *location on where to end reading data
000012E6                           203  table_length            DS.B    1       *Number of spaces in the table to print to console
000012E7                           204  
000012E7                           205  
000012E7                           206  -------------------- end include --------------------
000012E7                           207             
000012E7                           208  EXIT                 
000012E8  FFFF FFFF                209         SIMHALT   
000012EC                           210  
000012EC                           211  
000012EC                           212  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012EC  4EF9 0000134C            213  jmp_table      JMP         code0000
000012F2                           214                  *ADDI
000012F2                           215  
000012F2  4EF9 00001360            216                 JMP         code0001
000012F8                           217                 *MOVE
000012F8                           218                 *MOVEA
000012F8                           219  
000012F8  4EF9 00001366            220                 JMP         code0010
000012FE                           221  
000012FE  4EF9 00001366            222                 JMP         code0011
00001304                           223  
00001304  4EF9 00001366            224                 JMP         code0100
0000130A                           225                             
0000130A  4EF9 0000139A            226                 JMP         code0101
00001310                           227                 * ADDQ
00001310                           228                  
00001310                           229        
00001310  4EF9 0000139E            230                 JMP         code0110
00001316                           231                 * BCC
00001316                           232                 * BGT
00001316                           233                 * BLE
00001316                           234                 
00001316  4EF9 000013A2            235                 JMP         code0111
0000131C                           236                 * MOVEQ
0000131C                           237  
0000131C  4EF9 000013A6            238                 JMP         code1000
00001322                           239                 * DIVU
00001322                           240                 * OR
00001322                           241  
00001322  4EF9 000013B8            242                 JMP         code1001
00001328                           243                  *SUB
00001328  4EF9 000013BC            244                 JMP         code1010
0000132E                           245                 
0000132E  4EF9 000013C0            246                 JMP         code1011
00001334                           247                 * CMP
00001334                           248                 
00001334  4EF9 000013C4            249                 JMP         code1100
0000133A                           250                 * MULS
0000133A                           251                 * AND
0000133A                           252          
0000133A  4EF9 000013D6            253                 JMP         code1101
00001340                           254                 *ADD
00001340                           255                 *ADDA
00001340  4EF9 00001422            256                 JMP         code1110
00001346                           257                 * ASR
00001346                           258                 * ASL
00001346                           259                 * LSL
00001346                           260                 * LSR
00001346                           261                 * ROL
00001346                           262                 * ROR
00001346                           263  
00001346  4EF9 00001452            264                 JMP         code1111
0000134C                           265  
0000134C                           266  
0000134C                           267  code0000      
0000134C  4EB9 00001B62            268                 JSR          bits5to8 // RETURNS INTO D3
00001352  B6BC 00000006            269                 CMP.L        #%0110, D3
00001358  6600 0916                270                 BNE          INVALID_OP
0000135C  6000 01B8                271                 BRA          ADDI  
00001360                           272  
00001360                           273  code0001      
00001360  4EB9 00001456            274                 JSR   MOVE_B
00001366                           275                 *MOVE.B
00001366                           276  
00001366                           277  code0010        
00001366                           278                  * MOVE.L
00001366                           279                  * MOVEA.L
00001366                           280  code0011        
00001366                           281                  *MOVEA.W
00001366                           282                  *MOVE.W
00001366                           283  
00001366                           284  code0100       
00001366  4EB9 00001D04            285                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000136C                           286                  
0000136C                           287                 *NOP
0000136C  C47C 0FFF                288                 AND     #%0000111111111111,D2
00001370  B4BC 00000E71            289                 CMP.L   #%000111001110001, D2
00001376  6700 0912                290                 BEQ     NOP
0000137A                           291                 
0000137A                           292                 *RTS
0000137A  C47C 0FFF                293                 AND     #%0000111111111111,D2
0000137E  B4BC 00000E75            294                 CMP.L   #%0000111001110101, D2
00001384  6700 0912                295                 BEQ     RTS
00001388                           296  
00001388                           297                 *JSR
00001388  C47C 0FC0                298                 AND     #%0000111111000000,D2
0000138C  B4BC 00000E80            299                 CMP.L   #%0000111010000000,D2
00001392  6700 0912                300                 BEQ     JSR
00001396                           301                 
00001396                           302                 * MOVEM
00001396                           303                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001396                           304                ** AND     #%0000111110000000,D2
00001396                           305                 * DATA REGISTER
00001396                           306                ** CMP.L   #%0000100010000000, D2
00001396                           307                 ** JSR      MOVEM
00001396                           308                 * ADDRESS REGISTER (DECREMENTED)
00001396                           309                 ** CMP.L  #%0000110010000000, D2
00001396                           310                 ** JSR    MOVEM
00001396                           311                  
00001396                           312                  ** TO DO: BRANCH IF INVALID OPCODE
00001396                           313                  *LEA - if it's not the top codes, it's LEA
00001396  6000 0220                314                  BRA     LEA
0000139A                           315  code0101      
0000139A                           316  
0000139A  6000 0306                317                  BRA   ADDQ
0000139E                           318  
0000139E  6000 08D0                319  code0110        BRA       INVALID_OP
000013A2                           320  
000013A2                           321  code0111       
000013A2  6000 0374                322                  BRA      MOVEQ
000013A6                           323  
000013A6                           324  code1000      
000013A6  4EB9 00001B74            325                  JSR        bits8to10
000013AC  B67C 0003                326                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013B0  6700 038A                327                  BEQ        DIVU
000013B4  6000 041A                328                  BRA        OR       ** OTHERWISE OR
000013B8                           329                  
000013B8                           330  
000013B8                           331  code1001       
000013B8  6000 04C2                332                 BRA        SUB
000013BC  6000 08B2                333  code1010       BRA       INVALID_OP
000013C0                           334  
000013C0                           335  code1011       
000013C0  6000 055E                336                 BRA         CMP
000013C4                           337  
000013C4                           338  code1100      
000013C4  4EB9 00001B74            339                  JSR        bits8to10
000013CA  B67C 0007                340                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013CE  6700 05F2                341                  BEQ        MULS
000013D2  6000 060E                342                  BRA        AND       ** OTHERWISE AND
000013D6                           343  
000013D6                           344  code1101       
000013D6  4EB9 00001D04            345                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013DC                           346                 *ADDA
000013DC  4EB9 00001B74            347                 JSR      bits8to10
000013E2  B67C 0003                348                 CMP      #%011, D3  ** WORD
000013E6  6700 0076                349                 BEQ      ADDA
000013EA  B67C 0007                350                 CMP      #%111, D3   ** LONG
000013EE  6700 006E                351                 BEQ      ADDA
000013F2                           352                 
000013F2                           353                 *ADD
000013F2  B67C 0000                354                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
000013F6  6700 008A                355                 BEQ      ADD
000013FA  B67C 0001                356                 CMP      #%001, D3   ** WORD TO DATA REGISTER
000013FE  6700 0082                357                 BEQ      ADD
00001402  B67C 0002                358                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001406  6700 007A                359                 BEQ      ADD
0000140A  B67C 0004                360                 CMP      #%100, D3   ** BYTE TO EA
0000140E  6700 0072                361                 BEQ      ADD
00001412  B67C 0005                362                 CMP      #%101, D3   ** WORD TO EA
00001416  6700 006A                363                 BEQ      ADD
0000141A  B67C 0006                364                 CMP      #%110, D3   ** LONG TO EA
0000141E  6700 0062                365                 BEQ      ADD
00001422                           366                 
00001422                           367  
00001422                           368  code1110       
00001422                           369                  * ASR
00001422  4EB9 00001BB8            370                  JSR     bits1to10
00001428  B67C 0383                371                  CMP     #%1110000011,D3
0000142C  6700 05D4                372                  BEQ     ASR
00001430                           373                  
00001430                           374                  * ASL
00001430  B67C 0387                375                  CMP     #%1110000111,D3
00001434  6700 05E8                376                  BEQ     ASL
00001438                           377                  
00001438                           378                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001438                           379                  * LSL
00001438  4244                     380                  CLR     D4
0000143A  2803                     381                  MOVE.L  D3,D4
0000143C  C8BC 00A98671            382                  AND.L   #11110001,D4
00001442  B87C 01C7                383                  CMP     #%111000111,D4
00001446  6700 05F2                384                  BEQ     LSL
0000144A                           385                  
0000144A                           386                  * LSR
0000144A  B67C 038B                387                  CMP     #%1110001011,D3
0000144E  6700 0606                388                  BEQ     LSR
00001452                           389                  
00001452                           390                  * ROL
00001452                           391                  
00001452                           392                  * ROR
00001452                           393  
00001452  6000 081C                394  code1111       BRA      INVALID_OP
00001456                           395  
00001456                           396  MOVE_B
00001456  4EB9 0000145C            397                 JSR     MOVEB_BUFFER
0000145C                           398  MOVEB_BUFFER
0000145C  4E71                     399                  NOP              
0000145E                           400  * ----------------------------------
0000145E                           401  
0000145E                           402  ADDA    
0000145E  4EB9 00001466            403                 JSR     ADDA_BUFFER
00001464  4E75                     404                 RTS
00001466                           405                  
00001466                           406  ADDA_BUFFER
00001466  1CFC 0041                407                 MOVE.B   #'A',(A6)+
0000146A  1CFC 0044                408                 MOVE.B   #'D', (A6)+  
0000146E  1CFC 0044                409                 MOVE.B   #'D', (A6)+
00001472  1CFC 0041                410                 MOVE.B   #'A', (A6)+
00001476  4EB9 00002024            411                 JSR      GETSIZE_ADDA
0000147C  1CFC 0020                412                 MOVE.B   #' ', (A6)+
00001480  4E75                     413                 RTS
00001482                           414                 
00001482                           415                 
00001482                           416                 
00001482                           417  *********************************************               
00001482                           418  ADD    
00001482  4EB9 0000148A            419                 JSR     ADD_BUFFER
00001488  4E75                     420                 RTS
0000148A                           421                  
0000148A                           422  ADD_BUFFER
0000148A  1CFC 0041                423                 MOVE.B   #'A',(A6)+
0000148E  1CFC 0044                424                 MOVE.B   #'D', (A6)+  
00001492  1CFC 0044                425                 MOVE.B   #'D', (A6)+
00001496  4EB9 00001F62            426                 JSR      GETSIZE_ADD
0000149C                           427                 
0000149C                           428                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
0000149C  BC7C 0001                429                 CMP      #1,D6
000014A0  6600 0018                430                 BNE      ADD_DIRECTION_REVERSED
000014A4  4EB9 000014D0            431                 JSR      ADD_SRC
000014AA  1CFC 002C                432                 MOVE.B   #',', (A6)+
000014AE  1CFC 0020                433                 MOVE.B   #' ', (A6)+
000014B2  4EB9 000014F4            434                 JSR      ADD_DEST
000014B8  4E75                     435                 RTS
000014BA                           436                 
000014BA                           437                 
000014BA                           438  ADD_DIRECTION_REVERSED
000014BA  4246                     439                 CLR      D6
000014BC  4EB9 000014F4            440                 JSR      ADD_DEST
000014C2  1CFC 002C                441                 MOVE.B   #',', (A6)+
000014C6  1CFC 0020                442                 MOVE.B   #' ', (A6)+
000014CA  4EB9 000014D0            443                 JSR      ADD_SRC             
000014D0                           444                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014D0                           445                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014D0                           446                 
000014D0                           447  ***********************************************        
000014D0                           448  
000014D0                           449  
000014D0                           450  
000014D0                           451  ****************************************************************************************
000014D0                           452  ADD_SRC
000014D0                           453  
000014D0  4EB9 00001B86            454                  JSR    bits11to13
000014D6  3803                     455                  MOVE   D3,D4
000014D8  41F9 00001A72            456                  LEA     jmp_mode,A0    *Index into the table
000014DE  C6FC 0006                457                  MULU   #6,D3
000014E2  4EB0 3000                458                  JSR    0(A0,D3)     
000014E6  4EB9 00001B98            459                  JSR    bits14to16
000014EC  4EB9 00001AA2            460                  JSR    insert_num
000014F2  4E75                     461                  RTS
000014F4                           462  
000014F4                           463  ADD_DEST
000014F4  363C 0000                464                  MOVE.W #%000,D3     ;Can only have a data register.
000014F8  3803                     465                  MOVE   D3,D4
000014FA  41F9 00001A72            466                  LEA     jmp_mode,A0    *Index into the table
00001500  C6FC 0006                467                  MULU    #6,D3       *Form offset     
00001504  4EB0 3000                468                  JSR     0(A0,D3)   *Jump indirect with index
00001508                           469                  
00001508  4EB9 00001B4E            470                  JSR     bits5to7
0000150E  4EB9 00001AA2            471                  JSR     insert_num
00001514  4E75                     472                  RTS
00001516                           473  
00001516                           474  ADDI
00001516  4EB9 0000159C            475                  JSR     ADDI_BUFFER
0000151C  4EB9 0000152A            476                  JSR     ADDI_SRC
00001522  4EB9 00001538            477                  JSR     ADDI_DES
00001528  4E75                     478                  RTS
0000152A                           479                  
0000152A                           480  ADDI_SRC                        
0000152A  1CFC 0023                481                  MOVE.B  #'#', (A6)+
0000152E  1CFC 002C                482                  MOVE.B  #',', (A6)+
00001532  1CFC 0020                483                  MOVE.B  #' ', (A6)+
00001536  4E75                     484                  RTS
00001538                           485                    ** TODO: IMPLEMENT THIS IN EA
00001538                           486                  ** Immediate field—Data immediately following the instruction.
00001538                           487                  **If size = 00, the data is the low-order byte of the immediate word.
00001538                           488                  **If size = 01, the data is the entire immediate word.
00001538                           489                  **If size = 10, the data is the next two immediate words. 
00001538                           490  ADDI_DES
00001538                           491                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001538                           492                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001538  4EB9 00001B86            493                 JSR      bits11to13
0000153E  B67C 0001                494                 CMP      #%001, D3 **AN
00001542  6700 0728                495                 BEQ      INVALID_EA
00001546  B67C 0005                496                 CMP      #%101, D3 **COMPLICATED
0000154A  6700 0720                497                 BEQ      INVALID_EA
0000154E  B67C 0006                498                 CMP      #%110, D3 **COMPLICATED
00001552  6700 0718                499                 BEQ      INVALID_EA
00001556                           500                 
00001556  4EB9 00001BA8            501                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000155C  B67C 003C                502                 CMP      #%111100,D3 // immediate data
00001560  6700 070A                503                 BEQ      INVALID_EA
00001564  B67C 003A                504                 CMP      #%111010,D3 // complicated
00001568  6700 0702                505                 BEQ      INVALID_EA
0000156C  B67C 003B                506                 CMP      #%111011,D3 // complicated
00001570  6700 06FA                507                 BEQ      INVALID_EA
00001574                           508                 
00001574  4EB9 00001B86            509                 JSR      bits11to13 ** grab bits to jump with\
0000157A  3803                     510                 MOVE     D3,D4
0000157C  41F9 00001A72            511                 LEA     jmp_mode,A0    *Index into the table
00001582  C6FC 0006                512                 MULU    #6,D3       *Form offset     
00001586  4EB0 3000                513                 JSR     0(A0,D3)   *Jump indirect with index
0000158A                           514                 
0000158A  4243                     515                 CLR     D3
0000158C  4EB9 00001B98            516                 JSR     bits14to16
00001592  4EB9 00001AA2            517                 JSR     insert_num
00001598  4244                     518                 CLR     D4
0000159A                           519                 
0000159A  4E75                     520                 RTS
0000159C                           521                 
0000159C                           522                             
0000159C                           523  ADDI_BUFFER
0000159C  1CFC 0041                524                 MOVE.B   #'A',(A6)+
000015A0  1CFC 0044                525                 MOVE.B   #'D', (A6)+  
000015A4  1CFC 0044                526                 MOVE.B   #'D', (A6)+
000015A8  1CFC 0049                527                 MOVE.B   #'I', (A6)+
000015AC                           528                 
000015AC  4EB9 00001FEA            529                 JSR      GETSIZE_ADDI
000015B2                           530                 
000015B2                           531                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015B2                           532                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015B2  1CFC 0020                533                 MOVE.B   #' ', (A6)+
000015B6  4E75                     534                 RTS
000015B8                           535                              
000015B8                           536  LEA
000015B8  4EB9 00001B74            537                 JSR      bits8to10   // 1 1 1
000015BE  B47C 0007                538                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015C2  6600 06AC                539                 BNE      INVALID_OP
000015C6  4EB9 000015DA            540                 JSR      LEA_BUFFER
000015CC  4EB9 000015EC            541                 JSR      LEA_SRC
000015D2  4EB9 0000167E            542                 JSR      LEA_DEST
000015D8  4E75                     543                 RTS
000015DA                           544                 
000015DA                           545  LEA_BUFFER 
000015DA  1CFC 004C                546                 MOVE.B   #'L',(A6)+
000015DE  1CFC 0045                547                 MOVE.B   #'E', (A6)+  
000015E2  1CFC 0041                548                 MOVE.B   #'A', (A6)+
000015E6  1CFC 0020                549                 MOVE.B   #' ', (A6)+
000015EA  4E75                     550                 RTS
000015EC                           551            
000015EC                           552  LEA_SRC
000015EC                           553              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
000015EC  4EB9 00001B86            554              JSR      bits11to13  // source mode - D3
000015F2  B67C 0000                555              CMP      #%000, D3
000015F6  6700 0674                556              BEQ      INVALID_EA
000015FA  B67C 0001                557              CMP      #%001, D3
000015FE  6700 066C                558              BEQ      INVALID_EA
00001602  B67C 0003                559              CMP      #%011, D3
00001606  6700 0664                560              BEQ      INVALID_EA
0000160A  B67C 0004                561              CMP      #%100, D3
0000160E  6700 065C                562              BEQ      INVALID_EA
00001612  B67C 0005                563              CMP      #%101, D3
00001616  6700 0654                564              BEQ      INVALID_EA
0000161A  B67C 0006                565              CMP      #%110, D3
0000161E  6700 064C                566              BEQ      INVALID_EA
00001622                           567  
00001622                           568              
00001622                           569              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00001622  4EB9 00001B98            570              JSR      bits14to16 // source register - d4
00001628  B67C 0004                571              CMP      #%100, D3
0000162C  6700 063E                572              BEQ      INVALID_EA
00001630  B67C 0002                573              CMP      #%010, D3
00001634  6700 0636                574              BEQ      INVALID_EA
00001638  B67C 0003                575              CMP      #%011, D3
0000163C  6700 062E                576              BEQ      INVALID_EA
00001640                           577              
00001640                           578  
00001640  4EB9 00001BA8            579               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001646  B67C 003C                580               CMP      #%111100,D3 // immediate data
0000164A  6700 0620                581               BEQ      INVALID_EA
0000164E  B67C 003A                582               CMP      #%111010,D3 // complicated
00001652  6700 0618                583               BEQ      INVALID_EA
00001656  B67C 003B                584               CMP      #%111011,D3 // complicated
0000165A  6700 0610                585               BEQ      INVALID_EA
0000165E                           586     
0000165E  4EB9 00001B86            587               JSR      bits11to13 ** grab mode bits to jump with
00001664  3803                     588               MOVE    D3,D4
00001666                           589  
00001666  41F9 00001A72            590               LEA     jmp_mode,A0    *Index into the table
0000166C  C6FC 0006                591               MULU    #6,D3       *Form offset     
00001670  4EB0 3000                592               JSR     0(A0,D3)   *Jump indirect with index
00001674                           593   
00001674  1CFC 002C                594               MOVE.B     #',', (A6)+
00001678  1CFC 0020                595               MOVE.B     #' ', (A6)+
0000167C                           596  
0000167C  4E75                     597               RTS
0000167E                           598               
0000167E                           599  LEA_DEST    
0000167E  4244                     600                  CLR     D4
00001680  41F9 00001A72            601                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00001686  363C 0001                602                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
0000168A  3803                     603                  MOVE    D3,D4
0000168C  C6FC 0006                604                  MULU    #6,D3       *Form offset     
00001690  4EB0 3000                605                  JSR     0(A0,D3)   *Jump indirect with index
00001694                           606                  
00001694  4EB9 00001B4E            607                  JSR     bits5to7
0000169A  4EB9 00001AA2            608                  JSR     insert_num
000016A0                           609                  
000016A0  4E75                     610                  RTS
000016A2                           611  
000016A2                           612  *************************************************
000016A2                           613  
000016A2                           614  ADDQ
000016A2  4EB9 00001700            615                  JSR     ADDQ_BUFFER
000016A8  4EB9 000016BE            616                  JSR     ADDQ_SRC
000016AE  1CFC 002C                617                  MOVE.B  #',',(A6)+
000016B2  1CFC 0020                618                  MOVE.B  #' ',(A6)+
000016B6  4EB9 000016D6            619                  JSR     ADDQ_DEST
000016BC  4E75                     620                  RTS                 ;BRA     PRINT_BUFFER
000016BE                           621  
000016BE                           622  ADDQ_SRC
000016BE  4EB9 00001B4E            623                  JSR     bits5to7
000016C4  1CFC 0023                624                  MOVE.B  #'#',(A6)+
000016C8  183C 0000                625                  MOVE.B  #%000,D4
000016CC  4EB9 00001AA2            626                  JSR     insert_num
000016D2  4244                     627                  CLR     D4
000016D4  4E75                     628                  RTS
000016D6                           629                  
000016D6                           630  ADDQ_DEST
000016D6  4EB9 00001B86            631                 JSR      bits11to13
000016DC  3803                     632                 MOVE     D3,D4
000016DE  41F9 00001A72            633                 LEA     jmp_mode,A0    *Index into the table
000016E4  C6FC 0006                634                 MULU    #6,D3       *Form offset     
000016E8  4EB0 3000                635                 JSR     0(A0,D3)   *Jump indirect with index
000016EC  4243                     636                 CLR     D3
000016EE  4EB9 00001B98            637                 JSR     bits14to16
000016F4  4EB9 00001AA2            638                 JSR     insert_num
000016FA  4244                     639                 CLR     D4
000016FC  4243                     640                 CLR     D3
000016FE  4E75                     641                 RTS
00001700                           642                 
00001700                           643  
00001700                           644  ADDQ_BUFFER
00001700  1CFC 0041                645                 MOVE.B   #'A',(A6)+
00001704  1CFC 0044                646                 MOVE.B   #'D', (A6)+  
00001708  1CFC 0044                647                 MOVE.B   #'D', (A6)+
0000170C  1CFC 0051                648                 MOVE.B   #'Q', (A6)+
00001710  4EB9 00001D90            649                 JSR      GETSIZE_ADDQ
00001716                           650                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00001716                           651                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001716  4E75                     652                 RTS               
00001718                           653  
00001718                           654  
00001718                           655  ****************************************               
00001718                           656  MOVEQ
00001718  4EB9 00001722            657                  JSR     MOVEQ_BUFFER
0000171E  6000 060A                658                  BRA     PRINT_BUFFER
00001722                           659  
00001722                           660  MOVEQ_BUFFER
00001722  1CFC 004D                661                 MOVE.B   #'M',(A6)+
00001726  1CFC 004F                662                 MOVE.B   #'O', (A6)+  
0000172A  1CFC 0056                663                 MOVE.B   #'V', (A6)+
0000172E  1CFC 0045                664                 MOVE.B   #'E', (A6)+
00001732  1CFC 0051                665                 MOVE.B   #'Q', (A6)+
00001736  1CFC 0020                666                 MOVE.B   #' ', (A6)+
0000173A  4E75                     667                 RTS
0000173C                           668  
0000173C                           669  
0000173C                           670  ****************************************
0000173C                           671  
0000173C                           672  DIVU
0000173C  4EB9 00001B74            673                  JSR     bits8to10
00001742  B67C 0003                674                  CMP     #%011,D3
00001746  6600 0524                675                  BNE     INVALID_EA
0000174A  4243                     676                  CLR     D3
0000174C  4EB9 00001768            677                  JSR     DIVU_BUFFER
00001752  4EB9 0000177E            678                  JSR     DIVU_SRC
00001758  1CFC 002C                679                  MOVE.B  #',',(A6)+
0000175C  1CFC 0020                680                  MOVE.B  #' ',(A6)+
00001760  4EB9 000017A8            681                  JSR     DIVU_DEST
00001766  4E75                     682                  RTS                 ;BRA     PRINT_BUFFER
00001768                           683  
00001768                           684  DIVU_BUFFER
00001768  1CFC 0044                685                 MOVE.B   #'D',(A6)+
0000176C  1CFC 0049                686                 MOVE.B   #'I', (A6)+  
00001770  1CFC 0056                687                 MOVE.B   #'V', (A6)+
00001774  1CFC 0055                688                 MOVE.B   #'U', (A6)+
00001778  1CFC 0020                689                 MOVE.B   #' ', (A6)+
0000177C  4E75                     690                 RTS  
0000177E                           691                 
0000177E                           692                 
0000177E                           693  DIVU_SRC
0000177E  4EB9 00001B86            694                 JSR      bits11to13
00001784  3803                     695                 MOVE     D3,D4
00001786  41F9 00001A72            696                 LEA     jmp_mode,A0    *Index into the table
0000178C  C6FC 0006                697                 MULU    #6,D3       *Form offset     
00001790  4EB0 3000                698                 JSR     0(A0,D3)   *Jump indirect with index  
00001794  4243                     699                 CLR     D3
00001796  4EB9 00001B98            700                 JSR     bits14to16
0000179C  4EB9 00001AA2            701                 JSR     insert_num
000017A2  4244                     702                 CLR     D4
000017A4  4243                     703                 CLR     D3
000017A6  4E75                     704                 RTS
000017A8                           705                 
000017A8                           706  DIVU_DEST
000017A8  363C 0000                707                 MOVE    #%000,D3     ;DIVU destination can only be a data register.
000017AC  3803                     708                 MOVE    D3,D4
000017AE  41F9 00001A72            709                 LEA     jmp_mode,A0    *Index into the table
000017B4  C6FC 0006                710                 MULU    #6,D3       *Form offset     
000017B8  4EB0 3000                711                 JSR     0(A0,D3)   *Jump indirect with index  
000017BC  4243                     712                 CLR     D3
000017BE  4EB9 00001B4E            713                 JSR     bits5to7
000017C4  4EB9 00001AA2            714                 JSR     insert_num
000017CA  4244                     715                 CLR     D4
000017CC  4243                     716                 CLR     D3
000017CE  4E75                     717                 RTS
000017D0                           718                 
000017D0                           719                 
000017D0                           720                 
000017D0                           721  *****************************************               
000017D0                           722                 
000017D0                           723  OR    
000017D0  4EB9 0000180E            724                 JSR     OR_BUFFER
000017D6                           725                 
000017D6                           726                             
000017D6                           727                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000017D6  BC7C 0001                728                 CMP      #1,D6
000017DA  6600 001A                729                 BNE      OR_DIRECTION_REVERSED
000017DE  4246                     730                 CLR      D6
000017E0  4EB9 00001822            731                 JSR      OR_SRC
000017E6  1CFC 002C                732                 MOVE.B   #',', (A6)+
000017EA  1CFC 0020                733                 MOVE.B   #' ', (A6)+
000017EE  4EB9 00001854            734                 JSR      OR_DEST
000017F4  4E75                     735                 RTS
000017F6                           736                 
000017F6                           737                 
000017F6                           738  OR_DIRECTION_REVERSED
000017F6  4246                     739                 CLR      D6
000017F8  4EB9 00001854            740                 JSR      OR_DEST
000017FE  1CFC 002C                741                 MOVE.B   #',', (A6)+
00001802  1CFC 0020                742                 MOVE.B   #' ', (A6)+
00001806  4EB9 00001822            743                 JSR      OR_SRC             
0000180C                           744                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000180C                           745                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA>                
0000180C                           746                 
0000180C                           747                 
0000180C  4E75                     748                 RTS                  ;BRA     PRINT_BUFFER
0000180E                           749                  
0000180E                           750  OR_BUFFER
0000180E  1CFC 004F                751                 MOVE.B   #'O',(A6)+
00001812  1CFC 0052                752                 MOVE.B   #'R', (A6)+
00001816  4EB9 00001EDA            753                 JSR      GETSIZE_OR  
0000181C                           754                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000181C                           755                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000181C  1CFC 0020                756                 MOVE.B   #' ', (A6)+
00001820  4E75                     757                 RTS   
00001822                           758                 
00001822                           759                 
00001822                           760                 
00001822                           761                 
00001822                           762  OR_SRC
00001822  4EB9 00001B86            763                 JSR      bits11to13
00001828  B67C 0001                764                 CMP      #%001,D3
0000182C  6700 043E                765                 BEQ      INVALID_EA
00001830  3803                     766                 MOVE     D3,D4
00001832  41F9 00001A72            767                 LEA     jmp_mode,A0    *Index into the table
00001838  C6FC 0006                768                 MULU    #6,D3       *Form offset     
0000183C  4EB0 3000                769                 JSR     0(A0,D3)   *Jump indirect with index  
00001840  4243                     770                 CLR     D3
00001842  4EB9 00001B98            771                 JSR     bits14to16
00001848  4EB9 00001AA2            772                 JSR     insert_num
0000184E  4243                     773                 CLR     D3
00001850  4244                     774                 CLR     D4
00001852  4E75                     775                 RTS
00001854                           776  
00001854                           777  
00001854                           778  OR_DEST
00001854  163C 0000                779                 MOVE.B  #%000,D3
00001858  3803                     780                 MOVE    D3,D4
0000185A  41F9 00001A72            781                 LEA     jmp_mode,A0    *Index into the table
00001860  C6FC 0006                782                 MULU    #6,D3       *Form offset     
00001864  4EB0 3000                783                 JSR     0(A0,D3)   *Jump indirect with index  
00001868  4243                     784                 CLR     D3
0000186A  4EB9 00001B4E            785                 JSR     bits5to7    
00001870  4EB9 00001AA2            786                 JSR     insert_num
00001876  4243                     787                 CLR     D3
00001878  4244                     788                 CLR     D4
0000187A  4E75                     789                 RTS   
0000187C                           790  
0000187C                           791  
0000187C                           792  
0000187C                           793  
0000187C                           794  
0000187C                           795  ***********************************************
0000187C                           796  
0000187C                           797  SUB   
0000187C  4EB9 000018B6            798                 JSR     SUB_BUFFER
00001882                           799                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
00001882  BC7C 0001                800                 CMP      #1,D6
00001886  6600 001A                801                 BNE      SUB_DIRECTION_REVERSED
0000188A  4246                     802                 CLR      D6
0000188C  4EB9 000018CE            803                 JSR      SUB_SRC
00001892  1CFC 002C                804                 MOVE.B   #',', (A6)+
00001896  1CFC 0020                805                 MOVE.B   #' ', (A6)+
0000189A  4EB9 000018F8            806                 JSR      SUB_DEST
000018A0  4E75                     807                 RTS
000018A2                           808                 
000018A2                           809                 
000018A2                           810  SUB_DIRECTION_REVERSED
000018A2  4246                     811                 CLR      D6
000018A4  4EB8 1854                812                 JSR      OR_DEST
000018A8  1CFC 002C                813                 MOVE.B   #',', (A6)+
000018AC  1CFC 0020                814                 MOVE.B   #' ', (A6)+
000018B0  4EB8 1822                815                 JSR      OR_SRC             
000018B4                           816                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000018B4                           817                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA>                
000018B4                           818                 
000018B4                           819                 
000018B4  4E75                     820                 RTS                  ;BRA     PRINT_BUFFER
000018B6                           821                 
000018B6                           822  SUB_BUFFER
000018B6  1CFC 0053                823                 MOVE.B   #'S',(A6)+
000018BA  1CFC 0055                824                 MOVE.B   #'U', (A6)+  
000018BE  1CFC 0042                825                 MOVE.B   #'B', (A6)+
000018C2  4EB9 00001E52            826                 JSR      GETSIZE_SUB
000018C8                           827                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000018C8                           828                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000018C8  1CFC 0020                829                 MOVE.B   #' ', (A6)+
000018CC  4E75                     830                 RTS  
000018CE                           831                 
000018CE                           832                 
000018CE                           833                 
000018CE                           834  SUB_SRC
000018CE  4EB9 00001B86            835                 JSR      bits11to13
000018D4  3803                     836                 MOVE     D3,D4
000018D6  41F9 00001A72            837                 LEA     jmp_mode,A0    *Index into the table
000018DC  C6FC 0006                838                 MULU    #6,D3       *Form offset     
000018E0  4EB0 3000                839                 JSR     0(A0,D3)   *Jump indirect with index  
000018E4  4243                     840                 CLR     D3
000018E6  4EB9 00001B98            841                 JSR     bits14to16
000018EC  4EB9 00001AA2            842                 JSR     insert_num
000018F2  4243                     843                 CLR     D3
000018F4  4244                     844                 CLR     D4
000018F6  4E75                     845                 RTS
000018F8                           846  
000018F8                           847  
000018F8                           848  SUB_DEST
000018F8  163C 0000                849                 MOVE.B  #%000,D3
000018FC  3803                     850                 MOVE    D3,D4
000018FE  41F9 00001A72            851                 LEA     jmp_mode,A0    *Index into the table
00001904  C6FC 0006                852                 MULU    #6,D3       *Form offset     
00001908  4EB0 3000                853                 JSR     0(A0,D3)   *Jump indirect with index  
0000190C  4243                     854                 CLR     D3
0000190E  4EB9 00001B4E            855                 JSR     bits5to7    
00001914  4EB9 00001AA2            856                 JSR     insert_num
0000191A  4243                     857                 CLR     D3
0000191C  4244                     858                 CLR     D4
0000191E  4E75                     859                 RTS   
00001920                           860                
00001920                           861  ************************************************               
00001920                           862                 
00001920                           863                 
00001920                           864  ************************************************               
00001920                           865                
00001920                           866                 
00001920                           867                 
00001920                           868  CMP   
00001920  4EB9 0000195E            869                 JSR     CMP_BUFFER
00001926                           870                                ;Okay, the directionality bit in D6 should determine which order we should process bits in?
00001926  BC7C 0001                871                 CMP      #1,D6
0000192A  6600 001A                872                 BNE      CMP_DIRECTION_REVERSED
0000192E  4246                     873                 CLR      D6
00001930  4EB9 00001970            874                 JSR      CMP_SRC
00001936  1CFC 002C                875                 MOVE.B   #',', (A6)+
0000193A  1CFC 0020                876                 MOVE.B   #' ', (A6)+
0000193E  4EB9 0000199A            877                 JSR      CMP_DEST
00001944  4E75                     878                 RTS
00001946                           879                 
00001946                           880                 
00001946                           881  CMP_DIRECTION_REVERSED
00001946  4246                     882                 CLR      D6
00001948  4EB9 0000199A            883                 JSR      CMP_DEST
0000194E  1CFC 002C                884                 MOVE.B   #',', (A6)+
00001952  1CFC 0020                885                 MOVE.B   #' ', (A6)+
00001956  4EB9 00001970            886                 JSR      CMP_SRC             
0000195C                           887                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000195C                           888                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA>                               
0000195C  4E75                     889                 RTS                  ;BRA     PRINT_BUFFER
0000195E                           890                 
0000195E                           891                                
0000195E                           892  CMP_BUFFER
0000195E  1CFC 0043                893                 MOVE.B   #'C',(A6)+
00001962  1CFC 004D                894                 MOVE.B   #'M', (A6)+  
00001966  1CFC 0050                895                 MOVE.B   #'P', (A6)+
0000196A                           896                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000196A                           897                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000196A                           898                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000196A  1CFC 0020                899                 MOVE.B   #' ', (A6)+
0000196E  4E75                     900                 RTS   
00001970                           901                 
00001970                           902                 
00001970                           903                 
00001970                           904  CMP_SRC
00001970  4EB9 00001B86            905                 JSR      bits11to13
00001976  3803                     906                 MOVE     D3,D4
00001978  41F9 00001A72            907                 LEA     jmp_mode,A0    *Index into the table
0000197E  C6FC 0006                908                 MULU    #6,D3       *Form offset     
00001982  4EB0 3000                909                 JSR     0(A0,D3)   *Jump indirect with index  
00001986  4243                     910                 CLR     D3
00001988  4EB9 00001B98            911                 JSR     bits14to16
0000198E  4EB9 00001AA2            912                 JSR     insert_num
00001994  4243                     913                 CLR     D3
00001996  4244                     914                 CLR     D4
00001998  4E75                     915                 RTS
0000199A                           916  
0000199A                           917  
0000199A                           918  CMP_DEST
0000199A  163C 0000                919                 MOVE.B  #%000,D3
0000199E  3803                     920                 MOVE    D3,D4
000019A0  41F9 00001A72            921                 LEA     jmp_mode,A0    *Index into the table
000019A6  C6FC 0006                922                 MULU    #6,D3       *Form offset     
000019AA  4EB0 3000                923                 JSR     0(A0,D3)   *Jump indirect with index  
000019AE  4243                     924                 CLR     D3
000019B0  4EB9 00001B4E            925                 JSR     bits5to7    
000019B6  4EB9 00001AA2            926                 JSR     insert_num
000019BC  4243                     927                 CLR     D3
000019BE  4244                     928                 CLR     D4
000019C0  4E75                     929                 RTS   
000019C2                           930  
000019C2                           931  ************************************************               
000019C2                           932  
000019C2                           933                 
000019C2                           934  MULS
000019C2  4EB9 000019CC            935                  JSR     MULS_BUFFER
000019C8  6000 0360                936                  BRA     PRINT_BUFFER
000019CC                           937  
000019CC                           938  MULS_BUFFER
000019CC  1CFC 004D                939                 MOVE.B   #'M',(A6)+
000019D0  1CFC 0055                940                 MOVE.B   #'U', (A6)+  
000019D4  1CFC 004C                941                 MOVE.B   #'L', (A6)+
000019D8  1CFC 0053                942                 MOVE.B   #'S', (A6)+
000019DC  1CFC 0020                943                 MOVE.B   #' ', (A6)+
000019E0  4E75                     944                 RTS
000019E2                           945  
000019E2                           946  AND    
000019E2  4EB9 000019EC            947                 JSR     AND_BUFFER
000019E8  6000 0340                948                 BRA     PRINT_BUFFER
000019EC                           949                  
000019EC                           950  AND_BUFFER
000019EC  1CFC 0041                951                 MOVE.B   #'A',(A6)+
000019F0  1CFC 004E                952                 MOVE.B   #'N', (A6)+  
000019F4  1CFC 0044                953                 MOVE.B   #'D', (A6)+
000019F8  1CFC 002E                954                 MOVE.B   #'.', (A6)+
000019FC                           955                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000019FC                           956                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000019FC                           957                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000019FC  1CFC 0020                958                 MOVE.B   #' ', (A6)+
00001A00  4E75                     959                 RTS    
00001A02                           960  
00001A02                           961  ASR     
00001A02  4EB9 00001A0C            962                  JSR     ASR_BUFFER
00001A08  6000 0320                963                  BRA     PRINT_BUFFER
00001A0C                           964  
00001A0C                           965  ASR_BUFFER
00001A0C  1CFC 0041                966                 MOVE.B   #'A',(A6)+
00001A10  1CFC 0053                967                 MOVE.B   #'S', (A6)+  
00001A14  1CFC 0052                968                 MOVE.B   #'R', (A6)+
00001A18  1CFC 0020                969                 MOVE.B   #' ', (A6)+
00001A1C  4E75                     970                 RTS      
00001A1E                           971  
00001A1E                           972  ASL     
00001A1E  4EB9 00001A28            973                  JSR     ASL_BUFFER
00001A24  6000 0304                974                  BRA     PRINT_BUFFER
00001A28                           975  
00001A28                           976  ASL_BUFFER
00001A28  1CFC 0041                977                 MOVE.B   #'A',(A6)+
00001A2C  1CFC 0053                978                 MOVE.B   #'S', (A6)+  
00001A30  1CFC 004C                979                 MOVE.B   #'L', (A6)+
00001A34  1CFC 0020                980                 MOVE.B   #' ', (A6)+
00001A38  4E75                     981                 RTS     
00001A3A                           982  
00001A3A                           983  LSL     
00001A3A  4EB9 00001A44            984                  JSR     LSL_BUFFER
00001A40  6000 02E8                985                  BRA     PRINT_BUFFER
00001A44                           986  
00001A44                           987  LSL_BUFFER
00001A44  1CFC 004C                988                 MOVE.B   #'L',(A6)+
00001A48  1CFC 0053                989                 MOVE.B   #'S', (A6)+  
00001A4C  1CFC 004C                990                 MOVE.B   #'L', (A6)+
00001A50  1CFC 0020                991                 MOVE.B   #' ', (A6)+
00001A54  4E75                     992                 RTS     
00001A56                           993  
00001A56                           994  LSR     
00001A56  4EB9 00001A60            995                  JSR     LSR_BUFFER
00001A5C  6000 02CC                996                  BRA     PRINT_BUFFER
00001A60                           997  
00001A60                           998  LSR_BUFFER
00001A60  1CFC 004C                999                 MOVE.B   #'L',(A6)+
00001A64  1CFC 0053               1000                 MOVE.B   #'S', (A6)+  
00001A68  1CFC 0052               1001                 MOVE.B   #'R', (A6)+
00001A6C  1CFC 0020               1002                 MOVE.B   #' ', (A6)+
00001A70  4E75                    1003                 RTS       
00001A72                          1004                 
00001A72                          1005  jmp_mode
00001A72  4EF9 00001BCA           1006                  JMP     MODE000  ** DN
00001A78  4EF9 00001BD0           1007                  JMP     MODE001  ** AN
00001A7E  4EF9 00001BD8           1008                  JMP     MODE010  ** (AN)
00001A84  4EF9 00001BE2           1009                  JMP     MODE011  ** (AN)+   
00001A8A  4EF9 00001BEC           1010                  JMP     MODE100  ** -(AN)
00001A90  4EF9 00001BFA           1011                  JMP     MODE101  **INVALID
00001A96  4EF9 00001C04           1012                  JMP     MODE110  **INVALID
00001A9C  4EF9 00001C0E           1013                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00001AA2                          1014  
00001AA2                          1015                  
00001AA2                          1016  insert_num
00001AA2                          1017                  
00001AA2                          1018                  ;get number from D3
00001AA2  B67C 0000               1019                  CMP     #%000,D3       ;0
00001AA6  6600 000A               1020                  BNE     ONE         
00001AAA  1CFC 0030               1021                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
00001AAE  6000 006E               1022                  BRA     FINISHER
00001AB2                          1023                  
00001AB2  B67C 0001               1024  ONE             CMP     #%001,D3       ;1
00001AB6  6600 000A               1025                  BNE     TWO 
00001ABA  1CFC 0031               1026                  MOVE.B  #'1',(A6)+
00001ABE  6000 005E               1027                  BRA     FINISHER
00001AC2                          1028  
00001AC2                          1029                  
00001AC2  B67C 0002               1030  TWO             CMP     #%010,D3        ;2
00001AC6  6600 000A               1031                  BNE     THREE
00001ACA  1CFC 0032               1032                  MOVE.B  #'2',(A6)+
00001ACE  6000 004E               1033                  BRA     FINISHER
00001AD2                          1034                  
00001AD2  B67C 0003               1035  THREE           CMP     #%011,D3        ;3
00001AD6  6600 000A               1036                  BNE     FOUR
00001ADA  1CFC 0033               1037                  MOVE.B  #'3',(A6)+
00001ADE  6000 003E               1038                  BRA     FINISHER
00001AE2                          1039                  
00001AE2  B67C 0004               1040  FOUR            CMP     #%100,D3        ;4
00001AE6  6600 000A               1041                  BNE     FIVE
00001AEA  1CFC 0034               1042                  MOVE.B  #'4',(A6)+
00001AEE  6000 002E               1043                  BRA     FINISHER
00001AF2                          1044                  
00001AF2  B67C 0005               1045  FIVE            CMP     #%101,D3        ;5
00001AF6  6600 000A               1046                  BNE     SIX
00001AFA  1CFC 0035               1047                  MOVE.B  #'5',(A6)+
00001AFE  6000 001E               1048                  BRA     FINISHER
00001B02                          1049                  
00001B02  B67C 0006               1050  SIX             CMP     #%110,D3        ;6
00001B06  6600 000A               1051                  BNE     SEVEN
00001B0A  1CFC 0036               1052                  MOVE.B  #'6',(A6)+
00001B0E  6000 000E               1053                  BRA     FINISHER
00001B12                          1054                  
00001B12  B67C 0007               1055  SEVEN           CMP     #%111,D3        ;7
00001B16  1CFC 0037               1056                  MOVE.B  #'7',(A6)+
00001B1A  6000 0002               1057                  BRA     FINISHER
00001B1E                          1058                  
00001B1E                          1059  FINISHER                
00001B1E                          1060                  
00001B1E                          1061                  ;check D4, do we need to do stuff?
00001B1E  B87C 0002               1062                  CMP     #%010,D4
00001B22  6600 0008               1063                  BNE     POSTINCR
00001B26  1CFC 0029               1064                  MOVE.B  #')',(A6)+
00001B2A  4E75                    1065                  RTS
00001B2C                          1066                  
00001B2C  B87C 0003               1067  POSTINCR        CMP     #%011,D4
00001B30  6600 000C               1068                  BNE     ONEPAREN
00001B34  1CFC 0029               1069                  MOVE.B  #')',(A6)+
00001B38  1CFC 002B               1070                  MOVE.B  #'+',(A6)+
00001B3C  4E75                    1071                  RTS
00001B3E                          1072                  
00001B3E  B87C 0004               1073  ONEPAREN        CMP     #%100,D4
00001B42  6600 0008               1074                  BNE     DONE
00001B46  1CFC 0029               1075                  MOVE.B  #')',(A6)+                
00001B4A                          1076  
00001B4A  4244                    1077                  CLR     D4
00001B4C  4E75                    1078  DONE            RTS
00001B4E                          1079  
00001B4E                          1080          
00001B4E                          1081                 
00001B4E                          1082  bits5to7
00001B4E  4243                    1083                 CLR      D3
00001B50  4EB9 00001D04           1084                 JSR      COPY_OPCODE  // opcode copied to D2
00001B56  C47C 0E00               1085                 AND      #%0000111000000000, D2
00001B5A  E09A                    1086                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001B5C  E29A                    1087                 ROR.L    #1, D2
00001B5E  3602                    1088                 MOVE.W   D2,D3 // moving isolated bits into d3
00001B60  4E75                    1089                 RTS
00001B62                          1090                 
00001B62                          1091  bits5to8
00001B62  4243                    1092                 CLR      D3
00001B64  4EB9 00001D04           1093                 JSR      COPY_OPCODE  // opcode copied to D2
00001B6A  C47C 0F00               1094                 AND      #%0000111100000000, D2
00001B6E  E09A                    1095                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001B70  3602                    1096                 MOVE.W   D2,D3 // moving isolated bits into d3
00001B72  4E75                    1097                 RTS
00001B74                          1098                 
00001B74                          1099  bits8to10
00001B74  4243                    1100                 CLR      D3
00001B76  4EB9 00001D04           1101                 JSR      COPY_OPCODE  // opcode copied to D2
00001B7C  C47C 01C0               1102                 AND      #%0000000111000000, D2
00001B80  EC9A                    1103                 ROR.L    #6, D2          // rotate bits so isolated at the end
00001B82  3602                    1104                 MOVE.W   D2,D3 // moving isolated bits into d3
00001B84  4E75                    1105                 RTS               
00001B86                          1106             
00001B86                          1107  bits11to13
00001B86  4243                    1108                 CLR      D3
00001B88  4EB9 00001D04           1109                 JSR      COPY_OPCODE  // opcode copied to D2
00001B8E  C47C 0038               1110                 AND      #%0000000000111000, D2
00001B92  E69A                    1111                 ROR.L    #3, D2          // rotate bits so isolated at the end
00001B94  3602                    1112                 MOVE.W   D2,D3 // moving isolated bits into d3
00001B96  4E75                    1113                 RTS
00001B98                          1114             
00001B98                          1115  bits14to16
00001B98  4243                    1116                 CLR      D3
00001B9A  4EB9 00001D04           1117                 JSR      COPY_OPCODE  // opcode copied to D2
00001BA0  C47C 0007               1118                 AND      #%0000000000000111, D2
00001BA4  3602                    1119                 MOVE.W   D2,D3 // moving isolated bits into d3
00001BA6  4E75                    1120                 RTS
00001BA8                          1121  bits11to16
00001BA8  4243                    1122                 CLR      D3
00001BAA  4EB9 00001D04           1123                 JSR      COPY_OPCODE  // opcode copied to D2
00001BB0  C47C 003F               1124                 AND      #%0000000000111111, D2
00001BB4  3602                    1125                 MOVE.W   D2,D3 // moving isolated bits into d3
00001BB6  4E75                    1126                 RTS
00001BB8                          1127  bits1to10
00001BB8  4243                    1128                 CLR      D3
00001BBA  4EB9 00001D04           1129                 JSR      COPY_OPCODE  // opcode copied to D2
00001BC0  C47C FFC0               1130                 AND      #%1111111111000000, D2
00001BC4  EC9A                    1131                 ROR.L    #6, D2
00001BC6  3602                    1132                 MOVE.W   D2,D3 // moving isolated bits into d3
00001BC8  4E75                    1133                 RTS
00001BCA                          1134  ** DN       
00001BCA                          1135  MODE000         
00001BCA  1CFC 0044               1136                  MOVE.B  #'D',(A6)+     
00001BCE  4E75                    1137                  RTS
00001BD0                          1138  
00001BD0                          1139  ** AN
00001BD0                          1140  MODE001         
00001BD0  4EB9 00001C24           1141                  JSR ADDRESS_BUFFER  
00001BD6  4E75                    1142                  RTS      
00001BD8                          1143  
00001BD8                          1144   ** (AN)
00001BD8                          1145  MODE010         
00001BD8  1CFC 0028               1146                  MOVE.B  #'(', (A6)+
00001BDC  1CFC 0041               1147                  MOVE.B  #'A',(A6)+  
00001BE0  4E75                    1148                  RTS      
00001BE2                          1149  
00001BE2                          1150  ** (AN)+ 
00001BE2                          1151  MODE011         
00001BE2  1CFC 0028               1152                  MOVE.B  #'(', (A6)+
00001BE6  1CFC 0041               1153                  MOVE.B  #'A',(A6)+ 
00001BEA  4E75                    1154                  RTS       
00001BEC                          1155  
00001BEC                          1156   ** -(AN)
00001BEC                          1157  MODE100         
00001BEC  1CFC 002D               1158                  MOVE.B  #'-', (A6)+
00001BF0  1CFC 0028               1159                  MOVE.B  #'(', (A6)+
00001BF4  1CFC 0041               1160                  MOVE.B  #'A',(A6)+
00001BF8  4E75                    1161                  RTS
00001BFA                          1162                  
00001BFA                          1163  **INVALID               
00001BFA                          1164  MODE101         
00001BFA  1CFC 0028               1165                  MOVE.B  #'(', (A6)+
00001BFE  1CFC 0041               1166                  MOVE.B  #'A',(A6)+ 
00001C02  4E75                    1167                  RTS
00001C04                          1168                  
00001C04                          1169  **INVALID
00001C04                          1170  MODE110         
00001C04  1CFC 0028               1171                  MOVE.B  #'(', (A6)+
00001C08  1CFC 0041               1172                  MOVE.B  #'A',(A6)+
00001C0C  4E75                    1173                  RTS  
00001C0E                          1174  
00001C0E                          1175  ** ABSOLUTE AND IMMEDIATE            
00001C0E                          1176  MODE111         
00001C0E                          1177                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001C0E  1CFC 0024               1178                 MOVE.B   #'$', (A6)+  
00001C12  4EB9 00001D46           1179                 JSR      PRINT_DEREF_ADDRESS
00001C18  544A                    1180                 ADD.W    #2, A2
00001C1A  4EB9 00001D46           1181                 JSR      PRINT_DEREF_ADDRESS
00001C20  544A                    1182                 ADD.W    #2, A2
00001C22  4E75                    1183                 RTS            
00001C24                          1184                                          
00001C24                          1185  ADDRESS_BUFFER
00001C24  1CFC 0041               1186                  MOVE.B  #'A',(A6)+ 
00001C28  4E75                    1187                  RTS
00001C2A                          1188                 
00001C2A                          1189  ABSOLUTE_BUFFER
00001C2A  4243                    1190                 CLR      D3
00001C2C  3604                    1191                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001C2E  1CF8 0024               1192                 MOVE.B   '$', (A6)+
00001C32  B67C 0000               1193                 CMP.W    #%000, D3
00001C36  6700 0010               1194                 BEQ      ABSOLUTE_WORD_BUFFER
00001C3A  4243                    1195                 CLR      D3
00001C3C  3604                    1196                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001C3E  B67C 0001               1197                 CMP.W    #%001, D3
00001C42  6700 0016               1198                 BEQ      ABSOLUTE_LONG_BUFFER
00001C46  4E75                    1199                 RTS
00001C48                          1200                 
00001C48                          1201  ABSOLUTE_WORD_BUFFER
00001C48                          1202                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001C48                          1203                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001C48  1CFC 0046               1204                         MOVE.B #'F', (A6)+ 
00001C4C  1CFC 0046               1205                         MOVE.B #'F', (A6)+ 
00001C50  1CFC 0046               1206                         MOVE.B #'F', (A6)+ 
00001C54  1CFC 0046               1207                         MOVE.B #'F', (A6)+ 
00001C58  4E75                    1208                         RTS       
00001C5A                          1209                    
00001C5A                          1210  ABSOLUTE_LONG_BUFFER       
00001C5A                          1211                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001C5A                          1212                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001C5A  1CFC 0047               1213                         MOVE.B #'G', (A6)+ 
00001C5E  1CFC 0047               1214                         MOVE.B #'G', (A6)+ 
00001C62  1CFC 0047               1215                         MOVE.B #'G', (A6)+ 
00001C66  1CFC 0047               1216                         MOVE.B #'G', (A6)+
00001C6A  4E75                    1217                         RTS 
00001C6C                          1218  
00001C6C                          1219  INVALID_EA  
00001C6C                          1220                  * TODO: IMPLEMENT
00001C6C                          1221                  *** CLEAR OUT A6
00001C6C                          1222                  ** PUT INVALID MESSAGE INTO A6
00001C6C  6000 F679               1223                  BRA EXIT
00001C70                          1224  INVALID_OP  
00001C70                          1225                  ** TODO: IMPLEMENT
00001C70                          1226                 *** CLEAR OUT A6
00001C70                          1227                  ** PUT INVALID MESSAGE INTO A6
00001C70  1CFC 0044               1228                      MOVE.B #'D', (A6)+
00001C74  1CFC 0041               1229                      MOVE.B #'A', (A6)+
00001C78  1CFC 0054               1230                      MOVE.B #'T', (A6)+
00001C7C  1CFC 0041               1231                      MOVE.B #'A', (A6)+ 
00001C80  1CFC 0020               1232                      MOVE.B #' ', (A6)+ 
00001C84  4EB9 00001D46           1233                      JSR     PRINT_DEREF_ADDRESS
00001C8A                          1234            
00001C8A                          1235                  
00001C8A  1CFC 004E               1236  NOP                 MOVE.B #'N', (A6)+
00001C8E  1CFC 004F               1237                      MOVE.B #'O', (A6)+
00001C92  1CFC 0050               1238                      MOVE.B #'P', (A6)+
00001C96  4E75                    1239                      RTS
00001C98                          1240  
00001C98                          1241                   
00001C98                          1242  RTS      
00001C98  43F8 1290               1243                      LEA     RTS_disp,A1          
00001C9C  103C 000E               1244                      MOVE.B  #14,D0
00001CA0  4E4F                    1245                      TRAP    #15 
00001CA2  6000 F643               1246                      BRA     EXIT
00001CA6                          1247  JSR      
00001CA6  4DF9 0000207C           1248                      LEA     BUFFER, A6
00001CAC  1CFC 004A               1249                      MOVE.B #'J', (A6)+
00001CB0  1CFC 0053               1250                      MOVE.B #'S', (A6)+
00001CB4  1CFC 0052               1251                      MOVE.B #'R', (A6)+
00001CB8  1CFC 0020               1252                      MOVE.B #' ', (A6)+
00001CBC  43F9 0000207C           1253                      LEA     BUFFER, A1
00001CC2                          1254                      ** BITS 10 - 12 MODE       
00001CC2                          1255                      ** BITS 13 - 16 REGISTER
00001CC2  103C 000E               1256                      MOVE.B  #14,D0
00001CC6  4E4F                    1257                      TRAP    #15 
00001CC8  6000 F61D               1258                      BRA     EXIT
00001CCC                          1259                    
00001CCC                          1260  MOVEM      
00001CCC                          1261                     
00001CCC                          1262                      ** SIZE SUBROUTINE
00001CCC                          1263                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001CCC  C47C 0040               1264                      AND #%0000000001000000,D2 
00001CD0                          1265                      * WORD
00001CD0  B4BC 00000040           1266                      CMP.L   #%0000000001000000,D2
00001CD6  4EB9 00001CEC           1267                      JSR     MOVEM_W 
00001CDC                          1268                      *LONG
00001CDC  B4BC 00000040           1269                      CMP.L   #%0000000001000000,D2 
00001CE2                          1270                     ** JSR     MOVEM_L
00001CE2  103C 000E               1271                      MOVE.B  #14,D0
00001CE6  4E4F                    1272                      TRAP    #15
00001CE8  6000 F5FD               1273                      BRA     EXIT 
00001CEC                          1274                      
00001CEC                          1275  MOVEM_W 
00001CEC  43F8 123E               1276                       LEA     MOVEM_disp,A1
00001CF0                          1277                      * PRINT MOVEM
00001CF0  103C 000E               1278                       MOVE.B  #14,D0
00001CF4  4E4F                    1279                       TRAP    #15
00001CF6                          1280          
00001CF6                          1281                      * PRINT WORD PORTION
00001CF6  41F8 12D5               1282                       LEA     size_w, A0
00001CFA  103C 000E               1283                       MOVE.B  #14,D0
00001CFE  4E4F                    1284                       TRAP    #15 
00001D00                          1285          
00001D00  6000 F5E5               1286                       BRA     EXIT 
00001D04                          1287       
00001D04                          1288     
00001D04                          1289  COPY_OPCODE 
00001D04                          1290                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001D04  4242                    1291                       CLR    D2  
00001D06  3405                    1292                       MOVE.W D5,D2 
00001D08  4E75                    1293                       RTS  
00001D0A                          1294  
00001D0A                          1295  PRINT_ADDRESS     
00001D0A  4242                    1296                   CLR         D2
00001D0C  143C 0010               1297                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001D10  220A                    1298                   MOVE.L      A2,D1        
00001D12  103C 000F               1299                   MOVE.B      #15,D0          
00001D16  4E4F                    1300                   TRAP        #15            
00001D18  1CFC 0020               1301                   MOVE.B      #' ', (A6)+
00001D1C  1CFC 0020               1302                   MOVE.B      #' ', (A6)+
00001D20  1CFC 0020               1303                   MOVE.B      #' ', (A6)+
00001D24  1CFC 0020               1304                   MOVE.B      #' ', (A6)+
00001D28  4E75                    1305                   RTS     
00001D2A                          1306  PRINT_BUFFER    
00001D2A  1CFC 0000               1307                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001D2E  43F9 0000207C           1308                 LEA      BUFFER, A1
00001D34  303C 000E               1309                 MOVE.W   #14,D0
00001D38  4E4F                    1310                 TRAP     #15
00001D3A  43F8 1219               1311                 LEA     linebreak,A1            *appends line at the end of the user input
00001D3E  103C 000E               1312                 MOVE.B  #14,D0
00001D42  4E4F                    1313                 TRAP    #15
00001D44  4E75                    1314                 RTS  
00001D46                          1315  
00001D46                          1316  PRINT_DEREF_ADDRESS
00001D46  1CFC 0000               1317                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001D4A  43F9 0000207C           1318                 LEA      BUFFER, A1
00001D50  303C 000E               1319                 MOVE.W   #14,D0
00001D54  4E4F                    1320                 TRAP     #15
00001D56  4DF9 0000207C           1321                 LEA      BUFFER, A6
00001D5C  4242                    1322                 CLR      D2
00001D5E  0C52 0000               1323                 CMP      #0, (A2)
00001D62  6700 0006               1324                 BEQ      PRINT_ZEROES
00001D66  6000 001A               1325                 BRA      PRINT_HEX
00001D6A                          1326                 
00001D6A                          1327  PRINT_ZEROES
00001D6A  4DF9 0000207C           1328                LEA   BUFFER,A6
00001D70  1CFC 0030               1329                MOVE.B #'0', (A6)+
00001D74  1CFC 0030               1330                MOVE.B #'0', (A6)+
00001D78  1CFC 0030               1331                MOVE.B #'0', (A6)+
00001D7C  1CFC 0030               1332                MOVE.B #'0', (A6)+
00001D80  4E75                    1333                RTS
00001D82                          1334  PRINT_HEX
00001D82  143C 0010               1335                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001D86  3212                    1336                 MOVE.W      (A2),D1        // print the hex value in current address      
00001D88  103C 000F               1337                 MOVE.B      #15,D0          
00001D8C  4E4F                    1338                 TRAP        #15 
00001D8E  4E75                    1339                 RTS
00001D90                          1340   ***************************
00001D90                          1341  
00001D90                          1342  GETSIZE_ADDQ
00001D90                          1343                   
00001D90                          1344                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001D90                          1345                 
00001D90  4EB8 1B74               1346             JSR      bits8to10
00001D94  B67C 0000               1347             CMP      #%000,D3
00001D98  6600 000C               1348             BNE      ADDQ_NOTBYTE
00001D9C  4EB9 0000204C           1349             JSR      SIZEISBYTE
00001DA2  4243                    1350             CLR      D3
00001DA4  4E75                    1351             RTS
00001DA6                          1352             
00001DA6                          1353  ADDQ_NOTBYTE
00001DA6  B67C 0001               1354             CMP      #%001,D3
00001DAA  6600 000C               1355             BNE      ADDQ_NOTWORD
00001DAE  4EB9 0000205C           1356             JSR      SIZEISWORD
00001DB4  4243                    1357             CLR      D3
00001DB6  4E75                    1358             RTS
00001DB8                          1359             
00001DB8                          1360  ADDQ_NOTWORD
00001DB8  B67C 0002               1361             CMP      #%010,D3
00001DBC  6600 FEAE               1362             BNE      INVALID_EA
00001DC0  4EB9 0000206C           1363             JSR      SIZEISLONG
00001DC6  4243                    1364             CLR      D3
00001DC8  4E75                    1365             RTS
00001DCA                          1366                   
00001DCA                          1367                                   
00001DCA                          1368  ****************************
00001DCA                          1369  GETSIZE_CMP
00001DCA                          1370                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001DCA                          1371                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001DCA                          1372                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001DCA                          1373  
00001DCA  4EB8 1B74               1374              JSR     bits8to10
00001DCE  B67C 0000               1375              CMP     #000,D3
00001DD2  6600 0010               1376              BNE     CMP_NOTBYTE
00001DD6  4EB9 0000204C           1377              JSR     SIZEISBYTE
00001DDC  3C3C 0001               1378              MOVE    #1,D6
00001DE0  4243                    1379              CLR     D3
00001DE2  4E75                    1380              RTS
00001DE4                          1381              
00001DE4                          1382  CMP_NOTBYTE 
00001DE4  B67C 0001               1383              CMP     #%001,D3
00001DE8  6600 0010               1384              BNE     CMP_NOTWORD
00001DEC  4EB9 0000205C           1385              JSR     SIZEISWORD
00001DF2  3C3C 0001               1386              MOVE    #1,D6
00001DF6  4243                    1387              CLR     D3
00001DF8  4E75                    1388              RTS
00001DFA                          1389              
00001DFA                          1390  CMP_NOTWORD
00001DFA  B67C 0002               1391              CMP     #%010,D3
00001DFE  6600 0010               1392              BNE     CMP_NOTLEFT
00001E02  4EB9 0000206C           1393              JSR     SIZEISLONG
00001E08  3C3C 0001               1394              MOVE    #1,D6
00001E0C  4243                    1395              CLR     D3
00001E0E  4E75                    1396              RTS
00001E10                          1397              
00001E10                          1398  CMP_NOTLEFT     ;check other direction
00001E10  B67C 0004               1399              CMP     #%100,D3
00001E14  6600 0010               1400              BNE     CMP_NOTRIGHTBYTE
00001E18  4EB9 0000204C           1401              JSR     SIZEISBYTE
00001E1E  3C3C 0002               1402              MOVE    #2,D6
00001E22  4243                    1403              CLR     D3
00001E24  4E75                    1404              RTS
00001E26                          1405              
00001E26                          1406  CMP_NOTRIGHTBYTE
00001E26  B67C 0005               1407              CMP     #%101,D3
00001E2A  6600 0010               1408              BNE     CMP_NOTRIGHTWORD
00001E2E  4EB9 0000205C           1409              JSR     SIZEISWORD
00001E34  3C3C 0002               1410              MOVE    #2,D6
00001E38  4243                    1411              CLR     D3
00001E3A  4E75                    1412              RTS
00001E3C                          1413  
00001E3C                          1414  CMP_NOTRIGHTWORD
00001E3C  B67C 0006               1415              CMP     #%110,D3
00001E40  6600 FE2A               1416              BNE     INVALID_EA
00001E44  4EB9 0000206C           1417              JSR     SIZEISLONG
00001E4A  3C3C 0002               1418              MOVE    #2,D6
00001E4E  4243                    1419              CLR     D3
00001E50  4E75                    1420              RTS 
00001E52                          1421  
00001E52                          1422  
00001E52                          1423  
00001E52                          1424  
00001E52                          1425  ****************************
00001E52                          1426  
00001E52                          1427  
00001E52                          1428  GETSIZE_SUB
00001E52                          1429                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001E52                          1430                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001E52                          1431                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001E52  4EB8 1B74               1432              JSR     bits8to10
00001E56  B67C 0000               1433              CMP     #000,D3
00001E5A  6600 0010               1434              BNE     SUB_NOTBYTE
00001E5E  4EB9 0000204C           1435              JSR     SIZEISBYTE
00001E64  3C3C 0001               1436              MOVE    #1,D6
00001E68  4243                    1437              CLR     D3
00001E6A  4E75                    1438              RTS
00001E6C                          1439              
00001E6C                          1440  SUB_NOTBYTE 
00001E6C  B67C 0001               1441              CMP     #%001,D3
00001E70  6600 0010               1442              BNE     SUB_NOTWORD
00001E74  4EB9 0000205C           1443              JSR     SIZEISWORD
00001E7A  3C3C 0001               1444              MOVE    #1,D6
00001E7E  4243                    1445              CLR     D3
00001E80  4E75                    1446              RTS
00001E82                          1447              
00001E82                          1448  SUB_NOTWORD
00001E82  B67C 0002               1449              CMP     #%010,D3
00001E86  6600 0010               1450              BNE     SUB_NOTLEFT
00001E8A  4EB9 0000206C           1451              JSR     SIZEISLONG
00001E90  3C3C 0001               1452              MOVE    #1,D6
00001E94  4243                    1453              CLR     D3
00001E96  4E75                    1454              RTS
00001E98                          1455              
00001E98                          1456  SUB_NOTLEFT     ;check other direction
00001E98  B67C 0004               1457              CMP     #%100,D3
00001E9C  6600 0010               1458              BNE     SUB_NOTRIGHTBYTE
00001EA0  4EB9 0000204C           1459              JSR     SIZEISBYTE
00001EA6  3C3C 0002               1460              MOVE    #2,D6
00001EAA  4243                    1461              CLR     D3
00001EAC  4E75                    1462              RTS
00001EAE                          1463              
00001EAE                          1464  SUB_NOTRIGHTBYTE
00001EAE  B67C 0005               1465              CMP     #%101,D3
00001EB2  6600 0010               1466              BNE     SUB_NOTRIGHTWORD
00001EB6  4EB9 0000205C           1467              JSR     SIZEISWORD
00001EBC  3C3C 0002               1468              MOVE    #2,D6
00001EC0  4243                    1469              CLR     D3
00001EC2  4E75                    1470              RTS
00001EC4                          1471  
00001EC4                          1472  SUB_NOTRIGHTWORD
00001EC4  B67C 0006               1473              CMP     #%110,D3
00001EC8  6600 FDA2               1474              BNE     INVALID_EA
00001ECC  4EB9 0000206C           1475              JSR     SIZEISLONG
00001ED2  3C3C 0002               1476              MOVE    #2,D6
00001ED6  4243                    1477              CLR     D3
00001ED8  4E75                    1478              RTS 
00001EDA                          1479  
00001EDA                          1480  
00001EDA                          1481  ****************************
00001EDA                          1482  GETSIZE_OR
00001EDA                          1483                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001EDA                          1484                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001EDA                          1485          
00001EDA  4EB8 1B74               1486              JSR     bits8to10
00001EDE  B67C 0000               1487              CMP     #000,D3
00001EE2  6600 0010               1488              BNE     OR_NOTBYTE
00001EE6  4EB9 0000204C           1489              JSR     SIZEISBYTE
00001EEC  3C3C 0001               1490              MOVE    #1,D6
00001EF0  4243                    1491              CLR     D3
00001EF2  4E75                    1492              RTS
00001EF4                          1493              
00001EF4                          1494  OR_NOTBYTE 
00001EF4  B67C 0001               1495              CMP     #%001,D3
00001EF8  6600 0010               1496              BNE     OR_NOTWORD
00001EFC  4EB9 0000205C           1497              JSR     SIZEISWORD
00001F02  3C3C 0001               1498              MOVE    #1,D6
00001F06  4243                    1499              CLR     D3
00001F08  4E75                    1500              RTS
00001F0A                          1501              
00001F0A                          1502  OR_NOTWORD
00001F0A  B67C 0002               1503              CMP     #%010,D3
00001F0E  6600 0010               1504              BNE     OR_NOTLEFT
00001F12  4EB9 0000206C           1505              JSR     SIZEISLONG
00001F18  3C3C 0001               1506              MOVE    #1,D6
00001F1C  4243                    1507              CLR     D3
00001F1E  4E75                    1508              RTS
00001F20                          1509              
00001F20                          1510  OR_NOTLEFT     ;check other direction
00001F20  B67C 0004               1511              CMP     #%100,D3
00001F24  6600 0010               1512              BNE     OR_NOTRIGHTBYTE
00001F28  4EB9 0000204C           1513              JSR     SIZEISBYTE
00001F2E  3C3C 0002               1514              MOVE    #2,D6
00001F32  4243                    1515              CLR     D3
00001F34  4E75                    1516              RTS
00001F36                          1517              
00001F36                          1518  OR_NOTRIGHTBYTE
00001F36  B67C 0005               1519              CMP     #%101,D3
00001F3A  6600 0010               1520              BNE     OR_NOTRIGHTWORD
00001F3E  4EB9 0000205C           1521              JSR     SIZEISWORD
00001F44  3C3C 0002               1522              MOVE    #2,D6
00001F48  4243                    1523              CLR     D3
00001F4A  4E75                    1524              RTS
00001F4C                          1525  
00001F4C                          1526  OR_NOTRIGHTWORD
00001F4C  B67C 0006               1527              CMP     #%110,D3
00001F50  6600 FD1A               1528              BNE     INVALID_EA
00001F54  4EB9 0000206C           1529              JSR     SIZEISLONG
00001F5A  3C3C 0002               1530              MOVE    #2,D6
00001F5E  4243                    1531              CLR     D3
00001F60  4E75                    1532              RTS 
00001F62                          1533  
00001F62                          1534              
00001F62                          1535  
00001F62                          1536                     
00001F62                          1537  ****************************
00001F62                          1538  
00001F62                          1539                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001F62                          1540                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001F62                          1541  GETSIZE_ADD
00001F62  4EB8 1B74               1542              JSR     bits8to10
00001F66  B67C 0000               1543              CMP     #%000,D3
00001F6A  6600 0010               1544              BNE     ADD_NOTBYTE
00001F6E  4EB9 0000204C           1545              JSR     SIZEISBYTE
00001F74  3C3C 0001               1546              MOVE    #1,D6
00001F78  4243                    1547              CLR     D3
00001F7A  4E75                    1548              RTS
00001F7C                          1549          
00001F7C                          1550  ADD_NOTBYTE 
00001F7C  B67C 0001               1551              CMP     #%001,D3
00001F80  6600 0010               1552              BNE     ADD_NOTWORD
00001F84  4EB9 0000205C           1553              JSR     SIZEISWORD
00001F8A  3C3C 0001               1554              MOVE    #1,D6
00001F8E  4243                    1555              CLR     D3
00001F90  4E75                    1556              RTS
00001F92                          1557              
00001F92                          1558  ADD_NOTWORD
00001F92  B67C 0002               1559              CMP     #%010,D3
00001F96  6600 0010               1560              BNE     ADD_NOTLEFT
00001F9A  4EB9 0000206C           1561              JSR     SIZEISLONG
00001FA0  3C3C 0001               1562              MOVE    #1,D6
00001FA4  4243                    1563              CLR     D3
00001FA6  4E75                    1564              RTS
00001FA8                          1565              
00001FA8                          1566  ADD_NOTLEFT     ;check other direction
00001FA8  B67C 0004               1567              CMP     #%100,D3
00001FAC  6600 0010               1568              BNE     ADD_NOTRIGHTBYTE
00001FB0  4EB9 0000204C           1569              JSR     SIZEISBYTE
00001FB6  3C3C 0002               1570              MOVE    #2,D6
00001FBA  4243                    1571              CLR     D3
00001FBC  4E75                    1572              RTS
00001FBE                          1573              
00001FBE                          1574  ADD_NOTRIGHTBYTE
00001FBE  B67C 0005               1575              CMP     #%101,D3
00001FC2  6600 0010               1576              BNE     ADD_NOTRIGHTWORD
00001FC6  4EB9 0000205C           1577              JSR     SIZEISWORD
00001FCC  3C3C 0002               1578              MOVE    #2,D6
00001FD0  4243                    1579              CLR     D3
00001FD2  4E75                    1580              RTS
00001FD4                          1581  
00001FD4                          1582  ADD_NOTRIGHTWORD
00001FD4  B67C 0006               1583              CMP     #%110,D3
00001FD8  6600 FC92               1584              BNE     INVALID_EA
00001FDC  4EB9 0000206C           1585              JSR     SIZEISLONG
00001FE2  3C3C 0002               1586              MOVE    #2,D6
00001FE6  4243                    1587              CLR     D3
00001FE8  4E75                    1588              RTS 
00001FEA                          1589                               
00001FEA                          1590                       
00001FEA                          1591                       
00001FEA                          1592  *****************************                  
00001FEA                          1593  GETSIZE_ADDI
00001FEA  4EB8 1B74               1594          JSR     bits8to10
00001FEE  B67C 0000               1595          CMP     #%000,D3
00001FF2  6600 000C               1596          BNE     ADDI_NOTBYTE
00001FF6  4EB9 0000204C           1597          JSR     SIZEISBYTE
00001FFC  4243                    1598          CLR     D3
00001FFE  4E75                    1599          RTS
00002000                          1600  
00002000                          1601  ADDI_NOTBYTE
00002000  B67C 0001               1602          CMP     #%001,D3
00002004  6600 000C               1603          BNE     ADDI_NOTWORD
00002008  4EB9 0000205C           1604          JSR     SIZEISWORD
0000200E  4243                    1605          CLR     D3
00002010  4E75                    1606          RTS
00002012                          1607          
00002012                          1608  ADDI_NOTWORD
00002012  B67C 0002               1609          CMP     #%010,D3
00002016  6600 FC54               1610          BNE     INVALID_EA
0000201A  4EB9 0000206C           1611          JSR     SIZEISLONG
00002020  4243                    1612          CLR     D3
00002022  4E75                    1613          RTS
00002024                          1614          
00002024                          1615                              
00002024                          1616                       
00002024                          1617  ********************************          
00002024                          1618                       
00002024                          1619                       
00002024                          1620  ********************************                     
00002024                          1621  GETSIZE_ADDA
00002024  4EB8 1B74               1622          JSR     bits8to10
00002028  B67C 0003               1623          CMP     #%011,D3
0000202C  6600 000C               1624          BNE     ADDA_NOTWORD
00002030  4EB9 0000205C           1625          JSR     SIZEISWORD
00002036  4243                    1626          CLR     D3
00002038  4E75                    1627          RTS
0000203A                          1628          
0000203A                          1629  
0000203A                          1630          
0000203A                          1631  ADDA_NOTWORD
0000203A  B67C 0007               1632          CMP     #%111,D3
0000203E  6600 FC2C               1633          BNE     INVALID_EA
00002042  4EB9 0000206C           1634          JSR     SIZEISLONG
00002048  4243                    1635          CLR     D3
0000204A  4E75                    1636          RTS
0000204C                          1637  **********************************        
0000204C                          1638      
0000204C                          1639  SIZEISBYTE
0000204C  1CFC 002E               1640         MOVE.B   #'.',(A6)+
00002050  1CFC 0042               1641         MOVE.B   #'B',(A6)+
00002054  1CFC 0020               1642         MOVE.B   #' ',(A6)+
00002058  4243                    1643         CLR      D3
0000205A  4E75                    1644         RTS
0000205C                          1645  
0000205C                          1646  SIZEISWORD    
0000205C  1CFC 002E               1647         MOVE.B   #'.',(A6)+
00002060  1CFC 0057               1648         MOVE.B   #'W',(A6)+
00002064  1CFC 0020               1649         MOVE.B   #' ',(A6)+
00002068  4243                    1650         CLR      D3
0000206A  4E75                    1651         RTS
0000206C                          1652                  
0000206C                          1653  SIZEISLONG    
0000206C  1CFC 002E               1654         MOVE.B   #'.',(A6)+
00002070  1CFC 004C               1655         MOVE.B   #'L',(A6)+
00002074  1CFC 0020               1656         MOVE.B   #' ',(A6)+
00002078                          1657  
00002078  4243                    1658         CLR      D3
0000207A  4E75                    1659         RTS
0000207C                          1660                  
0000207C                          1661       
0000207C= 00000001                1662  BUFFER DC.L 1     
00002080                          1663      INCLUDE 'helpers.x68'
00002080  1019                    1664  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00002082  4EB9 0000209A           1665                          JSR     sub_breakDownAs     *breaks down ASCII code
00002088  D280                    1666                          ADD.L   D0,D1               *load that char into D1
0000208A  0C11 0000               1667                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
0000208E  6700 0006               1668                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00002092  E989                    1669                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00002094  60EA                    1670                          BRA     sub_AsToHeLoop      *loops through again
00002096                          1671                          
00002096  2E01                    1672  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00002098  4E75                    1673                          RTS
0000209A  B03C 0030               1674  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
0000209E  6D00 002A               1675                          BLT     as_ERROR                        
000020A2                          1676                          
000020A2  B03C 0039               1677                          CMP.B    #$39,D0            *is it an A-F letter?
000020A6  6E00 000C               1678                          BGT     as_LETTER
000020AA                          1679                          
000020AA  6000 0002               1680                          BRA     as_NUMBER
000020AE                          1681                                                 
000020AE  0400 0030               1682  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
000020B2  4E75                    1683                          RTS
000020B4                          1684                          
000020B4  B03C 0041               1685  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
000020B8  6D00 0010               1686                          BLT     as_ERROR
000020BC                          1687                          
000020BC  B03C 0046               1688                          CMP.B     #$46, D0
000020C0  6E00 0008               1689                          BGT     as_ERROR
000020C4                          1690                          
000020C4  0400 0037               1691                          SUBI.B  #$37,D0             *subtract 37, used for A-F
000020C8  4E75                    1692                          RTS
000020CA                          1693                          
000020CA  43F9 65727200           1694  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
000020D0  103C 000D               1695                          MOVE.B  #13,D0
000020D4  4E4F                    1696                          TRAP    #15  
000020D6                          1697  sub_StartReadingData    
000020D6  0801 0000               1698                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
000020DA  6600 0006               1699                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
000020DE                          1700                          
000020DE  7E00                    1701                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
000020E0  4E75                    1702  srdFinish               RTS
000020E2                          1703  
000020E2  43F8 1162               1704  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
000020E6  103C 000E               1705                          MOVE.B  #14,D0
000020EA  4E4F                    1706                          TRAP    #15
000020EC                          1707                          
000020EC  7E01                    1708                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
000020EE  60F0                    1709                          BRA     srdFinish
000020F0                          1710  sub_EndReadingData  
000020F0  0801 0000               1711                          BTST    #0,D1               *checks if LSB is 1, 
000020F4  6600 0018               1712                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
000020F8                          1713                          
000020F8  B5CB                    1714                          CMP.L   A3,A2               *end address must be greater than start address
000020FA  6E00 0004               1715                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
000020FE                          1716  
000020FE  4E75                    1717  erdFinish               RTS
00002100                          1718  
00002100  43F8 1189               1719  erdFailAddrOrder        LEA     addr_order_check,A1
00002104  103C 000E               1720                          MOVE.B  #14,D0
00002108  4E4F                    1721                          TRAP    #15
0000210A                          1722                          
0000210A  7E01                    1723                          MOVE.L  #1,D7
0000210C  60F0                    1724                          BRA     erdFinish
0000210E                          1725  
0000210E  43F8 1162               1726  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00002112  103C 000E               1727                          MOVE.B  #14,D0
00002116  4E4F                    1728                          TRAP    #15
00002118                          1729                          
00002118  7E01                    1730                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
0000211A  60E2                    1731                          BRA     erdFinish
0000211C                          1732                          
0000211C                          1733  
0000211C                          1734  
0000211C                          1735  
0000211C                          1736  
0000211C                          1737  
0000211C                          1738  
0000211C                          1739  
0000211C                          1740  
0000211C                          1741  -------------------- end include --------------------
0000211C                          1742      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1C2A
ABSOLUTE_LONG_BUFFER  1C5A
ABSOLUTE_WORD_BUFFER  1C48
ADD                 1482
ADDA                145E
ADDA_BUFFER         1466
ADDA_DISP           1248
ADDA_NOTWORD        203A
ADDI                1516
ADDI_BUFFER         159C
ADDI_DES            1538
ADDI_DISP           124D
ADDI_NOTBYTE        2000
ADDI_NOTWORD        2012
ADDI_SRC            152A
ADDQ                16A2
ADDQ_BUFFER         1700
ADDQ_DEST           16D6
ADDQ_DISP           1252
ADDQ_NOTBYTE        1DA6
ADDQ_NOTWORD        1DB8
ADDQ_SRC            16BE
ADDRESS_BUFFER      1C24
ADDR_ODDBIT_MSG     1162
ADDR_ORDER_CHECK    1189
ADD_BUFFER          148A
ADD_DEST            14F4
ADD_DIRECTION_REVERSED  14BA
ADD_DISP            1244
ADD_NOTBYTE         1F7C
ADD_NOTLEFT         1FA8
ADD_NOTRIGHTBYTE    1FBE
ADD_NOTRIGHTWORD    1FD4
ADD_NOTWORD         1F92
ADD_SRC             14D0
AND                 19E2
AND_BUFFER          19EC
AND_DISP            126D
ASL                 1A1E
ASL_BUFFER          1A28
ASL_DISP            127C
ASR                 1A02
ASR_BUFFER          1A0C
ASR_DISP            1280
AS_ERROR            20CA
AS_LETTER           20B4
AS_NUMBER           20AE
ATHENDLOOP          2096
BACKSLASHSIGH       12CA
BCC_DISP            1294
BGT_DISP            1298
BITS11TO13          1B86
BITS11TO16          1BA8
BITS14TO16          1B98
BITS1TO10           1BB8
BITS5TO7            1B4E
BITS5TO8            1B62
BITS8TO10           1B74
BLE_DISP            129C
BUFFER              207C
CLOSEPAREN          12CE
CLR_DISP            1269
CMP                 1920
CMP_BUFFER          195E
CMP_DEST            199A
CMP_DIRECTION_REVERSED  1946
CMP_NOTBYTE         1DE4
CMP_NOTLEFT         1E10
CMP_NOTRIGHTBYTE    1E26
CMP_NOTRIGHTWORD    1E3C
CMP_NOTWORD         1DFA
CMP_SRC             1970
CODE0000            134C
CODE0001            1360
CODE0010            1366
CODE0011            1366
CODE0100            1366
CODE0101            139A
CODE0110            139E
CODE0111            13A2
CODE1000            13A6
CODE1001            13B8
CODE1010            13BC
CODE1011            13C0
CODE1100            13C4
CODE1101            13D6
CODE1110            1422
CODE1111            1452
COMMASIGN           12C8
COPY_OPCODE         1D04
CR                  D
DIVU                173C
DIVU_BUFFER         1768
DIVU_DEST           17A8
DIVU_DISP           1260
DIVU_SRC            177E
DOLLARSIGN          12C2
DONE                1B4C
ENDTEST_MSG         11DD
ERDFAILADDRODDB     210E
ERDFAILADDRORDER    2100
ERDFINISH           20FE
EXIT                12E7
FINISHER            1B1E
FIVE                1AF2
FOUR                1AE2
GETSIZE_ADD         1F62
GETSIZE_ADDA        2024
GETSIZE_ADDI        1FEA
GETSIZE_ADDQ        1D90
GETSIZE_CMP         1DCA
GETSIZE_OR          1EDA
GETSIZE_SUB         1E52
HEXATABLE           12A0
INPUT_BUFFER        12DC
INSERT_NUM          1AA2
INVALIDEA_DISP      1221
INVALID_DISP        121C
INVALID_EA          1C6C
INVALID_OP          1C70
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            1A72
JMP_TABLE           12EC
JSR                 1CA6
JSR_DISP            128C
LEA                 15B8
LEA_BUFFER          15DA
LEA_DEST            167E
LEA_DISP            1265
LEA_SRC             15EC
LF                  A
LINEBREAK           1219
LINECOUNT           12DB
LOCATION_ENDDATA    12E2
LOCATION_END_MSG    1145
LOCATION_STARTDATA  12DE
LOCATION_START_MSG  1126
LSL                 1A3A
LSL_BUFFER          1A44
LSL_DISP            1274
LSR                 1A56
LSR_BUFFER          1A60
LSR_DISP            1278
MAIN_LOOP           108E
MINUSSIGN           12C6
MODE000             1BCA
MODE001             1BD0
MODE010             1BD8
MODE011             1BE2
MODE100             1BEC
MODE101             1BFA
MODE110             1C04
MODE111             1C0E
MOVEA_DISP          1232
MOVEB_BUFFER        145C
MOVEM               1CCC
MOVEM_DISP          123E
MOVEM_W             1CEC
MOVEQ               1718
MOVEQ_BUFFER        1722
MOVEQ_DISP          1238
MOVE_B              1456
MOVE_DISP           122D
MULS                19C2
MULS_BUFFER         19CC
MULS_DISP           125B
NOP                 1C8A
NOP_DISP            1229
ONE                 1AB2
ONEPAREN            1B3E
OPENPAREN           12CC
OR                  17D0
OR_BUFFER           180E
OR_DEST             1854
OR_DIRECTION_REVERSED  17F6
OR_DISP             1271
OR_NOTBYTE          1EF4
OR_NOTLEFT          1F20
OR_NOTRIGHTBYTE     1F36
OR_NOTRIGHTWORD     1F4C
OR_NOTWORD          1F0A
OR_SRC              1822
PAUSE_MSG           11C3
PLUSSIGN            12C4
POSTINCR            1B2C
POUNDSIGN           12C0
PRINT_ADDRESS       1D0A
PRINT_BUFFER        1D2A
PRINT_DEREF_ADDRESS  1D46
PRINT_HEX           1D82
PRINT_ZEROES        1D6A
ROL_DISP            1284
ROR_DISP            1288
RTS                 1C98
RTS_DISP            1290
SEVEN               1B12
SIX                 1B02
SIZEISBYTE          204C
SIZEISLONG          206C
SIZEISWORD          205C
SIZE_B              12D2
SIZE_L              12D8
SIZE_W              12D5
SPACE               12D0
SRDFAILADDRODDB     20E2
SRDFINISH           20E0
START               1000
SUB                 187C
SUB_ASTOHELOOP      2080
SUB_BREAKDOWNAS     209A
SUB_BUFFER          18B6
SUB_DEST            18F8
SUB_DIRECTION_REVERSED  18A2
SUB_DISP            1257
SUB_ENDREADINGDATA  20F0
SUB_NOTBYTE         1E6C
SUB_NOTLEFT         1E98
SUB_NOTRIGHTBYTE    1EAE
SUB_NOTRIGHTWORD    1EC4
SUB_NOTWORD         1E82
SUB_SRC             18CE
SUB_STARTREADINGDATA  20D6
TABLE_LENGTH        12E6
THREE               1AD2
TWO                 1AC2
WELCOME_MSG         10C2
