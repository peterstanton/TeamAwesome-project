00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 10:11:08 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C8              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 0000112C             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012E2             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001C44             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 0000121F             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001C9A             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 0000114B             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012E2             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001C44             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 0000121F             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001CB4             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012F2             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001C40             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C  3612                      80                   MOVE.W  (A2), D3
0000109E                            81  
0000109E                            82                   * TEST OPCODES
0000109E                            83                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109E                            84                   ;MOVE.W  #$4E71,D3 * NOP
0000109E                            85                   ; MOVE.W  #$4E75,D3 * RTS
0000109E                            86                   ; MOVE.W  #$4EB0,D3 * JSR
0000109E                            87                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109E                            88                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109E                            89                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109E                            90                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109E                            91  
0000109E                            92                   ; MOVE.W    #$5201,D3    *ADDQ
0000109E                            93  
0000109E                            94                   ; MOVE.W     #$7E70, D3 *MOVEQ
0000109E                            95                   ; MOVE.W     #$80C0, D3 *DIVU
0000109E                            96                   ; MOVE.W     #$8000, D3 * OR
0000109E                            97                   ; MOVE.W        #$9000, D3 * SUB
0000109E                            98                   ; MOVE.W        #$B000, D3 * CMP
0000109E                            99                   ; MOVE.W        #$C1C0, D3 * MULS
0000109E                           100                   ; MOVE.W        #$C000, D3 * AND
0000109E                           101                   ; MOVE.W        #$E0F8, D3  *ASR
0000109E                           102                   ; MOVE.W        #$E1E2, D3  *ASL
0000109E                           103                   ; MOVE.W        #$E393, D3  *LSL
0000109E                           104                   ; MOVE.W        #$E2DC, D3  *LSR
0000109E                           105  
0000109E  4EB9 00001AC4            106                   JSR    PRINT_ADDRESS
000010A4  544A                     107                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010A6  3A03                     108                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010A8  183C 000C                109                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010AC  E86B                     110                   LSR.W   D4,D3       *Move the bits
000010AE  C6FC 0006                111                   MULU    #6,D3       *Form offset     
000010B2  4EB0 3000                112                   JSR     0(A0,D3)   *Jump indirect with index
000010B6  4EB9 00001AE4            113                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010BC                           114                   
000010BC  B4CB                     115                   CMP     A3,A2
000010BE  6E00 022D                116                   BGT     EXIT
000010C2  60CA                     117                   BRA     MAIN_LOOP
000010C4                           118                   
000010C4  6000 0227                119                   BRA      EXIT
000010C8                           120                   
000010C8                           121                                  
000010C8                           122      INCLUDE 'definitions.x68'
000010C8                           123  
000010C8  =0000000D                124  CR              EQU     $0D         carriage return
000010C8  =0000000A                125  LF              EQU     $0A         line feed
000010C8= 43 53 53 20 34 32 ...    126  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010EC= 42 79 20 54 65 61 ...    127                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
0000112C= 45 6E 74 65 72 20 ...    128  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
0000114B= 45 6E 74 65 72 20 ...    129  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001168= 41 64 64 72 65 73 ...    130  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
0000118F= 45 6E 64 69 6E 67 ...    131  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C9= 50 72 65 73 73 20 ...    132  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011E3= 52 65 61 63 68 65 ...    133  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011FE= 54 72 79 20 61 6E ...    134                      DC.B    'Try another location? (yes/no): ',0
0000121F= 0D 0A 00                 135  linebreak           DC.B    CR,LF,0
00001222                           136                      
00001222= 44 41 54 41 00           137  Invalid_disp        DC.B    'DATA',0
00001227= 57 52 4F 4E 47 45 ...    138  InvalidEA_disp      DC.B    'WRONGEA',0
0000122F                           139  
0000122F= 4E 4F 50 00              140  NOP_disp            DC.B    'NOP',0
00001233= 4D 4F 56 45 00           141  MOVE_disp           DC.B    'MOVE',0
00001238= 4D 4F 56 45 41 00        142  MOVEA_disp          DC.B    'MOVEA',0
0000123E= 4D 4F 56 45 51 00        143  MOVEQ_disp          DC.B    'MOVEQ',0
00001244= 4D 4F 56 45 4D 00        144  MOVEM_disp          DC.B    'MOVEM',0
0000124A= 41 44 44 00              145  ADD_disp            DC.B    'ADD',0
0000124E= 41 44 44 41 00           146  ADDA_disp           DC.B    'ADDA',0
00001253= 41 44 44 49 00           147  ADDI_disp           DC.B    'ADDI',0
00001258= 41 44 44 51 00           148  ADDQ_disp           DC.B    'ADDQ',0
0000125D= 53 55 42 00              149  SUB_disp            DC.B    'SUB',0
00001261= 4D 55 4C 53 00           150  MULS_disp           DC.B    'MULS',0
00001266= 44 49 56 55 00           151  DIVU_disp           DC.B    'DIVU',0
0000126B= 4C 45 41 00              152  LEA_disp            DC.B    'LEA',0
0000126F= 43 4C 52 00              153  CLR_disp            DC.B    'CLR',0
00001273= 41 4E 44 00              154  AND_disp            DC.B    'AND',0
00001277= 4F 52 00                 155  OR_disp             DC.B    'OR',0
0000127A= 4C 53 4C 00              156  LSL_disp            DC.B    'LSL',0
0000127E= 4C 53 52 00              157  LSR_disp            DC.B    'LSR',0
00001282= 41 53 4C 00              158  ASL_disp            DC.B    'ASL',0
00001286= 41 53 52 00              159  ASR_disp            DC.B    'ASR',0
0000128A= 52 4F 4C 00              160  ROL_disp            DC.B    'ROL',0
0000128E= 52 4F 52 00              161  ROR_disp            DC.B    'ROR',0
00001292= 4A 53 52 00              162  JSR_disp            DC.B    'JSR',0
00001296= 52 54 53 00              163  RTS_disp            DC.B    'RTS',0
0000129A= 42 43 43 00              164  BCC_disp            DC.B    'BCC',0
0000129E= 42 47 54 00              165  BGT_disp            DC.B    'BGT',0    
000012A2= 42 4C 45 00              166  BLE_disp            DC.b    'BLE',0
000012A6                           167  
000012A6                           168  
000012A6= 30 00                    169  hexaTable               DC.B    '0',0
000012A8= 31 00                    170                          DC.B    '1',0
000012AA= 32 00                    171                          DC.B    '2',0
000012AC= 33 00                    172                          DC.B    '3',0
000012AE= 34 00                    173                          DC.B    '4',0
000012B0= 35 00                    174                          DC.B    '5',0
000012B2= 36 00                    175                          DC.B    '6',0
000012B4= 37 00                    176                          DC.B    '7',0
000012B6= 38 00                    177                          DC.B    '8',0
000012B8= 39 00                    178                          DC.B    '9',0
000012BA= 41 00                    179                          DC.B    'A',0
000012BC= 42 00                    180                          DC.B    'B',0
000012BE= 43 00                    181                          DC.B    'C',0
000012C0= 44 00                    182                          DC.B    'D',0
000012C2= 45 00                    183                          DC.B    'E',0
000012C4= 46 00                    184                          DC.B    'F',0
000012C6= 23 00                    185  poundsign               DC.B    '#',0
000012C8= 24 00                    186  dollarsign              DC.B    '$',0
000012CA= 2B 00                    187  plussign                DC.B    '+',0
000012CC= 2D 00                    188  minussign               DC.B    '-',0
000012CE= 2C 00                    189  commasign               DC.B    ',',0
000012D0= 2F 00                    190  backslashsigh           DC.B    '/',0
000012D2= 28 00                    191  openparen               DC.B    '(',0
000012D4= 29 00                    192  closeparen              DC.B    ')',0
000012D6= 20 00                    193  space                   DC.B    ' ',0   
000012D8= 2E 42 00                 194  size_b                  DC.B    '.B',0
000012DB= 2E 57 00                 195  size_w                  DC.B    '.W',0        
000012DE= 2E 4C 00                 196  size_l                  DC.B    '.L',0
000012E1                           197  
000012E1                           198  linecount               DS.B    1       *storeage for lines on a screen
000012E2= 01                       199  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012E4                           200  location_startData      DS.L    1       *location on where to start reading data
000012E8                           201  location_endData        DS.L    1       *location on where to end reading data
000012EC                           202  table_length            DS.B    1       *Number of spaces in the table to print to console
000012ED                           203  
000012ED                           204  
000012ED                           205  -------------------- end include --------------------
000012ED                           206             
000012ED                           207  EXIT                 
000012EE  FFFF FFFF                208         SIMHALT   
000012F2                           209  
000012F2                           210  
000012F2                           211  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012F2  4EF9 00001352            212  jmp_table      JMP         code0000
000012F8                           213                  *ADDI
000012F8                           214  
000012F8  4EF9 00001366            215                 JMP         code0001
000012FE                           216  
000012FE  4EF9 0000136C            217                 JMP         code0010
00001304                           218  
00001304  4EF9 00001372            219                 JMP         code0011
0000130A                           220  
0000130A  4EF9 00001378            221                 JMP         code0100
00001310                           222                             
00001310  4EF9 000013AC            223                 JMP         code0101
00001316                           224                 * ADDQ
00001316                           225                  
00001316                           226        
00001316  4EF9 000013B2            227                 JMP         code0110
0000131C                           228                 * BCC
0000131C                           229                 * BGT
0000131C                           230                 * BLE
0000131C                           231                 
0000131C  4EF9 000013B8            232                 JMP         code0111
00001322                           233                 * MOVEQ
00001322                           234  
00001322  4EF9 000013BE            235                 JMP         code1000
00001328                           236                 * DIVU
00001328                           237                 * OR
00001328                           238  
00001328  4EF9 000013D0            239                 JMP         code1001
0000132E                           240                  *SUB
0000132E  4EF9 000013D6            241                 JMP         code1010
00001334                           242                 
00001334  4EF9 000013DC            243                 JMP         code1011
0000133A                           244                 * CMP
0000133A                           245                 
0000133A  4EF9 000013E2            246                 JMP         code1100
00001340                           247                 * MULS
00001340                           248                 * AND
00001340                           249          
00001340  4EF9 000013F4            250                 JMP         code1101
00001346                           251                 *ADD
00001346                           252                 *ADDA
00001346  4EF9 00001440            253                 JMP         code1110
0000134C                           254                 * ASR
0000134C                           255                 * ASL
0000134C                           256                 * LSL
0000134C                           257                 * LSR
0000134C                           258                 * ROL
0000134C                           259                 * ROR
0000134C                           260  
0000134C  4EF9 00001470            261                 JMP         code1111
00001352                           262  
00001352                           263  
00001352                           264  code0000      
00001352  4EB9 0000191E            265                 JSR          bits5to8 // RETURNS INTO D3
00001358  B6BC 00000006            266                 CMP.L        #%0110, D3
0000135E  6600 06CA                267                 BNE          INVALID_OP
00001362  6000 01CC                268                 BRA          ADDI  
00001366                           269  
00001366                           270  code0001      
00001366  4EB9 00001A2A            271                 JSR       INVALID_OP
0000136C                           272  
0000136C  4EB9 00001A2A            273  code0010        JSR       INVALID_OP
00001372                           274  
00001372  4EB9 00001A2A            275  code0011        JSR       INVALID_OP
00001378                           276  
00001378                           277  code0100       
00001378  4EB9 00001ABE            278                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000137E                           279                  
0000137E                           280                 *NOP
0000137E  C47C 0FFF                281                 AND     #%0000111111111111,D2
00001382  B4BC 00000E71            282                 CMP.L   #%000111001110001, D2
00001388  6700 06BA                283                 BEQ     NOP
0000138C                           284                 
0000138C                           285                 *RTS
0000138C  C47C 0FFF                286                 AND     #%0000111111111111,D2
00001390  B4BC 00000E75            287                 CMP.L   #%0000111001110101, D2
00001396  6700 06BA                288                 BEQ     RTS
0000139A                           289  
0000139A                           290                 *JSR
0000139A  C47C 0FC0                291                 AND     #%0000111111000000,D2
0000139E  B4BC 00000E80            292                 CMP.L   #%0000111010000000,D2
000013A4  6700 06BA                293                 BEQ     JSR
000013A8                           294                 
000013A8                           295                 * MOVEM
000013A8                           296                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000013A8                           297                ** AND     #%0000111110000000,D2
000013A8                           298                 * DATA REGISTER
000013A8                           299                ** CMP.L   #%0000100010000000, D2
000013A8                           300                 ** JSR      MOVEM
000013A8                           301                 * ADDRESS REGISTER (DECREMENTED)
000013A8                           302                 ** CMP.L  #%0000110010000000, D2
000013A8                           303                 ** JSR    MOVEM
000013A8                           304                  
000013A8                           305                  ** TO DO: BRANCH IF INVALID OPCODE
000013A8                           306                  *LEA - if it's not the top codes, it's LEA
000013A8  6000 022A                307                  BRA     LEA
000013AC                           308  code0101      
000013AC                           309  
000013AC  4EB9 000016BE            310                  JSR   ADDQ
000013B2                           311  
000013B2  4EB9 00001A2A            312  code0110         JSR       INVALID_OP
000013B8                           313  
000013B8                           314  code0111       
000013B8  4EB9 000016DE            315                  JSR       MOVEQ
000013BE                           316  
000013BE                           317  code1000      
000013BE  4EB9 00001930            318                  JSR        bits8to10
000013C4  B67C 0003                319                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013C8  6700 0338                320                  BEQ        DIVU
000013CC  6000 0354                321                  BRA        OR       ** OTHERWISE OR
000013D0                           322                  
000013D0                           323  
000013D0                           324  code1001       
000013D0  4EB9 0000173E            325                 JSR         SUB
000013D6  4EB9 00001A2A            326  code1010       JSR       INVALID_OP
000013DC                           327  
000013DC                           328  code1011       
000013DC  4EB9 0000175E            329                 JSR         CMP
000013E2                           330  
000013E2                           331  code1100      
000013E2  4EB9 00001930            332                  JSR        bits8to10
000013E8  B67C 0007                333                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013EC  6700 0390                334                  BEQ        MULS
000013F0  6000 03AC                335                  BRA        AND       ** OTHERWISE AND
000013F4                           336  
000013F4                           337  code1101       
000013F4  4EB9 00001ABE            338                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013FA                           339                 *ADDA
000013FA  4EB9 00001930            340                 JSR      bits8to10
00001400  B67C 0003                341                 CMP      #%011, D3  ** WORD
00001404  6700 0070                342                 BEQ      ADDA
00001408  B67C 0007                343                 CMP      #%111, D3   ** LONG
0000140C  6700 0068                344                 BEQ      ADDA
00001410                           345                 
00001410                           346                 *ADD
00001410  B67C 0000                347                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00001414  6700 0086                348                 BEQ      ADD
00001418  B67C 0001                349                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000141C  6700 007E                350                 BEQ      ADD
00001420  B67C 0002                351                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001424  6700 0076                352                 BEQ      ADD
00001428  B67C 0004                353                 CMP      #%100, D3   ** BYTE TO EA
0000142C  6700 006E                354                 BEQ      ADD
00001430  B67C 0005                355                 CMP      #%101, D3   ** WORD TO EA
00001434  6700 0066                356                 BEQ      ADD
00001438  B67C 0006                357                 CMP      #%110, D3   ** LONG TO EA
0000143C  6700 005E                358                 BEQ      ADD
00001440                           359                 
00001440                           360  
00001440                           361  code1110       
00001440                           362                  * ASR
00001440  4EB9 00001974            363                  JSR     bits1to10
00001446  B67C 0383                364                  CMP     #%1110000011,D3
0000144A  6700 0372                365                  BEQ     ASR
0000144E                           366                  
0000144E                           367                  * ASL
0000144E  B67C 0387                368                  CMP     #%1110000111,D3
00001452  6700 0386                369                  BEQ     ASL
00001456                           370                  
00001456                           371                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001456                           372                  * LSL
00001456  4244                     373                  CLR     D4
00001458  2803                     374                  MOVE.L  D3,D4
0000145A  C8BC 00A98671            375                  AND.L   #11110001,D4
00001460  B87C 01C7                376                  CMP     #%111000111,D4
00001464  6700 0390                377                  BEQ     LSL
00001468                           378                  
00001468                           379                  * LSR
00001468  B67C 038B                380                  CMP     #%1110001011,D3
0000146C  6700 03A4                381                  BEQ     LSR
00001470                           382                  
00001470                           383                  * ROL
00001470                           384                  
00001470                           385                  * ROR
00001470                           386  
00001470  4EB9 00001A2A            387  code1111       JSR       INVALID_OP
00001476                           388  
00001476                           389  ADDA    
00001476  4EB9 00001480            390                 JSR     ADDA_BUFFER
0000147C  6000 0666                391                 BRA     PRINT_BUFFER
00001480                           392                  
00001480                           393  ADDA_BUFFER
00001480  1CFC 0041                394                 MOVE.B   #'A',(A6)+
00001484  1CFC 0044                395                 MOVE.B   #'D', (A6)+  
00001488  1CFC 0044                396                 MOVE.B   #'D', (A6)+
0000148C  1CFC 0041                397                 MOVE.B   #'A', (A6)+
00001490  4EB9 00001BE8            398                 JSR      GETSIZE_ADDA
00001496  1CFC 0020                399                 MOVE.B   #' ', (A6)+
0000149A  4E75                     400                 RTS
0000149C                           401                 
0000149C                           402                 
0000149C                           403                 
0000149C                           404  *********************************************               
0000149C                           405  ADD    
0000149C  4EB9 000014A4            406                 JSR     ADD_BUFFER
000014A2  4E75                     407                 RTS
000014A4                           408                  
000014A4                           409  ADD_BUFFER
000014A4  1CFC 0041                410                 MOVE.B   #'A',(A6)+
000014A8  1CFC 0044                411                 MOVE.B   #'D', (A6)+  
000014AC  1CFC 0044                412                 MOVE.B   #'D', (A6)+
000014B0  4EB9 00001B26            413                 JSR      GETSIZE_ADD
000014B6                           414                 
000014B6                           415                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014B6                           416                 
000014B6  BC7C 0001                417                 CMP      #1,D6
000014BA  6600 0018                418                 BNE      ADD_DIRECTION_REVERSED
000014BE  4EB9 000014EA            419                 JSR      ADD_SRC
000014C4  1CFC 002C                420                 MOVE.B   #',', (A6)+
000014C8  1CFC 0020                421                 MOVE.B   #' ', (A6)+
000014CC  4EB9 0000150E            422                 JSR      ADD_DEST
000014D2  4E75                     423                 RTS
000014D4                           424                 
000014D4                           425                 
000014D4                           426  ADD_DIRECTION_REVERSED
000014D4                           427  
000014D4  4246                     428                 CLR      D6
000014D6  4EB9 0000150E            429                 JSR      ADD_DEST
000014DC  1CFC 002C                430                 MOVE.B   #',', (A6)+
000014E0  1CFC 0020                431                 MOVE.B   #' ', (A6)+
000014E4  4EB9 000014EA            432                 JSR      ADD_SRC             
000014EA                           433                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014EA                           434                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014EA                           435                 
000014EA                           436  ***********************************************        
000014EA                           437  
000014EA                           438  
000014EA                           439  
000014EA                           440  ****************************************************************************************
000014EA                           441  ADD_SRC
000014EA                           442  
000014EA  4EB9 00001942            443                  JSR    bits11to13
000014F0  3803                     444                  MOVE   D3,D4
000014F2  41F9 0000182E            445                  LEA     jmp_mode,A0    *Index into the table
000014F8  C6FC 0006                446                  MULU   #6,D3
000014FC  4EB0 3000                447                  JSR    0(A0,D3)     
00001500  4EB9 00001954            448                  JSR    bits14to16
00001506  4EB9 0000185E            449                  JSR    insert_num
0000150C  4E75                     450                  RTS
0000150E                           451  
0000150E                           452  
0000150E                           453  
0000150E                           454  
0000150E                           455  
0000150E                           456  ADD_DEST
0000150E  363C 0000                457                  MOVE.W #%000,D3     ;Can only have a data register.
00001512  3803                     458                  MOVE   D3,D4
00001514  41F9 0000182E            459                  LEA     jmp_mode,A0    *Index into the table
0000151A  C6FC 0006                460                  MULU    #6,D3       *Form offset     
0000151E  4EB0 3000                461                  JSR     0(A0,D3)   *Jump indirect with index
00001522                           462                  
00001522  4EB9 0000190A            463                  JSR     bits5to7
00001528  4EB9 0000185E            464                  JSR     insert_num
0000152E  4E75                     465                  RTS
00001530                           466                          
00001530                           467  
00001530                           468  
00001530                           469  
00001530                           470  ADDI
00001530  4EB9 000015B8            471                  JSR     ADDI_BUFFER
00001536  4EB9 00001546            472                  JSR     ADDI_SRC
0000153C  4EB9 00001554            473                  JSR     ADDI_DES
00001542  6000 05A0                474                  BRA     PRINT_BUFFER
00001546                           475                  
00001546                           476  ADDI_SRC                        
00001546  1CFC 0023                477                  MOVE.B  #'#', (A6)+
0000154A  1CFC 002C                478                  MOVE.B  #',', (A6)+
0000154E  1CFC 0020                479                  MOVE.B  #' ', (A6)+
00001552  4E75                     480                  RTS
00001554                           481                    ** TODO: IMPLEMENT THIS IN EA
00001554                           482                  ** Immediate field—Data immediately following the instruction.
00001554                           483                  **If size = 00, the data is the low-order byte of the immediate word.
00001554                           484                  **If size = 01, the data is the entire immediate word.
00001554                           485                  **If size = 10, the data is the next two immediate words. 
00001554                           486  ADDI_DES
00001554                           487                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001554                           488                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001554  4EB9 00001942            489                 JSR      bits11to13
0000155A  B67C 0001                490                 CMP      #%001, D3 **AN
0000155E  6700 04C6                491                 BEQ      INVALID_EA
00001562  B67C 0005                492                 CMP      #%101, D3 **COMPLICATED
00001566  6700 04BE                493                 BEQ      INVALID_EA
0000156A  B67C 0006                494                 CMP      #%110, D3 **COMPLICATED
0000156E  6700 04B6                495                 BEQ      INVALID_EA
00001572                           496                 
00001572  4EB9 00001964            497                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001578  B67C 003C                498                 CMP      #%111100,D3 // immediate data
0000157C  6700 04A8                499                 BEQ      INVALID_EA
00001580  B67C 003A                500                 CMP      #%111010,D3 // complicated
00001584  6700 04A0                501                 BEQ      INVALID_EA
00001588  B67C 003B                502                 CMP      #%111011,D3 // complicated
0000158C  6700 0498                503                 BEQ      INVALID_EA
00001590                           504                 
00001590  4EB9 00001942            505                 JSR      bits11to13 ** grab bits to jump with\
00001596  3803                     506                 MOVE     D3,D4
00001598  41F9 0000182E            507                 LEA     jmp_mode,A0    *Index into the table
0000159E  C6FC 0006                508                 MULU    #6,D3       *Form offset     
000015A2  4EB0 3000                509                 JSR     0(A0,D3)   *Jump indirect with index
000015A6                           510                 
000015A6  4243                     511                 CLR     D3
000015A8  4EB9 00001954            512                 JSR     bits14to16
000015AE  4EB9 0000185E            513                 JSR     insert_num
000015B4  4244                     514                 CLR     D4
000015B6                           515                 
000015B6  4E75                     516                 RTS
000015B8                           517                 
000015B8                           518                             
000015B8                           519  ADDI_BUFFER
000015B8  1CFC 0041                520                 MOVE.B   #'A',(A6)+
000015BC  1CFC 0044                521                 MOVE.B   #'D', (A6)+  
000015C0  1CFC 0044                522                 MOVE.B   #'D', (A6)+
000015C4  1CFC 0049                523                 MOVE.B   #'I', (A6)+
000015C8                           524                 
000015C8  4EB9 00001BAE            525                 JSR      GETSIZE_ADDI
000015CE                           526                 
000015CE                           527                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015CE                           528                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015CE  1CFC 0020                529                 MOVE.B   #' ', (A6)+
000015D2  4E75                     530                 RTS
000015D4                           531                              
000015D4                           532  LEA
000015D4  4EB9 00001930            533                 JSR      bits8to10   // 1 1 1
000015DA  B47C 0007                534                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015DE  6600 044A                535                 BNE      INVALID_OP
000015E2  4EB9 000015F6            536                 JSR      LEA_BUFFER
000015E8  4EB9 00001608            537                 JSR      LEA_SRC
000015EE  4EB9 0000169A            538                 JSR      LEA_DEST
000015F4  4E75                     539                 RTS
000015F6                           540                 
000015F6                           541  LEA_BUFFER 
000015F6  1CFC 004C                542                 MOVE.B   #'L',(A6)+
000015FA  1CFC 0045                543                 MOVE.B   #'E', (A6)+  
000015FE  1CFC 0041                544                 MOVE.B   #'A', (A6)+
00001602  1CFC 0020                545                 MOVE.B   #' ', (A6)+
00001606  4E75                     546                 RTS
00001608                           547            
00001608                           548  LEA_SRC
00001608                           549              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00001608  4EB9 00001942            550              JSR      bits11to13  // source mode - D3
0000160E  B67C 0000                551              CMP      #%000, D3
00001612  6700 0412                552              BEQ      INVALID_EA
00001616  B67C 0001                553              CMP      #%001, D3
0000161A  6700 040A                554              BEQ      INVALID_EA
0000161E  B67C 0003                555              CMP      #%011, D3
00001622  6700 0402                556              BEQ      INVALID_EA
00001626  B67C 0004                557              CMP      #%100, D3
0000162A  6700 03FA                558              BEQ      INVALID_EA
0000162E  B67C 0005                559              CMP      #%101, D3
00001632  6700 03F2                560              BEQ      INVALID_EA
00001636  B67C 0006                561              CMP      #%110, D3
0000163A  6700 03EA                562              BEQ      INVALID_EA
0000163E                           563  
0000163E                           564              
0000163E                           565              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
0000163E  4EB9 00001954            566              JSR      bits14to16 // source register - d4
00001644  B67C 0004                567              CMP      #%100, D3
00001648  6700 03DC                568              BEQ      INVALID_EA
0000164C  B67C 0002                569              CMP      #%010, D3
00001650  6700 03D4                570              BEQ      INVALID_EA
00001654  B67C 0003                571              CMP      #%011, D3
00001658  6700 03CC                572              BEQ      INVALID_EA
0000165C                           573              
0000165C                           574  
0000165C  4EB9 00001964            575               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001662  B67C 003C                576               CMP      #%111100,D3 // immediate data
00001666  6700 03BE                577               BEQ      INVALID_EA
0000166A  B67C 003A                578               CMP      #%111010,D3 // complicated
0000166E  6700 03B6                579               BEQ      INVALID_EA
00001672  B67C 003B                580               CMP      #%111011,D3 // complicated
00001676  6700 03AE                581               BEQ      INVALID_EA
0000167A                           582     
0000167A  4EB9 00001942            583               JSR      bits11to13 ** grab mode bits to jump with
00001680  3803                     584               MOVE    D3,D4
00001682                           585  
00001682  41F9 0000182E            586               LEA     jmp_mode,A0    *Index into the table
00001688  C6FC 0006                587               MULU    #6,D3       *Form offset     
0000168C  4EB0 3000                588               JSR     0(A0,D3)   *Jump indirect with index
00001690                           589   
00001690  1CFC 002C                590               MOVE.B     #',', (A6)+
00001694  1CFC 0020                591               MOVE.B     #' ', (A6)+
00001698                           592  
00001698  4E75                     593               RTS
0000169A                           594               
0000169A                           595  LEA_DEST    
0000169A  4244                     596                  CLR     D4
0000169C  41F9 0000182E            597                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
000016A2  363C 0001                598                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
000016A6  3803                     599                  MOVE    D3,D4
000016A8  C6FC 0006                600                  MULU    #6,D3       *Form offset     
000016AC  4EB0 3000                601                  JSR     0(A0,D3)   *Jump indirect with index
000016B0                           602                  
000016B0  4EB9 0000190A            603                  JSR     bits5to7
000016B6  4EB9 0000185E            604                  JSR     insert_num
000016BC                           605                  
000016BC  4E75                     606                  RTS
000016BE                           607  
000016BE                           608  
000016BE                           609  ADDQ
000016BE  4EB9 000016C8            610                  JSR     ADDQ_BUFFER
000016C4  6000 041E                611                  BRA     PRINT_BUFFER
000016C8                           612  
000016C8                           613  ADDQ_BUFFER
000016C8  1CFC 0041                614                 MOVE.B   #'A',(A6)+
000016CC  1CFC 0044                615                 MOVE.B   #'D', (A6)+  
000016D0  1CFC 0044                616                 MOVE.B   #'D', (A6)+
000016D4  1CFC 0051                617                 MOVE.B   #'Q', (A6)+
000016D8                           618                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
000016D8                           619                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000016D8  1CFC 0020                620                 MOVE.B   #' ', (A6)+
000016DC  4E75                     621                 RTS
000016DE                           622                 
000016DE                           623  MOVEQ
000016DE  4EB9 000016E8            624                  JSR     MOVEQ_BUFFER
000016E4  6000 03FE                625                  BRA     PRINT_BUFFER
000016E8                           626  
000016E8                           627  MOVEQ_BUFFER
000016E8  1CFC 004D                628                 MOVE.B   #'M',(A6)+
000016EC  1CFC 004F                629                 MOVE.B   #'O', (A6)+  
000016F0  1CFC 0056                630                 MOVE.B   #'V', (A6)+
000016F4  1CFC 0045                631                 MOVE.B   #'E', (A6)+
000016F8  1CFC 0051                632                 MOVE.B   #'Q', (A6)+
000016FC  1CFC 0020                633                 MOVE.B   #' ', (A6)+
00001700  4E75                     634                 RTS
00001702                           635  
00001702                           636  DIVU
00001702  4EB9 0000170C            637                  JSR     DIVU_BUFFER
00001708  6000 03DA                638                  BRA     PRINT_BUFFER
0000170C                           639  
0000170C                           640  DIVU_BUFFER
0000170C  1CFC 0044                641                 MOVE.B   #'D',(A6)+
00001710  1CFC 0049                642                 MOVE.B   #'I', (A6)+  
00001714  1CFC 0056                643                 MOVE.B   #'V', (A6)+
00001718  1CFC 0055                644                 MOVE.B   #'U', (A6)+
0000171C  1CFC 0020                645                 MOVE.B   #' ', (A6)+
00001720  4E75                     646                 RTS  
00001722                           647  OR    
00001722  4EB9 0000172C            648                 JSR     OR_BUFFER
00001728  6000 03BA                649                 BRA     PRINT_BUFFER
0000172C                           650                  
0000172C                           651  OR_BUFFER
0000172C  1CFC 004F                652                 MOVE.B   #'O',(A6)+
00001730  1CFC 0052                653                 MOVE.B   #'R', (A6)+  
00001734  1CFC 002E                654                 MOVE.B   #'.', (A6)+
00001738                           655                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001738                           656                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001738                           657                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001738  1CFC 0020                658                 MOVE.B   #' ', (A6)+
0000173C  4E75                     659                 RTS   
0000173E                           660  
0000173E                           661  SUB   
0000173E  4EB9 00001748            662                 JSR     SUB_BUFFER
00001744  6000 039E                663                 BRA     PRINT_BUFFER               
00001748                           664  
00001748                           665  SUB_BUFFER
00001748  1CFC 0053                666                 MOVE.B   #'S',(A6)+
0000174C  1CFC 0055                667                 MOVE.B   #'U', (A6)+  
00001750  1CFC 0042                668                 MOVE.B   #'B', (A6)+
00001754  1CFC 002E                669                 MOVE.B   #'.', (A6)+
00001758                           670                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001758                           671                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001758                           672                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001758  1CFC 0020                673                 MOVE.B   #' ', (A6)+
0000175C  4E75                     674                 RTS  
0000175E                           675  CMP   
0000175E  4EB9 00001768            676                 JSR     CMP_BUFFER
00001764  6000 037E                677                 BRA     PRINT_BUFFER
00001768                           678                  
00001768                           679  CMP_BUFFER
00001768  1CFC 0043                680                 MOVE.B   #'C',(A6)+
0000176C  1CFC 004D                681                 MOVE.B   #'M', (A6)+  
00001770  1CFC 0050                682                 MOVE.B   #'P', (A6)+
00001774  1CFC 002E                683                 MOVE.B   #'.', (A6)+
00001778                           684                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001778                           685                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001778                           686                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001778  1CFC 0020                687                 MOVE.B   #' ', (A6)+
0000177C  4E75                     688                 RTS   
0000177E                           689                 
0000177E                           690  MULS
0000177E  4EB9 00001788            691                  JSR     MULS_BUFFER
00001784  6000 035E                692                  BRA     PRINT_BUFFER
00001788                           693  
00001788                           694  MULS_BUFFER
00001788  1CFC 004D                695                 MOVE.B   #'M',(A6)+
0000178C  1CFC 0055                696                 MOVE.B   #'U', (A6)+  
00001790  1CFC 004C                697                 MOVE.B   #'L', (A6)+
00001794  1CFC 0053                698                 MOVE.B   #'S', (A6)+
00001798  1CFC 0020                699                 MOVE.B   #' ', (A6)+
0000179C  4E75                     700                 RTS
0000179E                           701  
0000179E                           702  AND    
0000179E  4EB9 000017A8            703                 JSR     AND_BUFFER
000017A4  6000 033E                704                 BRA     PRINT_BUFFER
000017A8                           705                  
000017A8                           706  AND_BUFFER
000017A8  1CFC 0041                707                 MOVE.B   #'A',(A6)+
000017AC  1CFC 004E                708                 MOVE.B   #'N', (A6)+  
000017B0  1CFC 0044                709                 MOVE.B   #'D', (A6)+
000017B4  1CFC 002E                710                 MOVE.B   #'.', (A6)+
000017B8                           711                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017B8                           712                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017B8                           713                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017B8  1CFC 0020                714                 MOVE.B   #' ', (A6)+
000017BC  4E75                     715                 RTS    
000017BE                           716  
000017BE                           717  ASR     
000017BE  4EB9 000017C8            718                  JSR     ASR_BUFFER
000017C4  6000 031E                719                  BRA     PRINT_BUFFER
000017C8                           720  
000017C8                           721  ASR_BUFFER
000017C8  1CFC 0041                722                 MOVE.B   #'A',(A6)+
000017CC  1CFC 0053                723                 MOVE.B   #'S', (A6)+  
000017D0  1CFC 0052                724                 MOVE.B   #'R', (A6)+
000017D4  1CFC 0020                725                 MOVE.B   #' ', (A6)+
000017D8  4E75                     726                 RTS      
000017DA                           727  
000017DA                           728  ASL     
000017DA  4EB9 000017E4            729                  JSR     ASL_BUFFER
000017E0  6000 0302                730                  BRA     PRINT_BUFFER
000017E4                           731  
000017E4                           732  ASL_BUFFER
000017E4  1CFC 0041                733                 MOVE.B   #'A',(A6)+
000017E8  1CFC 0053                734                 MOVE.B   #'S', (A6)+  
000017EC  1CFC 004C                735                 MOVE.B   #'L', (A6)+
000017F0  1CFC 0020                736                 MOVE.B   #' ', (A6)+
000017F4  4E75                     737                 RTS     
000017F6                           738  
000017F6                           739  LSL     
000017F6  4EB9 00001800            740                  JSR     LSL_BUFFER
000017FC  6000 02E6                741                  BRA     PRINT_BUFFER
00001800                           742  
00001800                           743  LSL_BUFFER
00001800  1CFC 004C                744                 MOVE.B   #'L',(A6)+
00001804  1CFC 0053                745                 MOVE.B   #'S', (A6)+  
00001808  1CFC 004C                746                 MOVE.B   #'L', (A6)+
0000180C  1CFC 0020                747                 MOVE.B   #' ', (A6)+
00001810  4E75                     748                 RTS     
00001812                           749  
00001812                           750  LSR     
00001812  4EB9 0000181C            751                  JSR     LSR_BUFFER
00001818  6000 02CA                752                  BRA     PRINT_BUFFER
0000181C                           753  
0000181C                           754  LSR_BUFFER
0000181C  1CFC 004C                755                 MOVE.B   #'L',(A6)+
00001820  1CFC 0053                756                 MOVE.B   #'S', (A6)+  
00001824  1CFC 0052                757                 MOVE.B   #'R', (A6)+
00001828  1CFC 0020                758                 MOVE.B   #' ', (A6)+
0000182C  4E75                     759                 RTS       
0000182E                           760                 
0000182E                           761  jmp_mode
0000182E  4EF9 00001986            762                  JMP     MODE000  ** DN
00001834  4EF9 0000198C            763                  JMP     MODE001  ** AN
0000183A  4EF9 00001994            764                  JMP     MODE010  ** (AN)
00001840  4EF9 0000199E            765                  JMP     MODE011  ** (AN)+   
00001846  4EF9 000019A8            766                  JMP     MODE100  ** -(AN)
0000184C  4EF9 000019B6            767                  JMP     MODE101  **INVALID
00001852  4EF9 000019C0            768                  JMP     MODE110  **INVALID
00001858  4EF9 000019CA            769                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
0000185E                           770  
0000185E                           771                  
0000185E                           772  insert_num
0000185E                           773                  
0000185E                           774                  ;get number from D3
0000185E  B67C 0000                775                  CMP     #%000,D3       ;0
00001862  6600 000A                776                  BNE     ONE         
00001866  1CFC 0030                777                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
0000186A  6000 006E                778                  BRA     FINISHER
0000186E                           779                  
0000186E  B67C 0001                780  ONE             CMP     #%001,D3       ;1
00001872  6600 000A                781                  BNE     TWO 
00001876  1CFC 0031                782                  MOVE.B  #'1',(A6)+
0000187A  6000 005E                783                  BRA     FINISHER
0000187E                           784  
0000187E                           785                  
0000187E  B67C 0002                786  TWO             CMP     #%010,D3        ;2
00001882  6600 000A                787                  BNE     THREE
00001886  1CFC 0032                788                  MOVE.B  #'2',(A6)+
0000188A  6000 004E                789                  BRA     FINISHER
0000188E                           790                  
0000188E  B67C 0003                791  THREE           CMP     #%011,D3        ;3
00001892  6600 000A                792                  BNE     FOUR
00001896  1CFC 0033                793                  MOVE.B  #'3',(A6)+
0000189A  6000 003E                794                  BRA     FINISHER
0000189E                           795                  
0000189E  B67C 0004                796  FOUR            CMP     #%100,D3        ;4
000018A2  6600 000A                797                  BNE     FIVE
000018A6  1CFC 0034                798                  MOVE.B  #'4',(A6)+
000018AA  6000 002E                799                  BRA     FINISHER
000018AE                           800                  
000018AE  B67C 0005                801  FIVE            CMP     #%101,D3        ;5
000018B2  6600 000A                802                  BNE     SIX
000018B6  1CFC 0035                803                  MOVE.B  #'5',(A6)+
000018BA  6000 001E                804                  BRA     FINISHER
000018BE                           805                  
000018BE  B67C 0006                806  SIX             CMP     #%110,D3        ;6
000018C2  6600 000A                807                  BNE     SEVEN
000018C6  1CFC 0036                808                  MOVE.B  #'6',(A6)+
000018CA  6000 000E                809                  BRA     FINISHER
000018CE                           810                  
000018CE  B67C 0007                811  SEVEN           CMP     #%111,D3        ;7
000018D2  1CFC 0037                812                  MOVE.B  #'7',(A6)+
000018D6  6000 0002                813                  BRA     FINISHER
000018DA                           814                  
000018DA                           815  FINISHER                
000018DA                           816                  
000018DA                           817                  ;check D4, do we need to do stuff?
000018DA  B87C 0002                818                  CMP     #%010,D4
000018DE  6600 0008                819                  BNE     POSTINCR
000018E2  1CFC 0029                820                  MOVE.B  #')',(A6)+
000018E6  4E75                     821                  RTS
000018E8                           822                  
000018E8  B87C 0003                823  POSTINCR        CMP     #%011,D4
000018EC  6600 000C                824                  BNE     ONEPAREN
000018F0  1CFC 0029                825                  MOVE.B  #')',(A6)+
000018F4  1CFC 002B                826                  MOVE.B  #'+',(A6)+
000018F8  4E75                     827                  RTS
000018FA                           828                  
000018FA  B87C 0004                829  ONEPAREN        CMP     #%100,D4
000018FE  6600 0008                830                  BNE     DONE
00001902  1CFC 0029                831                  MOVE.B  #')',(A6)+                
00001906                           832  
00001906  4244                     833                  CLR     D4
00001908  4E75                     834  DONE            RTS
0000190A                           835  
0000190A                           836          
0000190A                           837                 
0000190A                           838  bits5to7
0000190A  4243                     839                 CLR      D3
0000190C  4EB9 00001ABE            840                 JSR      COPY_OPCODE  // opcode copied to D2
00001912  C47C 0E00                841                 AND      #%0000111000000000, D2
00001916  E09A                     842                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001918  E29A                     843                 ROR.L    #1, D2
0000191A  3602                     844                 MOVE.W   D2,D3 // moving isolated bits into d3
0000191C  4E75                     845                 RTS
0000191E                           846                 
0000191E                           847  bits5to8
0000191E  4243                     848                 CLR      D3
00001920  4EB9 00001ABE            849                 JSR      COPY_OPCODE  // opcode copied to D2
00001926  C47C 0F00                850                 AND      #%0000111100000000, D2
0000192A  E09A                     851                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000192C  3602                     852                 MOVE.W   D2,D3 // moving isolated bits into d3
0000192E  4E75                     853                 RTS
00001930                           854                 
00001930                           855  bits8to10
00001930  4243                     856                 CLR      D3
00001932  4EB9 00001ABE            857                 JSR      COPY_OPCODE  // opcode copied to D2
00001938  C47C 01C0                858                 AND      #%0000000111000000, D2
0000193C  EC9A                     859                 ROR.L    #6, D2          // rotate bits so isolated at the end
0000193E  3602                     860                 MOVE.W   D2,D3 // moving isolated bits into d3
00001940  4E75                     861                 RTS               
00001942                           862             
00001942                           863  bits11to13
00001942  4243                     864                 CLR      D3
00001944  4EB9 00001ABE            865                 JSR      COPY_OPCODE  // opcode copied to D2
0000194A  C47C 0038                866                 AND      #%0000000000111000, D2
0000194E  E69A                     867                 ROR.L    #3, D2          // rotate bits so isolated at the end
00001950  3602                     868                 MOVE.W   D2,D3 // moving isolated bits into d3
00001952  4E75                     869                 RTS
00001954                           870             
00001954                           871  bits14to16
00001954  4243                     872                 CLR      D3
00001956  4EB9 00001ABE            873                 JSR      COPY_OPCODE  // opcode copied to D2
0000195C  C47C 0007                874                 AND      #%0000000000000111, D2
00001960  3602                     875                 MOVE.W   D2,D3 // moving isolated bits into d3
00001962  4E75                     876                 RTS
00001964                           877  bits11to16
00001964  4243                     878                 CLR      D3
00001966  4EB9 00001ABE            879                 JSR      COPY_OPCODE  // opcode copied to D2
0000196C  C47C 003F                880                 AND      #%0000000000111111, D2
00001970  3602                     881                 MOVE.W   D2,D3 // moving isolated bits into d3
00001972  4E75                     882                 RTS
00001974                           883  bits1to10
00001974  4243                     884                 CLR      D3
00001976  4EB9 00001ABE            885                 JSR      COPY_OPCODE  // opcode copied to D2
0000197C  C47C FFC0                886                 AND      #%1111111111000000, D2
00001980  EC9A                     887                 ROR.L    #6, D2
00001982  3602                     888                 MOVE.W   D2,D3 // moving isolated bits into d3
00001984  4E75                     889                 RTS
00001986                           890  ** DN       
00001986                           891  MODE000         
00001986  1CFC 0044                892                  MOVE.B  #'D',(A6)+     
0000198A  4E75                     893                  RTS
0000198C                           894  
0000198C                           895  ** AN
0000198C                           896  MODE001         
0000198C  4EB9 000019DE            897                  JSR ADDRESS_BUFFER  
00001992  4E75                     898                  RTS      
00001994                           899  
00001994                           900   ** (AN)
00001994                           901  MODE010         
00001994  1CFC 0028                902                  MOVE.B  #'(', (A6)+
00001998  1CFC 0041                903                  MOVE.B  #'A',(A6)+  
0000199C  4E75                     904                  RTS      
0000199E                           905  
0000199E                           906  ** (AN)+ 
0000199E                           907  MODE011         
0000199E  1CFC 0028                908                  MOVE.B  #'(', (A6)+
000019A2  1CFC 0041                909                  MOVE.B  #'A',(A6)+ 
000019A6  4E75                     910                  RTS       
000019A8                           911  
000019A8                           912   ** -(AN)
000019A8                           913  MODE100         
000019A8  1CFC 002D                914                  MOVE.B  #'-', (A6)+
000019AC  1CFC 0028                915                  MOVE.B  #'(', (A6)+
000019B0  1CFC 0041                916                  MOVE.B  #'A',(A6)+
000019B4  4E75                     917                  RTS
000019B6                           918                  
000019B6                           919  **INVALID               
000019B6                           920  MODE101         
000019B6  1CFC 0028                921                  MOVE.B  #'(', (A6)+
000019BA  1CFC 0041                922                  MOVE.B  #'A',(A6)+ 
000019BE  4E75                     923                  RTS
000019C0                           924                  
000019C0                           925  **INVALID
000019C0                           926  MODE110         
000019C0  1CFC 0028                927                  MOVE.B  #'(', (A6)+
000019C4  1CFC 0041                928                  MOVE.B  #'A',(A6)+
000019C8  4E75                     929                  RTS  
000019CA                           930  
000019CA                           931  ** ABSOLUTE AND IMMEDIATE            
000019CA                           932  MODE111         
000019CA                           933                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
000019CA  1CFC 0024                934                 MOVE.B   #'$', (A6)+  
000019CE  4EB9 00001B00            935                 JSR      PRINT_DEREF_ADDRESS
000019D4  544A                     936                 ADD.W    #2, A2
000019D6  4EB9 00001B00            937                 JSR      PRINT_DEREF_ADDRESS
000019DC  4E75                     938                 RTS            
000019DE                           939                                          
000019DE                           940  ADDRESS_BUFFER
000019DE  1CFC 0041                941                  MOVE.B  #'A',(A6)+ 
000019E2  4E75                     942                  RTS
000019E4                           943                 
000019E4                           944  ABSOLUTE_BUFFER
000019E4  4243                     945                 CLR      D3
000019E6  3604                     946                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000019E8  1CF8 0024                947                 MOVE.B   '$', (A6)+
000019EC  B67C 0000                948                 CMP.W    #%000, D3
000019F0  6700 0010                949                 BEQ      ABSOLUTE_WORD_BUFFER
000019F4  4243                     950                 CLR      D3
000019F6  3604                     951                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
000019F8  B67C 0001                952                 CMP.W    #%001, D3
000019FC  6700 0016                953                 BEQ      ABSOLUTE_LONG_BUFFER
00001A00  4E75                     954                 RTS
00001A02                           955                 
00001A02                           956  ABSOLUTE_WORD_BUFFER
00001A02                           957                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A02                           958                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A02  1CFC 0046                959                         MOVE.B #'F', (A6)+ 
00001A06  1CFC 0046                960                         MOVE.B #'F', (A6)+ 
00001A0A  1CFC 0046                961                         MOVE.B #'F', (A6)+ 
00001A0E  1CFC 0046                962                         MOVE.B #'F', (A6)+ 
00001A12  4E75                     963                         RTS       
00001A14                           964                    
00001A14                           965  ABSOLUTE_LONG_BUFFER       
00001A14                           966                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A14                           967                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A14  1CFC 0047                968                         MOVE.B #'G', (A6)+ 
00001A18  1CFC 0047                969                         MOVE.B #'G', (A6)+ 
00001A1C  1CFC 0047                970                         MOVE.B #'G', (A6)+ 
00001A20  1CFC 0047                971                         MOVE.B #'G', (A6)+
00001A24  4E75                     972                         RTS 
00001A26                           973  
00001A26                           974  INVALID_EA  
00001A26                           975                  * TODO: IMPLEMENT
00001A26                           976                  *** CLEAR OUT A6
00001A26                           977                  ** PUT INVALID MESSAGE INTO A6
00001A26  6000 F8C5                978                  BRA EXIT
00001A2A                           979  INVALID_OP  
00001A2A                           980                  ** TODO: IMPLEMENT
00001A2A                           981                 *** CLEAR OUT A6
00001A2A                           982                  ** PUT INVALID MESSAGE INTO A6
00001A2A  1CFC 0044                983                      MOVE.B #'D', (A6)+
00001A2E  1CFC 0041                984                      MOVE.B #'A', (A6)+
00001A32  1CFC 0054                985                      MOVE.B #'T', (A6)+
00001A36  1CFC 0041                986                      MOVE.B #'A', (A6)+ 
00001A3A  1CFC 0020                987                      MOVE.B #' ', (A6)+ 
00001A3E  4EB9 00001B00            988                      JSR     PRINT_DEREF_ADDRESS
00001A44                           989            
00001A44                           990                  
00001A44  43F8 122F                991  NOP                 LEA     NOP_disp,A1          
00001A48  103C 000E                992                      MOVE.B  #14,D0
00001A4C  4E4F                     993                      TRAP    #15
00001A4E  6000 F89D                994                      BRA     EXIT
00001A52                           995                   
00001A52                           996  RTS      
00001A52  43F8 1296                997                      LEA     RTS_disp,A1          
00001A56  103C 000E                998                      MOVE.B  #14,D0
00001A5A  4E4F                     999                      TRAP    #15 
00001A5C  6000 F88F               1000                      BRA     EXIT
00001A60                          1001  JSR      
00001A60  4DF9 00001C40           1002                      LEA     BUFFER, A6
00001A66  1CFC 004A               1003                      MOVE.B #'J', (A6)+
00001A6A  1CFC 0053               1004                      MOVE.B #'S', (A6)+
00001A6E  1CFC 0052               1005                      MOVE.B #'R', (A6)+
00001A72  1CFC 0020               1006                      MOVE.B #' ', (A6)+
00001A76  43F9 00001C40           1007                      LEA     BUFFER, A1
00001A7C                          1008                      ** BITS 10 - 12 MODE       
00001A7C                          1009                      ** BITS 13 - 16 REGISTER
00001A7C  103C 000E               1010                      MOVE.B  #14,D0
00001A80  4E4F                    1011                      TRAP    #15 
00001A82  6000 F869               1012                      BRA     EXIT
00001A86                          1013                    
00001A86                          1014  MOVEM      
00001A86                          1015                     
00001A86                          1016                      ** SIZE SUBROUTINE
00001A86                          1017                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001A86  C47C 0040               1018                      AND #%0000000001000000,D2 
00001A8A                          1019                      * WORD
00001A8A  B4BC 00000040           1020                      CMP.L   #%0000000001000000,D2
00001A90  4EB9 00001AA6           1021                      JSR     MOVEM_W 
00001A96                          1022                      *LONG
00001A96  B4BC 00000040           1023                      CMP.L   #%0000000001000000,D2 
00001A9C                          1024                     ** JSR     MOVEM_L
00001A9C  103C 000E               1025                      MOVE.B  #14,D0
00001AA0  4E4F                    1026                      TRAP    #15
00001AA2  6000 F849               1027                      BRA     EXIT 
00001AA6                          1028                      
00001AA6                          1029  MOVEM_W 
00001AA6  43F8 1244               1030                       LEA     MOVEM_disp,A1
00001AAA                          1031                      * PRINT MOVEM
00001AAA  103C 000E               1032                       MOVE.B  #14,D0
00001AAE  4E4F                    1033                       TRAP    #15
00001AB0                          1034          
00001AB0                          1035                      * PRINT WORD PORTION
00001AB0  41F8 12DB               1036                       LEA     size_w, A0
00001AB4  103C 000E               1037                       MOVE.B  #14,D0
00001AB8  4E4F                    1038                       TRAP    #15 
00001ABA                          1039          
00001ABA  6000 F831               1040                       BRA     EXIT 
00001ABE                          1041       
00001ABE                          1042     
00001ABE                          1043  COPY_OPCODE 
00001ABE                          1044                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001ABE  4242                    1045                       CLR    D2  
00001AC0  3405                    1046                       MOVE.W D5,D2 
00001AC2  4E75                    1047                       RTS  
00001AC4                          1048  
00001AC4                          1049  PRINT_ADDRESS     
00001AC4  4242                    1050                   CLR         D2
00001AC6  143C 0010               1051                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001ACA  220A                    1052                   MOVE.L      A2,D1        
00001ACC  103C 000F               1053                   MOVE.B      #15,D0          
00001AD0  4E4F                    1054                   TRAP        #15            
00001AD2  1CFC 0020               1055                   MOVE.B      #' ', (A6)+
00001AD6  1CFC 0020               1056                   MOVE.B      #' ', (A6)+
00001ADA  1CFC 0020               1057                   MOVE.B      #' ', (A6)+
00001ADE  1CFC 0020               1058                   MOVE.B      #' ', (A6)+
00001AE2  4E75                    1059                   RTS     
00001AE4                          1060  PRINT_BUFFER    
00001AE4  1CFC 0000               1061                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001AE8  43F9 00001C40           1062                 LEA      BUFFER, A1
00001AEE  303C 000E               1063                 MOVE.W   #14,D0
00001AF2  4E4F                    1064                 TRAP     #15
00001AF4  43F8 121F               1065                 LEA     linebreak,A1            *appends line at the end of the user input
00001AF8  103C 000E               1066                 MOVE.B  #14,D0
00001AFC  4E4F                    1067                 TRAP    #15
00001AFE  4E75                    1068                 RTS  
00001B00                          1069  
00001B00                          1070  PRINT_DEREF_ADDRESS
00001B00  1CFC 0000               1071                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B04  43F9 00001C40           1072                 LEA      BUFFER, A1
00001B0A  303C 000E               1073                 MOVE.W   #14,D0
00001B0E  4E4F                    1074                 TRAP     #15
00001B10  4DF9 00001C40           1075                 LEA      BUFFER, A6
00001B16  4242                    1076                 CLR         D2
00001B18  143C 0010               1077                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B1C  3212                    1078                 MOVE.W      (A2),D1        // PRINT INVALID HEX OPCODE        
00001B1E  103C 000F               1079                 MOVE.B      #15,D0          
00001B22  4E4F                    1080                 TRAP        #15 
00001B24  4E75                    1081                 RTS
00001B26                          1082   
00001B26                          1083                     
00001B26                          1084  ****************************
00001B26                          1085  
00001B26                          1086                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001B26                          1087                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001B26                          1088                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001B26                          1089  GETSIZE_ADD
00001B26  4EB8 1930               1090              JSR     bits8to10
00001B2A  B67C 0000               1091              CMP     #%000,D3
00001B2E  6600 0010               1092              BNE     ADD_NOTBYTE
00001B32  4EB9 00001C10           1093              JSR     SIZEISBYTE
00001B38  3C3C 0001               1094              MOVE    #1,D6
00001B3C  4243                    1095              CLR     D3
00001B3E  4E75                    1096              RTS
00001B40                          1097          
00001B40                          1098  ADD_NOTBYTE 
00001B40  B67C 0001               1099              CMP     #%001,D3
00001B44  6600 0010               1100              BNE     ADD_NOTWORD
00001B48  4EB9 00001C20           1101              JSR     SIZEISWORD
00001B4E  3C3C 0001               1102              MOVE    #1,D6
00001B52  4243                    1103              CLR     D3
00001B54  4E75                    1104              RTS
00001B56                          1105              
00001B56                          1106  ADD_NOTWORD
00001B56  B67C 0002               1107              CMP     #%010,D3
00001B5A  6600 0010               1108              BNE     ADD_NOTLEFT
00001B5E  4EB9 00001C30           1109              JSR     SIZEISLONG
00001B64  3C3C 0001               1110              MOVE    #1,D6
00001B68  4243                    1111              CLR     D3
00001B6A  4E75                    1112              RTS
00001B6C                          1113              
00001B6C                          1114  ADD_NOTLEFT     ;check other direction
00001B6C  B67C 0004               1115              CMP     #%100,D3
00001B70  6600 0010               1116              BNE     ADD_NOTRIGHTBYTE
00001B74  4EB9 00001C10           1117              JSR     SIZEISBYTE
00001B7A  3C3C 0002               1118              MOVE    #2,D6
00001B7E  4243                    1119              CLR     D3
00001B80  4E75                    1120              RTS
00001B82                          1121              
00001B82                          1122  ADD_NOTRIGHTBYTE
00001B82  B67C 0005               1123              CMP     #%101,D3
00001B86  6600 0010               1124              BNE     ADD_NOTRIGHTWORD
00001B8A  4EB9 00001C20           1125              JSR     SIZEISWORD
00001B90  3C3C 0002               1126              MOVE    #2,D6
00001B94  4243                    1127              CLR     D3
00001B96  4E75                    1128              RTS
00001B98                          1129  
00001B98                          1130  ADD_NOTRIGHTWORD
00001B98  B67C 0006               1131              CMP     #%110,D3
00001B9C  6600 FE88               1132              BNE     INVALID_EA
00001BA0  4EB9 00001C30           1133              JSR     SIZEISLONG
00001BA6  3C3C 0002               1134              MOVE    #2,D6
00001BAA  4243                    1135              CLR     D3
00001BAC  4E75                    1136              RTS 
00001BAE                          1137                               
00001BAE                          1138                       
00001BAE                          1139                       
00001BAE                          1140  *****************************                  
00001BAE                          1141  GETSIZE_ADDI
00001BAE  4EB8 1930               1142          JSR     bits8to10
00001BB2  B67C 0000               1143          CMP     #%000,D3
00001BB6  6600 000C               1144          BNE     ADDI_NOTBYTE
00001BBA  4EB9 00001C10           1145          JSR     SIZEISBYTE
00001BC0  4243                    1146          CLR     D3
00001BC2  4E75                    1147          RTS
00001BC4                          1148  
00001BC4                          1149  ADDI_NOTBYTE
00001BC4  B67C 0001               1150          CMP     #%001,D3
00001BC8  6600 000C               1151          BNE     ADDI_NOTWORD
00001BCC  4EB9 00001C20           1152          JSR     SIZEISWORD
00001BD2  4243                    1153          CLR     D3
00001BD4  4E75                    1154          RTS
00001BD6                          1155          
00001BD6                          1156  ADDI_NOTWORD
00001BD6  B67C 0002               1157          CMP     #%010,D3
00001BDA  6600 FE4A               1158          BNE     INVALID_EA
00001BDE  4EB9 00001C30           1159          JSR     SIZEISLONG
00001BE4  4243                    1160          CLR     D3
00001BE6  4E75                    1161          RTS
00001BE8                          1162          
00001BE8                          1163                              
00001BE8                          1164                       
00001BE8                          1165  ********************************          
00001BE8                          1166                       
00001BE8                          1167                       
00001BE8                          1168  ********************************                     
00001BE8                          1169  GETSIZE_ADDA
00001BE8  4EB8 1930               1170          JSR     bits8to10
00001BEC  B67C 0003               1171          CMP     #%011,D3
00001BF0  6600 000C               1172          BNE     ADDA_NOTWORD
00001BF4  4EB9 00001C20           1173          JSR     SIZEISWORD
00001BFA  4243                    1174          CLR     D3
00001BFC  4E75                    1175          RTS
00001BFE                          1176          
00001BFE                          1177  
00001BFE                          1178          
00001BFE                          1179  ADDA_NOTWORD
00001BFE  B67C 0007               1180          CMP     #%111,D3
00001C02  6600 FE22               1181          BNE     INVALID_EA
00001C06  4EB9 00001C30           1182          JSR     SIZEISLONG
00001C0C  4243                    1183          CLR     D3
00001C0E  4E75                    1184          RTS
00001C10                          1185  **********************************        
00001C10                          1186      
00001C10                          1187  SIZEISBYTE
00001C10  1CFC 002E               1188         MOVE.B   #'.',(A6)+
00001C14  1CFC 0042               1189         MOVE.B   #'B',(A6)+
00001C18  1CFC 0020               1190         MOVE.B   #' ',(A6)+
00001C1C  4243                    1191         CLR      D3
00001C1E  4E75                    1192         RTS
00001C20                          1193  
00001C20                          1194  SIZEISWORD    
00001C20  1CFC 002E               1195         MOVE.B   #'.',(A6)+
00001C24  1CFC 0057               1196         MOVE.B   #'W',(A6)+
00001C28  1CFC 0020               1197         MOVE.B   #' ',(A6)+
00001C2C  4243                    1198         CLR      D3
00001C2E  4E75                    1199         RTS
00001C30                          1200                  
00001C30                          1201  SIZEISLONG    
00001C30  1CFC 002E               1202         MOVE.B   #'.',(A6)+
00001C34  1CFC 004C               1203         MOVE.B   #'L',(A6)+
00001C38  1CFC 0020               1204         MOVE.B   #' ',(A6)+
00001C3C                          1205  
00001C3C  4243                    1206         CLR      D3
00001C3E  4E75                    1207         RTS
00001C40                          1208                  
00001C40                          1209       
00001C40= 00000001                1210  BUFFER DC.L 1     
00001C44                          1211      INCLUDE 'helpers.x68'
00001C44  1019                    1212  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001C46  4EB9 00001C5E           1213                          JSR     sub_breakDownAs     *breaks down ASCII code
00001C4C  D280                    1214                          ADD.L   D0,D1               *load that char into D1
00001C4E  0C11 0000               1215                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001C52  6700 0006               1216                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001C56  E989                    1217                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001C58  60EA                    1218                          BRA     sub_AsToHeLoop      *loops through again
00001C5A                          1219                          
00001C5A  2E01                    1220  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001C5C  4E75                    1221                          RTS
00001C5E  B03C 0030               1222  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001C62  6D00 002A               1223                          BLT     as_ERROR                        
00001C66                          1224                          
00001C66  B03C 0039               1225                          CMP.B    #$39,D0            *is it an A-F letter?
00001C6A  6E00 000C               1226                          BGT     as_LETTER
00001C6E                          1227                          
00001C6E  6000 0002               1228                          BRA     as_NUMBER
00001C72                          1229                                                 
00001C72  0400 0030               1230  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001C76  4E75                    1231                          RTS
00001C78                          1232                          
00001C78  B03C 0041               1233  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001C7C  6D00 0010               1234                          BLT     as_ERROR
00001C80                          1235                          
00001C80  B03C 0046               1236                          CMP.B     #$46, D0
00001C84  6E00 0008               1237                          BGT     as_ERROR
00001C88                          1238                          
00001C88  0400 0037               1239                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001C8C  4E75                    1240                          RTS
00001C8E                          1241                          
00001C8E  43F9 65727200           1242  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001C94  103C 000D               1243                          MOVE.B  #13,D0
00001C98  4E4F                    1244                          TRAP    #15  
00001C9A                          1245  sub_StartReadingData    
00001C9A  0801 0000               1246                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001C9E  6600 0006               1247                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001CA2                          1248                          
00001CA2  7E00                    1249                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001CA4  4E75                    1250  srdFinish               RTS
00001CA6                          1251  
00001CA6  43F8 1168               1252  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CAA  103C 000E               1253                          MOVE.B  #14,D0
00001CAE  4E4F                    1254                          TRAP    #15
00001CB0                          1255                          
00001CB0  7E01                    1256                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CB2  60F0                    1257                          BRA     srdFinish
00001CB4                          1258  sub_EndReadingData  
00001CB4  0801 0000               1259                          BTST    #0,D1               *checks if LSB is 1, 
00001CB8  6600 0018               1260                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001CBC                          1261                          
00001CBC  B5CB                    1262                          CMP.L   A3,A2               *end address must be greater than start address
00001CBE  6E00 0004               1263                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001CC2                          1264  
00001CC2  4E75                    1265  erdFinish               RTS
00001CC4                          1266  
00001CC4  43F8 118F               1267  erdFailAddrOrder        LEA     addr_order_check,A1
00001CC8  103C 000E               1268                          MOVE.B  #14,D0
00001CCC  4E4F                    1269                          TRAP    #15
00001CCE                          1270                          
00001CCE  7E01                    1271                          MOVE.L  #1,D7
00001CD0  60F0                    1272                          BRA     erdFinish
00001CD2                          1273  
00001CD2  43F8 1168               1274  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CD6  103C 000E               1275                          MOVE.B  #14,D0
00001CDA  4E4F                    1276                          TRAP    #15
00001CDC                          1277                          
00001CDC  7E01                    1278                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CDE  60E2                    1279                          BRA     erdFinish
00001CE0                          1280                          
00001CE0                          1281  
00001CE0                          1282  
00001CE0                          1283  
00001CE0                          1284  
00001CE0                          1285  
00001CE0                          1286  
00001CE0                          1287  
00001CE0                          1288  
00001CE0                          1289  -------------------- end include --------------------
00001CE0                          1290      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     19E4
ABSOLUTE_LONG_BUFFER  1A14
ABSOLUTE_WORD_BUFFER  1A02
ADD                 149C
ADDA                1476
ADDA_BUFFER         1480
ADDA_DISP           124E
ADDA_NOTWORD        1BFE
ADDI                1530
ADDI_BUFFER         15B8
ADDI_DES            1554
ADDI_DISP           1253
ADDI_NOTBYTE        1BC4
ADDI_NOTWORD        1BD6
ADDI_SRC            1546
ADDQ                16BE
ADDQ_BUFFER         16C8
ADDQ_DISP           1258
ADDRESS_BUFFER      19DE
ADDR_ODDBIT_MSG     1168
ADDR_ORDER_CHECK    118F
ADD_BUFFER          14A4
ADD_DEST            150E
ADD_DIRECTION_REVERSED  14D4
ADD_DISP            124A
ADD_NOTBYTE         1B40
ADD_NOTLEFT         1B6C
ADD_NOTRIGHTBYTE    1B82
ADD_NOTRIGHTWORD    1B98
ADD_NOTWORD         1B56
ADD_SRC             14EA
AND                 179E
AND_BUFFER          17A8
AND_DISP            1273
ASL                 17DA
ASL_BUFFER          17E4
ASL_DISP            1282
ASR                 17BE
ASR_BUFFER          17C8
ASR_DISP            1286
AS_ERROR            1C8E
AS_LETTER           1C78
AS_NUMBER           1C72
ATHENDLOOP          1C5A
BACKSLASHSIGH       12D0
BCC_DISP            129A
BGT_DISP            129E
BITS11TO13          1942
BITS11TO16          1964
BITS14TO16          1954
BITS1TO10           1974
BITS5TO7            190A
BITS5TO8            191E
BITS8TO10           1930
BLE_DISP            12A2
BUFFER              1C40
CLOSEPAREN          12D4
CLR_DISP            126F
CMP                 175E
CMP_BUFFER          1768
CODE0000            1352
CODE0001            1366
CODE0010            136C
CODE0011            1372
CODE0100            1378
CODE0101            13AC
CODE0110            13B2
CODE0111            13B8
CODE1000            13BE
CODE1001            13D0
CODE1010            13D6
CODE1011            13DC
CODE1100            13E2
CODE1101            13F4
CODE1110            1440
CODE1111            1470
COMMASIGN           12CE
COPY_OPCODE         1ABE
CR                  D
DIVU                1702
DIVU_BUFFER         170C
DIVU_DISP           1266
DOLLARSIGN          12C8
DONE                1908
ENDTEST_MSG         11E3
ERDFAILADDRODDB     1CD2
ERDFAILADDRORDER    1CC4
ERDFINISH           1CC2
EXIT                12ED
FINISHER            18DA
FIVE                18AE
FOUR                189E
GETSIZE_ADD         1B26
GETSIZE_ADDA        1BE8
GETSIZE_ADDI        1BAE
HEXATABLE           12A6
INPUT_BUFFER        12E2
INSERT_NUM          185E
INVALIDEA_DISP      1227
INVALID_DISP        1222
INVALID_EA          1A26
INVALID_OP          1A2A
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            182E
JMP_TABLE           12F2
JSR                 1A60
JSR_DISP            1292
LEA                 15D4
LEA_BUFFER          15F6
LEA_DEST            169A
LEA_DISP            126B
LEA_SRC             1608
LF                  A
LINEBREAK           121F
LINECOUNT           12E1
LOCATION_ENDDATA    12E8
LOCATION_END_MSG    114B
LOCATION_STARTDATA  12E4
LOCATION_START_MSG  112C
LSL                 17F6
LSL_BUFFER          1800
LSL_DISP            127A
LSR                 1812
LSR_BUFFER          181C
LSR_DISP            127E
MAIN_LOOP           108E
MINUSSIGN           12CC
MODE000             1986
MODE001             198C
MODE010             1994
MODE011             199E
MODE100             19A8
MODE101             19B6
MODE110             19C0
MODE111             19CA
MOVEA_DISP          1238
MOVEM               1A86
MOVEM_DISP          1244
MOVEM_W             1AA6
MOVEQ               16DE
MOVEQ_BUFFER        16E8
MOVEQ_DISP          123E
MOVE_DISP           1233
MULS                177E
MULS_BUFFER         1788
MULS_DISP           1261
NOP                 1A44
NOP_DISP            122F
ONE                 186E
ONEPAREN            18FA
OPENPAREN           12D2
OR                  1722
OR_BUFFER           172C
OR_DISP             1277
PAUSE_MSG           11C9
PLUSSIGN            12CA
POSTINCR            18E8
POUNDSIGN           12C6
PRINT_ADDRESS       1AC4
PRINT_BUFFER        1AE4
PRINT_DEREF_ADDRESS  1B00
ROL_DISP            128A
ROR_DISP            128E
RTS                 1A52
RTS_DISP            1296
SEVEN               18CE
SIX                 18BE
SIZEISBYTE          1C10
SIZEISLONG          1C30
SIZEISWORD          1C20
SIZE_B              12D8
SIZE_L              12DE
SIZE_W              12DB
SPACE               12D6
SRDFAILADDRODDB     1CA6
SRDFINISH           1CA4
START               1000
SUB                 173E
SUB_ASTOHELOOP      1C44
SUB_BREAKDOWNAS     1C5E
SUB_BUFFER          1748
SUB_DISP            125D
SUB_ENDREADINGDATA  1CB4
SUB_STARTREADINGDATA  1C9A
TABLE_LENGTH        12EC
THREE               188E
TWO                 187E
WELCOME_MSG         10C8
