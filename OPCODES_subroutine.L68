00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 4:05:56 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D4 - MODE
00000000                             3  *** D5 - CURRENT OPCODE
00000000                             4  *** D6 - 
00000000                             5  ***
00000000                             6  
00000000                             7  
00006000                             8  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       9                     ADDQ.B  #$1,D1      
00006002                            10                   
00006002  41F9 0000624E             11                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 00006B52             12                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      13                   CLR.L   D3              *Zero it
00006010                            14                   * TEST OPCODES
00006010                            15                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006010                            16                   ; MOVE.W  #$4E71,D3 * NOP
00006010                            17                   ; MOVE.W  #$4E75,D3 * RTS
00006010                            18                   ; MOVE.W  #$4EB0,D3 * JSR
00006010                            19                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006010                            20                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
00006010                            21                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
00006010                            22                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006010  363C DC1B                 23                   MOVE.W  #$DC1B, D3  * ADD.B (A3)+,D6
00006014                            24                    ; MOVE.W  #$D9A5, D3  * ADD.L D4,-(A5)
00006014                            25                     ; MOVE.W  #$D579, D3  * ADD.W D2,$FF0FF0FF
00006014                            26                   ; MOVE.W    #$5201,D3    *ADDQ
00006014                            27  
00006014                            28                   ; MOVE.W     #$7E70, D3 *MOVEQ
00006014                            29                   ; MOVE.W     #$80C0, D3 *DIVU
00006014                            30                   ; MOVE.W     #$8000, D3 * OR
00006014                            31                   ; MOVE.W        #$9000, D3 * SUB
00006014                            32                   ; MOVE.W        #$B000, D3 * CMP
00006014                            33                   ; MOVE.W        #$C1C0, D3 * MULS
00006014                            34                   ; MOVE.W        #$C000, D3 * AND
00006014                            35                   ; MOVE.W        #$E0F8, D3  *ASR
00006014                            36                   ; MOVE.W        #$E1E2, D3  *ASL
00006014                            37                   ;MOVE.W        #$E393, D3  *LSL
00006014                            38                   ;MOVE.W        #$E2DC, D3  *LSR
00006014                            39  
00006014                            40                   
00006014  3A03                      41                   MOVE.W  D3,D5
00006016  183C 000C                 42                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601A                            43  
0000601A                            44             
0000601A  E86B                      45                   LSR.W   D4,D3       *Move the bits
0000601C  C6FC 0006                 46                   MULU    #6,D3       *Form offset     
00006020  4EB0 3000                 47                   JSR     0(A0,D3)   *Jump indirect with index
00006024                            48                  
00006024                            49      INCLUDE 'definitions.x68'
00006024                            50  
00006024  =0000000D                 51  CR              EQU     $0D         carriage return
00006024  =0000000A                 52  LF              EQU     $0A         line feed
00006024= 43 53 53 20 34 32 ...     53  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
00006048= 42 79 20 54 65 61 ...     54                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00006088= 45 6E 74 65 72 20 ...     55  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060A7= 45 6E 74 65 72 20 ...     56  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C4= 41 64 64 72 65 73 ...     57  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EB= 45 6E 64 69 6E 67 ...     58  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006125= 50 72 65 73 73 20 ...     59  pause_msg           DC.B    'Press enter to continue!',CR,LF
0000613F= 52 65 61 63 68 65 ...     60  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615A= 54 72 79 20 61 6E ...     61                      DC.B    'Try another location? (yes/no): ',0
0000617B= 0D 0A 00                  62  linebreak           DC.B    CR,LF,0
0000617E                            63                      
0000617E= 44 41 54 41 00            64  Invalid_disp        DC.B    'DATA',0
00006183= 57 52 4F 4E 47 45 ...     65  InvalidEA_disp      DC.B    'WRONGEA',0
0000618B                            66  
0000618B= 4E 4F 50 00               67  NOP_disp            DC.B    'NOP',0
0000618F= 4D 4F 56 45 00            68  MOVE_disp           DC.B    'MOVE',0
00006194= 4D 4F 56 45 41 00         69  MOVEA_disp          DC.B    'MOVEA',0
0000619A= 4D 4F 56 45 51 00         70  MOVEQ_disp          DC.B    'MOVEQ',0
000061A0= 4D 4F 56 45 4D 00         71  MOVEM_disp          DC.B    'MOVEM',0
000061A6= 41 44 44 00               72  ADD_disp            DC.B    'ADD',0
000061AA= 41 44 44 41 00            73  ADDA_disp           DC.B    'ADDA',0
000061AF= 41 44 44 49 00            74  ADDI_disp           DC.B    'ADDI',0
000061B4= 41 44 44 51 00            75  ADDQ_disp           DC.B    'ADDQ',0
000061B9= 53 55 42 00               76  SUB_disp            DC.B    'SUB',0
000061BD= 4D 55 4C 53 00            77  MULS_disp           DC.B    'MULS',0
000061C2= 44 49 56 55 00            78  DIVU_disp           DC.B    'DIVU',0
000061C7= 4C 45 41 00               79  LEA_disp            DC.B    'LEA',0
000061CB= 43 4C 52 00               80  CLR_disp            DC.B    'CLR',0
000061CF= 41 4E 44 00               81  AND_disp            DC.B    'AND',0
000061D3= 4F 52 00                  82  OR_disp             DC.B    'OR',0
000061D6= 4C 53 4C 00               83  LSL_disp            DC.B    'LSL',0
000061DA= 4C 53 52 00               84  LSR_disp            DC.B    'LSR',0
000061DE= 41 53 4C 00               85  ASL_disp            DC.B    'ASL',0
000061E2= 41 53 52 00               86  ASR_disp            DC.B    'ASR',0
000061E6= 52 4F 4C 00               87  ROL_disp            DC.B    'ROL',0
000061EA= 52 4F 52 00               88  ROR_disp            DC.B    'ROR',0
000061EE= 4A 53 52 00               89  JSR_disp            DC.B    'JSR',0
000061F2= 52 54 53 00               90  RTS_disp            DC.B    'RTS',0
000061F6= 42 43 43 00               91  BCC_disp            DC.B    'BCC',0
000061FA= 42 47 54 00               92  BGT_disp            DC.B    'BGT',0    
000061FE= 42 4C 45 00               93  BLE_disp            DC.b    'BLE',0
00006202                            94  
00006202                            95  
00006202= 30 00                     96  hexaTable               DC.B    '0',0
00006204= 31 00                     97                          DC.B    '1',0
00006206= 32 00                     98                          DC.B    '2',0
00006208= 33 00                     99                          DC.B    '3',0
0000620A= 34 00                    100                          DC.B    '4',0
0000620C= 35 00                    101                          DC.B    '5',0
0000620E= 36 00                    102                          DC.B    '6',0
00006210= 37 00                    103                          DC.B    '7',0
00006212= 38 00                    104                          DC.B    '8',0
00006214= 39 00                    105                          DC.B    '9',0
00006216= 41 00                    106                          DC.B    'A',0
00006218= 42 00                    107                          DC.B    'B',0
0000621A= 43 00                    108                          DC.B    'C',0
0000621C= 44 00                    109                          DC.B    'D',0
0000621E= 45 00                    110                          DC.B    'E',0
00006220= 46 00                    111                          DC.B    'F',0
00006222= 23 00                    112  poundsign               DC.B    '#',0
00006224= 24 00                    113  dollarsign              DC.B    '$',0
00006226= 2B 00                    114  plussign                DC.B    '+',0
00006228= 2D 00                    115  minussign               DC.B    '-',0
0000622A= 2C 00                    116  commasign               DC.B    ',',0
0000622C= 2F 00                    117  backslashsigh           DC.B    '/',0
0000622E= 28 00                    118  openparen               DC.B    '(',0
00006230= 29 00                    119  closeparen              DC.B    ')',0
00006232= 20 00                    120  space                   DC.B    ' ',0   
00006234= 2E 42 00                 121  size_b                  DC.B    '.B',0
00006237= 2E 57 00                 122  size_w                  DC.B    '.W',0        
0000623A= 2E 4C 00                 123  size_l                  DC.B    '.L',0
0000623D                           124  
0000623D                           125  linecount               DS.B    1       *storeage for lines on a screen
0000623E= 01                       126  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006240                           127  location_startData      DS.L    1       *location on where to start reading data
00006244                           128  location_endData        DS.L    1       *location on where to end reading data
00006248                           129  table_length            DS.B    1       *Number of spaces in the table to print to console
00006249                           130  
00006249                           131  
00006249                           132  -------------------- end include --------------------
00006249                           133             
00006249                           134  EXIT                 
0000624A  FFFF FFFF                135         SIMHALT   
0000624E                           136  
0000624E                           137  
0000624E                           138  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
0000624E  4EF9 000062AE            139  jmp_table      JMP         code0000
00006254                           140                  *ADDI
00006254                           141  
00006254  4EF9 000062C2            142                 JMP         code0001
0000625A                           143  
0000625A  4EF9 000062C6            144                 JMP         code0010
00006260                           145  
00006260  4EF9 000062CA            146                 JMP         code0011
00006266                           147  
00006266  4EF9 000062CE            148                 JMP         code0100
0000626C                           149                             
0000626C  4EF9 00006302            150                 JMP         code0101
00006272                           151                 * ADDQ
00006272                           152                  
00006272                           153        
00006272  4EF9 00006308            154                 JMP         code0110
00006278                           155                 * BCC
00006278                           156                 * BGT
00006278                           157                 * BLE
00006278                           158                 
00006278  4EF9 0000630C            159                 JMP         code0111
0000627E                           160                 * MOVEQ
0000627E                           161  
0000627E  4EF9 00006312            162                 JMP         code1000
00006284                           163                 * DIVU
00006284                           164                 * OR
00006284                           165  
00006284  4EF9 00006324            166                 JMP         code1001
0000628A                           167                  *SUB
0000628A  4EF9 0000632A            168                 JMP         code1010
00006290                           169                 
00006290  4EF9 0000632E            170                 JMP         code1011
00006296                           171                 * CMP
00006296                           172                 
00006296  4EF9 00006334            173                 JMP         code1100
0000629C                           174                 * MULS
0000629C                           175                 * AND
0000629C                           176          
0000629C  4EF9 00006346            177                 JMP         code1101
000062A2                           178                 *ADD
000062A2                           179                 *ADDA
000062A2  4EF9 00006392            180                 JMP         code1110
000062A8                           181                 * ASR
000062A8                           182                 * ASL
000062A8                           183                 * LSL
000062A8                           184                 * LSR
000062A8                           185                 * ROL
000062A8                           186                 * ROR
000062A8                           187  
000062A8  4EF9 000063C2            188                 JMP         code1111
000062AE                           189  
000062AE                           190  
000062AE                           191  code0000      
000062AE  4EB9 000068A0            192                 JSR          bits5to8 // RETURNS INTO D3
000062B4  B6BC 00000006            193                 CMP.L        #%0110, D3
000062BA  6600 06F8                194                 BNE          INVALID_OP
000062BE  6000 01E2                195                 BRA          ADDI  
000062C2                           196  
000062C2  4E72 2700                197  code0001       STOP        #$2700
000062C6                           198  
000062C6  4E72 2700                199  code0010       STOP        #$2700
000062CA                           200  
000062CA  4E72 2700                201  code0011       STOP        #$2700
000062CE                           202  
000062CE                           203  code0100       
000062CE  4EB9 00006A32            204                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D4                           205                  
000062D4                           206                 *NOP
000062D4  C47C 0FFF                207                 AND     #%0000111111111111,D2
000062D8  B4BC 00000E71            208                 CMP.L   #%000111001110001, D2
000062DE  6700 06D8                209                 BEQ     NOP
000062E2                           210                 
000062E2                           211                 *RTS
000062E2  C47C 0FFF                212                 AND     #%0000111111111111,D2
000062E6  B4BC 00000E75            213                 CMP.L   #%0000111001110101, D2
000062EC  6700 06D8                214                 BEQ     RTS
000062F0                           215  
000062F0                           216                 *JSR
000062F0  C47C 0FC0                217                 AND     #%0000111111000000,D2
000062F4  B4BC 00000E80            218                 CMP.L   #%0000111010000000,D2
000062FA  6700 06D8                219                 BEQ     JSR
000062FE                           220                 
000062FE                           221                 * MOVEM
000062FE                           222                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000062FE                           223                ** AND     #%0000111110000000,D2
000062FE                           224                 * DATA REGISTER
000062FE                           225                ** CMP.L   #%0000100010000000, D2
000062FE                           226                 ** JSR      MOVEM
000062FE                           227                 * ADDRESS REGISTER (DECREMENTED)
000062FE                           228                 ** CMP.L  #%0000110010000000, D2
000062FE                           229                 ** JSR    MOVEM
000062FE                           230                  
000062FE                           231                  ** TO DO: BRANCH IF INVALID OPCODE
000062FE                           232                  *LEA - if it's not the top codes, it's LEA
000062FE  6000 0246                233                  BRA     LEA
00006302                           234  code0101      
00006302                           235  
00006302  4EB9 00006640            236                  JSR   ADDQ
00006308                           237  
00006308  4E72 2700                238  code0110        STOP        #$2700
0000630C                           239  
0000630C                           240  code0111       
0000630C  4EB9 00006660            241                  JSR       MOVEQ
00006312                           242  
00006312                           243  code1000      
00006312  4EB9 000068B2            244                  JSR        bits8to10
00006318  B67C 0003                245                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
0000631C  6700 0366                246                  BEQ        DIVU
00006320  6000 0382                247                  BRA        OR       ** OTHERWISE OR
00006324                           248                  
00006324                           249  
00006324                           250  code1001       
00006324  4EB9 000066C0            251                 JSR         SUB
0000632A  4E72 2700                252  code1010       STOP        #$2700
0000632E                           253  
0000632E                           254  code1011       
0000632E  4EB9 000066E0            255                 JSR         CMP
00006334                           256  
00006334                           257  code1100      
00006334  4EB9 000068B2            258                  JSR        bits8to10
0000633A  B67C 0007                259                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
0000633E  6700 03C0                260                  BEQ        MULS
00006342  6000 03DC                261                  BRA        AND       ** OTHERWISE AND
00006346                           262  
00006346                           263  code1101       
00006346  4EB9 00006A32            264                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000634C                           265                 *ADDA
0000634C  4EB9 000068B2            266                 JSR      bits8to10
00006352  B67C 0003                267                 CMP      #%011, D3  ** WORD
00006356  6700 006E                268                 BEQ      ADDA
0000635A  B67C 0007                269                 CMP      #%111, D3   ** LONG
0000635E  6700 0066                270                 BEQ      ADDA
00006362                           271                 
00006362                           272                 *ADD
00006362  B67C 0000                273                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00006366  6700 0084                274                 BEQ      ADD
0000636A  B67C 0001                275                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000636E  6700 007C                276                 BEQ      ADD
00006372  B67C 0002                277                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00006376  6700 0074                278                 BEQ      ADD
0000637A  B67C 0004                279                 CMP      #%100, D3   ** BYTE TO EA
0000637E  6700 006C                280                 BEQ      ADD
00006382  B67C 0005                281                 CMP      #%101, D3   ** WORD TO EA
00006386  6700 0064                282                 BEQ      ADD
0000638A  B67C 0006                283                 CMP      #%110, D3   ** LONG TO EA
0000638E  6700 005C                284                 BEQ      ADD
00006392                           285                 
00006392                           286  
00006392                           287  code1110       
00006392                           288                  * ASR
00006392  4EB9 000068F6            289                  JSR     bits1to10
00006398  B67C 0383                290                  CMP     #%1110000011,D3
0000639C  6700 03A2                291                  BEQ     ASR
000063A0                           292                  
000063A0                           293                  * ASL
000063A0  B67C 0387                294                  CMP     #%1110000111,D3
000063A4  6700 03B6                295                  BEQ     ASL
000063A8                           296                  
000063A8                           297                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
000063A8                           298                  * LSL
000063A8  4244                     299                  CLR     D4
000063AA  2803                     300                  MOVE.L  D3,D4
000063AC  C8BC 00A98671            301                  AND.L   #11110001,D4
000063B2  B87C 01C7                302                  CMP     #%111000111,D4
000063B6  6700 03C0                303                  BEQ     LSL
000063BA                           304                  
000063BA                           305                  * LSR
000063BA  B67C 038B                306                  CMP     #%1110001011,D3
000063BE  6700 03D4                307                  BEQ     LSR
000063C2                           308                  
000063C2                           309                  * ROL
000063C2                           310                  
000063C2                           311                  * ROR
000063C2                           312  
000063C2  4E72 2700                313  code1111       STOP        #$2700
000063C6                           314  
000063C6                           315  ADDA    
000063C6  4EB9 000063D0            316                 JSR     ADDA_BUFFER
000063CC  6000 05CE                317                 BRA     PRINT_BUFFER
000063D0                           318                  
000063D0                           319  ADDA_BUFFER
000063D0  1CFC 0041                320                 MOVE.B   #'A',(A6)+
000063D4  1CFC 0044                321                 MOVE.B   #'D', (A6)+  
000063D8  1CFC 0044                322                 MOVE.B   #'D', (A6)+
000063DC  1CFC 0041                323                 MOVE.B   #'A', (A6)+
000063E0  4EB9 00006AFA            324                 JSR      GETSIZE_ADDA
000063E6  1CFC 0020                325                 MOVE.B   #' ', (A6)+
000063EA  4E75                     326                 RTS
000063EC                           327                 
000063EC                           328                 
000063EC                           329                 
000063EC                           330  *********************************************               
000063EC                           331  ADD    
000063EC  4EB9 00006440            332                 JSR     ADD_BUFFER
000063F2                           333                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000063F2  1CFC 0020                334                 MOVE.B   #' ', (A6)+
000063F6  1CFC 0020                335                 MOVE.B   #' ', (A6)+
000063FA  1CFC 0020                336                 MOVE.B   #' ', (A6)+
000063FE  1CFC 0020                337                 MOVE.B   #' ', (A6)+
00006402  1CFC 0020                338                 MOVE.B   #' ', (A6)+
00006406                           339                 
00006406  BC7C 0001                340                 CMP      #1,D6
0000640A  6600 001A                341                 BNE      ADD_DIRECTION_REVERSED
0000640E  4EB9 0000645C            342                 JSR      ADD_SRC
00006414  1CFC 002C                343                 MOVE.B   #',', (A6)+
00006418  1CFC 0020                344                 MOVE.B   #' ', (A6)+
0000641C  4EB9 00006480            345                 JSR      ADD_DEST
00006422  6000 0030                346                 BRA      ADD_DONE
00006426                           347                 
00006426                           348                 
00006426                           349  ADD_DIRECTION_REVERSED
00006426                           350  
00006426  4246                     351                 CLR      D6
00006428  4EB9 00006480            352                 JSR      ADD_DEST
0000642E  1CFC 002C                353                 MOVE.B   #',', (A6)+
00006432  1CFC 0020                354                 MOVE.B   #' ', (A6)+
00006436  4EB9 0000645C            355                 JSR      ADD_SRC
0000643C  6000 0016                356                 BRA      ADD_DONE              
00006440                           357                 
00006440                           358                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006440                           359                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006440                           360  
00006440                           361                  
00006440                           362  ADD_BUFFER
00006440  1CFC 0041                363                 MOVE.B   #'A',(A6)+
00006444  1CFC 0044                364                 MOVE.B   #'D', (A6)+  
00006448  1CFC 0044                365                 MOVE.B   #'D', (A6)+
0000644C  4EB9 00006A38            366                 JSR      GETSIZE_ADD
00006452  4E75                     367                 RTS
00006454                           368                 
00006454                           369  
00006454                           370                 
00006454                           371  ADD_DONE       
00006454  4246                     372                 CLR      D6
00006456  4EB9 0000699C            373                 JSR     PRINT_BUFFER
0000645C                           374  
0000645C                           375                  
0000645C                           376  
0000645C                           377  ADD_SRC
0000645C                           378  
0000645C  4EB9 000068C4            379                  JSR    bits11to13
00006462  3803                     380                  MOVE   D3,D4
00006464  41F9 000067B0            381                  LEA     jmp_mode,A0    *Index into the table
0000646A  C6FC 0006                382                  MULU   #6,D3
0000646E  4EB0 3000                383                  JSR    0(A0,D3)     
00006472  4EB9 000068D6            384                  JSR    bits14to16
00006478  4EB9 000067E0            385                  JSR    insert_num
0000647E  4E75                     386                  RTS
00006480                           387  
00006480                           388  
00006480                           389  
00006480                           390  
00006480                           391  
00006480                           392  ADD_DEST
00006480  363C 0000                393                  MOVE.W #%000,D3     ;Can only have a data register.
00006484  3803                     394                  MOVE   D3,D4
00006486  41F9 000067B0            395                  LEA     jmp_mode,A0    *Index into the table
0000648C  C6FC 0006                396                  MULU    #6,D3       *Form offset     
00006490  4EB0 3000                397                  JSR     0(A0,D3)   *Jump indirect with index
00006494                           398                  
00006494  4EB9 0000688C            399                  JSR     bits5to7
0000649A  4EB9 000067E0            400                  JSR     insert_num
000064A0  4E75                     401                  RTS
000064A2                           402                          
000064A2                           403  ***********************************************************************************************
000064A2                           404  
000064A2                           405  
000064A2                           406  ADDI
000064A2  4EB9 0000652A            407                  JSR     ADDI_BUFFER
000064A8  4EB9 000064B8            408                  JSR     ADDI_SRC
000064AE  4EB9 000064C6            409                  JSR     ADDI_DES
000064B4  6000 04E6                410                  BRA     PRINT_BUFFER
000064B8                           411                  
000064B8                           412  ADDI_SRC                        
000064B8  1CFC 0023                413                  MOVE.B  #'#', (A6)+
000064BC  1CFC 002C                414                  MOVE.B  #',', (A6)+
000064C0  1CFC 0020                415                  MOVE.B  #' ', (A6)+
000064C4  4E75                     416                  RTS
000064C6                           417                    ** TODO: IMPLEMENT THIS IN EA
000064C6                           418                  ** Immediate field—Data immediately following the instruction.
000064C6                           419                  **If size = 00, the data is the low-order byte of the immediate word.
000064C6                           420                  **If size = 01, the data is the entire immediate word.
000064C6                           421                  **If size = 10, the data is the next two immediate words. 
000064C6                           422  ADDI_DES
000064C6                           423                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
000064C6                           424                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
000064C6  4EB9 000068C4            425                 JSR      bits11to13
000064CC  B67C 0001                426                 CMP      #%001, D3 **AN
000064D0  6700 04DE                427                 BEQ      INVALID_EA
000064D4  B67C 0005                428                 CMP      #%101, D3 **COMPLICATED
000064D8  6700 04D6                429                 BEQ      INVALID_EA
000064DC  B67C 0006                430                 CMP      #%110, D3 **COMPLICATED
000064E0  6700 04CE                431                 BEQ      INVALID_EA
000064E4                           432                 
000064E4  4EB9 000068E6            433                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000064EA  B67C 003C                434                 CMP      #%111100,D3 // immediate data
000064EE  6700 04C0                435                 BEQ      INVALID_EA
000064F2  B67C 003A                436                 CMP      #%111010,D3 // complicated
000064F6  6700 04B8                437                 BEQ      INVALID_EA
000064FA  B67C 003B                438                 CMP      #%111011,D3 // complicated
000064FE  6700 04B0                439                 BEQ      INVALID_EA
00006502                           440                 
00006502  4EB9 000068C4            441                 JSR      bits11to13 ** grab bits to jump with\
00006508  3803                     442                 MOVE     D3,D4
0000650A  41F9 000067B0            443                 LEA     jmp_mode,A0    *Index into the table
00006510  C6FC 0006                444                 MULU    #6,D3       *Form offset     
00006514  4EB0 3000                445                 JSR     0(A0,D3)   *Jump indirect with index
00006518                           446                 
00006518  4243                     447                 CLR     D3
0000651A  4EB9 000068D6            448                 JSR     bits14to16
00006520  4EB9 000067E0            449                 JSR     insert_num
00006526  4244                     450                 CLR     D4
00006528                           451                 
00006528  4E75                     452                 RTS
0000652A                           453                 
0000652A                           454                             
0000652A                           455  ADDI_BUFFER
0000652A  1CFC 0041                456                 MOVE.B   #'A',(A6)+
0000652E  1CFC 0044                457                 MOVE.B   #'D', (A6)+  
00006532  1CFC 0044                458                 MOVE.B   #'D', (A6)+
00006536  1CFC 0049                459                 MOVE.B   #'I', (A6)+
0000653A                           460                 
0000653A  4EB9 00006AC0            461                 JSR      GETSIZE_ADDI
00006540                           462                 
00006540                           463                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
00006540                           464                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006540  1CFC 0020                465                 MOVE.B   #' ', (A6)+
00006544  4E75                     466                 RTS
00006546                           467                              
00006546                           468  LEA
00006546  4EB9 000068B2            469                 JSR      bits8to10   // 1 1 1
0000654C  B47C 0007                470                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
00006550  6600 0462                471                 BNE      INVALID_OP
00006554  4EB9 0000656A            472                 JSR      LEA_BUFFER
0000655A  4EB9 0000657C            473                 JSR      LEA_SRC
00006560  4EB9 0000661C            474                 JSR      LEA_DEST
00006566  6000 0434                475                 BRA      PRINT_BUFFER
0000656A                           476                 
0000656A                           477  LEA_BUFFER 
0000656A  1CFC 004C                478                 MOVE.B   #'L',(A6)+
0000656E  1CFC 0045                479                 MOVE.B   #'E', (A6)+  
00006572  1CFC 0041                480                 MOVE.B   #'A', (A6)+
00006576  1CFC 0020                481                 MOVE.B   #' ', (A6)+
0000657A  4E75                     482                 RTS
0000657C                           483            
0000657C                           484  LEA_SRC
0000657C                           485              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
0000657C  4EB9 000068C4            486              JSR      bits11to13  // source mode - D3
00006582  B67C 0000                487              CMP      #%000, D3
00006586  6700 0428                488              BEQ      INVALID_EA
0000658A  B67C 0001                489              CMP      #%001, D3
0000658E  6700 0420                490              BEQ      INVALID_EA
00006592  B67C 0003                491              CMP      #%011, D3
00006596  6700 0418                492              BEQ      INVALID_EA
0000659A  B67C 0004                493              CMP      #%100, D3
0000659E  6700 0410                494              BEQ      INVALID_EA
000065A2  B67C 0005                495              CMP      #%101, D3
000065A6  6700 0408                496              BEQ      INVALID_EA
000065AA  B67C 0006                497              CMP      #%110, D3
000065AE  6700 0400                498              BEQ      INVALID_EA
000065B2                           499  
000065B2                           500              
000065B2                           501              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
000065B2  4EB9 000068D6            502              JSR      bits14to16 // source register - d4
000065B8  B67C 0004                503              CMP      #%100, D3
000065BC  6700 03F2                504              BEQ      INVALID_EA
000065C0  B67C 0002                505              CMP      #%010, D3
000065C4  6700 03EA                506              BEQ      INVALID_EA
000065C8  B67C 0003                507              CMP      #%011, D3
000065CC  6700 03E2                508              BEQ      INVALID_EA
000065D0                           509              
000065D0                           510  
000065D0  4EB9 000068E6            511               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000065D6  B67C 003C                512               CMP      #%111100,D3 // immediate data
000065DA  6700 03D4                513               BEQ      INVALID_EA
000065DE  B67C 003A                514               CMP      #%111010,D3 // complicated
000065E2  6700 03CC                515               BEQ      INVALID_EA
000065E6  B67C 003B                516               CMP      #%111011,D3 // complicated
000065EA  6700 03C4                517               BEQ      INVALID_EA
000065EE                           518     
000065EE  4EB9 000068C4            519               JSR      bits11to13 ** grab mode bits to jump with
000065F4  3803                     520               MOVE    D3,D4
000065F6                           521  
000065F6  41F9 000067B0            522               LEA     jmp_mode,A0    *Index into the table
000065FC  C6FC 0006                523               MULU    #6,D3       *Form offset     
00006600  4EB0 3000                524               JSR     0(A0,D3)   *Jump indirect with index
00006604                           525               
00006604                           526  
00006604  4243                     527               CLR     D3
00006606  4EB9 000068D6            528               JSR     bits14to16
0000660C  4EB9 000067E0            529               JSR     insert_num
00006612                           530               
00006612  1CFC 002C                531               MOVE.B     #',', (A6)+
00006616  1CFC 0020                532               MOVE.B     #' ', (A6)+
0000661A                           533  
0000661A  4E75                     534               RTS
0000661C                           535               
0000661C                           536  LEA_DEST    
0000661C  4244                     537                  CLR     D4
0000661E  41F9 000067B0            538                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00006624  363C 0001                539                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
00006628  3803                     540                  MOVE    D3,D4
0000662A  C6FC 0006                541                  MULU    #6,D3       *Form offset     
0000662E  4EB0 3000                542                  JSR     0(A0,D3)   *Jump indirect with index
00006632                           543                  
00006632  4EB9 0000688C            544                  JSR     bits5to7
00006638  4EB9 000067E0            545                  JSR     insert_num
0000663E                           546                  
0000663E  4E75                     547                  RTS
00006640                           548  
00006640                           549  
00006640                           550  ADDQ
00006640  4EB9 0000664A            551                  JSR     ADDQ_BUFFER
00006646  6000 0354                552                  BRA     PRINT_BUFFER
0000664A                           553  
0000664A                           554  ADDQ_BUFFER
0000664A  1CFC 0041                555                 MOVE.B   #'A',(A6)+
0000664E  1CFC 0044                556                 MOVE.B   #'D', (A6)+  
00006652  1CFC 0044                557                 MOVE.B   #'D', (A6)+
00006656  1CFC 0051                558                 MOVE.B   #'Q', (A6)+
0000665A                           559                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
0000665A                           560                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000665A  1CFC 0020                561                 MOVE.B   #' ', (A6)+
0000665E  4E75                     562                 RTS
00006660                           563                 
00006660                           564  MOVEQ
00006660  4EB9 0000666A            565                  JSR     MOVEQ_BUFFER
00006666  6000 0334                566                  BRA     PRINT_BUFFER
0000666A                           567  
0000666A                           568  MOVEQ_BUFFER
0000666A  1CFC 004D                569                 MOVE.B   #'M',(A6)+
0000666E  1CFC 004F                570                 MOVE.B   #'O', (A6)+  
00006672  1CFC 0056                571                 MOVE.B   #'V', (A6)+
00006676  1CFC 0045                572                 MOVE.B   #'E', (A6)+
0000667A  1CFC 0051                573                 MOVE.B   #'Q', (A6)+
0000667E  1CFC 0020                574                 MOVE.B   #' ', (A6)+
00006682  4E75                     575                 RTS
00006684                           576  
00006684                           577  DIVU
00006684  4EB9 0000668E            578                  JSR     DIVU_BUFFER
0000668A  6000 0310                579                  BRA     PRINT_BUFFER
0000668E                           580  
0000668E                           581  DIVU_BUFFER
0000668E  1CFC 0044                582                 MOVE.B   #'D',(A6)+
00006692  1CFC 0049                583                 MOVE.B   #'I', (A6)+  
00006696  1CFC 0056                584                 MOVE.B   #'V', (A6)+
0000669A  1CFC 0055                585                 MOVE.B   #'U', (A6)+
0000669E  1CFC 0020                586                 MOVE.B   #' ', (A6)+
000066A2  4E75                     587                 RTS  
000066A4                           588  OR    
000066A4  4EB9 000066AE            589                 JSR     OR_BUFFER
000066AA  6000 02F0                590                 BRA     PRINT_BUFFER
000066AE                           591                  
000066AE                           592  OR_BUFFER
000066AE  1CFC 004F                593                 MOVE.B   #'O',(A6)+
000066B2  1CFC 0052                594                 MOVE.B   #'R', (A6)+  
000066B6  1CFC 002E                595                 MOVE.B   #'.', (A6)+
000066BA                           596                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066BA                           597                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066BA                           598                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066BA  1CFC 0020                599                 MOVE.B   #' ', (A6)+
000066BE  4E75                     600                 RTS   
000066C0                           601  
000066C0                           602  SUB   
000066C0  4EB9 000066CA            603                 JSR     SUB_BUFFER
000066C6  6000 02D4                604                 BRA     PRINT_BUFFER               
000066CA                           605  
000066CA                           606  SUB_BUFFER
000066CA  1CFC 0053                607                 MOVE.B   #'S',(A6)+
000066CE  1CFC 0055                608                 MOVE.B   #'U', (A6)+  
000066D2  1CFC 0042                609                 MOVE.B   #'B', (A6)+
000066D6  1CFC 002E                610                 MOVE.B   #'.', (A6)+
000066DA                           611                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066DA                           612                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066DA                           613                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066DA  1CFC 0020                614                 MOVE.B   #' ', (A6)+
000066DE  4E75                     615                 RTS  
000066E0                           616  CMP   
000066E0  4EB9 000066EA            617                 JSR     CMP_BUFFER
000066E6  6000 02B4                618                 BRA     PRINT_BUFFER
000066EA                           619                  
000066EA                           620  CMP_BUFFER
000066EA  1CFC 0043                621                 MOVE.B   #'C',(A6)+
000066EE  1CFC 004D                622                 MOVE.B   #'M', (A6)+  
000066F2  1CFC 0050                623                 MOVE.B   #'P', (A6)+
000066F6  1CFC 002E                624                 MOVE.B   #'.', (A6)+
000066FA                           625                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066FA                           626                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066FA                           627                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066FA  1CFC 0020                628                 MOVE.B   #' ', (A6)+
000066FE  4E75                     629                 RTS   
00006700                           630                 
00006700                           631  MULS
00006700  4EB9 0000670A            632                  JSR     MULS_BUFFER
00006706  6000 0294                633                  BRA     PRINT_BUFFER
0000670A                           634  
0000670A                           635  MULS_BUFFER
0000670A  1CFC 004D                636                 MOVE.B   #'M',(A6)+
0000670E  1CFC 0055                637                 MOVE.B   #'U', (A6)+  
00006712  1CFC 004C                638                 MOVE.B   #'L', (A6)+
00006716  1CFC 0053                639                 MOVE.B   #'S', (A6)+
0000671A  1CFC 0020                640                 MOVE.B   #' ', (A6)+
0000671E  4E75                     641                 RTS
00006720                           642  
00006720                           643  AND    
00006720  4EB9 0000672A            644                 JSR     AND_BUFFER
00006726  6000 0274                645                 BRA     PRINT_BUFFER
0000672A                           646                  
0000672A                           647  AND_BUFFER
0000672A  1CFC 0041                648                 MOVE.B   #'A',(A6)+
0000672E  1CFC 004E                649                 MOVE.B   #'N', (A6)+  
00006732  1CFC 0044                650                 MOVE.B   #'D', (A6)+
00006736  1CFC 002E                651                 MOVE.B   #'.', (A6)+
0000673A                           652                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000673A                           653                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000673A                           654                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000673A  1CFC 0020                655                 MOVE.B   #' ', (A6)+
0000673E  4E75                     656                 RTS    
00006740                           657  
00006740                           658  ASR     
00006740  4EB9 0000674A            659                  JSR     ASR_BUFFER
00006746  6000 0254                660                  BRA     PRINT_BUFFER
0000674A                           661  
0000674A                           662  ASR_BUFFER
0000674A  1CFC 0041                663                 MOVE.B   #'A',(A6)+
0000674E  1CFC 0053                664                 MOVE.B   #'S', (A6)+  
00006752  1CFC 0052                665                 MOVE.B   #'R', (A6)+
00006756  1CFC 0020                666                 MOVE.B   #' ', (A6)+
0000675A  4E75                     667                 RTS      
0000675C                           668  
0000675C                           669  ASL     
0000675C  4EB9 00006766            670                  JSR     ASL_BUFFER
00006762  6000 0238                671                  BRA     PRINT_BUFFER
00006766                           672  
00006766                           673  ASL_BUFFER
00006766  1CFC 0041                674                 MOVE.B   #'A',(A6)+
0000676A  1CFC 0053                675                 MOVE.B   #'S', (A6)+  
0000676E  1CFC 004C                676                 MOVE.B   #'L', (A6)+
00006772  1CFC 0020                677                 MOVE.B   #' ', (A6)+
00006776  4E75                     678                 RTS     
00006778                           679  
00006778                           680  LSL     
00006778  4EB9 00006782            681                  JSR     LSL_BUFFER
0000677E  6000 021C                682                  BRA     PRINT_BUFFER
00006782                           683  
00006782                           684  LSL_BUFFER
00006782  1CFC 004C                685                 MOVE.B   #'L',(A6)+
00006786  1CFC 0053                686                 MOVE.B   #'S', (A6)+  
0000678A  1CFC 004C                687                 MOVE.B   #'L', (A6)+
0000678E  1CFC 0020                688                 MOVE.B   #' ', (A6)+
00006792  4E75                     689                 RTS     
00006794                           690  
00006794                           691  LSR     
00006794  4EB9 0000679E            692                  JSR     LSR_BUFFER
0000679A  6000 0200                693                  BRA     PRINT_BUFFER
0000679E                           694  
0000679E                           695  LSR_BUFFER
0000679E  1CFC 004C                696                 MOVE.B   #'L',(A6)+
000067A2  1CFC 0053                697                 MOVE.B   #'S', (A6)+  
000067A6  1CFC 0052                698                 MOVE.B   #'R', (A6)+
000067AA  1CFC 0020                699                 MOVE.B   #' ', (A6)+
000067AE  4E75                     700                 RTS       
000067B0                           701                 
000067B0                           702  jmp_mode
000067B0  4EF9 00006908            703                  JMP     MODE000  ** DN
000067B6  4EF9 0000690E            704                  JMP     MODE001  ** AN
000067BC  4EF9 00006916            705                  JMP     MODE010  ** (AN)
000067C2  4EF9 00006920            706                  JMP     MODE011  ** (AN)+   
000067C8  4EF9 0000692A            707                  JMP     MODE100  ** -(AN)
000067CE  4EF9 00006938            708                  JMP     MODE101  **INVALID
000067D4  4EF9 00006942            709                  JMP     MODE110  **INVALID
000067DA  4EF9 0000694C            710                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000067E0                           711  
000067E0                           712                  
000067E0                           713  insert_num
000067E0                           714                  
000067E0                           715                  ;get number from D3
000067E0  B67C 0000                716                  CMP     #%000,D3       ;0
000067E4  6600 000A                717                  BNE     ONE         
000067E8  1CFC 0030                718                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000067EC  6000 006E                719                  BRA     FINISHER
000067F0                           720                  
000067F0  B67C 0001                721  ONE             CMP     #%001,D3       ;1
000067F4  6600 000A                722                  BNE     TWO 
000067F8  1CFC 0031                723                  MOVE.B  #'1',(A6)+
000067FC  6000 005E                724                  BRA     FINISHER
00006800                           725  
00006800                           726                  
00006800  B67C 0002                727  TWO             CMP     #%010,D3        ;2
00006804  6600 000A                728                  BNE     THREE
00006808  1CFC 0032                729                  MOVE.B  #'2',(A6)+
0000680C  6000 004E                730                  BRA     FINISHER
00006810                           731                  
00006810  B67C 0003                732  THREE           CMP     #%011,D3        ;3
00006814  6600 000A                733                  BNE     FOUR
00006818  1CFC 0033                734                  MOVE.B  #'3',(A6)+
0000681C  6000 003E                735                  BRA     FINISHER
00006820                           736                  
00006820  B67C 0004                737  FOUR            CMP     #%100,D3        ;4
00006824  6600 000A                738                  BNE     FIVE
00006828  1CFC 0034                739                  MOVE.B  #'4',(A6)+
0000682C  6000 002E                740                  BRA     FINISHER
00006830                           741                  
00006830  B67C 0005                742  FIVE            CMP     #%101,D3        ;5
00006834  6600 000A                743                  BNE     SIX
00006838  1CFC 0035                744                  MOVE.B  #'5',(A6)+
0000683C  6000 001E                745                  BRA     FINISHER
00006840                           746                  
00006840  B67C 0006                747  SIX             CMP     #%110,D3        ;6
00006844  6600 000A                748                  BNE     SEVEN
00006848  1CFC 0036                749                  MOVE.B  #'6',(A6)+
0000684C  6000 000E                750                  BRA     FINISHER
00006850                           751                  
00006850  B67C 0007                752  SEVEN           CMP     #%111,D3        ;7
00006854  1CFC 0037                753                  MOVE.B  #'7',(A6)+
00006858  6000 0002                754                  BRA     FINISHER
0000685C                           755                  
0000685C                           756  FINISHER                
0000685C                           757                  
0000685C                           758                  ;check D4, do we need to do stuff?
0000685C  B87C 0002                759                  CMP     #%010,D4
00006860  6600 0008                760                  BNE     POSTINCR
00006864  1CFC 0029                761                  MOVE.B  #')',(A6)+
00006868  4E75                     762                  RTS
0000686A                           763                  
0000686A  B87C 0003                764  POSTINCR        CMP     #%011,D4
0000686E  6600 000C                765                  BNE     ONEPAREN
00006872  1CFC 0029                766                  MOVE.B  #')',(A6)+
00006876  1CFC 002B                767                  MOVE.B  #'+',(A6)+
0000687A  4E75                     768                  RTS
0000687C                           769                  
0000687C  B87C 0004                770  ONEPAREN        CMP     #%100,D4
00006880  6600 0008                771                  BNE     DONE
00006884  1CFC 0029                772                  MOVE.B  #')',(A6)+                
00006888                           773  
00006888  4244                     774                  CLR     D4
0000688A  4E75                     775  DONE            RTS
0000688C                           776  
0000688C                           777          
0000688C                           778                 
0000688C                           779  bits5to7
0000688C  4243                     780                 CLR      D3
0000688E  4EB9 00006A32            781                 JSR      COPY_OPCODE  // opcode copied to D2
00006894  C47C 0E00                782                 AND      #%0000111000000000, D2
00006898  E09A                     783                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000689A  E29A                     784                 ROR.L    #1, D2
0000689C  3602                     785                 MOVE.W   D2,D3 // moving isolated bits into d3
0000689E  4E75                     786                 RTS
000068A0                           787                 
000068A0                           788  bits5to8
000068A0  4243                     789                 CLR      D3
000068A2  4EB9 00006A32            790                 JSR      COPY_OPCODE  // opcode copied to D2
000068A8  C47C 0F00                791                 AND      #%0000111100000000, D2
000068AC  E09A                     792                 ROR.L    #8, D2          // rotate bits so isolated at the end
000068AE  3602                     793                 MOVE.W   D2,D3 // moving isolated bits into d3
000068B0  4E75                     794                 RTS
000068B2                           795                 
000068B2                           796  bits8to10
000068B2  4243                     797                 CLR      D3
000068B4  4EB9 00006A32            798                 JSR      COPY_OPCODE  // opcode copied to D2
000068BA  C47C 01C0                799                 AND      #%0000000111000000, D2
000068BE  EC9A                     800                 ROR.L    #6, D2          // rotate bits so isolated at the end
000068C0  3602                     801                 MOVE.W   D2,D3 // moving isolated bits into d3
000068C2  4E75                     802                 RTS               
000068C4                           803             
000068C4                           804  bits11to13
000068C4  4243                     805                 CLR      D3
000068C6  4EB9 00006A32            806                 JSR      COPY_OPCODE  // opcode copied to D2
000068CC  C47C 0038                807                 AND      #%0000000000111000, D2
000068D0  E69A                     808                 ROR.L    #3, D2          // rotate bits so isolated at the end
000068D2  3602                     809                 MOVE.W   D2,D3 // moving isolated bits into d3
000068D4  4E75                     810                 RTS
000068D6                           811             
000068D6                           812  bits14to16
000068D6  4243                     813                 CLR      D3
000068D8  4EB9 00006A32            814                 JSR      COPY_OPCODE  // opcode copied to D2
000068DE  C47C 0007                815                 AND      #%0000000000000111, D2
000068E2  3602                     816                 MOVE.W   D2,D3 // moving isolated bits into d3
000068E4  4E75                     817                 RTS
000068E6                           818  bits11to16
000068E6  4243                     819                 CLR      D3
000068E8  4EB9 00006A32            820                 JSR      COPY_OPCODE  // opcode copied to D2
000068EE  C47C 003F                821                 AND      #%0000000000111111, D2
000068F2  3602                     822                 MOVE.W   D2,D3 // moving isolated bits into d3
000068F4  4E75                     823                 RTS
000068F6                           824  bits1to10
000068F6  4243                     825                 CLR      D3
000068F8  4EB9 00006A32            826                 JSR      COPY_OPCODE  // opcode copied to D2
000068FE  C47C FFC0                827                 AND      #%1111111111000000, D2
00006902  EC9A                     828                 ROR.L    #6, D2
00006904  3602                     829                 MOVE.W   D2,D3 // moving isolated bits into d3
00006906  4E75                     830                 RTS
00006908                           831  ** DN       
00006908                           832  MODE000         
00006908  1CFC 0044                833                  MOVE.B  #'D',(A6)+     
0000690C  4E75                     834                  RTS
0000690E                           835  
0000690E                           836  ** AN
0000690E                           837  MODE001         
0000690E  4EB9 00006954            838                  JSR ADDRESS_BUFFER  
00006914  4E75                     839                  RTS      
00006916                           840  
00006916                           841   ** (AN)
00006916                           842  MODE010         
00006916  1CFC 0028                843                  MOVE.B  #'(', (A6)+
0000691A  1CFC 0041                844                  MOVE.B  #'A',(A6)+  
0000691E  4E75                     845                  RTS      
00006920                           846  
00006920                           847  ** (AN)+ 
00006920                           848  MODE011         
00006920  1CFC 0028                849                  MOVE.B  #'(', (A6)+
00006924  1CFC 0041                850                  MOVE.B  #'A',(A6)+ 
00006928  4E75                     851                  RTS       
0000692A                           852  
0000692A                           853   ** -(AN)
0000692A                           854  MODE100         
0000692A  1CFC 002D                855                  MOVE.B  #'-', (A6)+
0000692E  1CFC 0028                856                  MOVE.B  #'(', (A6)+
00006932  1CFC 0041                857                  MOVE.B  #'A',(A6)+
00006936  4E75                     858                  RTS
00006938                           859                  
00006938                           860  **INVALID               
00006938                           861  MODE101         
00006938  1CFC 0028                862                  MOVE.B  #'(', (A6)+
0000693C  1CFC 0041                863                  MOVE.B  #'A',(A6)+ 
00006940  4E75                     864                  RTS
00006942                           865                  
00006942                           866  **INVALID
00006942                           867  MODE110         
00006942  1CFC 0028                868                  MOVE.B  #'(', (A6)+
00006946  1CFC 0041                869                  MOVE.B  #'A',(A6)+
0000694A  4E75                     870                  RTS  
0000694C                           871  
0000694C                           872  ** ABSOLUTE AND IMMEDIATE            
0000694C                           873  MODE111         
0000694C                           874                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
0000694C  4EB9 0000695A            875                 JSR ABSOLUTE_BUFFER  
00006952  4E75                     876                 RTS            
00006954                           877                                          
00006954                           878  ADDRESS_BUFFER
00006954  1CFC 0041                879                  MOVE.B  #'A',(A6)+ 
00006958  4E75                     880                  RTS
0000695A                           881                 
0000695A                           882  ABSOLUTE_BUFFER
0000695A  4243                     883                 CLR      D3
0000695C  3604                     884                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
0000695E  1CF8 0024                885                 MOVE.B   '$', (A6)+
00006962  B67C 0000                886                 CMP.W    #%000, D3
00006966  6700 0010                887                 BEQ      ABSOLUTE_WORD_BUFFER
0000696A  4243                     888                 CLR      D3
0000696C  3604                     889                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
0000696E  B67C 0001                890                 CMP.W    #%001, D3
00006972  6700 0016                891                 BEQ      ABSOLUTE_LONG_BUFFER
00006976  4E75                     892                 RTS
00006978                           893                 
00006978                           894  ABSOLUTE_WORD_BUFFER
00006978                           895                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00006978                           896                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00006978  1CFC 0046                897                         MOVE.B #'F', (A6)+ 
0000697C  1CFC 0046                898                         MOVE.B #'F', (A6)+ 
00006980  1CFC 0046                899                         MOVE.B #'F', (A6)+ 
00006984  1CFC 0046                900                         MOVE.B #'F', (A6)+ 
00006988  4E75                     901                         RTS       
0000698A                           902                    
0000698A                           903  ABSOLUTE_LONG_BUFFER       
0000698A                           904                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
0000698A                           905                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
0000698A  1CFC 0047                906                         MOVE.B #'G', (A6)+ 
0000698E  1CFC 0047                907                         MOVE.B #'G', (A6)+ 
00006992  1CFC 0047                908                         MOVE.B #'G', (A6)+ 
00006996  1CFC 0047                909                         MOVE.B #'G', (A6)+
0000699A  4E75                     910                         RTS 
0000699C                           911                                                      
0000699C                           912  
0000699C                           913  PRINT_BUFFER    
0000699C  1CFC 0000                914                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
000069A0  43F9 00006B52            915                 LEA      BUFFER, A1
000069A6  303C 000E                916                 MOVE.W   #14,D0
000069AA  4E4F                     917                 TRAP     #15
000069AC  6000 F89B                918                 BRA EXIT
000069B0                           919                 
000069B0                           920                 
000069B0                           921  
000069B0                           922  INVALID_EA  
000069B0                           923                  * TODO: IMPLEMENT
000069B0                           924                  *** CLEAR OUT A6
000069B0                           925                  ** PUT INVALID MESSAGE INTO A6
000069B0  6000 F897                926                  BRA EXIT
000069B4                           927  INVALID_OP  
000069B4                           928                  ** TODO: IMPLEMENT
000069B4                           929                 *** CLEAR OUT A6
000069B4                           930                  ** PUT INVALID MESSAGE INTO A6
000069B4  6000 F893                931                  BRA EXIT             
000069B8                           932                  
000069B8  43F8 618B                933  NOP                 LEA     NOP_disp,A1          
000069BC  103C 000E                934                      MOVE.B  #14,D0
000069C0  4E4F                     935                      TRAP    #15
000069C2  6000 F885                936                      BRA     EXIT
000069C6                           937                   
000069C6                           938  RTS      
000069C6  43F8 61F2                939                      LEA     RTS_disp,A1          
000069CA  103C 000E                940                      MOVE.B  #14,D0
000069CE  4E4F                     941                      TRAP    #15 
000069D0  6000 F877                942                      BRA     EXIT
000069D4                           943  JSR      
000069D4  4DF9 00006B52            944                      LEA     BUFFER, A6
000069DA  1CFC 004A                945                      MOVE.B #'J', (A6)+
000069DE  1CFC 0053                946                      MOVE.B #'S', (A6)+
000069E2  1CFC 0052                947                      MOVE.B #'R', (A6)+
000069E6  1CFC 0020                948                      MOVE.B #' ', (A6)+
000069EA  43F9 00006B52            949                      LEA     BUFFER, A1
000069F0                           950                      ** BITS 10 - 12 MODE       
000069F0                           951                      ** BITS 13 - 16 REGISTER
000069F0  103C 000E                952                      MOVE.B  #14,D0
000069F4  4E4F                     953                      TRAP    #15 
000069F6  6000 F851                954                      BRA     EXIT
000069FA                           955                    
000069FA                           956  MOVEM      
000069FA                           957                     
000069FA                           958                      ** SIZE SUBROUTINE
000069FA                           959                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000069FA  C47C 0040                960                      AND #%0000000001000000,D2 
000069FE                           961                      * WORD
000069FE  B4BC 00000040            962                      CMP.L   #%0000000001000000,D2
00006A04  4EB9 00006A1A            963                      JSR     MOVEM_W 
00006A0A                           964                      *LONG
00006A0A  B4BC 00000040            965                      CMP.L   #%0000000001000000,D2 
00006A10                           966                     ** JSR     MOVEM_L
00006A10  103C 000E                967                      MOVE.B  #14,D0
00006A14  4E4F                     968                      TRAP    #15
00006A16  6000 F831                969                      BRA     EXIT 
00006A1A                           970                      
00006A1A                           971  MOVEM_W 
00006A1A  43F8 61A0                972                       LEA     MOVEM_disp,A1
00006A1E                           973                      * PRINT MOVEM
00006A1E  103C 000E                974                       MOVE.B  #14,D0
00006A22  4E4F                     975                       TRAP    #15
00006A24                           976          
00006A24                           977                      * PRINT WORD PORTION
00006A24  41F8 6237                978                       LEA     size_w, A0
00006A28  103C 000E                979                       MOVE.B  #14,D0
00006A2C  4E4F                     980                       TRAP    #15 
00006A2E                           981          
00006A2E  6000 F819                982                       BRA     EXIT 
00006A32                           983       
00006A32                           984     
00006A32                           985  COPY_OPCODE 
00006A32                           986                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00006A32  4242                     987                       CLR    D2  
00006A34  3405                     988                       MOVE.W D5,D2 
00006A36  4E75                     989                       RTS  
00006A38                           990                       
00006A38                           991  ****************************
00006A38                           992  
00006A38                           993                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006A38                           994                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006A38                           995                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006A38                           996  GETSIZE_ADD
00006A38  4EB8 68B2                997              JSR     bits8to10
00006A3C  B67C 0000                998              CMP     #%000,D3
00006A40  6600 0010                999              BNE     ADD_NOTBYTE
00006A44  4EB9 00006B22           1000              JSR     SIZEISBYTE
00006A4A  3C3C 0001               1001              MOVE    #1,D6
00006A4E  4243                    1002              CLR     D3
00006A50  4E75                    1003              RTS
00006A52                          1004          
00006A52                          1005  ADD_NOTBYTE 
00006A52  B67C 0001               1006              CMP     #%001,D3
00006A56  6600 0010               1007              BNE     ADD_NOTWORD
00006A5A  4EB9 00006B32           1008              JSR     SIZEISWORD
00006A60  3C3C 0001               1009              MOVE    #1,D6
00006A64  4243                    1010              CLR     D3
00006A66  4E75                    1011              RTS
00006A68                          1012              
00006A68                          1013  ADD_NOTWORD
00006A68  B67C 0002               1014              CMP     #%010,D3
00006A6C  6600 0010               1015              BNE     ADD_NOTLEFT
00006A70  4EB9 00006B42           1016              JSR     SIZEISLONG
00006A76  3C3C 0001               1017              MOVE    #1,D6
00006A7A  4243                    1018              CLR     D3
00006A7C  4E75                    1019              RTS
00006A7E                          1020              
00006A7E                          1021  ADD_NOTLEFT     ;check other direction
00006A7E  B67C 0004               1022              CMP     #%100,D3
00006A82  6600 0010               1023              BNE     ADD_NOTRIGHTBYTE
00006A86  4EB9 00006B22           1024              JSR     SIZEISBYTE
00006A8C  3C3C 0002               1025              MOVE    #2,D6
00006A90  4243                    1026              CLR     D3
00006A92  4E75                    1027              RTS
00006A94                          1028              
00006A94                          1029  ADD_NOTRIGHTBYTE
00006A94  B67C 0005               1030              CMP     #%101,D3
00006A98  6600 0010               1031              BNE     ADD_NOTRIGHTWORD
00006A9C  4EB9 00006B32           1032              JSR     SIZEISWORD
00006AA2  3C3C 0002               1033              MOVE    #2,D6
00006AA6  4243                    1034              CLR     D3
00006AA8  4E75                    1035              RTS
00006AAA                          1036  
00006AAA                          1037  ADD_NOTRIGHTWORD
00006AAA  B67C 0006               1038              CMP     #%110,D3
00006AAE  6600 FF00               1039              BNE     INVALID_EA
00006AB2  4EB9 00006B42           1040              JSR     SIZEISLONG
00006AB8  3C3C 0002               1041              MOVE    #2,D6
00006ABC  4243                    1042              CLR     D3
00006ABE  4E75                    1043              RTS 
00006AC0                          1044                               
00006AC0                          1045                       
00006AC0                          1046                       
00006AC0                          1047  *****************************                  
00006AC0                          1048  GETSIZE_ADDI
00006AC0  4EB8 68B2               1049          JSR     bits8to10
00006AC4  B67C 0000               1050          CMP     #%000,D3
00006AC8  6600 000C               1051          BNE     ADDI_NOTBYTE
00006ACC  4EB9 00006B22           1052          JSR     SIZEISBYTE
00006AD2  4243                    1053          CLR     D3
00006AD4  4E75                    1054          RTS
00006AD6                          1055  
00006AD6                          1056  ADDI_NOTBYTE
00006AD6  B67C 0001               1057          CMP     #%001,D3
00006ADA  6600 000C               1058          BNE     ADDI_NOTWORD
00006ADE  4EB9 00006B32           1059          JSR     SIZEISWORD
00006AE4  4243                    1060          CLR     D3
00006AE6  4E75                    1061          RTS
00006AE8                          1062          
00006AE8                          1063  ADDI_NOTWORD
00006AE8  B67C 0002               1064          CMP     #%010,D3
00006AEC  6600 FEC2               1065          BNE     INVALID_EA
00006AF0  4EB9 00006B42           1066          JSR     SIZEISLONG
00006AF6  4243                    1067          CLR     D3
00006AF8  4E75                    1068          RTS
00006AFA                          1069          
00006AFA                          1070                              
00006AFA                          1071                       
00006AFA                          1072  ********************************          
00006AFA                          1073                       
00006AFA                          1074                       
00006AFA                          1075  ********************************                     
00006AFA                          1076  GETSIZE_ADDA
00006AFA  4EB8 68B2               1077          JSR     bits8to10
00006AFE  B67C 0003               1078          CMP     #%011,D3
00006B02  6600 000C               1079          BNE     ADDA_NOTWORD
00006B06  4EB9 00006B32           1080          JSR     SIZEISWORD
00006B0C  4243                    1081          CLR     D3
00006B0E  4E75                    1082          RTS
00006B10                          1083          
00006B10                          1084  
00006B10                          1085          
00006B10                          1086  ADDA_NOTWORD
00006B10  B67C 0007               1087          CMP     #%111,D3
00006B14  6600 FE9A               1088          BNE     INVALID_EA
00006B18  4EB9 00006B42           1089          JSR     SIZEISLONG
00006B1E  4243                    1090          CLR     D3
00006B20  4E75                    1091          RTS
00006B22                          1092  **********************************        
00006B22                          1093      
00006B22                          1094  SIZEISBYTE
00006B22  1CFC 002E               1095         MOVE.B   #'.',(A6)+
00006B26  1CFC 0042               1096         MOVE.B   #'B',(A6)+
00006B2A  1CFC 0020               1097         MOVE.B   #' ',(A6)+
00006B2E  4243                    1098         CLR      D3
00006B30  4E75                    1099         RTS
00006B32                          1100  
00006B32                          1101  SIZEISWORD    
00006B32  1CFC 002E               1102         MOVE.B   #'.',(A6)+
00006B36  1CFC 0057               1103         MOVE.B   #'W',(A6)+
00006B3A  1CFC 0020               1104         MOVE.B   #' ',(A6)+
00006B3E  4243                    1105         CLR      D3
00006B40  4E75                    1106         RTS
00006B42                          1107                  
00006B42                          1108  SIZEISLONG    
00006B42  1CFC 002E               1109         MOVE.B   #'.',(A6)+
00006B46  1CFC 004C               1110         MOVE.B   #'L',(A6)+
00006B4A  1CFC 0020               1111         MOVE.B   #' ',(A6)+
00006B4E  4243                    1112         CLR      D3
00006B50  4E75                    1113         RTS
00006B52                          1114                  
00006B52                          1115       
00006B52= 20 20 20 20 20 00       1116  BUFFER DC.B '     ',0     
00006B58                          1117  
00006B58                          1118      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     695A
ABSOLUTE_LONG_BUFFER  698A
ABSOLUTE_WORD_BUFFER  6978
ADD                 63EC
ADDA                63C6
ADDA_BUFFER         63D0
ADDA_DISP           61AA
ADDA_NOTWORD        6B10
ADDI                64A2
ADDI_BUFFER         652A
ADDI_DES            64C6
ADDI_DISP           61AF
ADDI_NOTBYTE        6AD6
ADDI_NOTWORD        6AE8
ADDI_SRC            64B8
ADDQ                6640
ADDQ_BUFFER         664A
ADDQ_DISP           61B4
ADDRESS_BUFFER      6954
ADDR_ODDBIT_MSG     60C4
ADDR_ORDER_CHECK    60EB
ADD_BUFFER          6440
ADD_DEST            6480
ADD_DIRECTION_REVERSED  6426
ADD_DISP            61A6
ADD_DONE            6454
ADD_NOTBYTE         6A52
ADD_NOTLEFT         6A7E
ADD_NOTRIGHTBYTE    6A94
ADD_NOTRIGHTWORD    6AAA
ADD_NOTWORD         6A68
ADD_SRC             645C
AND                 6720
AND_BUFFER          672A
AND_DISP            61CF
ASL                 675C
ASL_BUFFER          6766
ASL_DISP            61DE
ASR                 6740
ASR_BUFFER          674A
ASR_DISP            61E2
BACKSLASHSIGH       622C
BCC_DISP            61F6
BGT_DISP            61FA
BITS11TO13          68C4
BITS11TO16          68E6
BITS14TO16          68D6
BITS1TO10           68F6
BITS5TO7            688C
BITS5TO8            68A0
BITS8TO10           68B2
BLE_DISP            61FE
BUFFER              6B52
CLOSEPAREN          6230
CLR_DISP            61CB
CMP                 66E0
CMP_BUFFER          66EA
CODE0000            62AE
CODE0001            62C2
CODE0010            62C6
CODE0011            62CA
CODE0100            62CE
CODE0101            6302
CODE0110            6308
CODE0111            630C
CODE1000            6312
CODE1001            6324
CODE1010            632A
CODE1011            632E
CODE1100            6334
CODE1101            6346
CODE1110            6392
CODE1111            63C2
COMMASIGN           622A
COPY_OPCODE         6A32
CR                  D
DIVU                6684
DIVU_BUFFER         668E
DIVU_DISP           61C2
DOLLARSIGN          6224
DONE                688A
ENDTEST_MSG         613F
EXIT                6249
FINISHER            685C
FIVE                6830
FOUR                6820
GETSIZE_ADD         6A38
GETSIZE_ADDA        6AFA
GETSIZE_ADDI        6AC0
HEXATABLE           6202
INPUT_BUFFER        623E
INSERT_NUM          67E0
INVALIDEA_DISP      6183
INVALID_DISP        617E
INVALID_EA          69B0
INVALID_OP          69B4
JMP_MODE            67B0
JMP_TABLE           624E
JSR                 69D4
JSR_DISP            61EE
LEA                 6546
LEA_BUFFER          656A
LEA_DEST            661C
LEA_DISP            61C7
LEA_SRC             657C
LF                  A
LINEBREAK           617B
LINECOUNT           623D
LOCATION_ENDDATA    6244
LOCATION_END_MSG    60A7
LOCATION_STARTDATA  6240
LOCATION_START_MSG  6088
LSL                 6778
LSL_BUFFER          6782
LSL_DISP            61D6
LSR                 6794
LSR_BUFFER          679E
LSR_DISP            61DA
MINUSSIGN           6228
MODE000             6908
MODE001             690E
MODE010             6916
MODE011             6920
MODE100             692A
MODE101             6938
MODE110             6942
MODE111             694C
MOVEA_DISP          6194
MOVEM               69FA
MOVEM_DISP          61A0
MOVEM_W             6A1A
MOVEQ               6660
MOVEQ_BUFFER        666A
MOVEQ_DISP          619A
MOVE_DISP           618F
MULS                6700
MULS_BUFFER         670A
MULS_DISP           61BD
NOP                 69B8
NOP_DISP            618B
ONE                 67F0
ONEPAREN            687C
OPENPAREN           622E
OR                  66A4
OR_BUFFER           66AE
OR_DISP             61D3
PAUSE_MSG           6125
PLUSSIGN            6226
POSTINCR            686A
POUNDSIGN           6222
PRINT_BUFFER        699C
ROL_DISP            61E6
ROR_DISP            61EA
RTS                 69C6
RTS_DISP            61F2
SEVEN               6850
SIX                 6840
SIZEISBYTE          6B22
SIZEISLONG          6B42
SIZEISWORD          6B32
SIZE_B              6234
SIZE_L              623A
SIZE_W              6237
SPACE               6232
START               6000
SUB                 66C0
SUB_BUFFER          66CA
SUB_DISP            61B9
TABLE_LENGTH        6248
THREE               6810
TWO                 6800
WELCOME_MSG         6024
