00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 3:03:21 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D4 - MODE
00000000                             3  *** D5 - CURRENT OPCODE
00000000                             4  *** D6 - 
00000000                             5  ***
00000000                             6  
00000000                             7  
00006000                             8  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       9                     ADDQ.B  #$1,D1      
00006002                            10                   
00006002  41F9 0000624E             11                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 00006B40             12                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      13                   CLR.L   D3              *Zero it
00006010                            14                   * TEST OPCODES
00006010                            15                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006010                            16                   ; MOVE.W  #$4E71,D3 * NOP
00006010                            17                   ; MOVE.W  #$4E75,D3 * RTS
00006010                            18                   ; MOVE.W  #$4EB0,D3 * JSR
00006010                            19                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006010                            20                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
00006010                            21                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
00006010                            22                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006010                            23                   ;  MOVE.W  #$DC1B, D3  * ADD.B (A3)+,D6
00006010  363C D9A5                 24                     MOVE.W  #$D9A5, D3  * ADD.L D4,-(A5)
00006014                            25                   ;  MOVE.W  #$D579, D3  * ADD.W D2,$FF0FF0FF
00006014                            26                   ; MOVE.W    #$5201,D3    *ADDQ
00006014                            27  
00006014                            28                   ; MOVE.W     #$7E70, D3 *MOVEQ
00006014                            29                   ; MOVE.W     #$80C0, D3 *DIVU
00006014                            30                   ; MOVE.W     #$8000, D3 * OR
00006014                            31                   ; MOVE.W        #$9000, D3 * SUB
00006014                            32                   ; MOVE.W        #$B000, D3 * CMP
00006014                            33                   ; MOVE.W        #$C1C0, D3 * MULS
00006014                            34                   ; MOVE.W        #$C000, D3 * AND
00006014                            35                   ; MOVE.W        #$E0F8, D3  *ASR
00006014                            36                   ; MOVE.W        #$E1E2, D3  *ASL
00006014                            37                   ;MOVE.W        #$E393, D3  *LSL
00006014                            38                   ;MOVE.W        #$E2DC, D3  *LSR
00006014                            39  
00006014                            40                   
00006014  3A03                      41                   MOVE.W  D3,D5
00006016  183C 000C                 42                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601A                            43  
0000601A                            44             
0000601A  E86B                      45                   LSR.W   D4,D3       *Move the bits
0000601C  C6FC 0006                 46                   MULU    #6,D3       *Form offset     
00006020  4EB0 3000                 47                   JSR     0(A0,D3)   *Jump indirect with index
00006024                            48                  
00006024                            49      INCLUDE 'definitions.x68'
00006024                            50  
00006024  =0000000D                 51  CR              EQU     $0D         carriage return
00006024  =0000000A                 52  LF              EQU     $0A         line feed
00006024= 43 53 53 20 34 32 ...     53  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
00006048= 42 79 20 54 65 61 ...     54                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00006088= 45 6E 74 65 72 20 ...     55  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060A7= 45 6E 74 65 72 20 ...     56  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C4= 41 64 64 72 65 73 ...     57  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EB= 45 6E 64 69 6E 67 ...     58  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006125= 50 72 65 73 73 20 ...     59  pause_msg           DC.B    'Press enter to continue!',CR,LF
0000613F= 52 65 61 63 68 65 ...     60  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615A= 54 72 79 20 61 6E ...     61                      DC.B    'Try another location? (yes/no): ',0
0000617B= 0D 0A 00                  62  linebreak           DC.B    CR,LF,0
0000617E                            63                      
0000617E= 44 41 54 41 00            64  Invalid_disp        DC.B    'DATA',0
00006183= 57 52 4F 4E 47 45 ...     65  InvalidEA_disp      DC.B    'WRONGEA',0
0000618B                            66  
0000618B= 4E 4F 50 00               67  NOP_disp            DC.B    'NOP',0
0000618F= 4D 4F 56 45 00            68  MOVE_disp           DC.B    'MOVE',0
00006194= 4D 4F 56 45 41 00         69  MOVEA_disp          DC.B    'MOVEA',0
0000619A= 4D 4F 56 45 51 00         70  MOVEQ_disp          DC.B    'MOVEQ',0
000061A0= 4D 4F 56 45 4D 00         71  MOVEM_disp          DC.B    'MOVEM',0
000061A6= 41 44 44 00               72  ADD_disp            DC.B    'ADD',0
000061AA= 41 44 44 41 00            73  ADDA_disp           DC.B    'ADDA',0
000061AF= 41 44 44 49 00            74  ADDI_disp           DC.B    'ADDI',0
000061B4= 41 44 44 51 00            75  ADDQ_disp           DC.B    'ADDQ',0
000061B9= 53 55 42 00               76  SUB_disp            DC.B    'SUB',0
000061BD= 4D 55 4C 53 00            77  MULS_disp           DC.B    'MULS',0
000061C2= 44 49 56 55 00            78  DIVU_disp           DC.B    'DIVU',0
000061C7= 4C 45 41 00               79  LEA_disp            DC.B    'LEA',0
000061CB= 43 4C 52 00               80  CLR_disp            DC.B    'CLR',0
000061CF= 41 4E 44 00               81  AND_disp            DC.B    'AND',0
000061D3= 4F 52 00                  82  OR_disp             DC.B    'OR',0
000061D6= 4C 53 4C 00               83  LSL_disp            DC.B    'LSL',0
000061DA= 4C 53 52 00               84  LSR_disp            DC.B    'LSR',0
000061DE= 41 53 4C 00               85  ASL_disp            DC.B    'ASL',0
000061E2= 41 53 52 00               86  ASR_disp            DC.B    'ASR',0
000061E6= 52 4F 4C 00               87  ROL_disp            DC.B    'ROL',0
000061EA= 52 4F 52 00               88  ROR_disp            DC.B    'ROR',0
000061EE= 4A 53 52 00               89  JSR_disp            DC.B    'JSR',0
000061F2= 52 54 53 00               90  RTS_disp            DC.B    'RTS',0
000061F6= 42 43 43 00               91  BCC_disp            DC.B    'BCC',0
000061FA= 42 47 54 00               92  BGT_disp            DC.B    'BGT',0    
000061FE= 42 4C 45 00               93  BLE_disp            DC.b    'BLE',0
00006202                            94  
00006202                            95  
00006202= 30 00                     96  hexaTable               DC.B    '0',0
00006204= 31 00                     97                          DC.B    '1',0
00006206= 32 00                     98                          DC.B    '2',0
00006208= 33 00                     99                          DC.B    '3',0
0000620A= 34 00                    100                          DC.B    '4',0
0000620C= 35 00                    101                          DC.B    '5',0
0000620E= 36 00                    102                          DC.B    '6',0
00006210= 37 00                    103                          DC.B    '7',0
00006212= 38 00                    104                          DC.B    '8',0
00006214= 39 00                    105                          DC.B    '9',0
00006216= 41 00                    106                          DC.B    'A',0
00006218= 42 00                    107                          DC.B    'B',0
0000621A= 43 00                    108                          DC.B    'C',0
0000621C= 44 00                    109                          DC.B    'D',0
0000621E= 45 00                    110                          DC.B    'E',0
00006220= 46 00                    111                          DC.B    'F',0
00006222= 23 00                    112  poundsign               DC.B    '#',0
00006224= 24 00                    113  dollarsign              DC.B    '$',0
00006226= 2B 00                    114  plussign                DC.B    '+',0
00006228= 2D 00                    115  minussign               DC.B    '-',0
0000622A= 2C 00                    116  commasign               DC.B    ',',0
0000622C= 2F 00                    117  backslashsigh           DC.B    '/',0
0000622E= 28 00                    118  openparen               DC.B    '(',0
00006230= 29 00                    119  closeparen              DC.B    ')',0
00006232= 20 00                    120  space                   DC.B    ' ',0   
00006234= 2E 42 00                 121  size_b                  DC.B    '.B',0
00006237= 2E 57 00                 122  size_w                  DC.B    '.W',0        
0000623A= 2E 4C 00                 123  size_l                  DC.B    '.L',0
0000623D                           124  
0000623D                           125  linecount               DS.B    1       *storeage for lines on a screen
0000623E= 01                       126  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006240                           127  location_startData      DS.L    1       *location on where to start reading data
00006244                           128  location_endData        DS.L    1       *location on where to end reading data
00006248                           129  table_length            DS.B    1       *Number of spaces in the table to print to console
00006249                           130  
00006249                           131  
00006249                           132  -------------------- end include --------------------
00006249                           133             
00006249                           134  EXIT                 
0000624A  FFFF FFFF                135         SIMHALT   
0000624E                           136  
0000624E                           137  
0000624E                           138  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
0000624E  4EF9 000062AE            139  jmp_table      JMP         code0000
00006254                           140                  *ADDI
00006254                           141  
00006254  4EF9 000062C2            142                 JMP         code0001
0000625A                           143  
0000625A  4EF9 000062C6            144                 JMP         code0010
00006260                           145  
00006260  4EF9 000062CA            146                 JMP         code0011
00006266                           147  
00006266  4EF9 000062CE            148                 JMP         code0100
0000626C                           149                             
0000626C  4EF9 00006302            150                 JMP         code0101
00006272                           151                 * ADDQ
00006272                           152                  
00006272                           153        
00006272  4EF9 00006308            154                 JMP         code0110
00006278                           155                 * BCC
00006278                           156                 * BGT
00006278                           157                 * BLE
00006278                           158                 
00006278  4EF9 0000630C            159                 JMP         code0111
0000627E                           160                 * MOVEQ
0000627E                           161  
0000627E  4EF9 00006312            162                 JMP         code1000
00006284                           163                 * DIVU
00006284                           164                 * OR
00006284                           165  
00006284  4EF9 00006324            166                 JMP         code1001
0000628A                           167                  *SUB
0000628A  4EF9 0000632A            168                 JMP         code1010
00006290                           169                 
00006290  4EF9 0000632E            170                 JMP         code1011
00006296                           171                 * CMP
00006296                           172                 
00006296  4EF9 00006334            173                 JMP         code1100
0000629C                           174                 * MULS
0000629C                           175                 * AND
0000629C                           176          
0000629C  4EF9 00006346            177                 JMP         code1101
000062A2                           178                 *ADD
000062A2                           179                 *ADDA
000062A2  4EF9 00006392            180                 JMP         code1110
000062A8                           181                 * ASR
000062A8                           182                 * ASL
000062A8                           183                 * LSL
000062A8                           184                 * LSR
000062A8                           185                 * ROL
000062A8                           186                 * ROR
000062A8                           187  
000062A8  4EF9 000063C2            188                 JMP         code1111
000062AE                           189  
000062AE                           190  
000062AE                           191  code0000      
000062AE  4EB9 0000688E            192                 JSR          bits5to8 // RETURNS INTO D3
000062B4  B6BC 00000006            193                 CMP.L        #%0110, D3
000062BA  6600 06E6                194                 BNE          INVALID_OP
000062BE  6000 01D0                195                 BRA          ADDI  
000062C2                           196  
000062C2  4E72 2700                197  code0001       STOP        #$2700
000062C6                           198  
000062C6  4E72 2700                199  code0010       STOP        #$2700
000062CA                           200  
000062CA  4E72 2700                201  code0011       STOP        #$2700
000062CE                           202  
000062CE                           203  code0100       
000062CE  4EB9 00006A20            204                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D4                           205                  
000062D4                           206                 *NOP
000062D4  C47C 0FFF                207                 AND     #%0000111111111111,D2
000062D8  B4BC 00000E71            208                 CMP.L   #%000111001110001, D2
000062DE  6700 06C6                209                 BEQ     NOP
000062E2                           210                 
000062E2                           211                 *RTS
000062E2  C47C 0FFF                212                 AND     #%0000111111111111,D2
000062E6  B4BC 00000E75            213                 CMP.L   #%0000111001110101, D2
000062EC  6700 06C6                214                 BEQ     RTS
000062F0                           215  
000062F0                           216                 *JSR
000062F0  C47C 0FC0                217                 AND     #%0000111111000000,D2
000062F4  B4BC 00000E80            218                 CMP.L   #%0000111010000000,D2
000062FA  6700 06C6                219                 BEQ     JSR
000062FE                           220                 
000062FE                           221                 * MOVEM
000062FE                           222                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000062FE                           223                ** AND     #%0000111110000000,D2
000062FE                           224                 * DATA REGISTER
000062FE                           225                ** CMP.L   #%0000100010000000, D2
000062FE                           226                 ** JSR      MOVEM
000062FE                           227                 * ADDRESS REGISTER (DECREMENTED)
000062FE                           228                 ** CMP.L  #%0000110010000000, D2
000062FE                           229                 ** JSR    MOVEM
000062FE                           230                  
000062FE                           231                  ** TO DO: BRANCH IF INVALID OPCODE
000062FE                           232                  *LEA - if it's not the top codes, it's LEA
000062FE  6000 0234                233                  BRA     LEA
00006302                           234  code0101      
00006302                           235  
00006302  4EB9 0000662E            236                  JSR   ADDQ
00006308                           237  
00006308  4E72 2700                238  code0110        STOP        #$2700
0000630C                           239  
0000630C                           240  code0111       
0000630C  4EB9 0000664E            241                  JSR       MOVEQ
00006312                           242  
00006312                           243  code1000      
00006312  4EB9 000068A0            244                  JSR        bits8to10
00006318  B67C 0003                245                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
0000631C  6700 0354                246                  BEQ        DIVU
00006320  6000 0370                247                  BRA        OR       ** OTHERWISE OR
00006324                           248                  
00006324                           249  
00006324                           250  code1001       
00006324  4EB9 000066AE            251                 JSR         SUB
0000632A  4E72 2700                252  code1010       STOP        #$2700
0000632E                           253  
0000632E                           254  code1011       
0000632E  4EB9 000066CE            255                 JSR         CMP
00006334                           256  
00006334                           257  code1100      
00006334  4EB9 000068A0            258                  JSR        bits8to10
0000633A  B67C 0007                259                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
0000633E  6700 03AE                260                  BEQ        MULS
00006342  6000 03CA                261                  BRA        AND       ** OTHERWISE AND
00006346                           262  
00006346                           263  code1101       
00006346  4EB9 00006A20            264                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000634C                           265                 *ADDA
0000634C  4EB9 000068A0            266                 JSR      bits8to10
00006352  B67C 0003                267                 CMP      #%011, D3  ** WORD
00006356  6700 006E                268                 BEQ      ADDA
0000635A  B67C 0007                269                 CMP      #%111, D3   ** LONG
0000635E  6700 0066                270                 BEQ      ADDA
00006362                           271                 
00006362                           272                 *ADD
00006362  B67C 0000                273                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00006366  6700 0084                274                 BEQ      ADD
0000636A  B67C 0001                275                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000636E  6700 007C                276                 BEQ      ADD
00006372  B67C 0002                277                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00006376  6700 0074                278                 BEQ      ADD
0000637A  B67C 0004                279                 CMP      #%100, D3   ** BYTE TO EA
0000637E  6700 006C                280                 BEQ      ADD
00006382  B67C 0005                281                 CMP      #%101, D3   ** WORD TO EA
00006386  6700 0064                282                 BEQ      ADD
0000638A  B67C 0006                283                 CMP      #%110, D3   ** LONG TO EA
0000638E  6700 005C                284                 BEQ      ADD
00006392                           285                 
00006392                           286  
00006392                           287  code1110       
00006392                           288                  * ASR
00006392  4EB9 000068E4            289                  JSR     bits1to10
00006398  B67C 0383                290                  CMP     #%1110000011,D3
0000639C  6700 0390                291                  BEQ     ASR
000063A0                           292                  
000063A0                           293                  * ASL
000063A0  B67C 0387                294                  CMP     #%1110000111,D3
000063A4  6700 03A4                295                  BEQ     ASL
000063A8                           296                  
000063A8                           297                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
000063A8                           298                  * LSL
000063A8  4244                     299                  CLR     D4
000063AA  2803                     300                  MOVE.L  D3,D4
000063AC  C8BC 00A98671            301                  AND.L   #11110001,D4
000063B2  B87C 01C7                302                  CMP     #%111000111,D4
000063B6  6700 03AE                303                  BEQ     LSL
000063BA                           304                  
000063BA                           305                  * LSR
000063BA  B67C 038B                306                  CMP     #%1110001011,D3
000063BE  6700 03C2                307                  BEQ     LSR
000063C2                           308                  
000063C2                           309                  * ROL
000063C2                           310                  
000063C2                           311                  * ROR
000063C2                           312  
000063C2  4E72 2700                313  code1111       STOP        #$2700
000063C6                           314  
000063C6                           315  ADDA    
000063C6  4EB9 000063D0            316                 JSR     ADDA_BUFFER
000063CC  6000 05BC                317                 BRA     PRINT_BUFFER
000063D0                           318                  
000063D0                           319  ADDA_BUFFER
000063D0  1CFC 0041                320                 MOVE.B   #'A',(A6)+
000063D4  1CFC 0044                321                 MOVE.B   #'D', (A6)+  
000063D8  1CFC 0044                322                 MOVE.B   #'D', (A6)+
000063DC  1CFC 0041                323                 MOVE.B   #'A', (A6)+
000063E0  4EB9 00006AE8            324                 JSR      GETSIZE_ADDA
000063E6  1CFC 0020                325                 MOVE.B   #' ', (A6)+
000063EA  4E75                     326                 RTS
000063EC                           327                 
000063EC                           328                 
000063EC                           329                 
000063EC                           330  *********************************************               
000063EC                           331  ADD    
000063EC  4EB9 00006436            332                 JSR     ADD_BUFFER
000063F2                           333                ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000063F2                           334                 
000063F2  BC7C 0001                335                 CMP      #1,D6
000063F6  6600 001C                336                 BNE      ADD_DIRECTION_REVERSED
000063FA  4246                     337                 CLR      D6
000063FC  4EB9 0000644A            338                 JSR      ADD_SRC
00006402  1CFC 002C                339                 MOVE.B   #',', (A6)+
00006406  1CFC 0020                340                 MOVE.B   #' ', (A6)+
0000640A  4EB9 0000646E            341                 JSR      ADD_DEST
00006410  6000 001C                342                 BRA      ADD_DONE
00006414                           343                 
00006414                           344  ADD_DIRECTION_REVERSED
00006414                           345  
00006414  4246                     346                 CLR      D6
00006416  4EB9 0000646E            347                 JSR      ADD_DEST
0000641C  1CFC 002C                348                 MOVE.B   #',', (A6)+
00006420  1CFC 0020                349                 MOVE.B   #' ', (A6)+
00006424  4EB9 0000644A            350                 JSR      ADD_SRC
0000642A  6000 0002                351                 BRA      ADD_DONE              
0000642E                           352                 
0000642E                           353                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000642E                           354                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000642E                           355                 
0000642E                           356  ADD_DONE       
0000642E  4246                     357                 CLR      D6
00006430  4EB9 0000698A            358                 JSR     PRINT_BUFFER
00006436                           359  
00006436                           360                  
00006436                           361  ADD_BUFFER
00006436  1CFC 0041                362                 MOVE.B   #'A',(A6)+
0000643A  1CFC 0044                363                 MOVE.B   #'D', (A6)+  
0000643E  1CFC 0044                364                 MOVE.B   #'D', (A6)+
00006442  4EB9 00006A26            365                 JSR      GETSIZE_ADD
00006448  4E75                     366                 RTS
0000644A                           367  
0000644A                           368  
0000644A                           369  ***********************************************        
0000644A                           370  
0000644A                           371  
0000644A                           372  
0000644A                           373  ****************************************************************************************
0000644A                           374  ADD_SRC
0000644A                           375  
0000644A  4EB9 000068B2            376                  JSR    bits11to13
00006450  3803                     377                  MOVE   D3,D4
00006452  41F9 0000679E            378                  LEA     jmp_mode,A0    *Index into the table
00006458  C6FC 0006                379                  MULU   #6,D3
0000645C  4EB0 3000                380                  JSR    0(A0,D3)     
00006460                           381                  
00006460  4EB9 000068C4            382                  JSR    bits14to16
00006466  4EB9 000067CE            383                  JSR    insert_num
0000646C  4E75                     384                  RTS
0000646E                           385  
0000646E                           386  
0000646E                           387  
0000646E                           388  
0000646E                           389  
0000646E                           390  ADD_DEST
0000646E  363C 0000                391                  MOVE.W #%000,D3     ;Can only have a data register.
00006472  3803                     392                  MOVE   D3,D4
00006474  41F9 0000679E            393                  LEA     jmp_mode,A0    *Index into the table
0000647A  C6FC 0006                394                  MULU    #6,D3       *Form offset     
0000647E  4EB0 3000                395                  JSR     0(A0,D3)   *Jump indirect with index
00006482                           396                  
00006482  4EB9 0000687A            397                  JSR     bits5to7
00006488  4EB9 000067CE            398                  JSR     insert_num
0000648E  4E75                     399                  RTS
00006490                           400                  
00006490                           401  
00006490                           402    
00006490                           403  
00006490                           404  
00006490                           405  ***********************************************************************************************
00006490                           406  
00006490                           407  
00006490                           408  
00006490                           409  
00006490                           410  ADDI
00006490  4EB9 00006518            411                  JSR     ADDI_BUFFER
00006496  4EB9 000064A6            412                  JSR     ADDI_SRC
0000649C  4EB9 000064B4            413                  JSR     ADDI_DES
000064A2  6000 04E6                414                  BRA     PRINT_BUFFER
000064A6                           415                  
000064A6                           416  ADDI_SRC                        
000064A6  1CFC 0023                417                  MOVE.B  #'#', (A6)+
000064AA  1CFC 002C                418                  MOVE.B  #',', (A6)+
000064AE  1CFC 0020                419                  MOVE.B  #' ', (A6)+
000064B2  4E75                     420                  RTS
000064B4                           421                    ** TODO: IMPLEMENT THIS IN EA
000064B4                           422                  ** Immediate field—Data immediately following the instruction.
000064B4                           423                  **If size = 00, the data is the low-order byte of the immediate word.
000064B4                           424                  **If size = 01, the data is the entire immediate word.
000064B4                           425                  **If size = 10, the data is the next two immediate words. 
000064B4                           426  ADDI_DES
000064B4                           427                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
000064B4                           428                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
000064B4  4EB9 000068B2            429                 JSR      bits11to13
000064BA  B67C 0001                430                 CMP      #%001, D3 **AN
000064BE  6700 04DE                431                 BEQ      INVALID_EA
000064C2  B67C 0005                432                 CMP      #%101, D3 **COMPLICATED
000064C6  6700 04D6                433                 BEQ      INVALID_EA
000064CA  B67C 0006                434                 CMP      #%110, D3 **COMPLICATED
000064CE  6700 04CE                435                 BEQ      INVALID_EA
000064D2                           436                 
000064D2  4EB9 000068D4            437                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000064D8  B67C 003C                438                 CMP      #%111100,D3 // immediate data
000064DC  6700 04C0                439                 BEQ      INVALID_EA
000064E0  B67C 003A                440                 CMP      #%111010,D3 // complicated
000064E4  6700 04B8                441                 BEQ      INVALID_EA
000064E8  B67C 003B                442                 CMP      #%111011,D3 // complicated
000064EC  6700 04B0                443                 BEQ      INVALID_EA
000064F0                           444                 
000064F0  4EB9 000068B2            445                 JSR      bits11to13 ** grab bits to jump with\
000064F6  3803                     446                 MOVE     D3,D4
000064F8  41F9 0000679E            447                 LEA     jmp_mode,A0    *Index into the table
000064FE  C6FC 0006                448                 MULU    #6,D3       *Form offset     
00006502  4EB0 3000                449                 JSR     0(A0,D3)   *Jump indirect with index
00006506                           450                 
00006506  4243                     451                 CLR     D3
00006508  4EB9 000068C4            452                 JSR     bits14to16
0000650E  4EB9 000067CE            453                 JSR     insert_num
00006514  4244                     454                 CLR     D4
00006516                           455                 
00006516  4E75                     456                 RTS
00006518                           457                 
00006518                           458                             
00006518                           459  ADDI_BUFFER
00006518  1CFC 0041                460                 MOVE.B   #'A',(A6)+
0000651C  1CFC 0044                461                 MOVE.B   #'D', (A6)+  
00006520  1CFC 0044                462                 MOVE.B   #'D', (A6)+
00006524  1CFC 0049                463                 MOVE.B   #'I', (A6)+
00006528                           464                 
00006528  4EB9 00006AAE            465                 JSR      GETSIZE_ADDI
0000652E                           466                 
0000652E                           467                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
0000652E                           468                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000652E  1CFC 0020                469                 MOVE.B   #' ', (A6)+
00006532  4E75                     470                 RTS
00006534                           471                              
00006534                           472  LEA
00006534  4EB9 000068A0            473                 JSR      bits8to10   // 1 1 1
0000653A  B47C 0007                474                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
0000653E  6600 0462                475                 BNE      INVALID_OP
00006542  4EB9 00006558            476                 JSR      LEA_BUFFER
00006548  4EB9 0000656A            477                 JSR      LEA_SRC
0000654E  4EB9 0000660A            478                 JSR      LEA_DEST
00006554  6000 0434                479                 BRA      PRINT_BUFFER
00006558                           480                 
00006558                           481  LEA_BUFFER 
00006558  1CFC 004C                482                 MOVE.B   #'L',(A6)+
0000655C  1CFC 0045                483                 MOVE.B   #'E', (A6)+  
00006560  1CFC 0041                484                 MOVE.B   #'A', (A6)+
00006564  1CFC 0020                485                 MOVE.B   #' ', (A6)+
00006568  4E75                     486                 RTS
0000656A                           487            
0000656A                           488  LEA_SRC
0000656A                           489              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
0000656A  4EB9 000068B2            490              JSR      bits11to13  // source mode - D3
00006570  B67C 0000                491              CMP      #%000, D3
00006574  6700 0428                492              BEQ      INVALID_EA
00006578  B67C 0001                493              CMP      #%001, D3
0000657C  6700 0420                494              BEQ      INVALID_EA
00006580  B67C 0003                495              CMP      #%011, D3
00006584  6700 0418                496              BEQ      INVALID_EA
00006588  B67C 0004                497              CMP      #%100, D3
0000658C  6700 0410                498              BEQ      INVALID_EA
00006590  B67C 0005                499              CMP      #%101, D3
00006594  6700 0408                500              BEQ      INVALID_EA
00006598  B67C 0006                501              CMP      #%110, D3
0000659C  6700 0400                502              BEQ      INVALID_EA
000065A0                           503  
000065A0                           504              
000065A0                           505              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
000065A0  4EB9 000068C4            506              JSR      bits14to16 // source register - d4
000065A6  B67C 0004                507              CMP      #%100, D3
000065AA  6700 03F2                508              BEQ      INVALID_EA
000065AE  B67C 0002                509              CMP      #%010, D3
000065B2  6700 03EA                510              BEQ      INVALID_EA
000065B6  B67C 0003                511              CMP      #%011, D3
000065BA  6700 03E2                512              BEQ      INVALID_EA
000065BE                           513              
000065BE                           514  
000065BE  4EB9 000068D4            515               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000065C4  B67C 003C                516               CMP      #%111100,D3 // immediate data
000065C8  6700 03D4                517               BEQ      INVALID_EA
000065CC  B67C 003A                518               CMP      #%111010,D3 // complicated
000065D0  6700 03CC                519               BEQ      INVALID_EA
000065D4  B67C 003B                520               CMP      #%111011,D3 // complicated
000065D8  6700 03C4                521               BEQ      INVALID_EA
000065DC                           522     
000065DC  4EB9 000068B2            523               JSR      bits11to13 ** grab mode bits to jump with
000065E2  3803                     524               MOVE    D3,D4
000065E4                           525  
000065E4  41F9 0000679E            526               LEA     jmp_mode,A0    *Index into the table
000065EA  C6FC 0006                527               MULU    #6,D3       *Form offset     
000065EE  4EB0 3000                528               JSR     0(A0,D3)   *Jump indirect with index
000065F2                           529               
000065F2                           530  
000065F2  4243                     531               CLR     D3
000065F4  4EB9 000068C4            532               JSR     bits14to16
000065FA  4EB9 000067CE            533               JSR     insert_num
00006600                           534               
00006600  1CFC 002C                535               MOVE.B     #',', (A6)+
00006604  1CFC 0020                536               MOVE.B     #' ', (A6)+
00006608                           537  
00006608  4E75                     538               RTS
0000660A                           539               
0000660A                           540  LEA_DEST    
0000660A  4244                     541                  CLR     D4
0000660C  41F9 0000679E            542                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00006612  363C 0001                543                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
00006616  3803                     544                  MOVE    D3,D4
00006618  C6FC 0006                545                  MULU    #6,D3       *Form offset     
0000661C  4EB0 3000                546                  JSR     0(A0,D3)   *Jump indirect with index
00006620                           547                  
00006620  4EB9 0000687A            548                  JSR     bits5to7
00006626  4EB9 000067CE            549                  JSR     insert_num
0000662C                           550                  
0000662C  4E75                     551                  RTS
0000662E                           552  
0000662E                           553  
0000662E                           554  ADDQ
0000662E  4EB9 00006638            555                  JSR     ADDQ_BUFFER
00006634  6000 0354                556                  BRA     PRINT_BUFFER
00006638                           557  
00006638                           558  ADDQ_BUFFER
00006638  1CFC 0041                559                 MOVE.B   #'A',(A6)+
0000663C  1CFC 0044                560                 MOVE.B   #'D', (A6)+  
00006640  1CFC 0044                561                 MOVE.B   #'D', (A6)+
00006644  1CFC 0051                562                 MOVE.B   #'Q', (A6)+
00006648                           563                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00006648                           564                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006648  1CFC 0020                565                 MOVE.B   #' ', (A6)+
0000664C  4E75                     566                 RTS
0000664E                           567                 
0000664E                           568  MOVEQ
0000664E  4EB9 00006658            569                  JSR     MOVEQ_BUFFER
00006654  6000 0334                570                  BRA     PRINT_BUFFER
00006658                           571  
00006658                           572  MOVEQ_BUFFER
00006658  1CFC 004D                573                 MOVE.B   #'M',(A6)+
0000665C  1CFC 004F                574                 MOVE.B   #'O', (A6)+  
00006660  1CFC 0056                575                 MOVE.B   #'V', (A6)+
00006664  1CFC 0045                576                 MOVE.B   #'E', (A6)+
00006668  1CFC 0051                577                 MOVE.B   #'Q', (A6)+
0000666C  1CFC 0020                578                 MOVE.B   #' ', (A6)+
00006670  4E75                     579                 RTS
00006672                           580  
00006672                           581  DIVU
00006672  4EB9 0000667C            582                  JSR     DIVU_BUFFER
00006678  6000 0310                583                  BRA     PRINT_BUFFER
0000667C                           584  
0000667C                           585  DIVU_BUFFER
0000667C  1CFC 0044                586                 MOVE.B   #'D',(A6)+
00006680  1CFC 0049                587                 MOVE.B   #'I', (A6)+  
00006684  1CFC 0056                588                 MOVE.B   #'V', (A6)+
00006688  1CFC 0055                589                 MOVE.B   #'U', (A6)+
0000668C  1CFC 0020                590                 MOVE.B   #' ', (A6)+
00006690  4E75                     591                 RTS  
00006692                           592  OR    
00006692  4EB9 0000669C            593                 JSR     OR_BUFFER
00006698  6000 02F0                594                 BRA     PRINT_BUFFER
0000669C                           595                  
0000669C                           596  OR_BUFFER
0000669C  1CFC 004F                597                 MOVE.B   #'O',(A6)+
000066A0  1CFC 0052                598                 MOVE.B   #'R', (A6)+  
000066A4  1CFC 002E                599                 MOVE.B   #'.', (A6)+
000066A8                           600                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066A8                           601                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066A8                           602                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066A8  1CFC 0020                603                 MOVE.B   #' ', (A6)+
000066AC  4E75                     604                 RTS   
000066AE                           605  
000066AE                           606  SUB   
000066AE  4EB9 000066B8            607                 JSR     SUB_BUFFER
000066B4  6000 02D4                608                 BRA     PRINT_BUFFER               
000066B8                           609  
000066B8                           610  SUB_BUFFER
000066B8  1CFC 0053                611                 MOVE.B   #'S',(A6)+
000066BC  1CFC 0055                612                 MOVE.B   #'U', (A6)+  
000066C0  1CFC 0042                613                 MOVE.B   #'B', (A6)+
000066C4  1CFC 002E                614                 MOVE.B   #'.', (A6)+
000066C8                           615                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066C8                           616                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066C8                           617                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066C8  1CFC 0020                618                 MOVE.B   #' ', (A6)+
000066CC  4E75                     619                 RTS  
000066CE                           620  CMP   
000066CE  4EB9 000066D8            621                 JSR     CMP_BUFFER
000066D4  6000 02B4                622                 BRA     PRINT_BUFFER
000066D8                           623                  
000066D8                           624  CMP_BUFFER
000066D8  1CFC 0043                625                 MOVE.B   #'C',(A6)+
000066DC  1CFC 004D                626                 MOVE.B   #'M', (A6)+  
000066E0  1CFC 0050                627                 MOVE.B   #'P', (A6)+
000066E4  1CFC 002E                628                 MOVE.B   #'.', (A6)+
000066E8                           629                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066E8                           630                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066E8                           631                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066E8  1CFC 0020                632                 MOVE.B   #' ', (A6)+
000066EC  4E75                     633                 RTS   
000066EE                           634                 
000066EE                           635  MULS
000066EE  4EB9 000066F8            636                  JSR     MULS_BUFFER
000066F4  6000 0294                637                  BRA     PRINT_BUFFER
000066F8                           638  
000066F8                           639  MULS_BUFFER
000066F8  1CFC 004D                640                 MOVE.B   #'M',(A6)+
000066FC  1CFC 0055                641                 MOVE.B   #'U', (A6)+  
00006700  1CFC 004C                642                 MOVE.B   #'L', (A6)+
00006704  1CFC 0053                643                 MOVE.B   #'S', (A6)+
00006708  1CFC 0020                644                 MOVE.B   #' ', (A6)+
0000670C  4E75                     645                 RTS
0000670E                           646  
0000670E                           647  AND    
0000670E  4EB9 00006718            648                 JSR     AND_BUFFER
00006714  6000 0274                649                 BRA     PRINT_BUFFER
00006718                           650                  
00006718                           651  AND_BUFFER
00006718  1CFC 0041                652                 MOVE.B   #'A',(A6)+
0000671C  1CFC 004E                653                 MOVE.B   #'N', (A6)+  
00006720  1CFC 0044                654                 MOVE.B   #'D', (A6)+
00006724  1CFC 002E                655                 MOVE.B   #'.', (A6)+
00006728                           656                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006728                           657                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006728                           658                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006728  1CFC 0020                659                 MOVE.B   #' ', (A6)+
0000672C  4E75                     660                 RTS    
0000672E                           661  
0000672E                           662  ASR     
0000672E  4EB9 00006738            663                  JSR     ASR_BUFFER
00006734  6000 0254                664                  BRA     PRINT_BUFFER
00006738                           665  
00006738                           666  ASR_BUFFER
00006738  1CFC 0041                667                 MOVE.B   #'A',(A6)+
0000673C  1CFC 0053                668                 MOVE.B   #'S', (A6)+  
00006740  1CFC 0052                669                 MOVE.B   #'R', (A6)+
00006744  1CFC 0020                670                 MOVE.B   #' ', (A6)+
00006748  4E75                     671                 RTS      
0000674A                           672  
0000674A                           673  ASL     
0000674A  4EB9 00006754            674                  JSR     ASL_BUFFER
00006750  6000 0238                675                  BRA     PRINT_BUFFER
00006754                           676  
00006754                           677  ASL_BUFFER
00006754  1CFC 0041                678                 MOVE.B   #'A',(A6)+
00006758  1CFC 0053                679                 MOVE.B   #'S', (A6)+  
0000675C  1CFC 004C                680                 MOVE.B   #'L', (A6)+
00006760  1CFC 0020                681                 MOVE.B   #' ', (A6)+
00006764  4E75                     682                 RTS     
00006766                           683  
00006766                           684  LSL     
00006766  4EB9 00006770            685                  JSR     LSL_BUFFER
0000676C  6000 021C                686                  BRA     PRINT_BUFFER
00006770                           687  
00006770                           688  LSL_BUFFER
00006770  1CFC 004C                689                 MOVE.B   #'L',(A6)+
00006774  1CFC 0053                690                 MOVE.B   #'S', (A6)+  
00006778  1CFC 004C                691                 MOVE.B   #'L', (A6)+
0000677C  1CFC 0020                692                 MOVE.B   #' ', (A6)+
00006780  4E75                     693                 RTS     
00006782                           694  
00006782                           695  LSR     
00006782  4EB9 0000678C            696                  JSR     LSR_BUFFER
00006788  6000 0200                697                  BRA     PRINT_BUFFER
0000678C                           698  
0000678C                           699  LSR_BUFFER
0000678C  1CFC 004C                700                 MOVE.B   #'L',(A6)+
00006790  1CFC 0053                701                 MOVE.B   #'S', (A6)+  
00006794  1CFC 0052                702                 MOVE.B   #'R', (A6)+
00006798  1CFC 0020                703                 MOVE.B   #' ', (A6)+
0000679C  4E75                     704                 RTS       
0000679E                           705                 
0000679E                           706  jmp_mode
0000679E  4EF9 000068F6            707                  JMP     MODE000  ** DN
000067A4  4EF9 000068FC            708                  JMP     MODE001  ** AN
000067AA  4EF9 00006904            709                  JMP     MODE010  ** (AN)
000067B0  4EF9 0000690E            710                  JMP     MODE011  ** (AN)+   
000067B6  4EF9 00006918            711                  JMP     MODE100  ** -(AN)
000067BC  4EF9 00006926            712                  JMP     MODE101  **INVALID
000067C2  4EF9 00006930            713                  JMP     MODE110  **INVALID
000067C8  4EF9 0000693A            714                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000067CE                           715  
000067CE                           716                  
000067CE                           717  insert_num
000067CE                           718                  
000067CE                           719                  ;get number from D3
000067CE  B67C 0000                720                  CMP     #%000,D3       ;0
000067D2  6600 000A                721                  BNE     ONE         
000067D6  1CFC 0030                722                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000067DA  6000 006E                723                  BRA     FINISHER
000067DE                           724                  
000067DE  B67C 0001                725  ONE             CMP     #%001,D3       ;1
000067E2  6600 000A                726                  BNE     TWO 
000067E6  1CFC 0031                727                  MOVE.B  #'1',(A6)+
000067EA  6000 005E                728                  BRA     FINISHER
000067EE                           729  
000067EE                           730                  
000067EE  B67C 0002                731  TWO             CMP     #%010,D3        ;2
000067F2  6600 000A                732                  BNE     THREE
000067F6  1CFC 0032                733                  MOVE.B  #'2',(A6)+
000067FA  6000 004E                734                  BRA     FINISHER
000067FE                           735                  
000067FE  B67C 0003                736  THREE           CMP     #%011,D3        ;3
00006802  6600 000A                737                  BNE     FOUR
00006806  1CFC 0033                738                  MOVE.B  #'3',(A6)+
0000680A  6000 003E                739                  BRA     FINISHER
0000680E                           740                  
0000680E  B67C 0004                741  FOUR            CMP     #%100,D3        ;4
00006812  6600 000A                742                  BNE     FIVE
00006816  1CFC 0034                743                  MOVE.B  #'4',(A6)+
0000681A  6000 002E                744                  BRA     FINISHER
0000681E                           745                  
0000681E  B67C 0005                746  FIVE            CMP     #%101,D3        ;5
00006822  6600 000A                747                  BNE     SIX
00006826  1CFC 0035                748                  MOVE.B  #'5',(A6)+
0000682A  6000 001E                749                  BRA     FINISHER
0000682E                           750                  
0000682E  B67C 0006                751  SIX             CMP     #%110,D3        ;6
00006832  6600 000A                752                  BNE     SEVEN
00006836  1CFC 0036                753                  MOVE.B  #'6',(A6)+
0000683A  6000 000E                754                  BRA     FINISHER
0000683E                           755                  
0000683E  B67C 0007                756  SEVEN           CMP     #%111,D3        ;7
00006842  1CFC 0037                757                  MOVE.B  #'7',(A6)+
00006846  6000 0002                758                  BRA     FINISHER
0000684A                           759                  
0000684A                           760  FINISHER                
0000684A                           761                  
0000684A                           762                  ;check D4, do we need to do stuff?
0000684A  B87C 0002                763                  CMP     #%010,D4
0000684E  6600 0008                764                  BNE     POSTINCR
00006852  1CFC 0029                765                  MOVE.B  #')',(A6)+
00006856  4E75                     766                  RTS
00006858                           767                  
00006858  B87C 0003                768  POSTINCR        CMP     #%011,D4
0000685C  6600 000C                769                  BNE     ONEPAREN
00006860  1CFC 0029                770                  MOVE.B  #')',(A6)+
00006864  1CFC 002B                771                  MOVE.B  #'+',(A6)+
00006868  4E75                     772                  RTS
0000686A                           773                  
0000686A  B87C 0004                774  ONEPAREN        CMP     #%100,D4
0000686E  6600 0008                775                  BNE     DONE
00006872  1CFC 0029                776                  MOVE.B  #')',(A6)+                
00006876                           777  
00006876  4244                     778                  CLR     D4
00006878  4E75                     779  DONE            RTS
0000687A                           780  
0000687A                           781          
0000687A                           782                 
0000687A                           783  bits5to7
0000687A  4243                     784                 CLR      D3
0000687C  4EB9 00006A20            785                 JSR      COPY_OPCODE  // opcode copied to D2
00006882  C47C 0E00                786                 AND      #%0000111000000000, D2
00006886  E09A                     787                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006888  E29A                     788                 ROR.L    #1, D2
0000688A  3602                     789                 MOVE.W   D2,D3 // moving isolated bits into d3
0000688C  4E75                     790                 RTS
0000688E                           791                 
0000688E                           792  bits5to8
0000688E  4243                     793                 CLR      D3
00006890  4EB9 00006A20            794                 JSR      COPY_OPCODE  // opcode copied to D2
00006896  C47C 0F00                795                 AND      #%0000111100000000, D2
0000689A  E09A                     796                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000689C  3602                     797                 MOVE.W   D2,D3 // moving isolated bits into d3
0000689E  4E75                     798                 RTS
000068A0                           799                 
000068A0                           800  bits8to10
000068A0  4243                     801                 CLR      D3
000068A2  4EB9 00006A20            802                 JSR      COPY_OPCODE  // opcode copied to D2
000068A8  C47C 01C0                803                 AND      #%0000000111000000, D2
000068AC  EC9A                     804                 ROR.L    #6, D2          // rotate bits so isolated at the end
000068AE  3602                     805                 MOVE.W   D2,D3 // moving isolated bits into d3
000068B0  4E75                     806                 RTS               
000068B2                           807             
000068B2                           808  bits11to13
000068B2  4243                     809                 CLR      D3
000068B4  4EB9 00006A20            810                 JSR      COPY_OPCODE  // opcode copied to D2
000068BA  C47C 0038                811                 AND      #%0000000000111000, D2
000068BE  E69A                     812                 ROR.L    #3, D2          // rotate bits so isolated at the end
000068C0  3602                     813                 MOVE.W   D2,D3 // moving isolated bits into d3
000068C2  4E75                     814                 RTS
000068C4                           815             
000068C4                           816  bits14to16
000068C4  4243                     817                 CLR      D3
000068C6  4EB9 00006A20            818                 JSR      COPY_OPCODE  // opcode copied to D2
000068CC  C47C 0007                819                 AND      #%0000000000000111, D2
000068D0  3602                     820                 MOVE.W   D2,D3 // moving isolated bits into d3
000068D2  4E75                     821                 RTS
000068D4                           822  bits11to16
000068D4  4243                     823                 CLR      D3
000068D6  4EB9 00006A20            824                 JSR      COPY_OPCODE  // opcode copied to D2
000068DC  C47C 003F                825                 AND      #%0000000000111111, D2
000068E0  3602                     826                 MOVE.W   D2,D3 // moving isolated bits into d3
000068E2  4E75                     827                 RTS
000068E4                           828  bits1to10
000068E4  4243                     829                 CLR      D3
000068E6  4EB9 00006A20            830                 JSR      COPY_OPCODE  // opcode copied to D2
000068EC  C47C FFC0                831                 AND      #%1111111111000000, D2
000068F0  EC9A                     832                 ROR.L    #6, D2
000068F2  3602                     833                 MOVE.W   D2,D3 // moving isolated bits into d3
000068F4  4E75                     834                 RTS
000068F6                           835  ** DN       
000068F6                           836  MODE000         
000068F6  1CFC 0044                837                  MOVE.B  #'D',(A6)+     
000068FA  4E75                     838                  RTS
000068FC                           839  
000068FC                           840  ** AN
000068FC                           841  MODE001         
000068FC  4EB9 00006942            842                  JSR ADDRESS_BUFFER  
00006902  4E75                     843                  RTS      
00006904                           844  
00006904                           845   ** (AN)
00006904                           846  MODE010         
00006904  1CFC 0028                847                  MOVE.B  #'(', (A6)+
00006908  1CFC 0041                848                  MOVE.B  #'A',(A6)+  
0000690C  4E75                     849                  RTS      
0000690E                           850  
0000690E                           851  ** (AN)+ 
0000690E                           852  MODE011         
0000690E  1CFC 0028                853                  MOVE.B  #'(', (A6)+
00006912  1CFC 0041                854                  MOVE.B  #'A',(A6)+ 
00006916  4E75                     855                  RTS       
00006918                           856  
00006918                           857   ** -(AN)
00006918                           858  MODE100         
00006918  1CFC 002D                859                  MOVE.B  #'-', (A6)+
0000691C  1CFC 0028                860                  MOVE.B  #'(', (A6)+
00006920  1CFC 0041                861                  MOVE.B  #'A',(A6)+
00006924  4E75                     862                  RTS
00006926                           863                  
00006926                           864  **INVALID               
00006926                           865  MODE101         
00006926  1CFC 0028                866                  MOVE.B  #'(', (A6)+
0000692A  1CFC 0041                867                  MOVE.B  #'A',(A6)+ 
0000692E  4E75                     868                  RTS
00006930                           869                  
00006930                           870  **INVALID
00006930                           871  MODE110         
00006930  1CFC 0028                872                  MOVE.B  #'(', (A6)+
00006934  1CFC 0041                873                  MOVE.B  #'A',(A6)+
00006938  4E75                     874                  RTS  
0000693A                           875  
0000693A                           876  ** ABSOLUTE AND IMMEDIATE            
0000693A                           877  MODE111         
0000693A                           878                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
0000693A  4EB9 00006948            879                 JSR ABSOLUTE_BUFFER  
00006940  4E75                     880                 RTS            
00006942                           881                                          
00006942                           882  ADDRESS_BUFFER
00006942  1CFC 0041                883                  MOVE.B  #'A',(A6)+ 
00006946  4E75                     884                  RTS
00006948                           885                 
00006948                           886  ABSOLUTE_BUFFER
00006948  4243                     887                 CLR      D3
0000694A  3604                     888                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
0000694C  1CF8 0024                889                 MOVE.B   '$', (A6)+
00006950  B67C 0000                890                 CMP.W    #%000, D3
00006954  6700 0010                891                 BEQ      ABSOLUTE_WORD_BUFFER
00006958  4243                     892                 CLR      D3
0000695A  3604                     893                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
0000695C  B67C 0001                894                 CMP.W    #%001, D3
00006960  6700 0016                895                 BEQ      ABSOLUTE_LONG_BUFFER
00006964  4E75                     896                 RTS
00006966                           897                 
00006966                           898  ABSOLUTE_WORD_BUFFER
00006966                           899                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00006966                           900                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00006966  1CFC 0046                901                         MOVE.B #'F', (A6)+ 
0000696A  1CFC 0046                902                         MOVE.B #'F', (A6)+ 
0000696E  1CFC 0046                903                         MOVE.B #'F', (A6)+ 
00006972  1CFC 0046                904                         MOVE.B #'F', (A6)+ 
00006976  4E75                     905                         RTS       
00006978                           906                    
00006978                           907  ABSOLUTE_LONG_BUFFER       
00006978                           908                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00006978                           909                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00006978  1CFC 0047                910                         MOVE.B #'G', (A6)+ 
0000697C  1CFC 0047                911                         MOVE.B #'G', (A6)+ 
00006980  1CFC 0047                912                         MOVE.B #'G', (A6)+ 
00006984  1CFC 0047                913                         MOVE.B #'G', (A6)+
00006988  4E75                     914                         RTS 
0000698A                           915                                                      
0000698A                           916  
0000698A                           917  PRINT_BUFFER    
0000698A  1CFC 0000                918                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
0000698E  43F9 00006B40            919                 LEA      BUFFER, A1
00006994  303C 000E                920                 MOVE.W   #14,D0
00006998  4E4F                     921                 TRAP     #15
0000699A  6000 F8AD                922                 BRA EXIT
0000699E                           923                 
0000699E                           924                 
0000699E                           925  
0000699E                           926  INVALID_EA  
0000699E                           927                  * TODO: IMPLEMENT
0000699E                           928                  *** CLEAR OUT A6
0000699E                           929                  ** PUT INVALID MESSAGE INTO A6
0000699E  6000 F8A9                930                  BRA EXIT
000069A2                           931  INVALID_OP  
000069A2                           932                  ** TODO: IMPLEMENT
000069A2                           933                 *** CLEAR OUT A6
000069A2                           934                  ** PUT INVALID MESSAGE INTO A6
000069A2  6000 F8A5                935                  BRA EXIT             
000069A6                           936                  
000069A6  43F8 618B                937  NOP                 LEA     NOP_disp,A1          
000069AA  103C 000E                938                      MOVE.B  #14,D0
000069AE  4E4F                     939                      TRAP    #15
000069B0  6000 F897                940                      BRA     EXIT
000069B4                           941                   
000069B4                           942  RTS      
000069B4  43F8 61F2                943                      LEA     RTS_disp,A1          
000069B8  103C 000E                944                      MOVE.B  #14,D0
000069BC  4E4F                     945                      TRAP    #15 
000069BE  6000 F889                946                      BRA     EXIT
000069C2                           947  JSR      
000069C2  4DF9 00006B40            948                      LEA     BUFFER, A6
000069C8  1CFC 004A                949                      MOVE.B #'J', (A6)+
000069CC  1CFC 0053                950                      MOVE.B #'S', (A6)+
000069D0  1CFC 0052                951                      MOVE.B #'R', (A6)+
000069D4  1CFC 0020                952                      MOVE.B #' ', (A6)+
000069D8  43F9 00006B40            953                      LEA     BUFFER, A1
000069DE                           954                      ** BITS 10 - 12 MODE       
000069DE                           955                      ** BITS 13 - 16 REGISTER
000069DE  103C 000E                956                      MOVE.B  #14,D0
000069E2  4E4F                     957                      TRAP    #15 
000069E4  6000 F863                958                      BRA     EXIT
000069E8                           959                    
000069E8                           960  MOVEM      
000069E8                           961                     
000069E8                           962                      ** SIZE SUBROUTINE
000069E8                           963                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000069E8  C47C 0040                964                      AND #%0000000001000000,D2 
000069EC                           965                      * WORD
000069EC  B4BC 00000040            966                      CMP.L   #%0000000001000000,D2
000069F2  4EB9 00006A08            967                      JSR     MOVEM_W 
000069F8                           968                      *LONG
000069F8  B4BC 00000040            969                      CMP.L   #%0000000001000000,D2 
000069FE                           970                     ** JSR     MOVEM_L
000069FE  103C 000E                971                      MOVE.B  #14,D0
00006A02  4E4F                     972                      TRAP    #15
00006A04  6000 F843                973                      BRA     EXIT 
00006A08                           974                      
00006A08                           975  MOVEM_W 
00006A08  43F8 61A0                976                       LEA     MOVEM_disp,A1
00006A0C                           977                      * PRINT MOVEM
00006A0C  103C 000E                978                       MOVE.B  #14,D0
00006A10  4E4F                     979                       TRAP    #15
00006A12                           980          
00006A12                           981                      * PRINT WORD PORTION
00006A12  41F8 6237                982                       LEA     size_w, A0
00006A16  103C 000E                983                       MOVE.B  #14,D0
00006A1A  4E4F                     984                       TRAP    #15 
00006A1C                           985          
00006A1C  6000 F82B                986                       BRA     EXIT 
00006A20                           987       
00006A20                           988     
00006A20                           989  COPY_OPCODE 
00006A20                           990                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00006A20  4242                     991                       CLR    D2  
00006A22  3405                     992                       MOVE.W D5,D2 
00006A24  4E75                     993                       RTS  
00006A26                           994                       
00006A26                           995  ****************************
00006A26                           996  
00006A26                           997                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006A26                           998                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006A26                           999                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006A26                          1000  GETSIZE_ADD
00006A26  4EB8 68A0               1001              JSR     bits8to10
00006A2A  B67C 0000               1002              CMP     #%000,D3
00006A2E  6600 0010               1003              BNE     ADD_NOTBYTE
00006A32  4EB9 00006B10           1004              JSR     SIZEISBYTE
00006A38  3C3C 0001               1005              MOVE    #1,D6
00006A3C  4243                    1006              CLR     D3
00006A3E  4E75                    1007              RTS
00006A40                          1008          
00006A40                          1009  ADD_NOTBYTE 
00006A40  B67C 0001               1010              CMP     #%001,D3
00006A44  6600 0010               1011              BNE     ADD_NOTWORD
00006A48  4EB9 00006B20           1012              JSR     SIZEISWORD
00006A4E  3C3C 0001               1013              MOVE    #1,D6
00006A52  4243                    1014              CLR     D3
00006A54  4E75                    1015              RTS
00006A56                          1016              
00006A56                          1017  ADD_NOTWORD
00006A56  B67C 0002               1018              CMP     #%010,D3
00006A5A  6600 0010               1019              BNE     ADD_NOTLEFT
00006A5E  4EB9 00006B30           1020              JSR     SIZEISLONG
00006A64  3C3C 0001               1021              MOVE    #1,D6
00006A68  4243                    1022              CLR     D3
00006A6A  4E75                    1023              RTS
00006A6C                          1024              
00006A6C                          1025  ADD_NOTLEFT     ;check other direction
00006A6C  B67C 0004               1026              CMP     #%100,D3
00006A70  6600 0010               1027              BNE     ADD_NOTRIGHTBYTE
00006A74  4EB9 00006B10           1028              JSR     SIZEISBYTE
00006A7A  3C3C 0002               1029              MOVE    #2,D6
00006A7E  4243                    1030              CLR     D3
00006A80  4E75                    1031              RTS
00006A82                          1032              
00006A82                          1033  ADD_NOTRIGHTBYTE
00006A82  B67C 0005               1034              CMP     #%101,D3
00006A86  6600 0010               1035              BNE     ADD_NOTRIGHTWORD
00006A8A  4EB9 00006B20           1036              JSR     SIZEISWORD
00006A90  3C3C 0002               1037              MOVE    #2,D6
00006A94  4243                    1038              CLR     D3
00006A96  4E75                    1039              RTS
00006A98                          1040  
00006A98                          1041  ADD_NOTRIGHTWORD
00006A98  B67C 0006               1042              CMP     #%110,D3
00006A9C  6600 FF00               1043              BNE     INVALID_EA
00006AA0  4EB9 00006B30           1044              JSR     SIZEISLONG
00006AA6  3C3C 0002               1045              MOVE    #2,D6
00006AAA  4243                    1046              CLR     D3
00006AAC  4E75                    1047              RTS 
00006AAE                          1048                               
00006AAE                          1049                       
00006AAE                          1050                       
00006AAE                          1051  *****************************                  
00006AAE                          1052  GETSIZE_ADDI
00006AAE  4EB8 68A0               1053          JSR     bits8to10
00006AB2  B67C 0000               1054          CMP     #%000,D3
00006AB6  6600 000C               1055          BNE     ADDI_NOTBYTE
00006ABA  4EB9 00006B10           1056          JSR     SIZEISBYTE
00006AC0  4243                    1057          CLR     D3
00006AC2  4E75                    1058          RTS
00006AC4                          1059  
00006AC4                          1060  ADDI_NOTBYTE
00006AC4  B67C 0001               1061          CMP     #%001,D3
00006AC8  6600 000C               1062          BNE     ADDI_NOTWORD
00006ACC  4EB9 00006B20           1063          JSR     SIZEISWORD
00006AD2  4243                    1064          CLR     D3
00006AD4  4E75                    1065          RTS
00006AD6                          1066          
00006AD6                          1067  ADDI_NOTWORD
00006AD6  B67C 0002               1068          CMP     #%010,D3
00006ADA  6600 FEC2               1069          BNE     INVALID_EA
00006ADE  4EB9 00006B30           1070          JSR     SIZEISLONG
00006AE4  4243                    1071          CLR     D3
00006AE6  4E75                    1072          RTS
00006AE8                          1073          
00006AE8                          1074                              
00006AE8                          1075                       
00006AE8                          1076  ********************************          
00006AE8                          1077                       
00006AE8                          1078                       
00006AE8                          1079  ********************************                     
00006AE8                          1080  GETSIZE_ADDA
00006AE8  4EB8 68A0               1081          JSR     bits8to10
00006AEC  B67C 0003               1082          CMP     #%011,D3
00006AF0  6600 000C               1083          BNE     ADDA_NOTWORD
00006AF4  4EB9 00006B20           1084          JSR     SIZEISWORD
00006AFA  4243                    1085          CLR     D3
00006AFC  4E75                    1086          RTS
00006AFE                          1087          
00006AFE                          1088  
00006AFE                          1089          
00006AFE                          1090  ADDA_NOTWORD
00006AFE  B67C 0007               1091          CMP     #%111,D3
00006B02  6600 FE9A               1092          BNE     INVALID_EA
00006B06  4EB9 00006B30           1093          JSR     SIZEISLONG
00006B0C  4243                    1094          CLR     D3
00006B0E  4E75                    1095          RTS
00006B10                          1096  **********************************        
00006B10                          1097      
00006B10                          1098  SIZEISBYTE
00006B10  1CFC 002E               1099         MOVE.B   #'.',(A6)+
00006B14  1CFC 0042               1100         MOVE.B   #'B',(A6)+
00006B18  1CFC 0020               1101         MOVE.B   #' ',(A6)+
00006B1C  4243                    1102         CLR      D3
00006B1E  4E75                    1103         RTS
00006B20                          1104  
00006B20                          1105  SIZEISWORD    
00006B20  1CFC 002E               1106         MOVE.B   #'.',(A6)+
00006B24  1CFC 0057               1107         MOVE.B   #'W',(A6)+
00006B28  1CFC 0020               1108         MOVE.B   #' ',(A6)+
00006B2C  4243                    1109         CLR      D3
00006B2E  4E75                    1110         RTS
00006B30                          1111                  
00006B30                          1112  SIZEISLONG    
00006B30  1CFC 002E               1113         MOVE.B   #'.',(A6)+
00006B34  1CFC 004C               1114         MOVE.B   #'L',(A6)+
00006B38  1CFC 0020               1115         MOVE.B   #' ',(A6)+
00006B3C  4243                    1116         CLR      D3
00006B3E  4E75                    1117         RTS
00006B40                          1118                  
00006B40                          1119       
00006B40= 20 20 20 20 20 00       1120  BUFFER DC.B '     ',0     
00006B46                          1121        
00006B46                          1122  
00006B46                          1123      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     6948
ABSOLUTE_LONG_BUFFER  6978
ABSOLUTE_WORD_BUFFER  6966
ADD                 63EC
ADDA                63C6
ADDA_BUFFER         63D0
ADDA_DISP           61AA
ADDA_NOTWORD        6AFE
ADDI                6490
ADDI_BUFFER         6518
ADDI_DES            64B4
ADDI_DISP           61AF
ADDI_NOTBYTE        6AC4
ADDI_NOTWORD        6AD6
ADDI_SRC            64A6
ADDQ                662E
ADDQ_BUFFER         6638
ADDQ_DISP           61B4
ADDRESS_BUFFER      6942
ADDR_ODDBIT_MSG     60C4
ADDR_ORDER_CHECK    60EB
ADD_BUFFER          6436
ADD_DEST            646E
ADD_DIRECTION_REVERSED  6414
ADD_DISP            61A6
ADD_DONE            642E
ADD_NOTBYTE         6A40
ADD_NOTLEFT         6A6C
ADD_NOTRIGHTBYTE    6A82
ADD_NOTRIGHTWORD    6A98
ADD_NOTWORD         6A56
ADD_SRC             644A
AND                 670E
AND_BUFFER          6718
AND_DISP            61CF
ASL                 674A
ASL_BUFFER          6754
ASL_DISP            61DE
ASR                 672E
ASR_BUFFER          6738
ASR_DISP            61E2
BACKSLASHSIGH       622C
BCC_DISP            61F6
BGT_DISP            61FA
BITS11TO13          68B2
BITS11TO16          68D4
BITS14TO16          68C4
BITS1TO10           68E4
BITS5TO7            687A
BITS5TO8            688E
BITS8TO10           68A0
BLE_DISP            61FE
BUFFER              6B40
CLOSEPAREN          6230
CLR_DISP            61CB
CMP                 66CE
CMP_BUFFER          66D8
CODE0000            62AE
CODE0001            62C2
CODE0010            62C6
CODE0011            62CA
CODE0100            62CE
CODE0101            6302
CODE0110            6308
CODE0111            630C
CODE1000            6312
CODE1001            6324
CODE1010            632A
CODE1011            632E
CODE1100            6334
CODE1101            6346
CODE1110            6392
CODE1111            63C2
COMMASIGN           622A
COPY_OPCODE         6A20
CR                  D
DIVU                6672
DIVU_BUFFER         667C
DIVU_DISP           61C2
DOLLARSIGN          6224
DONE                6878
ENDTEST_MSG         613F
EXIT                6249
FINISHER            684A
FIVE                681E
FOUR                680E
GETSIZE_ADD         6A26
GETSIZE_ADDA        6AE8
GETSIZE_ADDI        6AAE
HEXATABLE           6202
INPUT_BUFFER        623E
INSERT_NUM          67CE
INVALIDEA_DISP      6183
INVALID_DISP        617E
INVALID_EA          699E
INVALID_OP          69A2
JMP_MODE            679E
JMP_TABLE           624E
JSR                 69C2
JSR_DISP            61EE
LEA                 6534
LEA_BUFFER          6558
LEA_DEST            660A
LEA_DISP            61C7
LEA_SRC             656A
LF                  A
LINEBREAK           617B
LINECOUNT           623D
LOCATION_ENDDATA    6244
LOCATION_END_MSG    60A7
LOCATION_STARTDATA  6240
LOCATION_START_MSG  6088
LSL                 6766
LSL_BUFFER          6770
LSL_DISP            61D6
LSR                 6782
LSR_BUFFER          678C
LSR_DISP            61DA
MINUSSIGN           6228
MODE000             68F6
MODE001             68FC
MODE010             6904
MODE011             690E
MODE100             6918
MODE101             6926
MODE110             6930
MODE111             693A
MOVEA_DISP          6194
MOVEM               69E8
MOVEM_DISP          61A0
MOVEM_W             6A08
MOVEQ               664E
MOVEQ_BUFFER        6658
MOVEQ_DISP          619A
MOVE_DISP           618F
MULS                66EE
MULS_BUFFER         66F8
MULS_DISP           61BD
NOP                 69A6
NOP_DISP            618B
ONE                 67DE
ONEPAREN            686A
OPENPAREN           622E
OR                  6692
OR_BUFFER           669C
OR_DISP             61D3
PAUSE_MSG           6125
PLUSSIGN            6226
POSTINCR            6858
POUNDSIGN           6222
PRINT_BUFFER        698A
ROL_DISP            61E6
ROR_DISP            61EA
RTS                 69B4
RTS_DISP            61F2
SEVEN               683E
SIX                 682E
SIZEISBYTE          6B10
SIZEISLONG          6B30
SIZEISWORD          6B20
SIZE_B              6234
SIZE_L              623A
SIZE_W              6237
SPACE               6232
START               6000
SUB                 66AE
SUB_BUFFER          66B8
SUB_DISP            61B9
TABLE_LENGTH        6248
THREE               67FE
TWO                 67EE
WELCOME_MSG         6024
