00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/27/2017 7:16:36 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D5 - CURRENT OPCODE
00000000                             3  ***
00000000                             4  ***
00000000                             5  
00000000                             6  
00006000                             7  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       8                     ADDQ.B  #$1,D1      
00006002                             9                   
00006002  41F9 0000624E             10                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 0000684C             11                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      12                   CLR.L   D3              *Zero it
00006010                            13                   * TEST OPCODES
00006010                            14                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006010                            15                   ; MOVE.W  #$4E71,D3 * NOP
00006010                            16                   ; MOVE.W  #$4E75,D3 * RTS
00006010                            17                   ; MOVE.W  #$4EB0,D3 * JSR
00006010                            18                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006010                            19                   ; MOVE.W  #$D4FC,D3   *ADDA.L   #1000, A2  This appears to be a word
00006010  363C D5FC                 20                    MOVE.W  #$D5FC,D3   *ADDA.W   #1000, A2
00006014                            21                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006014                            22                   ; MOVE.W    #$5201,D3    *ADDQ
00006014                            23                   ;MOVE.W     #$47D5, D3
00006014                            24                  ; MOVE.W     #$7E70, D3 *MOVEQ
00006014                            25                  ;MOVE.W     #$80C0, D3 *DIVU
00006014                            26    
00006014                            27  
00006014                            28                   
00006014  3A03                      29                   MOVE.W  D3,D5
00006016  183C 000C                 30                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601A                            31  
0000601A                            32             
0000601A  E86B                      33                   LSR.W   D4,D3       *Move the bits
0000601C  C6FC 0006                 34                   MULU    #6,D3       *Form offset     
00006020  4EB0 3000                 35                   JSR     0(A0,D3)   *Jump indirect with index
00006024                            36                  
00006024                            37      INCLUDE 'definitions.x68'
00006024                            38  
00006024  =0000000D                 39  CR              EQU     $0D         carriage return
00006024  =0000000A                 40  LF              EQU     $0A         line feed
00006024= 43 53 53 20 34 32 ...     41  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
00006048= 42 79 20 54 65 61 ...     42                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00006088= 45 6E 74 65 72 20 ...     43  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060A7= 45 6E 74 65 72 20 ...     44  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C4= 41 64 64 72 65 73 ...     45  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EB= 45 6E 64 69 6E 67 ...     46  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006125= 50 72 65 73 73 20 ...     47  pause_msg           DC.B    'Press enter to continue!',CR,LF
0000613F= 52 65 61 63 68 65 ...     48  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615A= 54 72 79 20 61 6E ...     49                      DC.B    'Try another location? (yes/no): ',0
0000617B= 0D 0A 00                  50  linebreak           DC.B    CR,LF,0
0000617E                            51                      
0000617E= 44 41 54 41 00            52  Invalid_disp        DC.B    'DATA',0
00006183= 57 52 4F 4E 47 45 ...     53  InvalidEA_disp      DC.B    'WRONGEA',0
0000618B                            54  
0000618B= 4E 4F 50 00               55  NOP_disp            DC.B    'NOP',0
0000618F= 4D 4F 56 45 00            56  MOVE_disp           DC.B    'MOVE',0
00006194= 4D 4F 56 45 41 00         57  MOVEA_disp          DC.B    'MOVEA',0
0000619A= 4D 4F 56 45 51 00         58  MOVEQ_disp          DC.B    'MOVEQ',0
000061A0= 4D 4F 56 45 4D 00         59  MOVEM_disp          DC.B    'MOVEM',0
000061A6= 41 44 44 00               60  ADD_disp            DC.B    'ADD',0
000061AA= 41 44 44 41 00            61  ADDA_disp           DC.B    'ADDA',0
000061AF= 41 44 44 49 00            62  ADDI_disp           DC.B    'ADDI',0
000061B4= 41 44 44 51 00            63  ADDQ_disp           DC.B    'ADDQ',0
000061B9= 53 55 42 00               64  SUB_disp            DC.B    'SUB',0
000061BD= 4D 55 4C 53 00            65  MULS_disp           DC.B    'MULS',0
000061C2= 44 49 56 55 00            66  DIVU_disp           DC.B    'DIVU',0
000061C7= 4C 45 41 00               67  LEA_disp            DC.B    'LEA',0
000061CB= 43 4C 52 00               68  CLR_disp            DC.B    'CLR',0
000061CF= 41 4E 44 00               69  AND_disp            DC.B    'AND',0
000061D3= 4F 52 00                  70  OR_disp             DC.B    'OR',0
000061D6= 4C 53 4C 00               71  LSL_disp            DC.B    'LSL',0
000061DA= 4C 53 52 00               72  LSR_disp            DC.B    'LSR',0
000061DE= 41 53 4C 00               73  ASL_disp            DC.B    'ASL',0
000061E2= 41 53 52 00               74  ASR_disp            DC.B    'ASR',0
000061E6= 52 4F 4C 00               75  ROL_disp            DC.B    'ROL',0
000061EA= 52 4F 52 00               76  ROR_disp            DC.B    'ROR',0
000061EE= 4A 53 52 00               77  JSR_disp            DC.B    'JSR',0
000061F2= 52 54 53 00               78  RTS_disp            DC.B    'RTS',0
000061F6= 42 43 43 00               79  BCC_disp            DC.B    'BCC',0
000061FA= 42 47 54 00               80  BGT_disp            DC.B    'BGT',0    
000061FE= 42 4C 45 00               81  BLE_disp            DC.b    'BLE',0
00006202                            82  
00006202                            83  
00006202= 30 00                     84  hexaTable               DC.B    '0',0
00006204= 31 00                     85                          DC.B    '1',0
00006206= 32 00                     86                          DC.B    '2',0
00006208= 33 00                     87                          DC.B    '3',0
0000620A= 34 00                     88                          DC.B    '4',0
0000620C= 35 00                     89                          DC.B    '5',0
0000620E= 36 00                     90                          DC.B    '6',0
00006210= 37 00                     91                          DC.B    '7',0
00006212= 38 00                     92                          DC.B    '8',0
00006214= 39 00                     93                          DC.B    '9',0
00006216= 41 00                     94                          DC.B    'A',0
00006218= 42 00                     95                          DC.B    'B',0
0000621A= 43 00                     96                          DC.B    'C',0
0000621C= 44 00                     97                          DC.B    'D',0
0000621E= 45 00                     98                          DC.B    'E',0
00006220= 46 00                     99                          DC.B    'F',0
00006222= 23 00                    100  poundsign               DC.B    '#',0
00006224= 24 00                    101  dollarsign              DC.B    '$',0
00006226= 2B 00                    102  plussign                DC.B    '+',0
00006228= 2D 00                    103  minussign               DC.B    '-',0
0000622A= 2C 00                    104  commasign               DC.B    ',',0
0000622C= 2F 00                    105  backslashsigh           DC.B    '/',0
0000622E= 28 00                    106  openparen               DC.B    '(',0
00006230= 29 00                    107  closeparen              DC.B    ')',0
00006232= 20 00                    108  space                   DC.B    ' ',0   
00006234= 2E 42 00                 109  size_b                  DC.B    '.B',0
00006237= 2E 57 00                 110  size_w                  DC.B    '.W',0        
0000623A= 2E 4C 00                 111  size_l                  DC.B    '.L',0
0000623D                           112  
0000623D                           113  linecount               DS.B    1       *storeage for lines on a screen
0000623E= 01                       114  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006240                           115  location_startData      DS.L    1       *location on where to start reading data
00006244                           116  location_endData        DS.L    1       *location on where to end reading data
00006248                           117  table_length            DS.B    1       *Number of spaces in the table to print to console
00006249                           118  
00006249                           119  
00006249                           120  -------------------- end include --------------------
00006249                           121             
00006249                           122  EXIT                 
0000624A  FFFF FFFF                123         SIMHALT   
0000624E                           124  
0000624E  4EF9 000062AE            125  jmp_table      JMP         code0000
00006254                           126                  *ADDI
00006254                           127  
00006254  4EF9 000062C2            128                 JMP         code0001
0000625A                           129  
0000625A  4EF9 000062C6            130                 JMP         code0010
00006260                           131  
00006260  4EF9 000062CA            132                 JMP         code0011
00006266                           133  
00006266  4EF9 000062CE            134                 JMP         code0100
0000626C                           135                             
0000626C  4EF9 00006302            136                 JMP         code0101
00006272                           137                 * ADDQ
00006272                           138                  
00006272                           139        
00006272  4EF9 00006308            140                 JMP         code0110
00006278                           141                 * BCC
00006278                           142                 * BGT
00006278                           143                 * BLE
00006278                           144                 
00006278  4EF9 0000630C            145                 JMP         code0111
0000627E                           146                 * MOVEQ
0000627E                           147  
0000627E  4EF9 00006312            148                 JMP         code1000
00006284                           149                 * DIVU
00006284                           150                 * OR
00006284                           151  
00006284  4EF9 00006318            152                 JMP         code1001
0000628A                           153                  *SUB
0000628A  4EF9 0000631C            154                 JMP         code1010
00006290                           155                 
00006290  4EF9 00006320            156                 JMP         code1011
00006296                           157                 * CMP
00006296  4EF9 00006322            158                 JMP         code1100
0000629C                           159                 * MULS
0000629C                           160                 * AND
0000629C                           161          
0000629C  4EF9 00006326            162                 JMP         code1101
000062A2                           163                 *ADD
000062A2                           164                 *ADDA
000062A2  4EF9 00006372            165                 JMP         code1110
000062A8                           166                 * ASR
000062A8                           167                 * ASL
000062A8                           168                 * LSL
000062A8                           169                 * LSR
000062A8                           170                 * ROL
000062A8                           171                 * ROR
000062A8                           172  
000062A8  4EF9 00006376            173                 JMP         code1111
000062AE                           174  
000062AE                           175  
000062AE                           176  code0000      
000062AE  4EB9 00006694            177                 JSR          bits5to8 // RETURNS INTO D3
000062B4  B6BC 00000006            178                 CMP.L        #%0110, D3
000062BA  6600 04CA                179                 BNE          INVALID_OP
000062BE  6000 0104                180                 BRA          ADDI  
000062C2                           181  
000062C2  4E72 2700                182  code0001       STOP        #$2700
000062C6                           183  
000062C6  4E72 2700                184  code0010       STOP        #$2700
000062CA                           185  
000062CA  4E72 2700                186  code0011       STOP        #$2700
000062CE                           187  
000062CE                           188  code0100       
000062CE  4EB9 00006804            189                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D4                           190                  
000062D4                           191                 *NOP
000062D4  C47C 0FFF                192                 AND     #%0000111111111111,D2
000062D8  B4BC 00000E71            193                 CMP.L   #%000111001110001, D2
000062DE  6700 04AA                194                 BEQ     NOP
000062E2                           195                 
000062E2                           196                 *RTS
000062E2  C47C 0FFF                197                 AND     #%0000111111111111,D2
000062E6  B4BC 00000E75            198                 CMP.L   #%0000111001110101, D2
000062EC  6700 04AA                199                 BEQ     RTS
000062F0                           200  
000062F0                           201                 *JSR
000062F0  C47C 0FC0                202                 AND     #%0000111111000000,D2
000062F4  B4BC 00000E80            203                 CMP.L   #%0000111010000000,D2
000062FA  6700 04AA                204                 BEQ     JSR
000062FE                           205                 
000062FE                           206                 * MOVEM
000062FE                           207                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000062FE                           208                ** AND     #%0000111110000000,D2
000062FE                           209                 * DATA REGISTER
000062FE                           210                ** CMP.L   #%0000100010000000, D2
000062FE                           211                 ** JSR      MOVEM
000062FE                           212                 * ADDRESS REGISTER (DECREMENTED)
000062FE                           213                 ** CMP.L  #%0000110010000000, D2
000062FE                           214                 ** JSR    MOVEM
000062FE                           215                  
000062FE                           216                  ** TO DO: BRANCH IF INVALID OPCODE
000062FE                           217                  *LEA - if it's not the top codes, it's LEA
000062FE  6000 014A                218                  BRA     LEA
00006302                           219  code0101      
00006302                           220  
00006302  4EB9 00006542            221                  JSR   ADDQ
00006308                           222  
00006308  4E72 2700                223  code0110        STOP        #$2700
0000630C                           224  
0000630C                           225  code0111       
0000630C  4EB9 00006562            226                  JSR       MOVEQ
00006312                           227  
00006312                           228  code1000      
00006312  4EB9 00006586            229                  JSR        DIVU
00006318                           230  
00006318                           231  
00006318  4E72 2700                232  code1001       STOP        #$2700
0000631C                           233  
0000631C  4E72 2700                234  code1010       STOP        #$2700
00006320                           235  
00006320  60FE                     236  code1011       BRA        code1011
00006322                           237  
00006322                           238    
00006322                           239  
00006322  4E72 2700                240  code1100       STOP        #$2700
00006326                           241  
00006326                           242  code1101       
00006326  4EB9 00006804            243                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000632C                           244                 *ADDA
0000632C  4EB9 000066A6            245                 JSR      bits8to10
00006332  B67C 0003                246                 CMP      #%011, D3  ** WORD
00006336  6700 0042                247                 BEQ      ADDA
0000633A  B67C 0007                248                 CMP      #%111, D3   ** LONG
0000633E  6700 003A                249                 BEQ      ADDA
00006342                           250                 
00006342                           251                 *ADD
00006342  B67C 0000                252                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00006346  6700 005C                253                 BEQ      ADD
0000634A  B67C 0001                254                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000634E  6700 0054                255                 BEQ      ADD
00006352  B67C 0002                256                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00006356  6700 004C                257                 BEQ      ADD
0000635A  B67C 0004                258                 CMP      #%100, D3   ** BYTE TO EA
0000635E  6700 0044                259                 BEQ      ADD
00006362  B67C 0005                260                 CMP      #%101, D3   ** WORD TO EA
00006366  6700 003C                261                 BEQ      ADD
0000636A  B67C 0006                262                 CMP      #%110, D3   ** LONG TO EA
0000636E  6700 0034                263                 BEQ      ADD
00006372                           264                 
00006372                           265  
00006372  4E72 2700                266  code1110       STOP        #$2700
00006376                           267  
00006376  4E72 2700                268  code1111       STOP        #$2700
0000637A                           269  
0000637A                           270  ADDA    
0000637A  4EB9 00006384            271                 JSR     ADDA_BUFFER
00006380  6000 03EC                272                 BRA     PRINT_BUFFER
00006384                           273                  
00006384                           274  ADDA_BUFFER
00006384  1CFC 0041                275                 MOVE.B   #'A',(A6)+
00006388  1CFC 0044                276                 MOVE.B   #'D', (A6)+  
0000638C  1CFC 0044                277                 MOVE.B   #'D', (A6)+
00006390  1CFC 0041                278                 MOVE.B   #'A', (A6)+
00006394  1CFC 002E                279                 MOVE.B   #'.', (A6)+          
00006398  4EB9 0000680A            280                 JSR      GETSIZE_ADDA
0000639E                           281                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000639E                           282                 ** VALID SIZES ARE W (011) ,L (111)
0000639E  1CFC 0020                283                 MOVE.B   #' ', (A6)+
000063A2  4E75                     284                 RTS
000063A4                           285                 
000063A4                           286  ADD    
000063A4  4EB9 000063AE            287                 JSR     ADD_BUFFER
000063AA  6000 03C2                288                 BRA     PRINT_BUFFER
000063AE                           289                  
000063AE                           290  ADD_BUFFER
000063AE  1CFC 0041                291                 MOVE.B   #'A',(A6)+
000063B2  1CFC 0044                292                 MOVE.B   #'D', (A6)+  
000063B6  1CFC 0044                293                 MOVE.B   #'D', (A6)+
000063BA  1CFC 002E                294                 MOVE.B   #'.', (A6)+
000063BE                           295                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000063BE                           296                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000063BE                           297                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000063BE  1CFC 0020                298                 MOVE.B   #' ', (A6)+
000063C2  4E75                     299                 RTS               
000063C4                           300  ADDI
000063C4  4EB9 00006430            301                  JSR     ADDI_BUFFER
000063CA  4EB9 000063DA            302                  JSR     ADDI_SRC
000063D0  4EB9 000063DE            303                  JSR     ADDI_DES
000063D6  6000 0396                304                  BRA     PRINT_BUFFER
000063DA                           305                  
000063DA                           306  ADDI_SRC                        
000063DA  1CFC 0023                307                  MOVE.B  #'#', (A6)+
000063DE                           308                    ** TODO: IMPLEMENT THIS IN EA
000063DE                           309                  ** Immediate field—Data immediately following the instruction.
000063DE                           310                  **If size = 00, the data is the low-order byte of the immediate word.
000063DE                           311                  **If size = 01, the data is the entire immediate word.
000063DE                           312                  **If size = 10, the data is the next two immediate words. 
000063DE                           313  ADDI_DES
000063DE                           314                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
000063DE                           315                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
000063DE  4EB9 000066B8            316                 JSR      bits11to13
000063E4  B67C 0001                317                 CMP      #%001, D3 **AN
000063E8  6700 0398                318                 BEQ      INVALID_EA
000063EC  B67C 0005                319                 CMP      #%101, D3 **COMPLICATED
000063F0  6700 0390                320                 BEQ      INVALID_EA
000063F4  B67C 0006                321                 CMP      #%110, D3 **COMPLICATED
000063F8  6700 0388                322                 BEQ      INVALID_EA
000063FC                           323                 
000063FC  4EB9 000066DA            324                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00006402  B67C 003C                325                 CMP      #%111100,D3 // immediate data
00006406  6700 037A                326                 BEQ      INVALID_EA
0000640A  B67C 003A                327                 CMP      #%111010,D3 // complicated
0000640E  6700 0372                328                 BEQ      INVALID_EA
00006412  B67C 003B                329                 CMP      #%111011,D3 // complicated
00006416  6700 036A                330                 BEQ      INVALID_EA
0000641A                           331                 
0000641A  4EB9 000066B8            332                 JSR      bits11to13 ** grab bits to jump with
00006420  41F9 000065A6            333                 LEA     jmp_mode,A0    *Index into the table
00006426  C6FC 0006                334                 MULU    #6,D3       *Form offset     
0000642A  4EB0 3000                335                 JSR     0(A0,D3)   *Jump indirect with index
0000642E  4E75                     336                 RTS
00006430                           337                 
00006430                           338                             
00006430                           339  ADDI_BUFFER
00006430  1CFC 0041                340                 MOVE.B   #'A',(A6)+
00006434  1CFC 0044                341                 MOVE.B   #'D', (A6)+  
00006438  1CFC 0044                342                 MOVE.B   #'D', (A6)+
0000643C  1CFC 0049                343                 MOVE.B   #'I', (A6)+
00006440  1CFC 002E                344                 MOVE.B   #'.', (A6)+
00006444                           345                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00006444                           346                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006444  1CFC 0020                347                 MOVE.B   #' ', (A6)+
00006448  4E75                     348                 RTS
0000644A                           349                              
0000644A                           350  LEA
0000644A  4EB9 000066A6            351                 JSR      bits8to10   // 1 1 1
00006450  B47C 0007                352                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
00006454  6600 0330                353                 BNE      INVALID_OP
00006458  4EB9 0000646E            354                 JSR      LEA_BUFFER
0000645E  4EB9 00006480            355                 JSR      LEA_SRC
00006464  4EB9 0000651E            356                 JSR      LEA_DEST
0000646A  6000 0302                357                 BRA      PRINT_BUFFER
0000646E                           358                 
0000646E                           359  LEA_BUFFER 
0000646E  1CFC 004C                360                 MOVE.B   #'L',(A6)+
00006472  1CFC 0045                361                 MOVE.B   #'E', (A6)+  
00006476  1CFC 0041                362                 MOVE.B   #'A', (A6)+
0000647A  1CFC 0020                363                 MOVE.B   #' ', (A6)+
0000647E  4E75                     364                 RTS
00006480                           365            
00006480                           366  LEA_SRC
00006480                           367              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00006480  4EB9 000066B8            368              JSR      bits11to13  // source mode - D3
00006486  B67C 0000                369              CMP      #%000, D3
0000648A  6700 02F6                370              BEQ      INVALID_EA
0000648E  B67C 0001                371              CMP      #%001, D3
00006492  6700 02EE                372              BEQ      INVALID_EA
00006496  B67C 0003                373              CMP      #%011, D3
0000649A  6700 02E6                374              BEQ      INVALID_EA
0000649E  B67C 0004                375              CMP      #%100, D3
000064A2  6700 02DE                376              BEQ      INVALID_EA
000064A6  B67C 0005                377              CMP      #%101, D3
000064AA  6700 02D6                378              BEQ      INVALID_EA
000064AE  B67C 0006                379              CMP      #%110, D3
000064B2  6700 02CE                380              BEQ      INVALID_EA
000064B6                           381  
000064B6                           382              
000064B6                           383              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
000064B6  4EB9 000066CA            384              JSR      bits14to16 // source register - d4
000064BC  B67C 0004                385              CMP      #%100, D3
000064C0  6700 02C0                386              BEQ      INVALID_EA
000064C4  B67C 0002                387              CMP      #%010, D3
000064C8  6700 02B8                388              BEQ      INVALID_EA
000064CC  B67C 0003                389              CMP      #%011, D3
000064D0  6700 02B0                390              BEQ      INVALID_EA
000064D4                           391              
000064D4                           392  
000064D4  4EB9 000066DA            393               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000064DA  B67C 003C                394               CMP      #%111100,D3 // immediate data
000064DE  6700 02A2                395               BEQ      INVALID_EA
000064E2  B67C 003A                396               CMP      #%111010,D3 // complicated
000064E6  6700 029A                397               BEQ      INVALID_EA
000064EA  B67C 003B                398               CMP      #%111011,D3 // complicated
000064EE  6700 0292                399               BEQ      INVALID_EA
000064F2                           400     
000064F2  4EB9 000066B8            401               JSR      bits11to13 ** grab mode bits to jump with
000064F8                           402  
000064F8  41F9 000065A6            403               LEA     jmp_mode,A0    *Index into the table
000064FE  C6FC 0006                404               MULU    #6,D3       *Form offset     
00006502  4EB0 3000                405               JSR     0(A0,D3)   *Jump indirect with index
00006506                           406               
00006506                           407  
00006506  4243                     408               CLR     D3
00006508  4EB9 000066CA            409               JSR     bits14to16
0000650E  4EB9 000065D6            410               JSR     insert_num
00006514                           411               
00006514  1CFC 002C                412               MOVE.B     #',', (A6)+
00006518  1CFC 0020                413               MOVE.B     #' ', (A6)+
0000651C                           414  
0000651C  4E75                     415               RTS
0000651E                           416               
0000651E                           417  LEA_DEST    
0000651E  4244                     418                  CLR     D4
00006520  41F9 000065A6            419                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00006526  363C 0001                420                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
0000652A  3803                     421                  MOVE    D3,D4
0000652C  C6FC 0006                422                  MULU    #6,D3       *Form offset     
00006530  4EB0 3000                423                  JSR     0(A0,D3)   *Jump indirect with index
00006534                           424                  
00006534  4EB9 00006680            425                  JSR     bits5to7
0000653A  4EB9 000065D6            426                  JSR     insert_num
00006540                           427                  
00006540  4E75                     428                  RTS
00006542                           429  
00006542                           430  
00006542                           431  ADDQ
00006542  4EB9 0000654C            432                  JSR     ADDQ_BUFFER
00006548  6000 0224                433                  BRA     PRINT_BUFFER
0000654C                           434  
0000654C                           435  ADDQ_BUFFER
0000654C  1CFC 0041                436                 MOVE.B   #'A',(A6)+
00006550  1CFC 0044                437                 MOVE.B   #'D', (A6)+  
00006554  1CFC 0044                438                 MOVE.B   #'D', (A6)+
00006558  1CFC 0051                439                 MOVE.B   #'Q', (A6)+
0000655C                           440                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
0000655C                           441                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000655C  1CFC 0020                442                 MOVE.B   #' ', (A6)+
00006560  4E75                     443                 RTS
00006562                           444                 
00006562                           445  MOVEQ
00006562  4EB9 0000656C            446                  JSR     MOVEQ_BUFFER
00006568  6000 0204                447                  BRA     PRINT_BUFFER
0000656C                           448  
0000656C                           449  MOVEQ_BUFFER
0000656C  1CFC 004D                450                 MOVE.B   #'M',(A6)+
00006570  1CFC 004F                451                 MOVE.B   #'O', (A6)+  
00006574  1CFC 0056                452                 MOVE.B   #'V', (A6)+
00006578  1CFC 0045                453                 MOVE.B   #'E', (A6)+
0000657C  1CFC 0051                454                 MOVE.B   #'Q', (A6)+
00006580  1CFC 0020                455                 MOVE.B   #' ', (A6)+
00006584  4E75                     456                 RTS
00006586                           457  
00006586                           458                 
00006586                           459  DIVU
00006586  4EB9 00006590            460                  JSR     DIVU_BUFFER
0000658C  6000 01E0                461                  BRA     PRINT_BUFFER
00006590                           462  
00006590                           463  DIVU_BUFFER
00006590  1CFC 0044                464                 MOVE.B   #'D',(A6)+
00006594  1CFC 0049                465                 MOVE.B   #'I', (A6)+  
00006598  1CFC 0056                466                 MOVE.B   #'V', (A6)+
0000659C  1CFC 0055                467                 MOVE.B   #'U', (A6)+
000065A0  1CFC 0020                468                 MOVE.B   #' ', (A6)+
000065A4  4E75                     469                 RTS                  
000065A6                           470  
000065A6                           471  jmp_mode
000065A6  4EF9 000066EA            472                  JMP     MODE000  ** DN
000065AC  4EF9 000066F2            473                  JMP     MODE001  ** AN
000065B2  4EF9 000066FA            474                  JMP     MODE010  ** (AN)
000065B8  4EF9 00006704            475                  JMP     MODE011  ** (AN)+   
000065BE  4EF9 0000670C            476                  JMP     MODE100  ** -(AN)
000065C4  4EF9 00006714            477                  JMP     MODE101  **INVALID
000065CA  4EF9 0000671C            478                  JMP     MODE110  **INVALID
000065D0  4EF9 00006724            479                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000065D6                           480  
000065D6                           481                  
000065D6                           482  insert_num
000065D6                           483                  
000065D6                           484                  ;get number from D3
000065D6  B67C 0000                485                  CMP     #%000,D3       ;0
000065DA  6600 000A                486                  BNE     ONE         
000065DE  1CFC 0030                487                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000065E2  6000 006E                488                  BRA     FINISHER
000065E6                           489                  
000065E6  B67C 0001                490  ONE             CMP     #%001,D3       ;1
000065EA  6600 000A                491                  BNE     TWO 
000065EE  1CFC 0031                492                  MOVE.B  #'1',(A6)+
000065F2  6000 005E                493                  BRA     FINISHER
000065F6                           494  
000065F6                           495                  
000065F6  B67C 0002                496  TWO             CMP     #%010,D3        ;2
000065FA  6600 000A                497                  BNE     THREE
000065FE  1CFC 0032                498                  MOVE.B  #'2',(A6)+
00006602  6000 004E                499                  BRA     FINISHER
00006606                           500                  
00006606  B67C 0003                501  THREE           CMP     #%011,D3        ;3
0000660A  6600 000A                502                  BNE     FOUR
0000660E  1CFC 0033                503                  MOVE.B  #'3',(A6)+
00006612  6000 003E                504                  BRA     FINISHER
00006616                           505                  
00006616  B67C 0004                506  FOUR            CMP     #%100,D3        ;4
0000661A  6600 000A                507                  BNE     FIVE
0000661E  1CFC 0034                508                  MOVE.B  #'4',(A6)+
00006622  6000 002E                509                  BRA     FINISHER
00006626                           510                  
00006626  B67C 0005                511  FIVE            CMP     #%101,D3        ;5
0000662A  6600 000A                512                  BNE     SIX
0000662E  1CFC 0035                513                  MOVE.B  #'5',(A6)+
00006632  6000 001E                514                  BRA     FINISHER
00006636                           515                  
00006636  B67C 0006                516  SIX             CMP     #%110,D3        ;6
0000663A  6600 000A                517                  BNE     SEVEN
0000663E  1CFC 0036                518                  MOVE.B  #'6',(A6)+
00006642  6000 000E                519                  BRA     FINISHER
00006646                           520                  
00006646  B67C 0007                521  SEVEN           CMP     #%111,D3        ;7
0000664A  1CFC 0037                522                  MOVE.B  #'7',(A6)+
0000664E  6000 0002                523                  BRA     FINISHER
00006652                           524                  
00006652                           525  FINISHER                
00006652                           526                  
00006652                           527                  ;check D4, do we need to do stuff?
00006652  B87C 0002                528                  CMP     #%010,D4
00006656  6600 0008                529                  BNE     POSTINCR
0000665A  1CFC 0029                530                  MOVE.B  #')',(A6)+
0000665E  4E75                     531                  RTS
00006660                           532                  
00006660  B87C 0003                533  POSTINCR        CMP     #%011,D4
00006664  6600 000C                534                  BNE     ONEPAREN
00006668  1CFC 0029                535                  MOVE.B  #')',(A6)+
0000666C  1CFC 002B                536                  MOVE.B  #'+',(A6)+
00006670  4E75                     537                  RTS
00006672                           538                  
00006672  B87C 0004                539  ONEPAREN        CMP     #%100,D4
00006676  6600 0006                540                  BNE     DONE
0000667A  1CFC 0029                541                  MOVE.B  #')',(A6)+                
0000667E                           542  
0000667E  4E75                     543  DONE            RTS
00006680                           544  
00006680                           545          
00006680                           546                 
00006680                           547  bits5to7
00006680  4243                     548                 CLR      D3
00006682  4EB9 00006804            549                 JSR      COPY_OPCODE  // opcode copied to D2
00006688  C47C 0E00                550                 AND      #%0000111000000000, D2
0000668C  E09A                     551                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000668E  E29A                     552                 ROR.L    #1, D2
00006690  3602                     553                 MOVE.W   D2,D3 // moving isolated bits into d3
00006692  4E75                     554                 RTS
00006694                           555                 
00006694                           556  bits5to8
00006694  4243                     557                 CLR      D3
00006696  4EB9 00006804            558                 JSR      COPY_OPCODE  // opcode copied to D2
0000669C  C47C 0F00                559                 AND      #%0000111100000000, D2
000066A0  E09A                     560                 ROR.L    #8, D2          // rotate bits so isolated at the end
000066A2  3602                     561                 MOVE.W   D2,D3 // moving isolated bits into d3
000066A4  4E75                     562                 RTS
000066A6                           563                 
000066A6                           564  bits8to10
000066A6  4243                     565                 CLR      D3
000066A8  4EB9 00006804            566                 JSR      COPY_OPCODE  // opcode copied to D2
000066AE  C47C 01C0                567                 AND      #%0000000111000000, D2
000066B2  EC9A                     568                 ROR.L    #6, D2          // rotate bits so isolated at the end
000066B4  3602                     569                 MOVE.W   D2,D3 // moving isolated bits into d3
000066B6  4E75                     570                 RTS               
000066B8                           571             
000066B8                           572  bits11to13
000066B8  4243                     573                 CLR      D3
000066BA  4EB9 00006804            574                 JSR      COPY_OPCODE  // opcode copied to D2
000066C0  C47C 0038                575                 AND      #%0000000000111000, D2
000066C4  E69A                     576                 ROR.L    #3, D2          // rotate bits so isolated at the end
000066C6  3602                     577                 MOVE.W   D2,D3 // moving isolated bits into d3
000066C8  4E75                     578                 RTS
000066CA                           579             
000066CA                           580  bits14to16
000066CA  4243                     581                 CLR      D3
000066CC  4EB9 00006804            582                 JSR      COPY_OPCODE  // opcode copied to D2
000066D2  C47C 0007                583                 AND      #%0000000000000111, D2
000066D6  3602                     584                 MOVE.W   D2,D3 // moving isolated bits into d3
000066D8  4E75                     585                 RTS
000066DA                           586  bits11to16
000066DA  4243                     587                 CLR      D3
000066DC  4EB9 00006804            588                 JSR      COPY_OPCODE  // opcode copied to D2
000066E2  C47C 003F                589                 AND      #%0000000000111111, D2
000066E6  3602                     590                 MOVE.W   D2,D3 // moving isolated bits into d3
000066E8  4E75                     591                 RTS
000066EA                           592  ** DN       
000066EA                           593  MODE000         
000066EA  1CFC 0028                594                  MOVE.B  #'(', (A6)+
000066EE  1CFC 0041                595                  MOVE.B  #'A',(A6)+     
000066F2                           596  
000066F2                           597  ** AN
000066F2                           598  MODE001         
000066F2  4EB9 0000672C            599                  JSR ADDRESS_BUFFER  
000066F8  4E75                     600                  RTS      
000066FA                           601  
000066FA                           602   ** (AN)
000066FA                           603  MODE010         
000066FA  1CFC 0028                604                  MOVE.B  #'(', (A6)+
000066FE  1CFC 0041                605                  MOVE.B  #'A',(A6)+  
00006702  4E75                     606                  RTS      
00006704                           607  
00006704                           608  ** (AN)+ 
00006704                           609  MODE011         
00006704  1CFC 0028                610                  MOVE.B  #'(', (A6)+
00006708  1CFC 0041                611                  MOVE.B  #'A',(A6)+        
0000670C                           612  
0000670C                           613   ** -(AN)
0000670C                           614  MODE100         
0000670C  1CFC 0028                615                  MOVE.B  #'(', (A6)+
00006710  1CFC 0041                616                  MOVE.B  #'A',(A6)+
00006714                           617                  
00006714                           618  **INVALID               
00006714                           619  MODE101         
00006714  1CFC 0028                620                  MOVE.B  #'(', (A6)+
00006718  1CFC 0041                621                  MOVE.B  #'A',(A6)+ 
0000671C                           622                  
0000671C                           623  **INVALID
0000671C                           624  MODE110         
0000671C  1CFC 0028                625                  MOVE.B  #'(', (A6)+
00006720  1CFC 0041                626                  MOVE.B  #'A',(A6)+  
00006724                           627  
00006724                           628  ** ABSOLUTE AND IMMEDIATE            
00006724                           629  MODE111         
00006724                           630                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00006724  4EB9 00006732            631                 JSR ABSOLUTE_BUFFER  
0000672A  4E75                     632                 RTS            
0000672C                           633                                          
0000672C                           634  ADDRESS_BUFFER
0000672C  1CFC 0041                635                  MOVE.B  #'A',(A6)+ 
00006730  4E75                     636                  RTS
00006732                           637                 
00006732                           638  ABSOLUTE_BUFFER
00006732  4243                     639                 CLR      D3
00006734  3604                     640                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00006736  1CF8 0024                641                 MOVE.B   '$', (A6)+
0000673A  B67C 0000                642                 CMP.W    #%000, D3
0000673E  6700 000E                643                 BEQ      ABSOLUTE_WORD_BUFFER
00006742  4243                     644                 CLR      D3
00006744  3604                     645                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00006746  B67C 0001                646                 CMP.W    #%001, D3
0000674A  6700 0012                647                 BEQ      ABSOLUTE_LONG_BUFFER
0000674E                           648                 
0000674E                           649  ABSOLUTE_WORD_BUFFER
0000674E                           650                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
0000674E                           651                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
0000674E  1CFC 0046                652                         MOVE.B #'F', (A6)+ 
00006752  1CFC 0046                653                         MOVE.B #'F', (A6)+ 
00006756  1CFC 0046                654                         MOVE.B #'F', (A6)+ 
0000675A  1CFC 0046                655                         MOVE.B #'F', (A6)+   
0000675E                           656  ABSOLUTE_LONG_BUFFER       
0000675E                           657                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
0000675E                           658                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
0000675E  1CFC 0047                659                         MOVE.B #'G', (A6)+ 
00006762  1CFC 0047                660                         MOVE.B #'G', (A6)+ 
00006766  1CFC 0047                661                         MOVE.B #'G', (A6)+ 
0000676A  1CFC 0047                662                         MOVE.B #'G', (A6)+ 
0000676E                           663                                                      
0000676E                           664  
0000676E                           665  PRINT_BUFFER    
0000676E  1CFC 0000                666                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00006772  43F9 0000684C            667                 LEA      BUFFER, A1
00006778  303C 000E                668                 MOVE.W   #14,D0
0000677C  4E4F                     669                 TRAP     #15
0000677E  6000 FAC9                670                 BRA EXIT
00006782                           671                 
00006782                           672                 
00006782                           673  
00006782                           674  INVALID_EA  
00006782                           675                  * TODO: IMPLEMENT
00006782                           676                  *** CLEAR OUT A6
00006782                           677                  ** PUT INVALID MESSAGE INTO A6
00006782  6000 FAC5                678                  BRA EXIT
00006786                           679  INVALID_OP  
00006786                           680                  ** TODO: IMPLEMENT
00006786                           681                 *** CLEAR OUT A6
00006786                           682                  ** PUT INVALID MESSAGE INTO A6
00006786  6000 FAC1                683                  BRA EXIT             
0000678A                           684                  
0000678A  43F8 618B                685  NOP                 LEA     NOP_disp,A1          
0000678E  103C 000E                686                      MOVE.B  #14,D0
00006792  4E4F                     687                      TRAP    #15
00006794  6000 FAB3                688                      BRA     EXIT
00006798                           689                   
00006798                           690  RTS      
00006798  43F8 61F2                691                      LEA     RTS_disp,A1          
0000679C  103C 000E                692                      MOVE.B  #14,D0
000067A0  4E4F                     693                      TRAP    #15 
000067A2  6000 FAA5                694                      BRA     EXIT
000067A6                           695  JSR      
000067A6  4DF9 0000684C            696                      LEA     BUFFER, A6
000067AC  1CFC 004A                697                      MOVE.B #'J', (A6)+
000067B0  1CFC 0053                698                      MOVE.B #'S', (A6)+
000067B4  1CFC 0052                699                      MOVE.B #'R', (A6)+
000067B8  1CFC 0020                700                      MOVE.B #' ', (A6)+
000067BC  43F9 0000684C            701                      LEA     BUFFER, A1
000067C2                           702                      ** BITS 10 - 12 MODE       
000067C2                           703                      ** BITS 13 - 16 REGISTER
000067C2  103C 000E                704                      MOVE.B  #14,D0
000067C6  4E4F                     705                      TRAP    #15 
000067C8  6000 FA7F                706                      BRA     EXIT
000067CC                           707                    
000067CC                           708  MOVEM      
000067CC                           709                     
000067CC                           710                      ** SIZE SUBROUTINE
000067CC                           711                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000067CC  C47C 0040                712                      AND #%0000000001000000,D2 
000067D0                           713                      * WORD
000067D0  B4BC 00000040            714                      CMP.L   #%0000000001000000,D2
000067D6  4EB9 000067EC            715                      JSR     MOVEM_W 
000067DC                           716                      *LONG
000067DC  B4BC 00000040            717                      CMP.L   #%0000000001000000,D2 
000067E2                           718                     ** JSR     MOVEM_L
000067E2  103C 000E                719                      MOVE.B  #14,D0
000067E6  4E4F                     720                      TRAP    #15
000067E8  6000 FA5F                721                      BRA     EXIT 
000067EC                           722                      
000067EC                           723  MOVEM_W 
000067EC  43F8 61A0                724                       LEA     MOVEM_disp,A1
000067F0                           725                      * PRINT MOVEM
000067F0  103C 000E                726                       MOVE.B  #14,D0
000067F4  4E4F                     727                       TRAP    #15
000067F6                           728          
000067F6                           729                      * PRINT WORD PORTION
000067F6  41F8 6237                730                       LEA     size_w, A0
000067FA  103C 000E                731                       MOVE.B  #14,D0
000067FE  4E4F                     732                       TRAP    #15 
00006800                           733          
00006800  6000 FA47                734                       BRA     EXIT 
00006804                           735       
00006804                           736     
00006804                           737  COPY_OPCODE 
00006804                           738                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00006804  4242                     739                       CLR    D2  
00006806  3405                     740                       MOVE.W D5,D2 
00006808  4E75                     741                       RTS  
0000680A                           742                       
0000680A                           743  GETSIZE_ADDA
0000680A  4EB8 66A6                744          JSR     bits8to10
0000680E  B67C 0003                745          CMP     #%011,D3
00006812  6600 000A                746          BNE     NOTWORD
00006816  4EB9 00006838            747          JSR     SIZEISWORD
0000681C  4E75                     748          RTS
0000681E                           749          
0000681E                           750          
0000681E                           751  NOTWORD
0000681E  B67C 0007                752          CMP     #%111,D3
00006822  6600 FF5E                753          BNE     INVALID_EA
00006826  4EB9 00006842            754          JSR     SIZEISLONG
0000682C  4E75                     755          RTS
0000682E                           756          
0000682E                           757      
0000682E                           758  SIZEISBYTE
0000682E  1CFC 002E                759         MOVE.B   #'.',(A6)+
00006832  1CFC 0042                760         MOVE.B   #'B',(A6)+
00006836  4E75                     761         RTS
00006838                           762  
00006838                           763  SIZEISWORD    
00006838  1CFC 002E                764         MOVE.B   #'.',(A6)+
0000683C  1CFC 0057                765         MOVE.B   #'W',(A6)+
00006840  4E75                     766         RTS
00006842                           767                  
00006842                           768  SIZEISLONG    
00006842  1CFC 002E                769         MOVE.B   #'.',(A6)+
00006846  1CFC 004C                770         MOVE.B   #'L',(A6)+
0000684A  4E75                     771         RTS
0000684C                           772                  
0000684C                           773       
0000684C= 20 20 20 20 20 00        774  BUFFER DC.B '     ',0     
00006852                           775        
00006852                           776  
00006852                           777      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     6732
ABSOLUTE_LONG_BUFFER  675E
ABSOLUTE_WORD_BUFFER  674E
ADD                 63A4
ADDA                637A
ADDA_BUFFER         6384
ADDA_DISP           61AA
ADDI                63C4
ADDI_BUFFER         6430
ADDI_DES            63DE
ADDI_DISP           61AF
ADDI_SRC            63DA
ADDQ                6542
ADDQ_BUFFER         654C
ADDQ_DISP           61B4
ADDRESS_BUFFER      672C
ADDR_ODDBIT_MSG     60C4
ADDR_ORDER_CHECK    60EB
ADD_BUFFER          63AE
ADD_DISP            61A6
AND_DISP            61CF
ASL_DISP            61DE
ASR_DISP            61E2
BACKSLASHSIGH       622C
BCC_DISP            61F6
BGT_DISP            61FA
BITS11TO13          66B8
BITS11TO16          66DA
BITS14TO16          66CA
BITS5TO7            6680
BITS5TO8            6694
BITS8TO10           66A6
BLE_DISP            61FE
BUFFER              684C
CLOSEPAREN          6230
CLR_DISP            61CB
CODE0000            62AE
CODE0001            62C2
CODE0010            62C6
CODE0011            62CA
CODE0100            62CE
CODE0101            6302
CODE0110            6308
CODE0111            630C
CODE1000            6312
CODE1001            6318
CODE1010            631C
CODE1011            6320
CODE1100            6322
CODE1101            6326
CODE1110            6372
CODE1111            6376
COMMASIGN           622A
COPY_OPCODE         6804
CR                  D
DIVU                6586
DIVU_BUFFER         6590
DIVU_DISP           61C2
DOLLARSIGN          6224
DONE                667E
ENDTEST_MSG         613F
EXIT                6249
FINISHER            6652
FIVE                6626
FOUR                6616
GETSIZE_ADDA        680A
HEXATABLE           6202
INPUT_BUFFER        623E
INSERT_NUM          65D6
INVALIDEA_DISP      6183
INVALID_DISP        617E
INVALID_EA          6782
INVALID_OP          6786
JMP_MODE            65A6
JMP_TABLE           624E
JSR                 67A6
JSR_DISP            61EE
LEA                 644A
LEA_BUFFER          646E
LEA_DEST            651E
LEA_DISP            61C7
LEA_SRC             6480
LF                  A
LINEBREAK           617B
LINECOUNT           623D
LOCATION_ENDDATA    6244
LOCATION_END_MSG    60A7
LOCATION_STARTDATA  6240
LOCATION_START_MSG  6088
LSL_DISP            61D6
LSR_DISP            61DA
MINUSSIGN           6228
MODE000             66EA
MODE001             66F2
MODE010             66FA
MODE011             6704
MODE100             670C
MODE101             6714
MODE110             671C
MODE111             6724
MOVEA_DISP          6194
MOVEM               67CC
MOVEM_DISP          61A0
MOVEM_W             67EC
MOVEQ               6562
MOVEQ_BUFFER        656C
MOVEQ_DISP          619A
MOVE_DISP           618F
MULS_DISP           61BD
NOP                 678A
NOP_DISP            618B
NOTWORD             681E
ONE                 65E6
ONEPAREN            6672
OPENPAREN           622E
OR_DISP             61D3
PAUSE_MSG           6125
PLUSSIGN            6226
POSTINCR            6660
POUNDSIGN           6222
PRINT_BUFFER        676E
ROL_DISP            61E6
ROR_DISP            61EA
RTS                 6798
RTS_DISP            61F2
SEVEN               6646
SIX                 6636
SIZEISBYTE          682E
SIZEISLONG          6842
SIZEISWORD          6838
SIZE_B              6234
SIZE_L              623A
SIZE_W              6237
SPACE               6232
START               6000
SUB_DISP            61B9
TABLE_LENGTH        6248
THREE               6606
TWO                 65F6
WELCOME_MSG         6024
