00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/27/2017 7:36:26 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D5 - CURRENT OPCODE
00000000                             3  ***
00000000                             4  ***
00000000                             5  
00000000                             6  
00006000                             7  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       8                     ADDQ.B  #$1,D1      
00006002                             9                   
00006002  41F9 00006252             10                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 000069B2             11                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      12                   CLR.L   D3              *Zero it
00006010                            13                   * TEST OPCODES
00006010                            14                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006010                            15                   ; MOVE.W  #$4E71,D3 * NOP
00006010                            16                   ; MOVE.W  #$4E75,D3 * RTS
00006010                            17                   ; MOVE.W  #$4EB0,D3 * JSR
00006010                            18                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006010                            19                   ; MOVE.W  #$D4FC,D3   *ADDA.L   #1000, A2
00006010  363C D5FC                 20                    MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
00006014                            21                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006014                            22                   ; MOVE.W    #$5201,D3    *ADDQ
00006014                            23  
00006014                            24                   ; MOVE.W     #$7E70, D3 *MOVEQ
00006014                            25                   ; MOVE.W     #$80C0, D3 *DIVU
00006014                            26                   ; MOVE.W     #$8000, D3 * OR
00006014                            27                   ; MOVE.W        #$9000, D3 * SUB
00006014                            28                   ; MOVE.W        #$B000, D3 * CMP
00006014                            29                   ; MOVE.W        #$C1C0, D3 * MULS
00006014                            30                   ; MOVE.W        #$C000, D3 * AND
00006014                            31                   ; MOVE.W        #$E0F8, D3  *ASR
00006014                            32                   ; MOVE.W        #$E1E2, D3  *ASL
00006014  363C E393                 33                   MOVE.W        #$E393, D3  *LSL
00006018                            34                   ;MOVE.W        #$E2DC, D3  *LSR
00006018                            35  
00006018                            36                   
00006018  3A03                      37                   MOVE.W  D3,D5
0000601A  183C 000C                 38                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601E                            39  
0000601E                            40             
0000601E  E86B                      41                   LSR.W   D4,D3       *Move the bits
00006020  C6FC 0006                 42                   MULU    #6,D3       *Form offset     
00006024  4EB0 3000                 43                   JSR     0(A0,D3)   *Jump indirect with index
00006028                            44                  
00006028                            45      INCLUDE 'definitions.x68'
00006028                            46  
00006028  =0000000D                 47  CR              EQU     $0D         carriage return
00006028  =0000000A                 48  LF              EQU     $0A         line feed
00006028= 43 53 53 20 34 32 ...     49  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
0000604C= 42 79 20 54 65 61 ...     50                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
0000608C= 45 6E 74 65 72 20 ...     51  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060AB= 45 6E 74 65 72 20 ...     52  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C8= 41 64 64 72 65 73 ...     53  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EF= 45 6E 64 69 6E 67 ...     54  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006129= 50 72 65 73 73 20 ...     55  pause_msg           DC.B    'Press enter to continue!',CR,LF
00006143= 52 65 61 63 68 65 ...     56  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615E= 54 72 79 20 61 6E ...     57                      DC.B    'Try another location? (yes/no): ',0
0000617F= 0D 0A 00                  58  linebreak           DC.B    CR,LF,0
00006182                            59                      
00006182= 44 41 54 41 00            60  Invalid_disp        DC.B    'DATA',0
00006187= 57 52 4F 4E 47 45 ...     61  InvalidEA_disp      DC.B    'WRONGEA',0
0000618F                            62  
0000618F= 4E 4F 50 00               63  NOP_disp            DC.B    'NOP',0
00006193= 4D 4F 56 45 00            64  MOVE_disp           DC.B    'MOVE',0
00006198= 4D 4F 56 45 41 00         65  MOVEA_disp          DC.B    'MOVEA',0
0000619E= 4D 4F 56 45 51 00         66  MOVEQ_disp          DC.B    'MOVEQ',0
000061A4= 4D 4F 56 45 4D 00         67  MOVEM_disp          DC.B    'MOVEM',0
000061AA= 41 44 44 00               68  ADD_disp            DC.B    'ADD',0
000061AE= 41 44 44 41 00            69  ADDA_disp           DC.B    'ADDA',0
000061B3= 41 44 44 49 00            70  ADDI_disp           DC.B    'ADDI',0
000061B8= 41 44 44 51 00            71  ADDQ_disp           DC.B    'ADDQ',0
000061BD= 53 55 42 00               72  SUB_disp            DC.B    'SUB',0
000061C1= 4D 55 4C 53 00            73  MULS_disp           DC.B    'MULS',0
000061C6= 44 49 56 55 00            74  DIVU_disp           DC.B    'DIVU',0
000061CB= 4C 45 41 00               75  LEA_disp            DC.B    'LEA',0
000061CF= 43 4C 52 00               76  CLR_disp            DC.B    'CLR',0
000061D3= 41 4E 44 00               77  AND_disp            DC.B    'AND',0
000061D7= 4F 52 00                  78  OR_disp             DC.B    'OR',0
000061DA= 4C 53 4C 00               79  LSL_disp            DC.B    'LSL',0
000061DE= 4C 53 52 00               80  LSR_disp            DC.B    'LSR',0
000061E2= 41 53 4C 00               81  ASL_disp            DC.B    'ASL',0
000061E6= 41 53 52 00               82  ASR_disp            DC.B    'ASR',0
000061EA= 52 4F 4C 00               83  ROL_disp            DC.B    'ROL',0
000061EE= 52 4F 52 00               84  ROR_disp            DC.B    'ROR',0
000061F2= 4A 53 52 00               85  JSR_disp            DC.B    'JSR',0
000061F6= 52 54 53 00               86  RTS_disp            DC.B    'RTS',0
000061FA= 42 43 43 00               87  BCC_disp            DC.B    'BCC',0
000061FE= 42 47 54 00               88  BGT_disp            DC.B    'BGT',0    
00006202= 42 4C 45 00               89  BLE_disp            DC.b    'BLE',0
00006206                            90  
00006206                            91  
00006206= 30 00                     92  hexaTable               DC.B    '0',0
00006208= 31 00                     93                          DC.B    '1',0
0000620A= 32 00                     94                          DC.B    '2',0
0000620C= 33 00                     95                          DC.B    '3',0
0000620E= 34 00                     96                          DC.B    '4',0
00006210= 35 00                     97                          DC.B    '5',0
00006212= 36 00                     98                          DC.B    '6',0
00006214= 37 00                     99                          DC.B    '7',0
00006216= 38 00                    100                          DC.B    '8',0
00006218= 39 00                    101                          DC.B    '9',0
0000621A= 41 00                    102                          DC.B    'A',0
0000621C= 42 00                    103                          DC.B    'B',0
0000621E= 43 00                    104                          DC.B    'C',0
00006220= 44 00                    105                          DC.B    'D',0
00006222= 45 00                    106                          DC.B    'E',0
00006224= 46 00                    107                          DC.B    'F',0
00006226= 23 00                    108  poundsign               DC.B    '#',0
00006228= 24 00                    109  dollarsign              DC.B    '$',0
0000622A= 2B 00                    110  plussign                DC.B    '+',0
0000622C= 2D 00                    111  minussign               DC.B    '-',0
0000622E= 2C 00                    112  commasign               DC.B    ',',0
00006230= 2F 00                    113  backslashsigh           DC.B    '/',0
00006232= 28 00                    114  openparen               DC.B    '(',0
00006234= 29 00                    115  closeparen              DC.B    ')',0
00006236= 20 00                    116  space                   DC.B    ' ',0   
00006238= 2E 42 00                 117  size_b                  DC.B    '.B',0
0000623B= 2E 57 00                 118  size_w                  DC.B    '.W',0        
0000623E= 2E 4C 00                 119  size_l                  DC.B    '.L',0
00006241                           120  
00006241                           121  linecount               DS.B    1       *storeage for lines on a screen
00006242= 01                       122  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006244                           123  location_startData      DS.L    1       *location on where to start reading data
00006248                           124  location_endData        DS.L    1       *location on where to end reading data
0000624C                           125  table_length            DS.B    1       *Number of spaces in the table to print to console
0000624D                           126  
0000624D                           127  
0000624D                           128  -------------------- end include --------------------
0000624D                           129             
0000624D                           130  EXIT                 
0000624E  FFFF FFFF                131         SIMHALT   
00006252                           132  
00006252                           133  
00006252                           134  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
00006252  4EF9 000062B2            135  jmp_table      JMP         code0000
00006258                           136                  *ADDI
00006258                           137  
00006258  4EF9 000062C6            138                 JMP         code0001
0000625E                           139  
0000625E  4EF9 000062CA            140                 JMP         code0010
00006264                           141  
00006264  4EF9 000062CE            142                 JMP         code0011
0000626A                           143  
0000626A  4EF9 000062D2            144                 JMP         code0100
00006270                           145                             
00006270  4EF9 00006306            146                 JMP         code0101
00006276                           147                 * ADDQ
00006276                           148                  
00006276                           149        
00006276  4EF9 0000630C            150                 JMP         code0110
0000627C                           151                 * BCC
0000627C                           152                 * BGT
0000627C                           153                 * BLE
0000627C                           154                 
0000627C  4EF9 00006310            155                 JMP         code0111
00006282                           156                 * MOVEQ
00006282                           157  
00006282  4EF9 00006316            158                 JMP         code1000
00006288                           159                 * DIVU
00006288                           160                 * OR
00006288                           161  
00006288  4EF9 00006328            162                 JMP         code1001
0000628E                           163                  *SUB
0000628E  4EF9 0000632E            164                 JMP         code1010
00006294                           165                 
00006294  4EF9 00006332            166                 JMP         code1011
0000629A                           167                 * CMP
0000629A                           168                 
0000629A  4EF9 00006338            169                 JMP         code1100
000062A0                           170                 * MULS
000062A0                           171                 * AND
000062A0                           172          
000062A0  4EF9 0000634A            173                 JMP         code1101
000062A6                           174                 *ADD
000062A6                           175                 *ADDA
000062A6  4EF9 00006396            176                 JMP         code1110
000062AC                           177                 * ASR
000062AC                           178                 * ASL
000062AC                           179                 * LSL
000062AC                           180                 * LSR
000062AC                           181                 * ROL
000062AC                           182                 * ROR
000062AC                           183  
000062AC  4EF9 000063C0            184                 JMP         code1111
000062B2                           185  
000062B2                           186  
000062B2                           187  code0000      
000062B2  4EB9 000067E8            188                 JSR          bits5to8 // RETURNS INTO D3
000062B8  B6BC 00000006            189                 CMP.L        #%0110, D3
000062BE  6600 062C                190                 BNE          INVALID_OP
000062C2  6000 0146                191                 BRA          ADDI  
000062C6                           192  
000062C6  4E72 2700                193  code0001       STOP        #$2700
000062CA                           194  
000062CA  4E72 2700                195  code0010       STOP        #$2700
000062CE                           196  
000062CE  4E72 2700                197  code0011       STOP        #$2700
000062D2                           198  
000062D2                           199  code0100       
000062D2  4EB9 0000696A            200                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D8                           201                  
000062D8                           202                 *NOP
000062D8  C47C 0FFF                203                 AND     #%0000111111111111,D2
000062DC  B4BC 00000E71            204                 CMP.L   #%000111001110001, D2
000062E2  6700 060C                205                 BEQ     NOP
000062E6                           206                 
000062E6                           207                 *RTS
000062E6  C47C 0FFF                208                 AND     #%0000111111111111,D2
000062EA  B4BC 00000E75            209                 CMP.L   #%0000111001110101, D2
000062F0  6700 060C                210                 BEQ     RTS
000062F4                           211  
000062F4                           212                 *JSR
000062F4  C47C 0FC0                213                 AND     #%0000111111000000,D2
000062F8  B4BC 00000E80            214                 CMP.L   #%0000111010000000,D2
000062FE  6700 060C                215                 BEQ     JSR
00006302                           216                 
00006302                           217                 * MOVEM
00006302                           218                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00006302                           219                ** AND     #%0000111110000000,D2
00006302                           220                 * DATA REGISTER
00006302                           221                ** CMP.L   #%0000100010000000, D2
00006302                           222                 ** JSR      MOVEM
00006302                           223                 * ADDRESS REGISTER (DECREMENTED)
00006302                           224                 ** CMP.L  #%0000110010000000, D2
00006302                           225                 ** JSR    MOVEM
00006302                           226                  
00006302                           227                  ** TO DO: BRANCH IF INVALID OPCODE
00006302                           228                  *LEA - if it's not the top codes, it's LEA
00006302  6000 018C                229                  BRA     LEA
00006306                           230  code0101      
00006306                           231  
00006306  4EB9 00006588            232                  JSR   ADDQ
0000630C                           233  
0000630C  4E72 2700                234  code0110        STOP        #$2700
00006310                           235  
00006310                           236  code0111       
00006310  4EB9 000065A8            237                  JSR       MOVEQ
00006316                           238  
00006316                           239  
00006316                           240  code1000      
00006316  4EB9 000067FA            241                  JSR        bits8to10
0000631C  B67C 0003                242                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
00006320  6700 02AA                243                  BEQ        DIVU
00006324  6000 02C6                244                  BRA        OR       ** OTHERWISE OR
00006328                           245                  
00006328                           246  
00006328                           247  code1001       
00006328  4EB9 00006608            248                 JSR         SUB
0000632E  4E72 2700                249  code1010       STOP        #$2700
00006332                           250  
00006332                           251  code1011       
00006332  4EB9 00006628            252                 JSR         CMP
00006338                           253  
00006338                           254  code1100      
00006338  4EB9 000067FA            255                  JSR        bits8to10
0000633E  B67C 0007                256                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
00006342  6700 0304                257                  BEQ        MULS
00006346  6000 0320                258                  BRA        AND       ** OTHERWISE AND
0000634A                           259  
0000634A                           260  code1101       
0000634A  4EB9 0000696A            261                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
00006350                           262                 *ADDA
00006350  4EB9 000067FA            263                 JSR      bits8to10
00006356  B67C 0003                264                 CMP      #%011, D3  ** WORD
0000635A  6700 0068                265                 BEQ      ADDA
0000635E  B67C 0007                266                 CMP      #%111, D3   ** LONG
00006362  6700 0060                267                 BEQ      ADDA
00006366                           268                 
00006366                           269                 *ADD
00006366  B67C 0000                270                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
0000636A  6700 007E                271                 BEQ      ADD
0000636E  B67C 0001                272                 CMP      #%001, D3   ** WORD TO DATA REGISTER
00006372  6700 0076                273                 BEQ      ADD
00006376  B67C 0002                274                 CMP      #%010, D3   ** LONG TO DATA REGISTER
0000637A  6700 006E                275                 BEQ      ADD
0000637E  B67C 0004                276                 CMP      #%100, D3   ** BYTE TO EA
00006382  6700 0066                277                 BEQ      ADD
00006386  B67C 0005                278                 CMP      #%101, D3   ** WORD TO EA
0000638A  6700 005E                279                 BEQ      ADD
0000638E  B67C 0006                280                 CMP      #%110, D3   ** LONG TO EA
00006392  6700 0056                281                 BEQ      ADD
00006396                           282                 
00006396                           283  
00006396                           284  code1110       
00006396                           285                  * ASR
00006396  4EB9 0000683E            286                  JSR     bits1to10
0000639C  B67C 0383                287                  CMP     #%1110000011,D3
000063A0  6700 02E6                288                  BEQ     ASR
000063A4                           289                  
000063A4                           290                  * ASL
000063A4  B67C 0387                291                  CMP     #%1110000111,D3
000063A8  6700 02FA                292                  BEQ     ASL
000063AC                           293                  
000063AC                           294                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
000063AC                           295                  * LSL
000063AC  4244                     296                  CLR     D4
000063AE  2803                     297                  MOVE.L  D3,D4
000063B0                           298  
000063B0  B87C 01C7                299                  CMP     #%111000111,D4
000063B4  6700 030A                300                  BEQ     LSL
000063B8                           301                  
000063B8                           302                  * LSR
000063B8  B67C 038B                303                  CMP     #%1110001011,D3
000063BC  6700 031E                304                  BEQ     LSR
000063C0                           305                  
000063C0                           306                  * ROL
000063C0                           307                  
000063C0                           308                  * ROR
000063C0                           309  
000063C0  4E72 2700                310  code1111       STOP        #$2700
000063C4                           311  
000063C4                           312  ADDA    
000063C4  4EB9 000063CE            313                 JSR     ADDA_BUFFER
000063CA  6000 0508                314                 BRA     PRINT_BUFFER
000063CE                           315                  
000063CE                           316  ADDA_BUFFER
000063CE  1CFC 0041                317                 MOVE.B   #'A',(A6)+
000063D2  1CFC 0044                318                 MOVE.B   #'D', (A6)+  
000063D6  1CFC 0044                319                 MOVE.B   #'D', (A6)+
000063DA  1CFC 0041                320                 MOVE.B   #'A', (A6)+
000063DE  4EB9 00006970            321                 JSR      GETSIZE_ADDA
000063E4  1CFC 0020                322                 MOVE.B   #' ', (A6)+
000063E8  4E75                     323                 RTS
000063EA                           324                 
000063EA                           325  ADD    
000063EA  4EB9 000063F4            326                 JSR     ADD_BUFFER
000063F0  6000 04E2                327                 BRA     PRINT_BUFFER
000063F4                           328                  
000063F4                           329  ADD_BUFFER
000063F4  1CFC 0041                330                 MOVE.B   #'A',(A6)+
000063F8  1CFC 0044                331                 MOVE.B   #'D', (A6)+  
000063FC  1CFC 0044                332                 MOVE.B   #'D', (A6)+
00006400  1CFC 002E                333                 MOVE.B   #'.', (A6)+
00006404                           334                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006404                           335                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006404                           336                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006404  1CFC 0020                337                 MOVE.B   #' ', (A6)+
00006408  4E75                     338                 RTS               
0000640A                           339  ADDI
0000640A  4EB9 00006476            340                  JSR     ADDI_BUFFER
00006410  4EB9 00006420            341                  JSR     ADDI_SRC
00006416  4EB9 00006424            342                  JSR     ADDI_DES
0000641C  6000 04B6                343                  BRA     PRINT_BUFFER
00006420                           344                  
00006420                           345  ADDI_SRC                        
00006420  1CFC 0023                346                  MOVE.B  #'#', (A6)+
00006424                           347                    ** TODO: IMPLEMENT THIS IN EA
00006424                           348                  ** Immediate field—Data immediately following the instruction.
00006424                           349                  **If size = 00, the data is the low-order byte of the immediate word.
00006424                           350                  **If size = 01, the data is the entire immediate word.
00006424                           351                  **If size = 10, the data is the next two immediate words. 
00006424                           352  ADDI_DES
00006424                           353                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00006424                           354                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00006424  4EB9 0000680C            355                 JSR      bits11to13
0000642A  B67C 0001                356                 CMP      #%001, D3 **AN
0000642E  6700 04B8                357                 BEQ      INVALID_EA
00006432  B67C 0005                358                 CMP      #%101, D3 **COMPLICATED
00006436  6700 04B0                359                 BEQ      INVALID_EA
0000643A  B67C 0006                360                 CMP      #%110, D3 **COMPLICATED
0000643E  6700 04A8                361                 BEQ      INVALID_EA
00006442                           362                 
00006442  4EB9 0000682E            363                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00006448  B67C 003C                364                 CMP      #%111100,D3 // immediate data
0000644C  6700 049A                365                 BEQ      INVALID_EA
00006450  B67C 003A                366                 CMP      #%111010,D3 // complicated
00006454  6700 0492                367                 BEQ      INVALID_EA
00006458  B67C 003B                368                 CMP      #%111011,D3 // complicated
0000645C  6700 048A                369                 BEQ      INVALID_EA
00006460                           370                 
00006460  4EB9 0000680C            371                 JSR      bits11to13 ** grab bits to jump with
00006466  41F9 000066F8            372                 LEA     jmp_mode,A0    *Index into the table
0000646C  C6FC 0006                373                 MULU    #6,D3       *Form offset     
00006470  4EB0 3000                374                 JSR     0(A0,D3)   *Jump indirect with index
00006474  4E75                     375                 RTS
00006476                           376                 
00006476                           377                             
00006476                           378  ADDI_BUFFER
00006476  1CFC 0041                379                 MOVE.B   #'A',(A6)+
0000647A  1CFC 0044                380                 MOVE.B   #'D', (A6)+  
0000647E  1CFC 0044                381                 MOVE.B   #'D', (A6)+
00006482  1CFC 0049                382                 MOVE.B   #'I', (A6)+
00006486  1CFC 002E                383                 MOVE.B   #'.', (A6)+
0000648A                           384                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
0000648A                           385                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000648A  1CFC 0020                386                 MOVE.B   #' ', (A6)+
0000648E  4E75                     387                 RTS
00006490                           388                              
00006490                           389  LEA
00006490  4EB9 000067FA            390                 JSR      bits8to10   // 1 1 1
00006496  B47C 0007                391                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
0000649A  6600 0450                392                 BNE      INVALID_OP
0000649E  4EB9 000064B4            393                 JSR      LEA_BUFFER
000064A4  4EB9 000064C6            394                 JSR      LEA_SRC
000064AA  4EB9 00006564            395                 JSR      LEA_DEST
000064B0  6000 0422                396                 BRA      PRINT_BUFFER
000064B4                           397                 
000064B4                           398  LEA_BUFFER 
000064B4  1CFC 004C                399                 MOVE.B   #'L',(A6)+
000064B8  1CFC 0045                400                 MOVE.B   #'E', (A6)+  
000064BC  1CFC 0041                401                 MOVE.B   #'A', (A6)+
000064C0  1CFC 0020                402                 MOVE.B   #' ', (A6)+
000064C4  4E75                     403                 RTS
000064C6                           404            
000064C6                           405  LEA_SRC
000064C6                           406              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
000064C6  4EB9 0000680C            407              JSR      bits11to13  // source mode - D3
000064CC  B67C 0000                408              CMP      #%000, D3
000064D0  6700 0416                409              BEQ      INVALID_EA
000064D4  B67C 0001                410              CMP      #%001, D3
000064D8  6700 040E                411              BEQ      INVALID_EA
000064DC  B67C 0003                412              CMP      #%011, D3
000064E0  6700 0406                413              BEQ      INVALID_EA
000064E4  B67C 0004                414              CMP      #%100, D3
000064E8  6700 03FE                415              BEQ      INVALID_EA
000064EC  B67C 0005                416              CMP      #%101, D3
000064F0  6700 03F6                417              BEQ      INVALID_EA
000064F4  B67C 0006                418              CMP      #%110, D3
000064F8  6700 03EE                419              BEQ      INVALID_EA
000064FC                           420  
000064FC                           421              
000064FC                           422              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
000064FC  4EB9 0000681E            423              JSR      bits14to16 // source register - d4
00006502  B67C 0004                424              CMP      #%100, D3
00006506  6700 03E0                425              BEQ      INVALID_EA
0000650A  B67C 0002                426              CMP      #%010, D3
0000650E  6700 03D8                427              BEQ      INVALID_EA
00006512  B67C 0003                428              CMP      #%011, D3
00006516  6700 03D0                429              BEQ      INVALID_EA
0000651A                           430              
0000651A                           431  
0000651A  4EB9 0000682E            432               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00006520  B67C 003C                433               CMP      #%111100,D3 // immediate data
00006524  6700 03C2                434               BEQ      INVALID_EA
00006528  B67C 003A                435               CMP      #%111010,D3 // complicated
0000652C  6700 03BA                436               BEQ      INVALID_EA
00006530  B67C 003B                437               CMP      #%111011,D3 // complicated
00006534  6700 03B2                438               BEQ      INVALID_EA
00006538                           439     
00006538  4EB9 0000680C            440               JSR      bits11to13 ** grab mode bits to jump with
0000653E                           441  
0000653E  41F9 000066F8            442               LEA     jmp_mode,A0    *Index into the table
00006544  C6FC 0006                443               MULU    #6,D3       *Form offset     
00006548  4EB0 3000                444               JSR     0(A0,D3)   *Jump indirect with index
0000654C                           445               
0000654C                           446  
0000654C  4243                     447               CLR     D3
0000654E  4EB9 0000681E            448               JSR     bits14to16
00006554  4EB9 00006728            449               JSR     insert_num
0000655A                           450               
0000655A  1CFC 002C                451               MOVE.B     #',', (A6)+
0000655E  1CFC 0020                452               MOVE.B     #' ', (A6)+
00006562                           453  
00006562  4E75                     454               RTS
00006564                           455               
00006564                           456  LEA_DEST    
00006564  4244                     457                  CLR     D4
00006566  41F9 000066F8            458                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
0000656C  363C 0001                459                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
00006570  3803                     460                  MOVE    D3,D4
00006572  C6FC 0006                461                  MULU    #6,D3       *Form offset     
00006576  4EB0 3000                462                  JSR     0(A0,D3)   *Jump indirect with index
0000657A                           463                  
0000657A  4EB9 000067D4            464                  JSR     bits5to7
00006580  4EB9 00006728            465                  JSR     insert_num
00006586                           466                  
00006586  4E75                     467                  RTS
00006588                           468  
00006588                           469  
00006588                           470  ADDQ
00006588  4EB9 00006592            471                  JSR     ADDQ_BUFFER
0000658E  6000 0344                472                  BRA     PRINT_BUFFER
00006592                           473  
00006592                           474  ADDQ_BUFFER
00006592  1CFC 0041                475                 MOVE.B   #'A',(A6)+
00006596  1CFC 0044                476                 MOVE.B   #'D', (A6)+  
0000659A  1CFC 0044                477                 MOVE.B   #'D', (A6)+
0000659E  1CFC 0051                478                 MOVE.B   #'Q', (A6)+
000065A2                           479                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
000065A2                           480                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000065A2  1CFC 0020                481                 MOVE.B   #' ', (A6)+
000065A6  4E75                     482                 RTS
000065A8                           483                 
000065A8                           484  MOVEQ
000065A8  4EB9 000065B2            485                  JSR     MOVEQ_BUFFER
000065AE  6000 0324                486                  BRA     PRINT_BUFFER
000065B2                           487  
000065B2                           488  MOVEQ_BUFFER
000065B2  1CFC 004D                489                 MOVE.B   #'M',(A6)+
000065B6  1CFC 004F                490                 MOVE.B   #'O', (A6)+  
000065BA  1CFC 0056                491                 MOVE.B   #'V', (A6)+
000065BE  1CFC 0045                492                 MOVE.B   #'E', (A6)+
000065C2  1CFC 0051                493                 MOVE.B   #'Q', (A6)+
000065C6  1CFC 0020                494                 MOVE.B   #' ', (A6)+
000065CA  4E75                     495                 RTS
000065CC                           496  
000065CC                           497  DIVU
000065CC  4EB9 000065D6            498                  JSR     DIVU_BUFFER
000065D2  6000 0300                499                  BRA     PRINT_BUFFER
000065D6                           500  
000065D6                           501  DIVU_BUFFER
000065D6  1CFC 0044                502                 MOVE.B   #'D',(A6)+
000065DA  1CFC 0049                503                 MOVE.B   #'I', (A6)+  
000065DE  1CFC 0056                504                 MOVE.B   #'V', (A6)+
000065E2  1CFC 0055                505                 MOVE.B   #'U', (A6)+
000065E6  1CFC 0020                506                 MOVE.B   #' ', (A6)+
000065EA  4E75                     507                 RTS  
000065EC                           508  OR    
000065EC  4EB9 000065F6            509                 JSR     OR_BUFFER
000065F2  6000 02E0                510                 BRA     PRINT_BUFFER
000065F6                           511                  
000065F6                           512  OR_BUFFER
000065F6  1CFC 004F                513                 MOVE.B   #'O',(A6)+
000065FA  1CFC 0052                514                 MOVE.B   #'R', (A6)+  
000065FE  1CFC 002E                515                 MOVE.B   #'.', (A6)+
00006602                           516                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006602                           517                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006602                           518                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006602  1CFC 0020                519                 MOVE.B   #' ', (A6)+
00006606  4E75                     520                 RTS   
00006608                           521  
00006608                           522  SUB   
00006608  4EB9 00006612            523                 JSR     SUB_BUFFER
0000660E  6000 02C4                524                 BRA     PRINT_BUFFER               
00006612                           525  
00006612                           526  SUB_BUFFER
00006612  1CFC 0053                527                 MOVE.B   #'S',(A6)+
00006616  1CFC 0055                528                 MOVE.B   #'U', (A6)+  
0000661A  1CFC 0042                529                 MOVE.B   #'B', (A6)+
0000661E  1CFC 002E                530                 MOVE.B   #'.', (A6)+
00006622                           531                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006622                           532                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006622                           533                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006622  1CFC 0020                534                 MOVE.B   #' ', (A6)+
00006626  4E75                     535                 RTS  
00006628                           536  CMP   
00006628  4EB9 00006632            537                 JSR     CMP_BUFFER
0000662E  6000 02A4                538                 BRA     PRINT_BUFFER
00006632                           539                  
00006632                           540  CMP_BUFFER
00006632  1CFC 0043                541                 MOVE.B   #'C',(A6)+
00006636  1CFC 004D                542                 MOVE.B   #'M', (A6)+  
0000663A  1CFC 0050                543                 MOVE.B   #'P', (A6)+
0000663E  1CFC 002E                544                 MOVE.B   #'.', (A6)+
00006642                           545                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006642                           546                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006642                           547                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006642  1CFC 0020                548                 MOVE.B   #' ', (A6)+
00006646  4E75                     549                 RTS   
00006648                           550                 
00006648                           551  MULS
00006648  4EB9 00006652            552                  JSR     MULS_BUFFER
0000664E  6000 0284                553                  BRA     PRINT_BUFFER
00006652                           554  
00006652                           555  MULS_BUFFER
00006652  1CFC 004D                556                 MOVE.B   #'M',(A6)+
00006656  1CFC 0055                557                 MOVE.B   #'U', (A6)+  
0000665A  1CFC 004C                558                 MOVE.B   #'L', (A6)+
0000665E  1CFC 0053                559                 MOVE.B   #'S', (A6)+
00006662  1CFC 0020                560                 MOVE.B   #' ', (A6)+
00006666  4E75                     561                 RTS
00006668                           562  
00006668                           563  AND    
00006668  4EB9 00006672            564                 JSR     AND_BUFFER
0000666E  6000 0264                565                 BRA     PRINT_BUFFER
00006672                           566                  
00006672                           567  AND_BUFFER
00006672  1CFC 0041                568                 MOVE.B   #'A',(A6)+
00006676  1CFC 004E                569                 MOVE.B   #'N', (A6)+  
0000667A  1CFC 0044                570                 MOVE.B   #'D', (A6)+
0000667E  1CFC 002E                571                 MOVE.B   #'.', (A6)+
00006682                           572                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006682                           573                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006682                           574                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006682  1CFC 0020                575                 MOVE.B   #' ', (A6)+
00006686  4E75                     576                 RTS    
00006688                           577  
00006688                           578  ASR     
00006688  4EB9 00006692            579                  JSR     ASR_BUFFER
0000668E  6000 0244                580                  BRA     PRINT_BUFFER
00006692                           581  
00006692                           582  ASR_BUFFER
00006692  1CFC 0041                583                 MOVE.B   #'A',(A6)+
00006696  1CFC 0053                584                 MOVE.B   #'S', (A6)+  
0000669A  1CFC 0052                585                 MOVE.B   #'R', (A6)+
0000669E  1CFC 0020                586                 MOVE.B   #' ', (A6)+
000066A2  4E75                     587                 RTS      
000066A4                           588  
000066A4                           589  ASL     
000066A4  4EB9 000066AE            590                  JSR     ASL_BUFFER
000066AA  6000 0228                591                  BRA     PRINT_BUFFER
000066AE                           592  
000066AE                           593  ASL_BUFFER
000066AE  1CFC 0041                594                 MOVE.B   #'A',(A6)+
000066B2  1CFC 0053                595                 MOVE.B   #'S', (A6)+  
000066B6  1CFC 004C                596                 MOVE.B   #'L', (A6)+
000066BA  1CFC 0020                597                 MOVE.B   #' ', (A6)+
000066BE  4E75                     598                 RTS     
000066C0                           599  
000066C0                           600  LSL     
000066C0  4EB9 000066CA            601                  JSR     LSL_BUFFER
000066C6  6000 020C                602                  BRA     PRINT_BUFFER
000066CA                           603  
000066CA                           604  LSL_BUFFER
000066CA  1CFC 004C                605                 MOVE.B   #'L',(A6)+
000066CE  1CFC 0053                606                 MOVE.B   #'S', (A6)+  
000066D2  1CFC 004C                607                 MOVE.B   #'L', (A6)+
000066D6  1CFC 0020                608                 MOVE.B   #' ', (A6)+
000066DA  4E75                     609                 RTS     
000066DC                           610  
000066DC                           611  LSR     
000066DC  4EB9 000066E6            612                  JSR     LSR_BUFFER
000066E2  6000 01F0                613                  BRA     PRINT_BUFFER
000066E6                           614  
000066E6                           615  LSR_BUFFER
000066E6  1CFC 004C                616                 MOVE.B   #'L',(A6)+
000066EA  1CFC 0053                617                 MOVE.B   #'S', (A6)+  
000066EE  1CFC 0052                618                 MOVE.B   #'R', (A6)+
000066F2  1CFC 0020                619                 MOVE.B   #' ', (A6)+
000066F6  4E75                     620                 RTS       
000066F8                           621                 
000066F8                           622  jmp_mode
000066F8  4EF9 00006850            623                  JMP     MODE000  ** DN
000066FE  4EF9 00006858            624                  JMP     MODE001  ** AN
00006704  4EF9 00006860            625                  JMP     MODE010  ** (AN)
0000670A  4EF9 0000686A            626                  JMP     MODE011  ** (AN)+   
00006710  4EF9 00006872            627                  JMP     MODE100  ** -(AN)
00006716  4EF9 0000687A            628                  JMP     MODE101  **INVALID
0000671C  4EF9 00006882            629                  JMP     MODE110  **INVALID
00006722  4EF9 0000688A            630                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00006728                           631  
00006728                           632                  
00006728                           633  insert_num
00006728                           634                  
00006728                           635                  ;get number from D3
00006728  B67C 0000                636                  CMP     #%000,D3       ;0
0000672C  6600 000A                637                  BNE     ONE         
00006730  1CFC 0030                638                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
00006734  6000 006E                639                  BRA     FINISHER
00006738                           640                  
00006738  B67C 0001                641  ONE             CMP     #%001,D3       ;1
0000673C  6600 000A                642                  BNE     TWO 
00006740  1CFC 0031                643                  MOVE.B  #'1',(A6)+
00006744  6000 005E                644                  BRA     FINISHER
00006748                           645  
00006748                           646                  
00006748  B67C 0002                647  TWO             CMP     #%010,D3        ;2
0000674C  6600 000A                648                  BNE     THREE
00006750  1CFC 0032                649                  MOVE.B  #'2',(A6)+
00006754  6000 004E                650                  BRA     FINISHER
00006758                           651                  
00006758  B67C 0003                652  THREE           CMP     #%011,D3        ;3
0000675C  6600 000A                653                  BNE     FOUR
00006760  1CFC 0033                654                  MOVE.B  #'3',(A6)+
00006764  6000 003E                655                  BRA     FINISHER
00006768                           656                  
00006768  B67C 0004                657  FOUR            CMP     #%100,D3        ;4
0000676C  6600 000A                658                  BNE     FIVE
00006770  1CFC 0034                659                  MOVE.B  #'4',(A6)+
00006774  6000 002E                660                  BRA     FINISHER
00006778                           661                  
00006778  B67C 0005                662  FIVE            CMP     #%101,D3        ;5
0000677C  6600 000A                663                  BNE     SIX
00006780  1CFC 0035                664                  MOVE.B  #'5',(A6)+
00006784  6000 001E                665                  BRA     FINISHER
00006788                           666                  
00006788  B67C 0006                667  SIX             CMP     #%110,D3        ;6
0000678C  6600 000A                668                  BNE     SEVEN
00006790  1CFC 0036                669                  MOVE.B  #'6',(A6)+
00006794  6000 000E                670                  BRA     FINISHER
00006798                           671                  
00006798  B67C 0007                672  SEVEN           CMP     #%111,D3        ;7
0000679C  1CFC 0037                673                  MOVE.B  #'7',(A6)+
000067A0  6000 0002                674                  BRA     FINISHER
000067A4                           675                  
000067A4                           676  FINISHER                
000067A4                           677                  
000067A4                           678                  ;check D4, do we need to do stuff?
000067A4  B87C 0002                679                  CMP     #%010,D4
000067A8  6600 0008                680                  BNE     POSTINCR
000067AC  1CFC 0029                681                  MOVE.B  #')',(A6)+
000067B0  4E75                     682                  RTS
000067B2                           683                  
000067B2  B87C 0003                684  POSTINCR        CMP     #%011,D4
000067B6  6600 000C                685                  BNE     ONEPAREN
000067BA  1CFC 0029                686                  MOVE.B  #')',(A6)+
000067BE  1CFC 002B                687                  MOVE.B  #'+',(A6)+
000067C2  4E75                     688                  RTS
000067C4                           689                  
000067C4  B87C 0004                690  ONEPAREN        CMP     #%100,D4
000067C8  6600 0008                691                  BNE     DONE
000067CC  1CFC 0029                692                  MOVE.B  #')',(A6)+                
000067D0                           693  
000067D0  4244                     694                  CLR     D4
000067D2  4E75                     695  DONE            RTS
000067D4                           696  
000067D4                           697          
000067D4                           698                 
000067D4                           699  bits5to7
000067D4  4243                     700                 CLR      D3
000067D6  4EB9 0000696A            701                 JSR      COPY_OPCODE  // opcode copied to D2
000067DC  C47C 0E00                702                 AND      #%0000111000000000, D2
000067E0  E09A                     703                 ROR.L    #8, D2          // rotate bits so isolated at the end
000067E2  E29A                     704                 ROR.L    #1, D2
000067E4  3602                     705                 MOVE.W   D2,D3 // moving isolated bits into d3
000067E6  4E75                     706                 RTS
000067E8                           707                 
000067E8                           708  bits5to8
000067E8  4243                     709                 CLR      D3
000067EA  4EB9 0000696A            710                 JSR      COPY_OPCODE  // opcode copied to D2
000067F0  C47C 0F00                711                 AND      #%0000111100000000, D2
000067F4  E09A                     712                 ROR.L    #8, D2          // rotate bits so isolated at the end
000067F6  3602                     713                 MOVE.W   D2,D3 // moving isolated bits into d3
000067F8  4E75                     714                 RTS
000067FA                           715                 
000067FA                           716  bits8to10
000067FA  4243                     717                 CLR      D3
000067FC  4EB9 0000696A            718                 JSR      COPY_OPCODE  // opcode copied to D2
00006802  C47C 01C0                719                 AND      #%0000000111000000, D2
00006806  EC9A                     720                 ROR.L    #6, D2          // rotate bits so isolated at the end
00006808  3602                     721                 MOVE.W   D2,D3 // moving isolated bits into d3
0000680A  4E75                     722                 RTS               
0000680C                           723             
0000680C                           724  bits11to13
0000680C  4243                     725                 CLR      D3
0000680E  4EB9 0000696A            726                 JSR      COPY_OPCODE  // opcode copied to D2
00006814  C47C 0038                727                 AND      #%0000000000111000, D2
00006818  E69A                     728                 ROR.L    #3, D2          // rotate bits so isolated at the end
0000681A  3602                     729                 MOVE.W   D2,D3 // moving isolated bits into d3
0000681C  4E75                     730                 RTS
0000681E                           731             
0000681E                           732  bits14to16
0000681E  4243                     733                 CLR      D3
00006820  4EB9 0000696A            734                 JSR      COPY_OPCODE  // opcode copied to D2
00006826  C47C 0007                735                 AND      #%0000000000000111, D2
0000682A  3602                     736                 MOVE.W   D2,D3 // moving isolated bits into d3
0000682C  4E75                     737                 RTS
0000682E                           738  bits11to16
0000682E  4243                     739                 CLR      D3
00006830  4EB9 0000696A            740                 JSR      COPY_OPCODE  // opcode copied to D2
00006836  C47C 003F                741                 AND      #%0000000000111111, D2
0000683A  3602                     742                 MOVE.W   D2,D3 // moving isolated bits into d3
0000683C  4E75                     743                 RTS
0000683E                           744  bits1to10
0000683E  4243                     745                 CLR      D3
00006840  4EB9 0000696A            746                 JSR      COPY_OPCODE  // opcode copied to D2
00006846  C47C FFC0                747                 AND      #%1111111111000000, D2
0000684A  EC9A                     748                 ROR.L    #6, D2
0000684C  3602                     749                 MOVE.W   D2,D3 // moving isolated bits into d3
0000684E  4E75                     750                 RTS
00006850                           751  ** DN       
00006850                           752  MODE000         
00006850  1CFC 0028                753                  MOVE.B  #'(', (A6)+
00006854  1CFC 0041                754                  MOVE.B  #'A',(A6)+     
00006858                           755  
00006858                           756  ** AN
00006858                           757  MODE001         
00006858  4EB9 00006892            758                  JSR ADDRESS_BUFFER  
0000685E  4E75                     759                  RTS      
00006860                           760  
00006860                           761   ** (AN)
00006860                           762  MODE010         
00006860  1CFC 0028                763                  MOVE.B  #'(', (A6)+
00006864  1CFC 0041                764                  MOVE.B  #'A',(A6)+  
00006868  4E75                     765                  RTS      
0000686A                           766  
0000686A                           767  ** (AN)+ 
0000686A                           768  MODE011         
0000686A  1CFC 0028                769                  MOVE.B  #'(', (A6)+
0000686E  1CFC 0041                770                  MOVE.B  #'A',(A6)+        
00006872                           771  
00006872                           772   ** -(AN)
00006872                           773  MODE100         
00006872  1CFC 0028                774                  MOVE.B  #'(', (A6)+
00006876  1CFC 0041                775                  MOVE.B  #'A',(A6)+
0000687A                           776                  
0000687A                           777  **INVALID               
0000687A                           778  MODE101         
0000687A  1CFC 0028                779                  MOVE.B  #'(', (A6)+
0000687E  1CFC 0041                780                  MOVE.B  #'A',(A6)+ 
00006882                           781                  
00006882                           782  **INVALID
00006882                           783  MODE110         
00006882  1CFC 0028                784                  MOVE.B  #'(', (A6)+
00006886  1CFC 0041                785                  MOVE.B  #'A',(A6)+  
0000688A                           786  
0000688A                           787  ** ABSOLUTE AND IMMEDIATE            
0000688A                           788  MODE111         
0000688A                           789                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
0000688A  4EB9 00006898            790                 JSR ABSOLUTE_BUFFER  
00006890  4E75                     791                 RTS            
00006892                           792                                          
00006892                           793  ADDRESS_BUFFER
00006892  1CFC 0041                794                  MOVE.B  #'A',(A6)+ 
00006896  4E75                     795                  RTS
00006898                           796                 
00006898                           797  ABSOLUTE_BUFFER
00006898  4243                     798                 CLR      D3
0000689A  3604                     799                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
0000689C  1CF8 0024                800                 MOVE.B   '$', (A6)+
000068A0  B67C 0000                801                 CMP.W    #%000, D3
000068A4  6700 000E                802                 BEQ      ABSOLUTE_WORD_BUFFER
000068A8  4243                     803                 CLR      D3
000068AA  3604                     804                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
000068AC  B67C 0001                805                 CMP.W    #%001, D3
000068B0  6700 0012                806                 BEQ      ABSOLUTE_LONG_BUFFER
000068B4                           807                 
000068B4                           808  ABSOLUTE_WORD_BUFFER
000068B4                           809                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
000068B4                           810                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
000068B4  1CFC 0046                811                         MOVE.B #'F', (A6)+ 
000068B8  1CFC 0046                812                         MOVE.B #'F', (A6)+ 
000068BC  1CFC 0046                813                         MOVE.B #'F', (A6)+ 
000068C0  1CFC 0046                814                         MOVE.B #'F', (A6)+   
000068C4                           815  ABSOLUTE_LONG_BUFFER       
000068C4                           816                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
000068C4                           817                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
000068C4  1CFC 0047                818                         MOVE.B #'G', (A6)+ 
000068C8  1CFC 0047                819                         MOVE.B #'G', (A6)+ 
000068CC  1CFC 0047                820                         MOVE.B #'G', (A6)+ 
000068D0  1CFC 0047                821                         MOVE.B #'G', (A6)+ 
000068D4                           822                                                      
000068D4                           823  
000068D4                           824  PRINT_BUFFER    
000068D4  1CFC 0000                825                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
000068D8  43F9 000069B2            826                 LEA      BUFFER, A1
000068DE  303C 000E                827                 MOVE.W   #14,D0
000068E2  4E4F                     828                 TRAP     #15
000068E4  6000 F967                829                 BRA EXIT
000068E8                           830                 
000068E8                           831                 
000068E8                           832  
000068E8                           833  INVALID_EA  
000068E8                           834                  * TODO: IMPLEMENT
000068E8                           835                  *** CLEAR OUT A6
000068E8                           836                  ** PUT INVALID MESSAGE INTO A6
000068E8  6000 F963                837                  BRA EXIT
000068EC                           838  INVALID_OP  
000068EC                           839                  ** TODO: IMPLEMENT
000068EC                           840                 *** CLEAR OUT A6
000068EC                           841                  ** PUT INVALID MESSAGE INTO A6
000068EC  6000 F95F                842                  BRA EXIT             
000068F0                           843                  
000068F0  43F8 618F                844  NOP                 LEA     NOP_disp,A1          
000068F4  103C 000E                845                      MOVE.B  #14,D0
000068F8  4E4F                     846                      TRAP    #15
000068FA  6000 F951                847                      BRA     EXIT
000068FE                           848                   
000068FE                           849  RTS      
000068FE  43F8 61F6                850                      LEA     RTS_disp,A1          
00006902  103C 000E                851                      MOVE.B  #14,D0
00006906  4E4F                     852                      TRAP    #15 
00006908  6000 F943                853                      BRA     EXIT
0000690C                           854  JSR      
0000690C  4DF9 000069B2            855                      LEA     BUFFER, A6
00006912  1CFC 004A                856                      MOVE.B #'J', (A6)+
00006916  1CFC 0053                857                      MOVE.B #'S', (A6)+
0000691A  1CFC 0052                858                      MOVE.B #'R', (A6)+
0000691E  1CFC 0020                859                      MOVE.B #' ', (A6)+
00006922  43F9 000069B2            860                      LEA     BUFFER, A1
00006928                           861                      ** BITS 10 - 12 MODE       
00006928                           862                      ** BITS 13 - 16 REGISTER
00006928  103C 000E                863                      MOVE.B  #14,D0
0000692C  4E4F                     864                      TRAP    #15 
0000692E  6000 F91D                865                      BRA     EXIT
00006932                           866                    
00006932                           867  MOVEM      
00006932                           868                     
00006932                           869                      ** SIZE SUBROUTINE
00006932                           870                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00006932  C47C 0040                871                      AND #%0000000001000000,D2 
00006936                           872                      * WORD
00006936  B4BC 00000040            873                      CMP.L   #%0000000001000000,D2
0000693C  4EB9 00006952            874                      JSR     MOVEM_W 
00006942                           875                      *LONG
00006942  B4BC 00000040            876                      CMP.L   #%0000000001000000,D2 
00006948                           877                     ** JSR     MOVEM_L
00006948  103C 000E                878                      MOVE.B  #14,D0
0000694C  4E4F                     879                      TRAP    #15
0000694E  6000 F8FD                880                      BRA     EXIT 
00006952                           881                      
00006952                           882  MOVEM_W 
00006952  43F8 61A4                883                       LEA     MOVEM_disp,A1
00006956                           884                      * PRINT MOVEM
00006956  103C 000E                885                       MOVE.B  #14,D0
0000695A  4E4F                     886                       TRAP    #15
0000695C                           887          
0000695C                           888                      * PRINT WORD PORTION
0000695C  41F8 623B                889                       LEA     size_w, A0
00006960  103C 000E                890                       MOVE.B  #14,D0
00006964  4E4F                     891                       TRAP    #15 
00006966                           892          
00006966  6000 F8E5                893                       BRA     EXIT 
0000696A                           894       
0000696A                           895     
0000696A                           896  COPY_OPCODE 
0000696A                           897                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
0000696A  4242                     898                       CLR    D2  
0000696C  3405                     899                       MOVE.W D5,D2 
0000696E  4E75                     900                       RTS  
00006970                           901                       
00006970                           902  GETSIZE_ADDA
00006970  4EB8 67FA                903          JSR     bits8to10
00006974  B67C 0003                904          CMP     #%011,D3
00006978  6600 000A                905          BNE     NOTWORD
0000697C  4EB9 0000699E            906          JSR     SIZEISWORD
00006982  4E75                     907          RTS
00006984                           908          
00006984                           909          
00006984                           910  NOTWORD
00006984  B67C 0007                911          CMP     #%111,D3
00006988  6600 FF5E                912          BNE     INVALID_EA
0000698C  4EB9 000069A8            913          JSR     SIZEISLONG
00006992  4E75                     914          RTS
00006994                           915          
00006994                           916      
00006994                           917  SIZEISBYTE
00006994  1CFC 002E                918         MOVE.B   #'.',(A6)+
00006998  1CFC 0042                919         MOVE.B   #'B',(A6)+
0000699C  4E75                     920         RTS
0000699E                           921  
0000699E                           922  SIZEISWORD    
0000699E  1CFC 002E                923         MOVE.B   #'.',(A6)+
000069A2  1CFC 0057                924         MOVE.B   #'W',(A6)+
000069A6  4E75                     925         RTS
000069A8                           926                  
000069A8                           927  SIZEISLONG    
000069A8  1CFC 002E                928         MOVE.B   #'.',(A6)+
000069AC  1CFC 004C                929         MOVE.B   #'L',(A6)+
000069B0  4E75                     930         RTS
000069B2                           931                  
000069B2                           932       
000069B2= 20 20 20 20 20 00        933  BUFFER DC.B '     ',0     
000069B8                           934        
000069B8                           935  
000069B8                           936      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     6898
ABSOLUTE_LONG_BUFFER  68C4
ABSOLUTE_WORD_BUFFER  68B4
ADD                 63EA
ADDA                63C4
ADDA_BUFFER         63CE
ADDA_DISP           61AE
ADDI                640A
ADDI_BUFFER         6476
ADDI_DES            6424
ADDI_DISP           61B3
ADDI_SRC            6420
ADDQ                6588
ADDQ_BUFFER         6592
ADDQ_DISP           61B8
ADDRESS_BUFFER      6892
ADDR_ODDBIT_MSG     60C8
ADDR_ORDER_CHECK    60EF
ADD_BUFFER          63F4
ADD_DISP            61AA
AND                 6668
AND_BUFFER          6672
AND_DISP            61D3
ASL                 66A4
ASL_BUFFER          66AE
ASL_DISP            61E2
ASR                 6688
ASR_BUFFER          6692
ASR_DISP            61E6
BACKSLASHSIGH       6230
BCC_DISP            61FA
BGT_DISP            61FE
BITS11TO13          680C
BITS11TO16          682E
BITS14TO16          681E
BITS1TO10           683E
BITS5TO7            67D4
BITS5TO8            67E8
BITS8TO10           67FA
BLE_DISP            6202
BUFFER              69B2
CLOSEPAREN          6234
CLR_DISP            61CF
CMP                 6628
CMP_BUFFER          6632
CODE0000            62B2
CODE0001            62C6
CODE0010            62CA
CODE0011            62CE
CODE0100            62D2
CODE0101            6306
CODE0110            630C
CODE0111            6310
CODE1000            6316
CODE1001            6328
CODE1010            632E
CODE1011            6332
CODE1100            6338
CODE1101            634A
CODE1110            6396
CODE1111            63C0
COMMASIGN           622E
COPY_OPCODE         696A
CR                  D
DIVU                65CC
DIVU_BUFFER         65D6
DIVU_DISP           61C6
DOLLARSIGN          6228
DONE                67D2
ENDTEST_MSG         6143
EXIT                624D
FINISHER            67A4
FIVE                6778
FOUR                6768
GETSIZE_ADDA        6970
HEXATABLE           6206
INPUT_BUFFER        6242
INSERT_NUM          6728
INVALIDEA_DISP      6187
INVALID_DISP        6182
INVALID_EA          68E8
INVALID_OP          68EC
JMP_MODE            66F8
JMP_TABLE           6252
JSR                 690C
JSR_DISP            61F2
LEA                 6490
LEA_BUFFER          64B4
LEA_DEST            6564
LEA_DISP            61CB
LEA_SRC             64C6
LF                  A
LINEBREAK           617F
LINECOUNT           6241
LOCATION_ENDDATA    6248
LOCATION_END_MSG    60AB
LOCATION_STARTDATA  6244
LOCATION_START_MSG  608C
LSL                 66C0
LSL_BUFFER          66CA
LSL_DISP            61DA
LSR                 66DC
LSR_BUFFER          66E6
LSR_DISP            61DE
MINUSSIGN           622C
MODE000             6850
MODE001             6858
MODE010             6860
MODE011             686A
MODE100             6872
MODE101             687A
MODE110             6882
MODE111             688A
MOVEA_DISP          6198
MOVEM               6932
MOVEM_DISP          61A4
MOVEM_W             6952
MOVEQ               65A8
MOVEQ_BUFFER        65B2
MOVEQ_DISP          619E
MOVE_DISP           6193
MULS                6648
MULS_BUFFER         6652
MULS_DISP           61C1
NOP                 68F0
NOP_DISP            618F
NOTWORD             6984
ONE                 6738
ONEPAREN            67C4
OPENPAREN           6232
OR                  65EC
OR_BUFFER           65F6
OR_DISP             61D7
PAUSE_MSG           6129
PLUSSIGN            622A
POSTINCR            67B2
POUNDSIGN           6226
PRINT_BUFFER        68D4
ROL_DISP            61EA
ROR_DISP            61EE
RTS                 68FE
RTS_DISP            61F6
SEVEN               6798
SIX                 6788
SIZEISBYTE          6994
SIZEISLONG          69A8
SIZEISWORD          699E
SIZE_B              6238
SIZE_L              623E
SIZE_W              623B
SPACE               6236
START               6000
SUB                 6608
SUB_BUFFER          6612
SUB_DISP            61BD
TABLE_LENGTH        624C
THREE               6758
TWO                 6748
WELCOME_MSG         6028
