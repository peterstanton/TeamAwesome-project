00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/27/2017 5:25:58 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D5 - CURRENT OPCODE
00000000                             3  ***
00000000                             4  ***
00000000                             5  
00000000                             6  
00006000                             7  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       8                     ADDQ.B  #$1,D1      
00006002                             9                   
00006002  41F9 0000624E             10                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 000067BC             11                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      12                   CLR.L   D3              *Zero it
00006010                            13                   * TEST OPCODES
00006010                            14                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006010                            15                   ; MOVE.W  #$4E71,D3 * NOP
00006010                            16                   ; MOVE.W  #$4E75,D3 * RTS
00006010                            17                   ; MOVE.W  #$4EB0,D3 * JSR
00006010                            18                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006010                            19                   ; MOVE.W  #$D4FC,D3   *ADDA.L   #1000, A2
00006010                            20                   ; MOVE.W  #$D5FC,D3   *ADDA.W   #1000, A2
00006010                            21                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006010                            22                   ; MOVE.W    #$5201,D3    *ADDQ
00006010  363C 41D5                 23                   MOVE.W     #$41D5, D3
00006014                            24                   
00006014  3A03                      25                   MOVE.W  D3,D5
00006016  183C 000C                 26                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601A                            27  
0000601A                            28             
0000601A  E86B                      29                   LSR.W   D4,D3       *Move the bits
0000601C  C6FC 0006                 30                   MULU    #6,D3       *Form offset     
00006020  4EB0 3000                 31                   JSR     0(A0,D3)   *Jump indirect with index
00006024                            32                  
00006024                            33      INCLUDE 'definitions.x68'
00006024                            34  
00006024  =0000000D                 35  CR              EQU     $0D         carriage return
00006024  =0000000A                 36  LF              EQU     $0A         line feed
00006024= 43 53 53 20 34 32 ...     37  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
00006048= 42 79 20 54 65 61 ...     38                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00006088= 45 6E 74 65 72 20 ...     39  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060A7= 45 6E 74 65 72 20 ...     40  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C4= 41 64 64 72 65 73 ...     41  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EB= 45 6E 64 69 6E 67 ...     42  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006125= 50 72 65 73 73 20 ...     43  pause_msg           DC.B    'Press enter to continue!',CR,LF
0000613F= 52 65 61 63 68 65 ...     44  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615A= 54 72 79 20 61 6E ...     45                      DC.B    'Try another location? (yes/no): ',0
0000617B= 0D 0A 00                  46  linebreak           DC.B    CR,LF,0
0000617E                            47                      
0000617E= 44 41 54 41 00            48  Invalid_disp        DC.B    'DATA',0
00006183= 57 52 4F 4E 47 45 ...     49  InvalidEA_disp      DC.B    'WRONGEA',0
0000618B                            50  
0000618B= 4E 4F 50 00               51  NOP_disp            DC.B    'NOP',0
0000618F= 4D 4F 56 45 00            52  MOVE_disp           DC.B    'MOVE',0
00006194= 4D 4F 56 45 41 00         53  MOVEA_disp          DC.B    'MOVEA',0
0000619A= 4D 4F 56 45 51 00         54  MOVEQ_disp          DC.B    'MOVEQ',0
000061A0= 4D 4F 56 45 4D 00         55  MOVEM_disp          DC.B    'MOVEM',0
000061A6= 41 44 44 00               56  ADD_disp            DC.B    'ADD',0
000061AA= 41 44 44 41 00            57  ADDA_disp           DC.B    'ADDA',0
000061AF= 41 44 44 49 00            58  ADDI_disp           DC.B    'ADDI',0
000061B4= 41 44 44 51 00            59  ADDQ_disp           DC.B    'ADDQ',0
000061B9= 53 55 42 00               60  SUB_disp            DC.B    'SUB',0
000061BD= 4D 55 4C 53 00            61  MULS_disp           DC.B    'MULS',0
000061C2= 44 49 56 55 00            62  DIVU_disp           DC.B    'DIVU',0
000061C7= 4C 45 41 00               63  LEA_disp            DC.B    'LEA',0
000061CB= 43 4C 52 00               64  CLR_disp            DC.B    'CLR',0
000061CF= 41 4E 44 00               65  AND_disp            DC.B    'AND',0
000061D3= 4F 52 00                  66  OR_disp             DC.B    'OR',0
000061D6= 4C 53 4C 00               67  LSL_disp            DC.B    'LSL',0
000061DA= 4C 53 52 00               68  LSR_disp            DC.B    'LSR',0
000061DE= 41 53 4C 00               69  ASL_disp            DC.B    'ASL',0
000061E2= 41 53 52 00               70  ASR_disp            DC.B    'ASR',0
000061E6= 52 4F 4C 00               71  ROL_disp            DC.B    'ROL',0
000061EA= 52 4F 52 00               72  ROR_disp            DC.B    'ROR',0
000061EE= 4A 53 52 00               73  JSR_disp            DC.B    'JSR',0
000061F2= 52 54 53 00               74  RTS_disp            DC.B    'RTS',0
000061F6= 42 43 43 00               75  BCC_disp            DC.B    'BCC',0
000061FA= 42 47 54 00               76  BGT_disp            DC.B    'BGT',0    
000061FE= 42 4C 45 00               77  BLE_disp            DC.b    'BLE',0
00006202                            78  
00006202                            79  
00006202= 30 00                     80  hexaTable               DC.B    '0',0
00006204= 31 00                     81                          DC.B    '1',0
00006206= 32 00                     82                          DC.B    '2',0
00006208= 33 00                     83                          DC.B    '3',0
0000620A= 34 00                     84                          DC.B    '4',0
0000620C= 35 00                     85                          DC.B    '5',0
0000620E= 36 00                     86                          DC.B    '6',0
00006210= 37 00                     87                          DC.B    '7',0
00006212= 38 00                     88                          DC.B    '8',0
00006214= 39 00                     89                          DC.B    '9',0
00006216= 41 00                     90                          DC.B    'A',0
00006218= 42 00                     91                          DC.B    'B',0
0000621A= 43 00                     92                          DC.B    'C',0
0000621C= 44 00                     93                          DC.B    'D',0
0000621E= 45 00                     94                          DC.B    'E',0
00006220= 46 00                     95                          DC.B    'F',0
00006222= 23 00                     96  poundsign               DC.B    '#',0
00006224= 24 00                     97  dollarsign              DC.B    '$',0
00006226= 2B 00                     98  plussign                DC.B    '+',0
00006228= 2D 00                     99  minussign               DC.B    '-',0
0000622A= 2C 00                    100  commasign               DC.B    ',',0
0000622C= 2F 00                    101  backslashsigh           DC.B    '/',0
0000622E= 28 00                    102  openparen               DC.B    '(',0
00006230= 29 00                    103  closeparen              DC.B    ')',0
00006232= 20 00                    104  space                   DC.B    ' ',0   
00006234= 2E 42 00                 105  size_b                  DC.B    '.B',0
00006237= 2E 57 00                 106  size_w                  DC.B    '.W',0        
0000623A= 2E 4C 00                 107  size_l                  DC.B    '.L',0
0000623D                           108  
0000623D                           109  linecount               DS.B    1       *storeage for lines on a screen
0000623E= 01                       110  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006240                           111  location_startData      DS.L    1       *location on where to start reading data
00006244                           112  location_endData        DS.L    1       *location on where to end reading data
00006248                           113  table_length            DS.B    1       *Number of spaces in the table to print to console
00006249                           114  
00006249                           115  
00006249                           116  -------------------- end include --------------------
00006249                           117             
00006249                           118  EXIT                 
0000624A  FFFF FFFF                119         SIMHALT   
0000624E                           120  
0000624E  4EF9 000062AE            121  jmp_table      JMP         code0000
00006254                           122                  *ADDI
00006254                           123  
00006254  4EF9 000062C2            124                 JMP         code0001
0000625A                           125  
0000625A  4EF9 000062C6            126                 JMP         code0010
00006260                           127  
00006260  4EF9 000062CA            128                 JMP         code0011
00006266                           129  
00006266  4EF9 000062CE            130                 JMP         code0100
0000626C                           131                             
0000626C  4EF9 00006302            132                 JMP         code0101
00006272                           133                 * ADDQ
00006272                           134                  
00006272                           135        
00006272  4EF9 00006308            136                 JMP         code0110
00006278                           137                 * BCC
00006278                           138                 * BGT
00006278                           139                 * BLE
00006278                           140                 
00006278  4EF9 0000630C            141                 JMP         code0111
0000627E                           142                 * MOVEQ
0000627E                           143  
0000627E  4EF9 00006312            144                 JMP         code1000
00006284                           145                 * DIVU
00006284                           146                 * OR
00006284                           147  
00006284  4EF9 00006316            148                 JMP         code1001
0000628A                           149                  *SUB
0000628A  4EF9 0000631A            150                 JMP         code1010
00006290                           151                 
00006290  4EF9 0000631E            152                 JMP         code1011
00006296                           153                 * CMP
00006296  4EF9 00006320            154                 JMP         code1100
0000629C                           155                 * MULS
0000629C                           156                 * AND
0000629C                           157          
0000629C  4EF9 00006324            158                 JMP         code1101
000062A2                           159                 *ADD
000062A2                           160                 *ADDA
000062A2  4EF9 00006370            161                 JMP         code1110
000062A8                           162                 * ASR
000062A8                           163                 * ASL
000062A8                           164                 * LSL
000062A8                           165                 * LSR
000062A8                           166                 * ROL
000062A8                           167                 * ROR
000062A8                           168  
000062A8  4EF9 00006374            169                 JMP         code1111
000062AE                           170  
000062AE                           171  
000062AE                           172  code0000      
000062AE  4EB9 00006646            173                 JSR          bits5to8 // RETURNS INTO D3
000062B4  B6BC 00000006            174                 CMP.L        #%0110, D3
000062BA  6600 047C                175                 BNE          INVALID_OP
000062BE  6000 00FC                176                 BRA          ADDI  
000062C2                           177  
000062C2  4E72 2700                178  code0001       STOP        #$2700
000062C6                           179  
000062C6  4E72 2700                180  code0010       STOP        #$2700
000062CA                           181  
000062CA  4E72 2700                182  code0011       STOP        #$2700
000062CE                           183  
000062CE                           184  code0100       
000062CE  4EB9 000067B6            185                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D4                           186                  
000062D4                           187                 *NOP
000062D4  C47C 0FFF                188                 AND     #%0000111111111111,D2
000062D8  B4BC 00000E71            189                 CMP.L   #%000111001110001, D2
000062DE  6700 045C                190                 BEQ     NOP
000062E2                           191                 
000062E2                           192                 *RTS
000062E2  C47C 0FFF                193                 AND     #%0000111111111111,D2
000062E6  B4BC 00000E75            194                 CMP.L   #%0000111001110101, D2
000062EC  6700 045C                195                 BEQ     RTS
000062F0                           196  
000062F0                           197                 *JSR
000062F0  C47C 0FC0                198                 AND     #%0000111111000000,D2
000062F4  B4BC 00000E80            199                 CMP.L   #%0000111010000000,D2
000062FA  6700 045C                200                 BEQ     JSR
000062FE                           201                 
000062FE                           202                 * MOVEM
000062FE                           203                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000062FE                           204                ** AND     #%0000111110000000,D2
000062FE                           205                 * DATA REGISTER
000062FE                           206                ** CMP.L   #%0000100010000000, D2
000062FE                           207                 ** JSR      MOVEM
000062FE                           208                 * ADDRESS REGISTER (DECREMENTED)
000062FE                           209                 ** CMP.L  #%0000110010000000, D2
000062FE                           210                 ** JSR    MOVEM
000062FE                           211                  
000062FE                           212                  ** TO DO: BRANCH IF INVALID OPCODE
000062FE                           213                  *LEA - if it's not the top codes, it's LEA
000062FE  6000 0142                214                  BRA     LEA
00006302                           215  code0101      
00006302  4EB9 00006518            216                JSR   ADDQ
00006308                           217  
00006308  4E72 2700                218  code0110       STOP        #$2700
0000630C                           219  
0000630C                           220  code0111       
0000630C  4EB9 0000653C            221                 JSR       MOVEQ
00006312                           222  
00006312  4E72 2700                223  code1000       STOP        #$2700
00006316                           224  
00006316  4E72 2700                225  code1001       STOP        #$2700
0000631A                           226  
0000631A  4E72 2700                227  code1010       STOP        #$2700
0000631E                           228  
0000631E  60FE                     229  code1011       BRA        code1011
00006320                           230  
00006320                           231    
00006320                           232  
00006320  4E72 2700                233  code1100       STOP        #$2700
00006324                           234  
00006324                           235  code1101       
00006324  4EB9 000067B6            236                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000632A                           237                 *ADDA
0000632A  4EB9 00006658            238                 JSR      bits8to10
00006330  B67C 0003                239                 CMP      #%011, D3  ** WORD
00006334  6700 0042                240                 BEQ      ADDA
00006338  B67C 0007                241                 CMP      #%111, D3   ** LONG
0000633C  6700 003A                242                 BEQ      ADDA
00006340                           243                 
00006340                           244                 *ADD
00006340  B67C 0000                245                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00006344  6700 0056                246                 BEQ      ADD
00006348  B67C 0001                247                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000634C  6700 004E                248                 BEQ      ADD
00006350  B67C 0002                249                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00006354  6700 0046                250                 BEQ      ADD
00006358  B67C 0004                251                 CMP      #%100, D3   ** BYTE TO EA
0000635C  6700 003E                252                 BEQ      ADD
00006360  B67C 0005                253                 CMP      #%101, D3   ** WORD TO EA
00006364  6700 0036                254                 BEQ      ADD
00006368  B67C 0006                255                 CMP      #%110, D3   ** LONG TO EA
0000636C  6700 002E                256                 BEQ      ADD
00006370                           257                 
00006370                           258  
00006370  4E72 2700                259  code1110       STOP        #$2700
00006374                           260  
00006374  4E72 2700                261  code1111       STOP        #$2700
00006378                           262  
00006378                           263  ADDA    
00006378  4EB9 00006382            264                 JSR     ADDA_BUFFER
0000637E  6000 03A0                265                 BRA     PRINT_BUFFER
00006382                           266                  
00006382                           267  ADDA_BUFFER
00006382  1CFC 0041                268                 MOVE.B   #'A',(A6)+
00006386  1CFC 0044                269                 MOVE.B   #'D', (A6)+  
0000638A  1CFC 0044                270                 MOVE.B   #'D', (A6)+
0000638E  1CFC 0041                271                 MOVE.B   #'A', (A6)+
00006392  1CFC 002E                272                 MOVE.B   #'.', (A6)+
00006396                           273                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006396                           274                 ** VALID SIZES ARE W (011) ,L (111)
00006396  1CFC 0020                275                 MOVE.B   #' ', (A6)+
0000639A  4E75                     276                 RTS
0000639C                           277                 
0000639C                           278  ADD    
0000639C  4EB9 000063A6            279                 JSR     ADD_BUFFER
000063A2  6000 037C                280                 BRA     PRINT_BUFFER
000063A6                           281                  
000063A6                           282  ADD_BUFFER
000063A6  1CFC 0041                283                 MOVE.B   #'A',(A6)+
000063AA  1CFC 0044                284                 MOVE.B   #'D', (A6)+  
000063AE  1CFC 0044                285                 MOVE.B   #'D', (A6)+
000063B2  1CFC 002E                286                 MOVE.B   #'.', (A6)+
000063B6                           287                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000063B6                           288                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000063B6                           289                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000063B6  1CFC 0020                290                 MOVE.B   #' ', (A6)+
000063BA  4E75                     291                 RTS               
000063BC                           292  ADDI
000063BC  4EB9 00006428            293                  JSR     ADDI_BUFFER
000063C2  4EB9 000063D2            294                  JSR     ADDI_SRC
000063C8  4EB9 000063D6            295                  JSR     ADDI_DES
000063CE  6000 0350                296                  BRA     PRINT_BUFFER
000063D2                           297                  
000063D2                           298  ADDI_SRC                        
000063D2  1CFC 0023                299                  MOVE.B  #'#', (A6)+
000063D6                           300                    ** TODO: IMPLEMENT THIS IN EA
000063D6                           301                  ** Immediate field—Data immediately following the instruction.
000063D6                           302                  **If size = 00, the data is the low-order byte of the immediate word.
000063D6                           303                  **If size = 01, the data is the entire immediate word.
000063D6                           304                  **If size = 10, the data is the next two immediate words. 
000063D6                           305  ADDI_DES
000063D6                           306                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
000063D6                           307                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
000063D6  4EB9 0000666A            308                 JSR      bits11to13
000063DC  B67C 0001                309                 CMP      #%001, D3 **AN
000063E0  6700 0352                310                 BEQ      INVALID_EA
000063E4  B67C 0005                311                 CMP      #%101, D3 **COMPLICATED
000063E8  6700 034A                312                 BEQ      INVALID_EA
000063EC  B67C 0006                313                 CMP      #%110, D3 **COMPLICATED
000063F0  6700 0342                314                 BEQ      INVALID_EA
000063F4                           315                 
000063F4  4EB9 0000668C            316                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000063FA  B67C 003C                317                 CMP      #%111100,D3 // immediate data
000063FE  6700 0334                318                 BEQ      INVALID_EA
00006402  B67C 003A                319                 CMP      #%111010,D3 // complicated
00006406  6700 032C                320                 BEQ      INVALID_EA
0000640A  B67C 003B                321                 CMP      #%111011,D3 // complicated
0000640E  6700 0324                322                 BEQ      INVALID_EA
00006412                           323                 
00006412  4EB9 0000666A            324                 JSR      bits11to13 ** grab bits to jump with
00006418  41F9 00006560            325                 LEA     jmp_mode,A0    *Index into the table
0000641E  C6FC 0006                326                 MULU    #6,D3       *Form offset     
00006422  4EB0 3000                327                 JSR     0(A0,D3)   *Jump indirect with index
00006426  4E75                     328                 RTS
00006428                           329                 
00006428                           330                             
00006428                           331  ADDI_BUFFER
00006428  1CFC 0041                332                 MOVE.B   #'A',(A6)+
0000642C  1CFC 0044                333                 MOVE.B   #'D', (A6)+  
00006430  1CFC 0044                334                 MOVE.B   #'D', (A6)+
00006434  1CFC 0049                335                 MOVE.B   #'I', (A6)+
00006438  1CFC 002E                336                 MOVE.B   #'.', (A6)+
0000643C                           337                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
0000643C                           338                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000643C  1CFC 0020                339                 MOVE.B   #' ', (A6)+
00006440  4E75                     340                 RTS
00006442                           341                              
00006442                           342  LEA
00006442  4EB9 00006658            343                 JSR      bits8to10   // 1 1 1
00006448  B47C 0007                344                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
0000644C  6600 02EA                345                 BNE      INVALID_OP
00006450  4EB9 00006466            346                 JSR      LEA_BUFFER
00006456  4EB9 00006478            347                 JSR      LEA_SRC
0000645C  4EB9 000064F8            348                 JSR      LEA_DEST
00006462  6000 02BC                349                 BRA      PRINT_BUFFER
00006466                           350                 
00006466                           351  LEA_BUFFER 
00006466  1CFC 004C                352                 MOVE.B   #'L',(A6)+
0000646A  1CFC 0045                353                 MOVE.B   #'E', (A6)+  
0000646E  1CFC 0041                354                 MOVE.B   #'A', (A6)+
00006472  1CFC 0020                355                 MOVE.B   #' ', (A6)+
00006476  4E75                     356                 RTS
00006478                           357            
00006478                           358  LEA_SRC
00006478                           359              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00006478  4EB9 0000666A            360              JSR      bits11to13  // source mode - D3
0000647E  B67C 0000                361              CMP      #%000, D3
00006482  6700 02B0                362              BEQ      INVALID_EA
00006486  B67C 0001                363              CMP      #%001, D3
0000648A  6700 02A8                364              BEQ      INVALID_EA
0000648E  B67C 0003                365              CMP      #%011, D3
00006492  6700 02A0                366              BEQ      INVALID_EA
00006496  B67C 0004                367              CMP      #%100, D3
0000649A  6700 0298                368              BEQ      INVALID_EA
0000649E  B67C 0005                369              CMP      #%101, D3
000064A2  6700 0290                370              BEQ      INVALID_EA
000064A6  B67C 0006                371              CMP      #%110, D3
000064AA  6700 0288                372              BEQ      INVALID_EA
000064AE                           373              
000064AE                           374              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
000064AE  4EB9 0000667C            375              JSR      bits14to16 // source register - d4
000064B4  B67C 0004                376              CMP      #%100, D3
000064B8  6700 027A                377              BEQ      INVALID_EA
000064BC  B67C 0002                378              CMP      #%010, D3
000064C0  6700 0272                379              BEQ      INVALID_EA
000064C4  B67C 0003                380              CMP      #%011, D3
000064C8  6700 026A                381              BEQ      INVALID_EA
000064CC                           382              
000064CC                           383              
000064CC  4EB9 0000666A            384               JSR      bits11to13 ** grab mode bits to jump with
000064D2  41F9 00006560            385               LEA     jmp_mode,A0    *Index into the table
000064D8  C6FC 0006                386               MULU    #6,D3       *Form offset     
000064DC  4EB0 3000                387               JSR     0(A0,D3)   *Jump indirect with index
000064E0                           388               
000064E0  4243                     389               CLR     D3
000064E2  4EB9 0000667C            390               JSR     bits14to16
000064E8  4EB9 00006590            391               JSR     insert_num
000064EE                           392               
000064EE  1CFC 002C                393               MOVE.B     #',', (A6)+
000064F2  1CFC 0020                394               MOVE.B     #' ', (A6)+
000064F6                           395  
000064F6  4E75                     396               RTS
000064F8                           397               
000064F8                           398  LEA_DEST    
000064F8  41F9 00006560            399                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING             
000064FE  363C 0001                400                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
00006502  C6FC 0006                401                  MULU    #6,D3       *Form offset     
00006506  4EB0 3000                402                  JSR     0(A0,D3)   *Jump indirect with index
0000650A                           403                  
0000650A  4EB9 00006632            404                  JSR     bits5to7
00006510  4EB9 00006590            405                  JSR     insert_num
00006516                           406                  
00006516  4E75                     407                  RTS
00006518                           408  
00006518                           409  ADDQ
00006518  4EB9 00006522            410                  JSR     ADDQ_BUFFER
0000651E  6000 0200                411                  BRA     PRINT_BUFFER
00006522                           412  
00006522                           413  ADDQ_BUFFER
00006522  1CFC 0041                414                 MOVE.B   #'A',(A6)+
00006526  1CFC 0044                415                 MOVE.B   #'D', (A6)+  
0000652A  1CFC 0044                416                 MOVE.B   #'D', (A6)+
0000652E  1CFC 0051                417                 MOVE.B   #'Q', (A6)+
00006532  1CFC 002E                418                 MOVE.B   #'.', (A6)+
00006536                           419                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00006536                           420                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006536  1CFC 0020                421                 MOVE.B   #' ', (A6)+
0000653A  4E75                     422                 RTS
0000653C                           423                 
0000653C                           424  MOVEQ
0000653C  4EB9 00006546            425                  JSR     MOVEQ_BUFFER
00006542  6000 01DC                426                  BRA     PRINT_BUFFER
00006546                           427  
00006546                           428  MOVEQ_BUFFER
00006546  1CFC 004D                429                 MOVE.B   #'M',(A6)+
0000654A  1CFC 004F                430                 MOVE.B   #'O', (A6)+  
0000654E  1CFC 0056                431                 MOVE.B   #'V', (A6)+
00006552  1CFC 0045                432                 MOVE.B   #'E', (A6)+
00006556  1CFC 0051                433                 MOVE.B   #'Q', (A6)+
0000655A  1CFC 0020                434                 MOVE.B   #' ', (A6)+
0000655E  4E75                     435                 RTS
00006560                           436                    
00006560                           437  jmp_mode
00006560  4EF9 0000669C            438                  JMP     MODE000  ** DN
00006566  4EF9 000066A4            439                  JMP     MODE001  ** AN
0000656C  4EF9 000066AC            440                  JMP     MODE010  ** (AN)
00006572  4EF9 000066B6            441                  JMP     MODE011  ** (AN)+   
00006578  4EF9 000066BE            442                  JMP     MODE100  ** -(AN)
0000657E  4EF9 000066C6            443                  JMP     MODE101  **INVALID
00006584  4EF9 000066CE            444                  JMP     MODE110  **INVALID
0000658A  4EF9 000066D6            445                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00006590                           446                  
00006590                           447                  
00006590                           448  insert_num
00006590                           449                  ;get number from D3
00006590  B67C 0000                450                  CMP     #%000,D3       ;0
00006594  6600 000A                451                  BNE     ONE         
00006598  1CF8 0030                452                  MOVE.B  '0',(A6)+      ;Put ASCII value in buffer.
0000659C  6000 006A                453                  BRA     FINISHER
000065A0                           454                  
000065A0  B67C 0001                455  ONE             CMP     #%001,D3       ;1
000065A4  6600 000A                456                  BNE     TWO 
000065A8  1CF8 0031                457                  MOVE.B  '1',(A6)+
000065AC  6000 005A                458                  BRA     FINISHER
000065B0                           459  
000065B0                           460                  
000065B0  B67C 0002                461  TWO             CMP     #%010,D3        ;2
000065B4  6600 000A                462                  BNE     THREE
000065B8  1CF8 0032                463                  MOVE.B  '2',(A6)+
000065BC  6000 004A                464                  BRA     FINISHER
000065C0                           465                  
000065C0  B67C 0003                466  THREE           CMP     #%011,D3        ;3
000065C4  6600 000A                467                  BNE     FOUR
000065C8  1CF8 0033                468                  MOVE.B  '3',(A6)+
000065CC  6000 003A                469                  BRA     FINISHER
000065D0                           470                  
000065D0  B67C 0004                471  FOUR            CMP     #%100,D3        ;4
000065D4  6600 000A                472                  BNE     FIVE
000065D8  1CF8 0034                473                  MOVE.B  '4',(A6)+
000065DC  6000 002A                474                  BRA     FINISHER
000065E0                           475                  
000065E0  B67C 0005                476  FIVE            CMP     #%101,D3        ;5
000065E4  6600 000A                477                  BNE     SIX
000065E8  1CF8 0035                478                  MOVE.B  '5',(A6)+
000065EC  6000 001A                479                  BRA     FINISHER
000065F0                           480                  
000065F0  B67C 0006                481  SIX             CMP     #%110,D3        ;6
000065F4  6600 000A                482                  BNE     SEVEN
000065F8  1CF8 0036                483                  MOVE.B  '6',(A6)+
000065FC  6000 000A                484                  BRA     FINISHER
00006600                           485                  
00006600  B67C 0007                486  SEVEN           CMP     #%111,D3        ;7
00006604  1CF8 0037                487                  MOVE.B  '7',(A6)+
00006608                           488                  
00006608                           489  FINISHER                
00006608                           490                  
00006608                           491                  ;check D4, do we need to do stuff?
00006608  B87C 0002                492                  CMP     #%010,D4
0000660C  6600 0008                493                  BNE     POSTINCR
00006610  1CFC 0029                494                  MOVE.B  #')',(A6)+
00006614  4E75                     495                  RTS
00006616                           496                  
00006616  B87C 0003                497  POSTINCR        CMP     #%011,D4
0000661A  6600 000C                498                  BNE     ONEPAREN
0000661E  1CFC 0029                499                  MOVE.B  #')',(A6)+
00006622  1CFC 002B                500                  MOVE.B  #'+',(A6)+
00006626  4E75                     501                  RTS
00006628                           502                  
00006628  B87C 0004                503  ONEPAREN        CMP     #%100,D4
0000662C  1CFC 0029                504                  MOVE.B  #')',(A6)+                
00006630  4E75                     505                  RTS
00006632                           506          
00006632                           507                 
00006632                           508  bits5to7
00006632  4243                     509                 CLR      D3
00006634  4EB9 000067B6            510                 JSR      COPY_OPCODE  // opcode copied to D2
0000663A  C47C 0E00                511                 AND      #%0000111000000000, D2
0000663E  E09A                     512                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006640  E29A                     513                 ROR.L    #1, D2
00006642  3602                     514                 MOVE.W   D2,D3 // moving isolated bits into d3
00006644  4E75                     515                 RTS
00006646                           516                 
00006646                           517  bits5to8
00006646  4243                     518                 CLR      D3
00006648  4EB9 000067B6            519                 JSR      COPY_OPCODE  // opcode copied to D2
0000664E  C47C 0F00                520                 AND      #%0000111100000000, D2
00006652  E09A                     521                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006654  3602                     522                 MOVE.W   D2,D3 // moving isolated bits into d3
00006656  4E75                     523                 RTS
00006658                           524                 
00006658                           525  bits8to10
00006658  4243                     526                 CLR      D3
0000665A  4EB9 000067B6            527                 JSR      COPY_OPCODE  // opcode copied to D2
00006660  C47C 01C0                528                 AND      #%0000000111000000, D2
00006664  EC9A                     529                 ROR.L    #6, D2          // rotate bits so isolated at the end
00006666  3602                     530                 MOVE.W   D2,D3 // moving isolated bits into d3
00006668  4E75                     531                 RTS               
0000666A                           532             
0000666A                           533  bits11to13
0000666A  4243                     534                 CLR      D3
0000666C  4EB9 000067B6            535                 JSR      COPY_OPCODE  // opcode copied to D2
00006672  C47C 0038                536                 AND      #%0000000000111000, D2
00006676  E69A                     537                 ROR.L    #3, D2          // rotate bits so isolated at the end
00006678  3602                     538                 MOVE.W   D2,D3 // moving isolated bits into d3
0000667A  4E75                     539                 RTS
0000667C                           540             
0000667C                           541  bits14to16
0000667C  4243                     542                 CLR      D3
0000667E  4EB9 000067B6            543                 JSR      COPY_OPCODE  // opcode copied to D2
00006684  C47C 0007                544                 AND      #%0000000000000111, D2
00006688  3602                     545                 MOVE.W   D2,D3 // moving isolated bits into d3
0000668A  4E75                     546                 RTS
0000668C                           547  bits11to16
0000668C  4243                     548                 CLR      D3
0000668E  4EB9 000067B6            549                 JSR      COPY_OPCODE  // opcode copied to D2
00006694  C47C 003F                550                 AND      #%0000000000111111, D2
00006698  3602                     551                 MOVE.W   D2,D3 // moving isolated bits into d3
0000669A  4E75                     552                 RTS
0000669C                           553  ** DN       
0000669C                           554  MODE000         
0000669C  1CFC 0028                555                  MOVE.B  #'(', (A6)+
000066A0  1CFC 0041                556                  MOVE.B  #'A',(A6)+     
000066A4                           557  
000066A4                           558  ** AN
000066A4                           559  MODE001         
000066A4  4EB9 000066DE            560                  JSR ADDRESS_BUFFER  
000066AA  4E75                     561                  RTS      
000066AC                           562  
000066AC                           563   ** (AN)
000066AC                           564  MODE010         
000066AC  1CFC 0028                565                  MOVE.B  #'(', (A6)+
000066B0  1CFC 0041                566                  MOVE.B  #'A',(A6)+  
000066B4  4E75                     567                  RTS      
000066B6                           568  
000066B6                           569  ** (AN)+ 
000066B6                           570  MODE011         
000066B6  1CFC 0028                571                  MOVE.B  #'(', (A6)+
000066BA  1CFC 0041                572                  MOVE.B  #'A',(A6)+        
000066BE                           573  
000066BE                           574   ** -(AN)
000066BE                           575  MODE100         
000066BE  1CFC 0028                576                  MOVE.B  #'(', (A6)+
000066C2  1CFC 0041                577                  MOVE.B  #'A',(A6)+
000066C6                           578                  
000066C6                           579  **INVALID               
000066C6                           580  MODE101         
000066C6  1CFC 0028                581                  MOVE.B  #'(', (A6)+
000066CA  1CFC 0041                582                  MOVE.B  #'A',(A6)+ 
000066CE                           583                  
000066CE                           584  **INVALID
000066CE                           585  MODE110         
000066CE  1CFC 0028                586                  MOVE.B  #'(', (A6)+
000066D2  1CFC 0041                587                  MOVE.B  #'A',(A6)+  
000066D6                           588  
000066D6                           589  ** ABSOLUTE AND IMMEDIATE            
000066D6                           590  MODE111         
000066D6                           591                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
000066D6  4EB9 000066E4            592                 JSR ABSOLUTE_BUFFER  
000066DC  4E75                     593                 RTS            
000066DE                           594                                          
000066DE                           595  ADDRESS_BUFFER
000066DE  1CFC 0041                596                  MOVE.B  #'A',(A6)+ 
000066E2                           597                  ** TO DO : FIGURE OUT HOW TO PRINT THE REGISTER NUMBER
000066E2  4E75                     598                  RTS
000066E4                           599                 
000066E4                           600  ABSOLUTE_BUFFER
000066E4  4243                     601                 CLR      D3
000066E6  3604                     602                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000066E8  1CF8 0024                603                 MOVE.B   '$', (A6)+
000066EC  B67C 0000                604                 CMP.W    #%000, D3
000066F0  6700 000E                605                 BEQ      ABSOLUTE_WORD_BUFFER
000066F4  4243                     606                 CLR      D3
000066F6  3604                     607                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
000066F8  B67C 0001                608                 CMP.W    #%001, D3
000066FC  6700 0012                609                 BEQ      ABSOLUTE_LONG_BUFFER
00006700                           610                 
00006700                           611  ABSOLUTE_WORD_BUFFER
00006700                           612                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00006700                           613                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00006700  1CFC 0046                614                         MOVE.B #'F', (A6)+ 
00006704  1CFC 0046                615                         MOVE.B #'F', (A6)+ 
00006708  1CFC 0046                616                         MOVE.B #'F', (A6)+ 
0000670C  1CFC 0046                617                         MOVE.B #'F', (A6)+   
00006710                           618  ABSOLUTE_LONG_BUFFER       
00006710                           619                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00006710                           620                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00006710  1CFC 0047                621                         MOVE.B #'G', (A6)+ 
00006714  1CFC 0047                622                         MOVE.B #'G', (A6)+ 
00006718  1CFC 0047                623                         MOVE.B #'G', (A6)+ 
0000671C  1CFC 0047                624                         MOVE.B #'G', (A6)+ 
00006720                           625                                                      
00006720                           626  
00006720                           627  PRINT_BUFFER    
00006720  1CFC 0000                628                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00006724  43F9 000067BC            629                 LEA      BUFFER, A1
0000672A  303C 000E                630                 MOVE.W   #14,D0
0000672E  4E4F                     631                 TRAP     #15
00006730  6000 FB17                632                 BRA EXIT
00006734                           633                 
00006734                           634                 
00006734                           635  
00006734                           636  INVALID_EA  
00006734                           637                  * TODO: IMPLEMENT
00006734                           638                  *** CLEAR OUT A6
00006734                           639                  ** PUT INVALID MESSAGE INTO A6
00006734  6000 FB13                640                  BRA EXIT
00006738                           641  INVALID_OP  
00006738                           642                  ** TODO: IMPLEMENT
00006738                           643                 *** CLEAR OUT A6
00006738                           644                  ** PUT INVALID MESSAGE INTO A6
00006738  6000 FB0F                645                  BRA EXIT             
0000673C                           646                  
0000673C  43F8 618B                647  NOP                 LEA     NOP_disp,A1          
00006740  103C 000E                648                      MOVE.B  #14,D0
00006744  4E4F                     649                      TRAP    #15
00006746  6000 FB01                650                      BRA     EXIT
0000674A                           651                   
0000674A                           652  RTS      
0000674A  43F8 61F2                653                      LEA     RTS_disp,A1          
0000674E  103C 000E                654                      MOVE.B  #14,D0
00006752  4E4F                     655                      TRAP    #15 
00006754  6000 FAF3                656                      BRA     EXIT
00006758                           657  JSR      
00006758  4DF9 000067BC            658                      LEA     BUFFER, A6
0000675E  1CFC 004A                659                      MOVE.B #'J', (A6)+
00006762  1CFC 0053                660                      MOVE.B #'S', (A6)+
00006766  1CFC 0052                661                      MOVE.B #'R', (A6)+
0000676A  1CFC 0020                662                      MOVE.B #' ', (A6)+
0000676E  43F9 000067BC            663                      LEA     BUFFER, A1
00006774                           664                      ** BITS 10 - 12 MODE       
00006774                           665                      ** BITS 13 - 16 REGISTER
00006774  103C 000E                666                      MOVE.B  #14,D0
00006778  4E4F                     667                      TRAP    #15 
0000677A  6000 FACD                668                      BRA     EXIT
0000677E                           669                    
0000677E                           670  MOVEM      
0000677E                           671                     
0000677E                           672                      ** SIZE SUBROUTINE
0000677E                           673                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
0000677E  C47C 0040                674                      AND #%0000000001000000,D2 
00006782                           675                      * WORD
00006782  B4BC 00000040            676                      CMP.L   #%0000000001000000,D2
00006788  4EB9 0000679E            677                      JSR     MOVEM_W 
0000678E                           678                      *LONG
0000678E  B4BC 00000040            679                      CMP.L   #%0000000001000000,D2 
00006794                           680                     ** JSR     MOVEM_L
00006794  103C 000E                681                      MOVE.B  #14,D0
00006798  4E4F                     682                      TRAP    #15
0000679A  6000 FAAD                683                      BRA     EXIT 
0000679E                           684                      
0000679E                           685  MOVEM_W 
0000679E  43F8 61A0                686                       LEA     MOVEM_disp,A1
000067A2                           687                      * PRINT MOVEM
000067A2  103C 000E                688                       MOVE.B  #14,D0
000067A6  4E4F                     689                       TRAP    #15
000067A8                           690          
000067A8                           691                      * PRINT WORD PORTION
000067A8  41F8 6237                692                       LEA     size_w, A0
000067AC  103C 000E                693                       MOVE.B  #14,D0
000067B0  4E4F                     694                       TRAP    #15 
000067B2                           695          
000067B2  6000 FA95                696                       BRA     EXIT 
000067B6                           697       
000067B6                           698     
000067B6                           699  COPY_OPCODE 
000067B6                           700                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
000067B6  4242                     701                       CLR    D2  
000067B8  3405                     702                       MOVE.W D5,D2 
000067BA  4E75                     703                       RTS  
000067BC                           704  
000067BC                           705                  
000067BC                           706       
000067BC= 20 20 20 20 20 00        707  BUFFER DC.B '     ',0     
000067C2                           708        
000067C2                           709  
000067C2                           710      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     66E4
ABSOLUTE_LONG_BUFFER  6710
ABSOLUTE_WORD_BUFFER  6700
ADD                 639C
ADDA                6378
ADDA_BUFFER         6382
ADDA_DISP           61AA
ADDI                63BC
ADDI_BUFFER         6428
ADDI_DES            63D6
ADDI_DISP           61AF
ADDI_SRC            63D2
ADDQ                6518
ADDQ_BUFFER         6522
ADDQ_DISP           61B4
ADDRESS_BUFFER      66DE
ADDR_ODDBIT_MSG     60C4
ADDR_ORDER_CHECK    60EB
ADD_BUFFER          63A6
ADD_DISP            61A6
AND_DISP            61CF
ASL_DISP            61DE
ASR_DISP            61E2
BACKSLASHSIGH       622C
BCC_DISP            61F6
BGT_DISP            61FA
BITS11TO13          666A
BITS11TO16          668C
BITS14TO16          667C
BITS5TO7            6632
BITS5TO8            6646
BITS8TO10           6658
BLE_DISP            61FE
BUFFER              67BC
CLOSEPAREN          6230
CLR_DISP            61CB
CODE0000            62AE
CODE0001            62C2
CODE0010            62C6
CODE0011            62CA
CODE0100            62CE
CODE0101            6302
CODE0110            6308
CODE0111            630C
CODE1000            6312
CODE1001            6316
CODE1010            631A
CODE1011            631E
CODE1100            6320
CODE1101            6324
CODE1110            6370
CODE1111            6374
COMMASIGN           622A
COPY_OPCODE         67B6
CR                  D
DIVU_DISP           61C2
DOLLARSIGN          6224
ENDTEST_MSG         613F
EXIT                6249
FINISHER            6608
FIVE                65E0
FOUR                65D0
HEXATABLE           6202
INPUT_BUFFER        623E
INSERT_NUM          6590
INVALIDEA_DISP      6183
INVALID_DISP        617E
INVALID_EA          6734
INVALID_OP          6738
JMP_MODE            6560
JMP_TABLE           624E
JSR                 6758
JSR_DISP            61EE
LEA                 6442
LEA_BUFFER          6466
LEA_DEST            64F8
LEA_DISP            61C7
LEA_SRC             6478
LF                  A
LINEBREAK           617B
LINECOUNT           623D
LOCATION_ENDDATA    6244
LOCATION_END_MSG    60A7
LOCATION_STARTDATA  6240
LOCATION_START_MSG  6088
LSL_DISP            61D6
LSR_DISP            61DA
MINUSSIGN           6228
MODE000             669C
MODE001             66A4
MODE010             66AC
MODE011             66B6
MODE100             66BE
MODE101             66C6
MODE110             66CE
MODE111             66D6
MOVEA_DISP          6194
MOVEM               677E
MOVEM_DISP          61A0
MOVEM_W             679E
MOVEQ               653C
MOVEQ_BUFFER        6546
MOVEQ_DISP          619A
MOVE_DISP           618F
MULS_DISP           61BD
NOP                 673C
NOP_DISP            618B
ONE                 65A0
ONEPAREN            6628
OPENPAREN           622E
OR_DISP             61D3
PAUSE_MSG           6125
PLUSSIGN            6226
POSTINCR            6616
POUNDSIGN           6222
PRINT_BUFFER        6720
ROL_DISP            61E6
ROR_DISP            61EA
RTS                 674A
RTS_DISP            61F2
SEVEN               6600
SIX                 65F0
SIZE_B              6234
SIZE_L              623A
SIZE_W              6237
SPACE               6232
START               6000
SUB_DISP            61B9
TABLE_LENGTH        6248
THREE               65C0
TWO                 65B0
WELCOME_MSG         6024
