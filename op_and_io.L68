00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2017 2:56:40 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010D2              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001136             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012EC             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001E70             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 00001229             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001EC6             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001155             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012EC             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001E70             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 00001229             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001EE0             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4241                      69                  CLR D1
0000108A  4242                      70                  CLR D2
0000108C  4243                      71                  CLR D3
0000108E  4244                      72                  CLR D4
00001090  4245                      73                  CLR D5
00001092  4246                      74                  CLR D6
00001094  4247                      75                  CLR D7
00001096  4EB9 0000109C             76                  JSR MAIN_LOOP
0000109C                            77  
0000109C                            78  *** D3 - ISOLATED BITS FOR COMPARISONS
0000109C                            79  *** D4 - MODE
0000109C                            80  *** D5 - CURRENT OPCODE
0000109C                            81  ***
0000109C                            82  *** 
0000109C                            83  MAIN_LOOP
0000109C  41F9 000012FC             84                   LEA     jmp_table,A0    *Index into the table
000010A2  4DF9 00001E6C             85                   LEA     BUFFER, A6      * Load buffer into A6
000010A8  4283                      86                   CLR.L   D3              *Zero it
000010AA                            87                   
000010AA  3612                      88                   MOVE.W  (A2), D3
000010AC                            89  
000010AC                            90                   * TEST OPCODES
000010AC                            91                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
000010AC                            92                   ;MOVE.W  #$4E71,D3 * NOP
000010AC                            93                   ; MOVE.W  #$4E75,D3 * RTS
000010AC                            94                   ; MOVE.W  #$4EB0,D3 * JSR
000010AC                            95                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
000010AC                            96                   ;MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
000010AC                            97                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
000010AC                            98                   ;MOVE.W  #$D64A, D3  * ADD.W A2,D3
000010AC                            99                    ; MOVE.W    #$5613, D3    *ADDQ.B #$3, (A3)
000010AC                           100                   ; MOVE.W     #$7E70, D3 *MOVEQ
000010AC                           101                   ; MOVE.W     #$80C0, D3 *DIVU
000010AC                           102                   ; MOVE.W     #$86D9, D3 *DIVU (A1)+,D3                      
000010AC                           103                   ; MOVE.W     #$8000, D3 * OR
000010AC                           104                   ; MOVE.W        #$9000, D3 * SUB
000010AC                           105                   ; MOVE.W        #$B000, D3 * CMP
000010AC                           106                   ; MOVE.W        #$C1C0, D3 * MULS
000010AC                           107                   ; MOVE.W        #$C000, D3 * AND
000010AC                           108                   ; MOVE.W        #$E0F8, D3  *ASR
000010AC                           109                   ; MOVE.W        #$E1E2, D3  *ASL
000010AC                           110                   ; MOVE.W        #$E393, D3  *LSL
000010AC                           111                   ; MOVE.W        #$E2DC, D3  *LSR
000010AC                           112                    ; MOVE.W        #$8E62, D3  *OR.W        -(A2),D7
000010AC                           113                        
000010AC                           114  
000010AC  4EB9 00001C0A            115                   JSR    PRINT_ADDRESS
000010B2  544A                     116                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010B4  3A03                     117                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010B6  183C 000C                118                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010BA  E86B                     119                   LSR.W   D4,D3       *Move the bits
000010BC  C6FC 0006                120                   MULU    #6,D3       *Form offset     
000010C0  4EB0 3000                121                   JSR     0(A0,D3)   *Jump indirect with index
000010C4  4EB9 00001C2A            122                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010CA                           123                   
000010CA  B4CB                     124                   CMP     A3,A2
000010CC  6E00 0229                125                   BGT     EXIT
000010D0  60CA                     126                   BRA     MAIN_LOOP
000010D2                           127                   
000010D2                           128                   ;BRA      EXIT
000010D2                           129                                  
000010D2                           130      INCLUDE 'definitions.x68'
000010D2                           131  
000010D2  =0000000D                132  CR              EQU     $0D         carriage return
000010D2  =0000000A                133  LF              EQU     $0A         line feed
000010D2= 43 53 53 20 34 32 ...    134  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010F6= 42 79 20 54 65 61 ...    135                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001136= 45 6E 74 65 72 20 ...    136  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001155= 45 6E 74 65 72 20 ...    137  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001172= 41 64 64 72 65 73 ...    138  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
00001199= 45 6E 64 69 6E 67 ...    139  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011D3= 50 72 65 73 73 20 ...    140  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011ED= 52 65 61 63 68 65 ...    141  endTest_msg         DC.B    'Reached end of test data.', CR,LF
00001208= 54 72 79 20 61 6E ...    142                      DC.B    'Try another location? (yes/no): ',0
00001229= 0D 0A 00                 143  linebreak           DC.B    CR,LF,0
0000122C                           144                      
0000122C= 44 41 54 41 00           145  Invalid_disp        DC.B    'DATA',0
00001231= 57 52 4F 4E 47 45 ...    146  InvalidEA_disp      DC.B    'WRONGEA',0
00001239                           147  
00001239= 4E 4F 50 00              148  NOP_disp            DC.B    'NOP',0
0000123D= 4D 4F 56 45 00           149  MOVE_disp           DC.B    'MOVE',0
00001242= 4D 4F 56 45 41 00        150  MOVEA_disp          DC.B    'MOVEA',0
00001248= 4D 4F 56 45 51 00        151  MOVEQ_disp          DC.B    'MOVEQ',0
0000124E= 4D 4F 56 45 4D 00        152  MOVEM_disp          DC.B    'MOVEM',0
00001254= 41 44 44 00              153  ADD_disp            DC.B    'ADD',0
00001258= 41 44 44 41 00           154  ADDA_disp           DC.B    'ADDA',0
0000125D= 41 44 44 49 00           155  ADDI_disp           DC.B    'ADDI',0
00001262= 41 44 44 51 00           156  ADDQ_disp           DC.B    'ADDQ',0
00001267= 53 55 42 00              157  SUB_disp            DC.B    'SUB',0
0000126B= 4D 55 4C 53 00           158  MULS_disp           DC.B    'MULS',0
00001270= 44 49 56 55 00           159  DIVU_disp           DC.B    'DIVU',0
00001275= 4C 45 41 00              160  LEA_disp            DC.B    'LEA',0
00001279= 43 4C 52 00              161  CLR_disp            DC.B    'CLR',0
0000127D= 41 4E 44 00              162  AND_disp            DC.B    'AND',0
00001281= 4F 52 00                 163  OR_disp             DC.B    'OR',0
00001284= 4C 53 4C 00              164  LSL_disp            DC.B    'LSL',0
00001288= 4C 53 52 00              165  LSR_disp            DC.B    'LSR',0
0000128C= 41 53 4C 00              166  ASL_disp            DC.B    'ASL',0
00001290= 41 53 52 00              167  ASR_disp            DC.B    'ASR',0
00001294= 52 4F 4C 00              168  ROL_disp            DC.B    'ROL',0
00001298= 52 4F 52 00              169  ROR_disp            DC.B    'ROR',0
0000129C= 4A 53 52 00              170  JSR_disp            DC.B    'JSR',0
000012A0= 52 54 53 00              171  RTS_disp            DC.B    'RTS',0
000012A4= 42 43 43 00              172  BCC_disp            DC.B    'BCC',0
000012A8= 42 47 54 00              173  BGT_disp            DC.B    'BGT',0    
000012AC= 42 4C 45 00              174  BLE_disp            DC.b    'BLE',0
000012B0                           175  
000012B0                           176  
000012B0= 30 00                    177  hexaTable               DC.B    '0',0
000012B2= 31 00                    178                          DC.B    '1',0
000012B4= 32 00                    179                          DC.B    '2',0
000012B6= 33 00                    180                          DC.B    '3',0
000012B8= 34 00                    181                          DC.B    '4',0
000012BA= 35 00                    182                          DC.B    '5',0
000012BC= 36 00                    183                          DC.B    '6',0
000012BE= 37 00                    184                          DC.B    '7',0
000012C0= 38 00                    185                          DC.B    '8',0
000012C2= 39 00                    186                          DC.B    '9',0
000012C4= 41 00                    187                          DC.B    'A',0
000012C6= 42 00                    188                          DC.B    'B',0
000012C8= 43 00                    189                          DC.B    'C',0
000012CA= 44 00                    190                          DC.B    'D',0
000012CC= 45 00                    191                          DC.B    'E',0
000012CE= 46 00                    192                          DC.B    'F',0
000012D0= 23 00                    193  poundsign               DC.B    '#',0
000012D2= 24 00                    194  dollarsign              DC.B    '$',0
000012D4= 2B 00                    195  plussign                DC.B    '+',0
000012D6= 2D 00                    196  minussign               DC.B    '-',0
000012D8= 2C 00                    197  commasign               DC.B    ',',0
000012DA= 2F 00                    198  backslashsigh           DC.B    '/',0
000012DC= 28 00                    199  openparen               DC.B    '(',0
000012DE= 29 00                    200  closeparen              DC.B    ')',0
000012E0= 20 00                    201  space                   DC.B    ' ',0   
000012E2= 2E 42 00                 202  size_b                  DC.B    '.B',0
000012E5= 2E 57 00                 203  size_w                  DC.B    '.W',0        
000012E8= 2E 4C 00                 204  size_l                  DC.B    '.L',0
000012EB                           205  
000012EB                           206  linecount               DS.B    1       *storeage for lines on a screen
000012EC= 01                       207  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012EE                           208  location_startData      DS.L    1       *location on where to start reading data
000012F2                           209  location_endData        DS.L    1       *location on where to end reading data
000012F6                           210  table_length            DS.B    1       *Number of spaces in the table to print to console
000012F7                           211  
000012F7                           212  
000012F7                           213  -------------------- end include --------------------
000012F7                           214             
000012F7                           215  EXIT                 
000012F8  FFFF FFFF                216         SIMHALT   
000012FC                           217  
000012FC                           218  
000012FC                           219  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012FC  4EF9 0000135C            220  jmp_table      JMP         code0000
00001302                           221                  *ADDI
00001302                           222  
00001302  4EF9 00001370            223                 JMP         code0001
00001308                           224                 *MOVE
00001308                           225                 *MOVEA
00001308                           226  
00001308  4EF9 00001376            227                 JMP         code0010
0000130E                           228  
0000130E  4EF9 00001376            229                 JMP         code0011
00001314                           230  
00001314  4EF9 00001376            231                 JMP         code0100
0000131A                           232                             
0000131A  4EF9 000013AA            233                 JMP         code0101
00001320                           234                 * ADDQ
00001320                           235                  
00001320                           236        
00001320  4EF9 000013AE            237                 JMP         code0110
00001326                           238                 * BCC
00001326                           239                 * BGT
00001326                           240                 * BLE
00001326                           241                 
00001326  4EF9 000013B2            242                 JMP         code0111
0000132C                           243                 * MOVEQ
0000132C                           244  
0000132C  4EF9 000013B6            245                 JMP         code1000
00001332                           246                 * DIVU
00001332                           247                 * OR
00001332                           248  
00001332  4EF9 000013C8            249                 JMP         code1001
00001338                           250                  *SUB
00001338  4EF9 000013CC            251                 JMP         code1010
0000133E                           252                 
0000133E  4EF9 000013D0            253                 JMP         code1011
00001344                           254                 * CMP
00001344                           255                 
00001344  4EF9 000013D4            256                 JMP         code1100
0000134A                           257                 * MULS
0000134A                           258                 * AND
0000134A                           259          
0000134A  4EF9 000013E6            260                 JMP         code1101
00001350                           261                 *ADD
00001350                           262                 *ADDA
00001350  4EF9 00001432            263                 JMP         code1110
00001356                           264                 * ASR
00001356                           265                 * ASL
00001356                           266                 * LSL
00001356                           267                 * LSR
00001356                           268                 * ROL
00001356                           269                 * ROR
00001356                           270  
00001356  4EF9 00001458            271                 JMP         code1111
0000135C                           272  
0000135C                           273  
0000135C                           274  code0000      
0000135C  4EB9 00001A62            275                 JSR          bits5to8 // RETURNS INTO D3
00001362  B6BC 00000006            276                 CMP.L        #%0110, D3
00001368  6600 0806                277                 BNE          INVALID_OP
0000136C  6000 01AE                278                 BRA          ADDI  
00001370                           279  
00001370                           280  code0001      
00001370  4EB9 0000145C            281                 JSR   MOVE_B
00001376                           282                 *MOVE.B
00001376                           283  
00001376                           284  code0010        
00001376                           285                  * MOVE.L
00001376                           286                  * MOVEA.L
00001376                           287  code0011        
00001376                           288                  *MOVEA.W
00001376                           289                  *MOVE.W
00001376                           290  
00001376                           291  code0100       
00001376  4EB9 00001C04            292                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000137C                           293                  
0000137C                           294                 *NOP
0000137C  C47C 0FFF                295                 AND     #%0000111111111111,D2
00001380  B4BC 00000E71            296                 CMP.L   #%000111001110001, D2
00001386  6700 0802                297                 BEQ     NOP
0000138A                           298                 
0000138A                           299                 *RTS
0000138A  C47C 0FFF                300                 AND     #%0000111111111111,D2
0000138E  B4BC 00000E75            301                 CMP.L   #%0000111001110101, D2
00001394  6700 0802                302                 BEQ     RTS
00001398                           303  
00001398                           304                 *JSR
00001398  C47C 0FC0                305                 AND     #%0000111111000000,D2
0000139C  B4BC 00000E80            306                 CMP.L   #%0000111010000000,D2
000013A2  6700 0802                307                 BEQ     JSR
000013A6                           308                 
000013A6                           309                 * MOVEM
000013A6                           310                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000013A6                           311                ** AND     #%0000111110000000,D2
000013A6                           312                 * DATA REGISTER
000013A6                           313                ** CMP.L   #%0000100010000000, D2
000013A6                           314                 ** JSR      MOVEM
000013A6                           315                 * ADDRESS REGISTER (DECREMENTED)
000013A6                           316                 ** CMP.L  #%0000110010000000, D2
000013A6                           317                 ** JSR    MOVEM
000013A6                           318                  
000013A6                           319                  ** TO DO: BRANCH IF INVALID OPCODE
000013A6                           320                  *LEA - if it's not the top codes, it's LEA
000013A6  6000 0216                321                  BRA     LEA
000013AA                           322  code0101      
000013AA                           323  
000013AA  6000 02FC                324                  BRA   ADDQ
000013AE                           325  
000013AE  6000 07C0                326  code0110        BRA       INVALID_OP
000013B2                           327  
000013B2                           328  code0111       
000013B2  6000 036A                329                  BRA      MOVEQ
000013B6                           330  
000013B6                           331  code1000      
000013B6  4EB9 00001A74            332                  JSR        bits8to10
000013BC  B67C 0003                333                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013C0  6700 0380                334                  BEQ        DIVU
000013C4  6000 0410                335                  BRA        OR       ** OTHERWISE OR
000013C8                           336                  
000013C8                           337  
000013C8                           338  code1001       
000013C8  6000 04B8                339                 BRA        SUB
000013CC  6000 07A2                340  code1010       BRA       INVALID_OP
000013D0                           341  
000013D0                           342  code1011       
000013D0  6000 04D0                343                 BRA         CMP
000013D4                           344  
000013D4                           345  code1100      
000013D4  4EB9 00001A74            346                  JSR        bits8to10
000013DA  B67C 0007                347                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013DE  6700 04E2                348                  BEQ        MULS
000013E2  6000 04FE                349                  BRA        AND       ** OTHERWISE AND
000013E6                           350  
000013E6                           351  code1101       
000013E6  4EB9 00001C04            352                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013EC                           353                 *ADDA
000013EC  4EB9 00001A74            354                 JSR      bits8to10
000013F2  B67C 0003                355                 CMP      #%011, D3  ** WORD
000013F6  6700 006C                356                 BEQ      ADDA
000013FA  B67C 0007                357                 CMP      #%111, D3   ** LONG
000013FE  6700 0064                358                 BEQ      ADDA
00001402                           359                 
00001402                           360                 *ADD
00001402  B67C 0000                361                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00001406  6700 0080                362                 BEQ      ADD
0000140A  B67C 0001                363                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000140E  6700 0078                364                 BEQ      ADD
00001412  B67C 0002                365                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001416  6700 0070                366                 BEQ      ADD
0000141A  B67C 0004                367                 CMP      #%100, D3   ** BYTE TO EA
0000141E  6700 0068                368                 BEQ      ADD
00001422  B67C 0005                369                 CMP      #%101, D3   ** WORD TO EA
00001426  6700 0060                370                 BEQ      ADD
0000142A  B67C 0006                371                 CMP      #%110, D3   ** LONG TO EA
0000142E  6700 0058                372                 BEQ      ADD
00001432                           373                 
00001432                           374  
00001432                           375  code1110       
00001432                           376                  * ASR
00001432  4EB9 00001AB8            377                  JSR     bits1to10
00001438  B67C 0383                378                  CMP     #%1110000011,D3
0000143C  6700 04C4                379                  BEQ     ASR
00001440                           380                  
00001440                           381                  * ASL
00001440  B67C 0387                382                  CMP     #%1110000111,D3
00001444  6700 04D8                383                  BEQ     ASL
00001448                           384                  
00001448                           385                  * LSL -- has register/immediate shift and 
00001448                           386                  
00001448                           387                  ** bit 8 is the direction
00001448  B67C 01C7                388                  CMP     #%111000111,D3
0000144C  6700 04EC                389                  BEQ     LSL
00001450                           390                  
00001450                           391                  * LSR
00001450  B67C 038B                392                  CMP     #%1110001011,D3
00001454  6700 0500                393                  BEQ     LSR
00001458                           394                  
00001458                           395                  * ROL
00001458                           396                  
00001458                           397                  * ROR
00001458                           398  
00001458  6000 0716                399  code1111       BRA      INVALID_OP
0000145C                           400  
0000145C                           401  MOVE_B
0000145C  4EB9 00001462            402                 JSR     MOVEB_BUFFER
00001462                           403  MOVEB_BUFFER
00001462  4E71                     404                  NOP              
00001464                           405  * ----------------------------------
00001464                           406  
00001464                           407  ADDA    
00001464  4EB9 0000146C            408                 JSR     ADDA_BUFFER
0000146A  4E75                     409                 RTS
0000146C                           410                  
0000146C                           411  ADDA_BUFFER
0000146C  1CFC 0041                412                 MOVE.B   #'A',(A6)+
00001470  1CFC 0044                413                 MOVE.B   #'D', (A6)+  
00001474  1CFC 0044                414                 MOVE.B   #'D', (A6)+
00001478  1CFC 0041                415                 MOVE.B   #'A', (A6)+
0000147C  4EB9 00001E14            416                 JSR      GETSIZE_ADDA
00001482  1CFC 0020                417                 MOVE.B   #' ', (A6)+
00001486  4E75                     418                 RTS
00001488                           419                 
00001488                           420                 
00001488                           421                 
00001488                           422  *********************************************               
00001488                           423  ADD    
00001488  4EB9 00001490            424                 JSR     ADD_BUFFER
0000148E  4E75                     425                 RTS
00001490                           426                  
00001490                           427  ADD_BUFFER
00001490  1CFC 0041                428                 MOVE.B   #'A',(A6)+
00001494  1CFC 0044                429                 MOVE.B   #'D', (A6)+  
00001498  1CFC 0044                430                 MOVE.B   #'D', (A6)+
0000149C  4EB9 00001D52            431                 JSR      GETSIZE_ADD
000014A2                           432                 
000014A2                           433                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014A2  BC7C 0001                434                 CMP      #1,D6
000014A6  6600 0018                435                 BNE      ADD_DIRECTION_REVERSED
000014AA  4EB9 000014D6            436                 JSR      ADD_SRC
000014B0  1CFC 002C                437                 MOVE.B   #',', (A6)+
000014B4  1CFC 0020                438                 MOVE.B   #' ', (A6)+
000014B8  4EB9 000014FA            439                 JSR      ADD_DEST
000014BE  4E75                     440                 RTS
000014C0                           441                 
000014C0                           442                 
000014C0                           443  ADD_DIRECTION_REVERSED
000014C0  4246                     444                 CLR      D6
000014C2  4EB9 000014FA            445                 JSR      ADD_DEST
000014C8  1CFC 002C                446                 MOVE.B   #',', (A6)+
000014CC  1CFC 0020                447                 MOVE.B   #' ', (A6)+
000014D0  4EB9 000014D6            448                 JSR      ADD_SRC             
000014D6                           449                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014D6                           450                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014D6                           451                 
000014D6                           452  ***********************************************        
000014D6                           453  
000014D6                           454  
000014D6                           455  
000014D6                           456  ****************************************************************************************
000014D6                           457  ADD_SRC
000014D6                           458  
000014D6  4EB9 00001A86            459                  JSR    bits11to13
000014DC  3803                     460                  MOVE   D3,D4
000014DE  41F9 00001972            461                  LEA     jmp_mode,A0    *Index into the table
000014E4  C6FC 0006                462                  MULU   #6,D3
000014E8  4EB0 3000                463                  JSR    0(A0,D3)     
000014EC  4EB9 00001A98            464                  JSR    bits14to16
000014F2  4EB9 000019A2            465                  JSR    insert_num
000014F8  4E75                     466                  RTS
000014FA                           467  
000014FA                           468  ADD_DEST
000014FA  363C 0000                469                  MOVE.W #%000,D3     ;Can only have a data register.
000014FE  3803                     470                  MOVE   D3,D4
00001500  41F9 00001972            471                  LEA     jmp_mode,A0    *Index into the table
00001506  C6FC 0006                472                  MULU    #6,D3       *Form offset     
0000150A  4EB0 3000                473                  JSR     0(A0,D3)   *Jump indirect with index
0000150E                           474                  
0000150E  4EB9 00001A4E            475                  JSR     bits5to7
00001514  4EB9 000019A2            476                  JSR     insert_num
0000151A  4E75                     477                  RTS
0000151C                           478  
0000151C                           479  ADDI
0000151C  4EB9 000015A2            480                  JSR     ADDI_BUFFER
00001522  4EB9 00001530            481                  JSR     ADDI_SRC
00001528  4EB9 0000153E            482                  JSR     ADDI_DES
0000152E  4E75                     483                  RTS
00001530                           484                  
00001530                           485  ADDI_SRC                        
00001530  1CFC 0023                486                  MOVE.B  #'#', (A6)+
00001534  1CFC 002C                487                  MOVE.B  #',', (A6)+
00001538  1CFC 0020                488                  MOVE.B  #' ', (A6)+
0000153C  4E75                     489                  RTS
0000153E                           490                    ** TODO: IMPLEMENT THIS IN EA
0000153E                           491                  ** Immediate field—Data immediately following the instruction.
0000153E                           492                  **If size = 00, the data is the low-order byte of the immediate word.
0000153E                           493                  **If size = 01, the data is the entire immediate word.
0000153E                           494                  **If size = 10, the data is the next two immediate words. 
0000153E                           495  ADDI_DES
0000153E                           496                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
0000153E                           497                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
0000153E  4EB9 00001A86            498                 JSR      bits11to13
00001544  B67C 0001                499                 CMP      #%001, D3 **AN
00001548  6700 0622                500                 BEQ      INVALID_EA
0000154C  B67C 0005                501                 CMP      #%101, D3 **COMPLICATED
00001550  6700 061A                502                 BEQ      INVALID_EA
00001554  B67C 0006                503                 CMP      #%110, D3 **COMPLICATED
00001558  6700 0612                504                 BEQ      INVALID_EA
0000155C                           505                 
0000155C  4EB9 00001AA8            506                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001562  B67C 003C                507                 CMP      #%111100,D3 // immediate data
00001566  6700 0604                508                 BEQ      INVALID_EA
0000156A  B67C 003A                509                 CMP      #%111010,D3 // complicated
0000156E  6700 05FC                510                 BEQ      INVALID_EA
00001572  B67C 003B                511                 CMP      #%111011,D3 // complicated
00001576  6700 05F4                512                 BEQ      INVALID_EA
0000157A                           513                 
0000157A  4EB9 00001A86            514                 JSR      bits11to13 ** grab bits to jump with\
00001580  3803                     515                 MOVE     D3,D4
00001582  41F9 00001972            516                 LEA     jmp_mode,A0    *Index into the table
00001588  C6FC 0006                517                 MULU    #6,D3       *Form offset     
0000158C  4EB0 3000                518                 JSR     0(A0,D3)   *Jump indirect with index
00001590                           519                 
00001590  4243                     520                 CLR     D3
00001592  4EB9 00001A98            521                 JSR     bits14to16
00001598  4EB9 000019A2            522                 JSR     insert_num
0000159E  4244                     523                 CLR     D4
000015A0                           524                 
000015A0  4E75                     525                 RTS
000015A2                           526                 
000015A2                           527                             
000015A2                           528  ADDI_BUFFER
000015A2  1CFC 0041                529                 MOVE.B   #'A',(A6)+
000015A6  1CFC 0044                530                 MOVE.B   #'D', (A6)+  
000015AA  1CFC 0044                531                 MOVE.B   #'D', (A6)+
000015AE  1CFC 0049                532                 MOVE.B   #'I', (A6)+
000015B2                           533                 
000015B2  4EB9 00001DDA            534                 JSR      GETSIZE_ADDI
000015B8                           535                 
000015B8                           536                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015B8                           537                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015B8  1CFC 0020                538                 MOVE.B   #' ', (A6)+
000015BC  4E75                     539                 RTS
000015BE                           540                              
000015BE                           541  LEA
000015BE  4EB9 00001A74            542                 JSR      bits8to10   // 1 1 1
000015C4  B47C 0007                543                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015C8  6600 05A6                544                 BNE      INVALID_OP
000015CC  4EB9 000015E0            545                 JSR      LEA_BUFFER
000015D2  4EB9 000015F2            546                 JSR      LEA_SRC
000015D8  4EB9 00001684            547                 JSR      LEA_DEST
000015DE  4E75                     548                 RTS
000015E0                           549                 
000015E0                           550  LEA_BUFFER 
000015E0  1CFC 004C                551                 MOVE.B   #'L',(A6)+
000015E4  1CFC 0045                552                 MOVE.B   #'E', (A6)+  
000015E8  1CFC 0041                553                 MOVE.B   #'A', (A6)+
000015EC  1CFC 0020                554                 MOVE.B   #' ', (A6)+
000015F0  4E75                     555                 RTS
000015F2                           556            
000015F2                           557  LEA_SRC
000015F2                           558              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
000015F2  4EB9 00001A86            559              JSR      bits11to13  // source mode - D3
000015F8  B67C 0000                560              CMP      #%000, D3
000015FC  6700 056E                561              BEQ      INVALID_EA
00001600  B67C 0001                562              CMP      #%001, D3
00001604  6700 0566                563              BEQ      INVALID_EA
00001608  B67C 0003                564              CMP      #%011, D3
0000160C  6700 055E                565              BEQ      INVALID_EA
00001610  B67C 0004                566              CMP      #%100, D3
00001614  6700 0556                567              BEQ      INVALID_EA
00001618  B67C 0005                568              CMP      #%101, D3
0000161C  6700 054E                569              BEQ      INVALID_EA
00001620  B67C 0006                570              CMP      #%110, D3
00001624  6700 0546                571              BEQ      INVALID_EA
00001628                           572  
00001628                           573              
00001628                           574              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00001628  4EB9 00001A98            575              JSR      bits14to16 // source register - d4
0000162E  B67C 0004                576              CMP      #%100, D3
00001632  6700 0538                577              BEQ      INVALID_EA
00001636  B67C 0002                578              CMP      #%010, D3
0000163A  6700 0530                579              BEQ      INVALID_EA
0000163E  B67C 0003                580              CMP      #%011, D3
00001642  6700 0528                581              BEQ      INVALID_EA
00001646                           582              
00001646                           583  
00001646  4EB9 00001AA8            584               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000164C  B67C 003C                585               CMP      #%111100,D3 // immediate data
00001650  6700 051A                586               BEQ      INVALID_EA
00001654  B67C 003A                587               CMP      #%111010,D3 // complicated
00001658  6700 0512                588               BEQ      INVALID_EA
0000165C  B67C 003B                589               CMP      #%111011,D3 // complicated
00001660  6700 050A                590               BEQ      INVALID_EA
00001664                           591     
00001664  4EB9 00001A86            592               JSR      bits11to13 ** grab mode bits to jump with
0000166A  3803                     593               MOVE    D3,D4
0000166C                           594  
0000166C  41F9 00001972            595               LEA     jmp_mode,A0    *Index into the table
00001672  C6FC 0006                596               MULU    #6,D3       *Form offset     
00001676  4EB0 3000                597               JSR     0(A0,D3)   *Jump indirect with index
0000167A                           598   
0000167A  1CFC 002C                599               MOVE.B     #',', (A6)+
0000167E  1CFC 0020                600               MOVE.B     #' ', (A6)+
00001682                           601  
00001682  4E75                     602               RTS
00001684                           603               
00001684                           604  LEA_DEST    
00001684  4244                     605                  CLR     D4
00001686  41F9 00001972            606                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
0000168C  363C 0001                607                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
00001690  3803                     608                  MOVE    D3,D4
00001692  C6FC 0006                609                  MULU    #6,D3       *Form offset     
00001696  4EB0 3000                610                  JSR     0(A0,D3)   *Jump indirect with index
0000169A                           611                  
0000169A  4EB9 00001A4E            612                  JSR     bits5to7
000016A0  4EB9 000019A2            613                  JSR     insert_num
000016A6                           614                  
000016A6  4E75                     615                  RTS
000016A8                           616  
000016A8                           617  
000016A8                           618  ADDQ
000016A8  4EB9 00001706            619                  JSR     ADDQ_BUFFER
000016AE  4EB9 000016C4            620                  JSR     ADDQ_SRC
000016B4  1CFC 002C                621                  MOVE.B  #',',(A6)+
000016B8  1CFC 0020                622                  MOVE.B  #' ',(A6)+
000016BC  4EB9 000016DC            623                  JSR     ADDQ_DEST
000016C2  4E75                     624                  RTS                 ;BRA     PRINT_BUFFER
000016C4                           625  
000016C4                           626  ADDQ_SRC
000016C4  4EB9 00001A4E            627                  JSR     bits5to7
000016CA  1CFC 0023                628                  MOVE.B  #'#',(A6)+
000016CE  183C 0000                629                  MOVE.B  #%000,D4
000016D2  4EB9 000019A2            630                  JSR     insert_num
000016D8  4244                     631                  CLR     D4
000016DA  4E75                     632                  RTS
000016DC                           633                  
000016DC                           634  ADDQ_DEST
000016DC  4EB9 00001A86            635                 JSR      bits11to13
000016E2  3803                     636                 MOVE     D3,D4
000016E4  41F9 00001972            637                 LEA     jmp_mode,A0    *Index into the table
000016EA  C6FC 0006                638                 MULU    #6,D3       *Form offset     
000016EE  4EB0 3000                639                 JSR     0(A0,D3)   *Jump indirect with index
000016F2  4243                     640                 CLR     D3
000016F4  4EB9 00001A98            641                 JSR     bits14to16
000016FA  4EB9 000019A2            642                 JSR     insert_num
00001700  4244                     643                 CLR     D4
00001702  4243                     644                 CLR     D3
00001704  4E75                     645                 RTS
00001706                           646                 
00001706                           647  
00001706                           648  ADDQ_BUFFER
00001706  1CFC 0041                649                 MOVE.B   #'A',(A6)+
0000170A  1CFC 0044                650                 MOVE.B   #'D', (A6)+  
0000170E  1CFC 0044                651                 MOVE.B   #'D', (A6)+
00001712  1CFC 0051                652                 MOVE.B   #'Q', (A6)+
00001716  4EB9 00001C90            653                 JSR      GETSIZE_ADDQ
0000171C                           654                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
0000171C                           655                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000171C  4E75                     656                 RTS               
0000171E                           657                 
0000171E                           658  MOVEQ
0000171E  4EB9 00001728            659                  JSR     MOVEQ_BUFFER
00001724  6000 0504                660                  BRA     PRINT_BUFFER
00001728                           661  
00001728                           662  MOVEQ_BUFFER
00001728  1CFC 004D                663                 MOVE.B   #'M',(A6)+
0000172C  1CFC 004F                664                 MOVE.B   #'O', (A6)+  
00001730  1CFC 0056                665                 MOVE.B   #'V', (A6)+
00001734  1CFC 0045                666                 MOVE.B   #'E', (A6)+
00001738  1CFC 0051                667                 MOVE.B   #'Q', (A6)+
0000173C  1CFC 0020                668                 MOVE.B   #' ', (A6)+
00001740  4E75                     669                 RTS
00001742                           670  
00001742                           671  
00001742                           672  ****************************************
00001742                           673  
00001742                           674  DIVU
00001742  4EB9 00001A74            675                  JSR     bits8to10
00001748  B67C 0003                676                  CMP     #%011,D3
0000174C  6600 041E                677                  BNE     INVALID_EA
00001750  4243                     678                  CLR     D3
00001752  4EB9 0000176E            679                  JSR     DIVU_BUFFER
00001758  4EB9 00001784            680                  JSR     DIVU_SRC
0000175E  1CFC 002C                681                  MOVE.B  #',',(A6)+
00001762  1CFC 0020                682                  MOVE.B  #' ',(A6)+
00001766  4EB9 000017AE            683                  JSR     DIVU_DEST
0000176C  4E75                     684                  RTS                 ;BRA     PRINT_BUFFER
0000176E                           685  
0000176E                           686  DIVU_BUFFER
0000176E  1CFC 0044                687                 MOVE.B   #'D',(A6)+
00001772  1CFC 0049                688                 MOVE.B   #'I', (A6)+  
00001776  1CFC 0056                689                 MOVE.B   #'V', (A6)+
0000177A  1CFC 0055                690                 MOVE.B   #'U', (A6)+
0000177E  1CFC 0020                691                 MOVE.B   #' ', (A6)+
00001782  4E75                     692                 RTS  
00001784                           693                 
00001784                           694                 
00001784                           695  DIVU_SRC
00001784  4EB9 00001A86            696                 JSR      bits11to13
0000178A  3803                     697                 MOVE     D3,D4
0000178C  41F9 00001972            698                 LEA     jmp_mode,A0    *Index into the table
00001792  C6FC 0006                699                 MULU    #6,D3       *Form offset     
00001796  4EB0 3000                700                 JSR     0(A0,D3)   *Jump indirect with index  
0000179A  4243                     701                 CLR     D3
0000179C  4EB9 00001A98            702                 JSR     bits14to16
000017A2  4EB9 000019A2            703                 JSR     insert_num
000017A8  4244                     704                 CLR     D4
000017AA  4243                     705                 CLR     D3
000017AC  4E75                     706                 RTS
000017AE                           707                 
000017AE                           708  DIVU_DEST
000017AE  363C 0000                709                 MOVE    #%000,D3     ;DIVU destination can only be a data register.
000017B2  3803                     710                 MOVE    D3,D4
000017B4  41F9 00001972            711                 LEA     jmp_mode,A0    *Index into the table
000017BA  C6FC 0006                712                 MULU    #6,D3       *Form offset     
000017BE  4EB0 3000                713                 JSR     0(A0,D3)   *Jump indirect with index  
000017C2  4243                     714                 CLR     D3
000017C4  4EB9 00001A4E            715                 JSR     bits5to7
000017CA  4EB9 000019A2            716                 JSR     insert_num
000017D0  4244                     717                 CLR     D4
000017D2  4243                     718                 CLR     D3
000017D4  4E75                     719                 RTS
000017D6                           720                 
000017D6                           721                 
000017D6                           722                 
000017D6                           723  *****************************************               
000017D6                           724                 
000017D6                           725  OR    
000017D6  4EB9 00001814            726                 JSR     OR_BUFFER
000017DC                           727                 
000017DC                           728                             
000017DC                           729                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000017DC  BC7C 0001                730                 CMP      #1,D6
000017E0  6600 001A                731                 BNE      OR_DIRECTION_REVERSED
000017E4  4246                     732                 CLR      D6
000017E6  4EB9 00001828            733                 JSR      OR_SRC
000017EC  1CFC 002C                734                 MOVE.B   #',', (A6)+
000017F0  1CFC 0020                735                 MOVE.B   #' ', (A6)+
000017F4  4EB9 0000185A            736                 JSR      OR_DEST
000017FA  4E75                     737                 RTS
000017FC                           738                 
000017FC                           739                 
000017FC                           740  OR_DIRECTION_REVERSED
000017FC  4246                     741                 CLR      D6
000017FE  4EB9 0000185A            742                 JSR      OR_DEST
00001804  1CFC 002C                743                 MOVE.B   #',', (A6)+
00001808  1CFC 0020                744                 MOVE.B   #' ', (A6)+
0000180C  4EB9 00001828            745                 JSR      OR_SRC             
00001812                           746                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001812                           747                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA>                
00001812                           748                 
00001812                           749                 
00001812  4E75                     750                 RTS                  ;BRA     PRINT_BUFFER
00001814                           751                  
00001814                           752  OR_BUFFER
00001814  1CFC 004F                753                 MOVE.B   #'O',(A6)+
00001818  1CFC 0052                754                 MOVE.B   #'R', (A6)+
0000181C  4EB9 00001CCA            755                 JSR      GETSIZE_OR  
00001822                           756                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001822                           757                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001822  1CFC 0020                758                 MOVE.B   #' ', (A6)+
00001826  4E75                     759                 RTS   
00001828                           760                 
00001828                           761                 
00001828                           762                 
00001828                           763                 
00001828                           764  OR_SRC
00001828  4EB9 00001A86            765                 JSR      bits11to13
0000182E  B67C 0001                766                 CMP      #%001,D3
00001832  6700 0338                767                 BEQ      INVALID_EA
00001836  3803                     768                 MOVE     D3,D4
00001838  41F9 00001972            769                 LEA     jmp_mode,A0    *Index into the table
0000183E  C6FC 0006                770                 MULU    #6,D3       *Form offset     
00001842  4EB0 3000                771                 JSR     0(A0,D3)   *Jump indirect with index  
00001846  4243                     772                 CLR     D3
00001848  4EB9 00001A98            773                 JSR     bits14to16
0000184E  4EB9 000019A2            774                 JSR     insert_num
00001854  4243                     775                 CLR     D3
00001856  4244                     776                 CLR     D4
00001858  4E75                     777                 RTS
0000185A                           778  
0000185A                           779  
0000185A                           780  OR_DEST
0000185A  163C 0000                781                 MOVE.B  #%000,D3
0000185E  3803                     782                 MOVE    D3,D4
00001860  41F9 00001972            783                 LEA     jmp_mode,A0    *Index into the table
00001866  C6FC 0006                784                 MULU    #6,D3       *Form offset     
0000186A  4EB0 3000                785                 JSR     0(A0,D3)   *Jump indirect with index  
0000186E  4243                     786                 CLR     D3
00001870  4EB9 00001A4E            787                 JSR     bits5to7    
00001876  4EB9 000019A2            788                 JSR     insert_num
0000187C  4243                     789                 CLR     D3
0000187E  4244                     790                 CLR     D4
00001880  4E75                     791                 RTS   
00001882                           792  
00001882                           793  
00001882                           794  
00001882                           795  
00001882                           796  
00001882                           797  ***********************************************
00001882                           798  
00001882                           799  SUB   
00001882  4EB9 0000188C            800                 JSR     SUB_BUFFER
00001888  6000 03A0                801                 BRA     PRINT_BUFFER               
0000188C                           802  
0000188C                           803  SUB_BUFFER
0000188C  1CFC 0053                804                 MOVE.B   #'S',(A6)+
00001890  1CFC 0055                805                 MOVE.B   #'U', (A6)+  
00001894  1CFC 0042                806                 MOVE.B   #'B', (A6)+
00001898  1CFC 002E                807                 MOVE.B   #'.', (A6)+
0000189C                           808                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000189C                           809                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000189C                           810                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000189C  1CFC 0020                811                 MOVE.B   #' ', (A6)+
000018A0  4E75                     812                 RTS  
000018A2                           813  CMP   
000018A2  4EB9 000018AC            814                 JSR     CMP_BUFFER
000018A8  6000 0380                815                 BRA     PRINT_BUFFER
000018AC                           816                  
000018AC                           817  CMP_BUFFER
000018AC  1CFC 0043                818                 MOVE.B   #'C',(A6)+
000018B0  1CFC 004D                819                 MOVE.B   #'M', (A6)+  
000018B4  1CFC 0050                820                 MOVE.B   #'P', (A6)+
000018B8  1CFC 002E                821                 MOVE.B   #'.', (A6)+
000018BC                           822                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000018BC                           823                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000018BC                           824                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000018BC  1CFC 0020                825                 MOVE.B   #' ', (A6)+
000018C0  4E75                     826                 RTS   
000018C2                           827                 
000018C2                           828  MULS
000018C2  4EB9 000018CC            829                  JSR     MULS_BUFFER
000018C8  6000 0360                830                  BRA     PRINT_BUFFER
000018CC                           831  
000018CC                           832  MULS_BUFFER
000018CC  1CFC 004D                833                 MOVE.B   #'M',(A6)+
000018D0  1CFC 0055                834                 MOVE.B   #'U', (A6)+  
000018D4  1CFC 004C                835                 MOVE.B   #'L', (A6)+
000018D8  1CFC 0053                836                 MOVE.B   #'S', (A6)+
000018DC  1CFC 0020                837                 MOVE.B   #' ', (A6)+
000018E0  4E75                     838                 RTS
000018E2                           839  
000018E2                           840  AND    
000018E2  4EB9 000018EC            841                 JSR     AND_BUFFER
000018E8  6000 0340                842                 BRA     PRINT_BUFFER
000018EC                           843                  
000018EC                           844  AND_BUFFER
000018EC  1CFC 0041                845                 MOVE.B   #'A',(A6)+
000018F0  1CFC 004E                846                 MOVE.B   #'N', (A6)+  
000018F4  1CFC 0044                847                 MOVE.B   #'D', (A6)+
000018F8  1CFC 002E                848                 MOVE.B   #'.', (A6)+
000018FC                           849                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000018FC                           850                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000018FC                           851                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000018FC  1CFC 0020                852                 MOVE.B   #' ', (A6)+
00001900  4E75                     853                 RTS    
00001902                           854  
00001902                           855  ASR     
00001902  4EB9 0000190C            856                  JSR     ASR_BUFFER
00001908  6000 0320                857                  BRA     PRINT_BUFFER
0000190C                           858  
0000190C                           859  ASR_BUFFER
0000190C  1CFC 0041                860                 MOVE.B   #'A',(A6)+
00001910  1CFC 0053                861                 MOVE.B   #'S', (A6)+  
00001914  1CFC 0052                862                 MOVE.B   #'R', (A6)+
00001918  1CFC 0020                863                 MOVE.B   #' ', (A6)+
0000191C  4E75                     864                 RTS      
0000191E                           865  
0000191E                           866  ASL     
0000191E  4EB9 00001928            867                  JSR     ASL_BUFFER
00001924  6000 0304                868                  BRA     PRINT_BUFFER
00001928                           869  
00001928                           870  ASL_BUFFER
00001928  1CFC 0041                871                 MOVE.B   #'A',(A6)+
0000192C  1CFC 0053                872                 MOVE.B   #'S', (A6)+  
00001930  1CFC 004C                873                 MOVE.B   #'L', (A6)+
00001934  1CFC 0020                874                 MOVE.B   #' ', (A6)+
00001938  4E75                     875                 RTS     
0000193A                           876  
0000193A                           877  LSL     
0000193A  4EB9 00001944            878                  JSR     LSL_BUFFER
00001940  6000 02E8                879                  BRA     PRINT_BUFFER
00001944                           880  
00001944                           881  LSL_BUFFER
00001944  1CFC 004C                882                 MOVE.B   #'L',(A6)+
00001948  1CFC 0053                883                 MOVE.B   #'S', (A6)+  
0000194C  1CFC 004C                884                 MOVE.B   #'L', (A6)+
00001950  1CFC 0020                885                 MOVE.B   #' ', (A6)+
00001954  4E75                     886                 RTS     
00001956                           887  
00001956                           888  LSR     
00001956  4EB9 00001960            889                  JSR     LSR_BUFFER
0000195C  6000 02CC                890                  BRA     PRINT_BUFFER
00001960                           891  
00001960                           892  LSR_BUFFER
00001960  1CFC 004C                893                 MOVE.B   #'L',(A6)+
00001964  1CFC 0053                894                 MOVE.B   #'S', (A6)+  
00001968  1CFC 0052                895                 MOVE.B   #'R', (A6)+
0000196C  1CFC 0020                896                 MOVE.B   #' ', (A6)+
00001970  4E75                     897                 RTS       
00001972                           898                 
00001972                           899  jmp_mode
00001972  4EF9 00001ACA            900                  JMP     MODE000  ** DN
00001978  4EF9 00001AD0            901                  JMP     MODE001  ** AN
0000197E  4EF9 00001AD8            902                  JMP     MODE010  ** (AN)
00001984  4EF9 00001AE2            903                  JMP     MODE011  ** (AN)+   
0000198A  4EF9 00001AEC            904                  JMP     MODE100  ** -(AN)
00001990  4EF9 00001AFA            905                  JMP     MODE101  **INVALID
00001996  4EF9 00001B04            906                  JMP     MODE110  **INVALID
0000199C  4EF9 00001B0E            907                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000019A2                           908  
000019A2                           909                  
000019A2                           910  insert_num
000019A2                           911                  
000019A2                           912                  ;get number from D3
000019A2  B67C 0000                913                  CMP     #%000,D3       ;0
000019A6  6600 000A                914                  BNE     ONE         
000019AA  1CFC 0030                915                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000019AE  6000 006E                916                  BRA     FINISHER
000019B2                           917                  
000019B2  B67C 0001                918  ONE             CMP     #%001,D3       ;1
000019B6  6600 000A                919                  BNE     TWO 
000019BA  1CFC 0031                920                  MOVE.B  #'1',(A6)+
000019BE  6000 005E                921                  BRA     FINISHER
000019C2                           922  
000019C2                           923                  
000019C2  B67C 0002                924  TWO             CMP     #%010,D3        ;2
000019C6  6600 000A                925                  BNE     THREE
000019CA  1CFC 0032                926                  MOVE.B  #'2',(A6)+
000019CE  6000 004E                927                  BRA     FINISHER
000019D2                           928                  
000019D2  B67C 0003                929  THREE           CMP     #%011,D3        ;3
000019D6  6600 000A                930                  BNE     FOUR
000019DA  1CFC 0033                931                  MOVE.B  #'3',(A6)+
000019DE  6000 003E                932                  BRA     FINISHER
000019E2                           933                  
000019E2  B67C 0004                934  FOUR            CMP     #%100,D3        ;4
000019E6  6600 000A                935                  BNE     FIVE
000019EA  1CFC 0034                936                  MOVE.B  #'4',(A6)+
000019EE  6000 002E                937                  BRA     FINISHER
000019F2                           938                  
000019F2  B67C 0005                939  FIVE            CMP     #%101,D3        ;5
000019F6  6600 000A                940                  BNE     SIX
000019FA  1CFC 0035                941                  MOVE.B  #'5',(A6)+
000019FE  6000 001E                942                  BRA     FINISHER
00001A02                           943                  
00001A02  B67C 0006                944  SIX             CMP     #%110,D3        ;6
00001A06  6600 000A                945                  BNE     SEVEN
00001A0A  1CFC 0036                946                  MOVE.B  #'6',(A6)+
00001A0E  6000 000E                947                  BRA     FINISHER
00001A12                           948                  
00001A12  B67C 0007                949  SEVEN           CMP     #%111,D3        ;7
00001A16  1CFC 0037                950                  MOVE.B  #'7',(A6)+
00001A1A  6000 0002                951                  BRA     FINISHER
00001A1E                           952                  
00001A1E                           953  FINISHER                
00001A1E                           954                  
00001A1E                           955                  ;check D4, do we need to do stuff?
00001A1E  B87C 0002                956                  CMP     #%010,D4
00001A22  6600 0008                957                  BNE     POSTINCR
00001A26  1CFC 0029                958                  MOVE.B  #')',(A6)+
00001A2A  4E75                     959                  RTS
00001A2C                           960                  
00001A2C  B87C 0003                961  POSTINCR        CMP     #%011,D4
00001A30  6600 000C                962                  BNE     ONEPAREN
00001A34  1CFC 0029                963                  MOVE.B  #')',(A6)+
00001A38  1CFC 002B                964                  MOVE.B  #'+',(A6)+
00001A3C  4E75                     965                  RTS
00001A3E                           966                  
00001A3E  B87C 0004                967  ONEPAREN        CMP     #%100,D4
00001A42  6600 0008                968                  BNE     DONE
00001A46  1CFC 0029                969                  MOVE.B  #')',(A6)+                
00001A4A                           970  
00001A4A  4244                     971                  CLR     D4
00001A4C  4E75                     972  DONE            RTS
00001A4E                           973  
00001A4E                           974          
00001A4E                           975                 
00001A4E                           976  bits5to7
00001A4E  4243                     977                 CLR      D3
00001A50  4EB9 00001C04            978                 JSR      COPY_OPCODE  // opcode copied to D2
00001A56  C47C 0E00                979                 AND      #%0000111000000000, D2
00001A5A  E09A                     980                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001A5C  E29A                     981                 ROR.L    #1, D2
00001A5E  3602                     982                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A60  4E75                     983                 RTS
00001A62                           984                 
00001A62                           985  bits5to8
00001A62  4243                     986                 CLR      D3
00001A64  4EB9 00001C04            987                 JSR      COPY_OPCODE  // opcode copied to D2
00001A6A  C47C 0F00                988                 AND      #%0000111100000000, D2
00001A6E  E09A                     989                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001A70  3602                     990                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A72  4E75                     991                 RTS
00001A74                           992                 
00001A74                           993  bits8to10
00001A74  4243                     994                 CLR      D3
00001A76  4EB9 00001C04            995                 JSR      COPY_OPCODE  // opcode copied to D2
00001A7C  C47C 01C0                996                 AND      #%0000000111000000, D2
00001A80  EC9A                     997                 ROR.L    #6, D2          // rotate bits so isolated at the end
00001A82  3602                     998                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A84  4E75                     999                 RTS               
00001A86                          1000             
00001A86                          1001  bits11to13
00001A86  4243                    1002                 CLR      D3
00001A88  4EB9 00001C04           1003                 JSR      COPY_OPCODE  // opcode copied to D2
00001A8E  C47C 0038               1004                 AND      #%0000000000111000, D2
00001A92  E69A                    1005                 ROR.L    #3, D2          // rotate bits so isolated at the end
00001A94  3602                    1006                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A96  4E75                    1007                 RTS
00001A98                          1008             
00001A98                          1009  bits14to16
00001A98  4243                    1010                 CLR      D3
00001A9A  4EB9 00001C04           1011                 JSR      COPY_OPCODE  // opcode copied to D2
00001AA0  C47C 0007               1012                 AND      #%0000000000000111, D2
00001AA4  3602                    1013                 MOVE.W   D2,D3 // moving isolated bits into d3
00001AA6  4E75                    1014                 RTS
00001AA8                          1015  bits11to16
00001AA8  4243                    1016                 CLR      D3
00001AAA  4EB9 00001C04           1017                 JSR      COPY_OPCODE  // opcode copied to D2
00001AB0  C47C 003F               1018                 AND      #%0000000000111111, D2
00001AB4  3602                    1019                 MOVE.W   D2,D3 // moving isolated bits into d3
00001AB6  4E75                    1020                 RTS
00001AB8                          1021  bits1to10
00001AB8  4243                    1022                 CLR      D3
00001ABA  4EB9 00001C04           1023                 JSR      COPY_OPCODE  // opcode copied to D2
00001AC0  C47C FFC0               1024                 AND      #%1111111111000000, D2
00001AC4  EC9A                    1025                 ROR.L    #6, D2
00001AC6  3602                    1026                 MOVE.W   D2,D3 // moving isolated bits into d3
00001AC8  4E75                    1027                 RTS
00001ACA                          1028  ** DN       
00001ACA                          1029  MODE000         
00001ACA  1CFC 0044               1030                  MOVE.B  #'D',(A6)+     
00001ACE  4E75                    1031                  RTS
00001AD0                          1032  
00001AD0                          1033  ** AN
00001AD0                          1034  MODE001         
00001AD0  4EB9 00001B24           1035                  JSR ADDRESS_BUFFER  
00001AD6  4E75                    1036                  RTS      
00001AD8                          1037  
00001AD8                          1038   ** (AN)
00001AD8                          1039  MODE010         
00001AD8  1CFC 0028               1040                  MOVE.B  #'(', (A6)+
00001ADC  1CFC 0041               1041                  MOVE.B  #'A',(A6)+  
00001AE0  4E75                    1042                  RTS      
00001AE2                          1043  
00001AE2                          1044  ** (AN)+ 
00001AE2                          1045  MODE011         
00001AE2  1CFC 0028               1046                  MOVE.B  #'(', (A6)+
00001AE6  1CFC 0041               1047                  MOVE.B  #'A',(A6)+ 
00001AEA  4E75                    1048                  RTS       
00001AEC                          1049  
00001AEC                          1050   ** -(AN)
00001AEC                          1051  MODE100         
00001AEC  1CFC 002D               1052                  MOVE.B  #'-', (A6)+
00001AF0  1CFC 0028               1053                  MOVE.B  #'(', (A6)+
00001AF4  1CFC 0041               1054                  MOVE.B  #'A',(A6)+
00001AF8  4E75                    1055                  RTS
00001AFA                          1056                  
00001AFA                          1057  **INVALID               
00001AFA                          1058  MODE101         
00001AFA  1CFC 0028               1059                  MOVE.B  #'(', (A6)+
00001AFE  1CFC 0041               1060                  MOVE.B  #'A',(A6)+ 
00001B02  4E75                    1061                  RTS
00001B04                          1062                  
00001B04                          1063  **INVALID
00001B04                          1064  MODE110         
00001B04  1CFC 0028               1065                  MOVE.B  #'(', (A6)+
00001B08  1CFC 0041               1066                  MOVE.B  #'A',(A6)+
00001B0C  4E75                    1067                  RTS  
00001B0E                          1068  
00001B0E                          1069  ** ABSOLUTE AND IMMEDIATE            
00001B0E                          1070  MODE111         
00001B0E                          1071                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001B0E                          1072                * JSR      PRINT_ABSOLUTE_WORD
00001B0E                          1073                 *JSR      PRINT_ABSOLUTE_LONG
00001B0E                          1074                 *JSR      PRINT_IMMEDIATE_WORD
00001B0E                          1075                 *JSR      PRINT_IMMEDIATE_LONG
00001B0E                          1076                 
00001B0E                          1077                 *** PRINT ABSOLUTE LONG
00001B0E  1CFC 0024               1078                 MOVE.B   #'$', (A6)+  
00001B12  4EB9 00001C46           1079                 JSR      PRINT_DEREF_ADDRESS
00001B18  544A                    1080                 ADD.W    #2, A2
00001B1A  4EB9 00001C46           1081                 JSR      PRINT_DEREF_ADDRESS
00001B20  544A                    1082                 ADD.W    #2, A2
00001B22  4E75                    1083                 RTS            
00001B24                          1084                                          
00001B24                          1085  ADDRESS_BUFFER
00001B24  1CFC 0041               1086                  MOVE.B  #'A',(A6)+ 
00001B28  4E75                    1087                  RTS
00001B2A                          1088                 
00001B2A                          1089  ABSOLUTE_BUFFER
00001B2A  4243                    1090                 CLR      D3
00001B2C  3604                    1091                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001B2E  1CF8 0024               1092                 MOVE.B   '$', (A6)+
00001B32  B67C 0000               1093                 CMP.W    #%000, D3
00001B36  6700 0010               1094                 BEQ      ABSOLUTE_WORD_BUFFER
00001B3A  4243                    1095                 CLR      D3
00001B3C  3604                    1096                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001B3E  B67C 0001               1097                 CMP.W    #%001, D3
00001B42  6700 0016               1098                 BEQ      ABSOLUTE_LONG_BUFFER
00001B46  4E75                    1099                 RTS
00001B48                          1100                 
00001B48                          1101  ABSOLUTE_WORD_BUFFER
00001B48                          1102                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001B48                          1103                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001B48  1CFC 0046               1104                         MOVE.B #'F', (A6)+ 
00001B4C  1CFC 0046               1105                         MOVE.B #'F', (A6)+ 
00001B50  1CFC 0046               1106                         MOVE.B #'F', (A6)+ 
00001B54  1CFC 0046               1107                         MOVE.B #'F', (A6)+ 
00001B58  4E75                    1108                         RTS       
00001B5A                          1109                    
00001B5A                          1110  ABSOLUTE_LONG_BUFFER       
00001B5A                          1111                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001B5A                          1112                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001B5A  1CFC 0047               1113                         MOVE.B #'G', (A6)+ 
00001B5E  1CFC 0047               1114                         MOVE.B #'G', (A6)+ 
00001B62  1CFC 0047               1115                         MOVE.B #'G', (A6)+ 
00001B66  1CFC 0047               1116                         MOVE.B #'G', (A6)+
00001B6A  4E75                    1117                         RTS 
00001B6C                          1118  
00001B6C                          1119  INVALID_EA  
00001B6C                          1120                  * TODO: IMPLEMENT
00001B6C                          1121                  *** CLEAR OUT A6
00001B6C                          1122                  ** PUT INVALID MESSAGE INTO A6
00001B6C  6000 F789               1123                  BRA EXIT
00001B70                          1124  INVALID_OP  
00001B70                          1125                  ** TODO: IMPLEMENT
00001B70                          1126                 *** CLEAR OUT A6
00001B70                          1127                  ** PUT INVALID MESSAGE INTO A6
00001B70  1CFC 0044               1128                      MOVE.B #'D', (A6)+
00001B74  1CFC 0041               1129                      MOVE.B #'A', (A6)+
00001B78  1CFC 0054               1130                      MOVE.B #'T', (A6)+
00001B7C  1CFC 0041               1131                      MOVE.B #'A', (A6)+ 
00001B80  1CFC 0020               1132                      MOVE.B #' ', (A6)+ 
00001B84  4EB9 00001C46           1133                      JSR     PRINT_DEREF_ADDRESS
00001B8A                          1134            
00001B8A                          1135                  
00001B8A  1CFC 004E               1136  NOP                 MOVE.B #'N', (A6)+
00001B8E  1CFC 004F               1137                      MOVE.B #'O', (A6)+
00001B92  1CFC 0050               1138                      MOVE.B #'P', (A6)+
00001B96  4E75                    1139                      RTS
00001B98                          1140  
00001B98                          1141                   
00001B98                          1142  RTS      
00001B98  43F8 12A0               1143                      LEA     RTS_disp,A1          
00001B9C  103C 000E               1144                      MOVE.B  #14,D0
00001BA0  4E4F                    1145                      TRAP    #15 
00001BA2  6000 F753               1146                      BRA     EXIT
00001BA6                          1147  JSR      
00001BA6  4DF9 00001E6C           1148                      LEA     BUFFER, A6
00001BAC  1CFC 004A               1149                      MOVE.B #'J', (A6)+
00001BB0  1CFC 0053               1150                      MOVE.B #'S', (A6)+
00001BB4  1CFC 0052               1151                      MOVE.B #'R', (A6)+
00001BB8  1CFC 0020               1152                      MOVE.B #' ', (A6)+
00001BBC  43F9 00001E6C           1153                      LEA     BUFFER, A1
00001BC2                          1154                      ** BITS 10 - 12 MODE       
00001BC2                          1155                      ** BITS 13 - 16 REGISTER
00001BC2  103C 000E               1156                      MOVE.B  #14,D0
00001BC6  4E4F                    1157                      TRAP    #15 
00001BC8  6000 F72D               1158                      BRA     EXIT
00001BCC                          1159                    
00001BCC                          1160  MOVEM      
00001BCC                          1161                     
00001BCC                          1162                      ** SIZE SUBROUTINE
00001BCC                          1163                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001BCC  C47C 0040               1164                      AND #%0000000001000000,D2 
00001BD0                          1165                      * WORD
00001BD0  B4BC 00000040           1166                      CMP.L   #%0000000001000000,D2
00001BD6  4EB9 00001BEC           1167                      JSR     MOVEM_W 
00001BDC                          1168                      *LONG
00001BDC  B4BC 00000040           1169                      CMP.L   #%0000000001000000,D2 
00001BE2                          1170                     ** JSR     MOVEM_L
00001BE2  103C 000E               1171                      MOVE.B  #14,D0
00001BE6  4E4F                    1172                      TRAP    #15
00001BE8  6000 F70D               1173                      BRA     EXIT 
00001BEC                          1174                      
00001BEC                          1175  MOVEM_W 
00001BEC  43F8 124E               1176                       LEA     MOVEM_disp,A1
00001BF0                          1177                      * PRINT MOVEM
00001BF0  103C 000E               1178                       MOVE.B  #14,D0
00001BF4  4E4F                    1179                       TRAP    #15
00001BF6                          1180          
00001BF6                          1181                      * PRINT WORD PORTION
00001BF6  41F8 12E5               1182                       LEA     size_w, A0
00001BFA  103C 000E               1183                       MOVE.B  #14,D0
00001BFE  4E4F                    1184                       TRAP    #15 
00001C00                          1185          
00001C00  6000 F6F5               1186                       BRA     EXIT 
00001C04                          1187       
00001C04                          1188     
00001C04                          1189  COPY_OPCODE 
00001C04                          1190                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001C04  4242                    1191                       CLR    D2  
00001C06  3405                    1192                       MOVE.W D5,D2 
00001C08  4E75                    1193                       RTS  
00001C0A                          1194  
00001C0A                          1195  PRINT_ADDRESS     
00001C0A  4242                    1196                   CLR         D2
00001C0C  143C 0010               1197                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001C10  220A                    1198                   MOVE.L      A2,D1        
00001C12  103C 000F               1199                   MOVE.B      #15,D0          
00001C16  4E4F                    1200                   TRAP        #15            
00001C18  1CFC 0020               1201                   MOVE.B      #' ', (A6)+
00001C1C  1CFC 0020               1202                   MOVE.B      #' ', (A6)+
00001C20  1CFC 0020               1203                   MOVE.B      #' ', (A6)+
00001C24  1CFC 0020               1204                   MOVE.B      #' ', (A6)+
00001C28  4E75                    1205                   RTS     
00001C2A                          1206  PRINT_BUFFER    
00001C2A  1CFC 0000               1207                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001C2E  43F9 00001E6C           1208                 LEA      BUFFER, A1
00001C34  303C 000E               1209                 MOVE.W   #14,D0
00001C38  4E4F                    1210                 TRAP     #15
00001C3A  43F8 1229               1211                 LEA     linebreak,A1            *appends line at the end of the user input
00001C3E  103C 000E               1212                 MOVE.B  #14,D0
00001C42  4E4F                    1213                 TRAP    #15
00001C44  4E75                    1214                 RTS  
00001C46                          1215  
00001C46                          1216  PRINT_DEREF_ADDRESS
00001C46  1CFC 0000               1217                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001C4A  43F9 00001E6C           1218                 LEA      BUFFER, A1
00001C50  303C 000E               1219                 MOVE.W   #14,D0
00001C54  4E4F                    1220                 TRAP     #15
00001C56  4DF9 00001E6C           1221                 LEA      BUFFER, A6
00001C5C  4242                    1222                 CLR      D2
00001C5E  0C52 0000               1223                 CMP      #0, (A2)
00001C62  6700 0006               1224                 BEQ      PRINT_ZEROES
00001C66  6000 001A               1225                 BRA      PRINT_HEX
00001C6A                          1226                 
00001C6A                          1227  PRINT_ZEROES
00001C6A  4DF9 00001E6C           1228                LEA   BUFFER,A6
00001C70  1CFC 0030               1229                MOVE.B #'0', (A6)+
00001C74  1CFC 0030               1230                MOVE.B #'0', (A6)+
00001C78  1CFC 0030               1231                MOVE.B #'0', (A6)+
00001C7C  1CFC 0030               1232                MOVE.B #'0', (A6)+
00001C80  4E75                    1233                RTS
00001C82                          1234  PRINT_HEX
00001C82  143C 0010               1235                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001C86  3212                    1236                 MOVE.W      (A2),D1        // print the hex value in current address      
00001C88  103C 000F               1237                 MOVE.B      #15,D0          
00001C8C  4E4F                    1238                 TRAP        #15 
00001C8E  4E75                    1239                 RTS
00001C90                          1240   ***************************
00001C90                          1241  
00001C90                          1242  GETSIZE_ADDQ
00001C90                          1243                   
00001C90                          1244                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001C90                          1245                 
00001C90  4EB8 1A74               1246             JSR      bits8to10
00001C94  B67C 0000               1247             CMP      #%000,D3
00001C98  6600 000C               1248             BNE      ADDQ_NOTBYTE
00001C9C  4EB9 00001E3C           1249             JSR      SIZEISBYTE
00001CA2  4243                    1250             CLR      D3
00001CA4  4E75                    1251             RTS
00001CA6                          1252             
00001CA6                          1253  ADDQ_NOTBYTE
00001CA6  B67C 0001               1254             CMP      #%001,D3
00001CAA  6600 000C               1255             BNE      ADDQ_NOTWORD
00001CAE  4EB9 00001E4C           1256             JSR      SIZEISWORD
00001CB4  4243                    1257             CLR      D3
00001CB6  4E75                    1258             RTS
00001CB8                          1259             
00001CB8                          1260  ADDQ_NOTWORD
00001CB8  B67C 0002               1261             CMP      #%010,D3
00001CBC  6600 FEAE               1262             BNE      INVALID_EA
00001CC0  4EB9 00001E5C           1263             JSR      SIZEISLONG
00001CC6  4243                    1264             CLR      D3
00001CC8  4E75                    1265             RTS
00001CCA                          1266                   
00001CCA                          1267                                   
00001CCA                          1268  ****************************
00001CCA                          1269  ****************************
00001CCA                          1270  GETSIZE_OR
00001CCA                          1271                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001CCA                          1272                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001CCA                          1273          
00001CCA  4EB8 1A74               1274              JSR     bits8to10
00001CCE  B67C 0000               1275              CMP     #000,D3
00001CD2  6600 0010               1276              BNE     OR_NOTBYTE
00001CD6  4EB9 00001E3C           1277              JSR     SIZEISBYTE
00001CDC  3C3C 0001               1278              MOVE    #1,D6
00001CE0  4243                    1279              CLR     D3
00001CE2  4E75                    1280              RTS
00001CE4                          1281              
00001CE4                          1282  OR_NOTBYTE 
00001CE4  B67C 0001               1283              CMP     #%001,D3
00001CE8  6600 0010               1284              BNE     OR_NOTWORD
00001CEC  4EB9 00001E4C           1285              JSR     SIZEISWORD
00001CF2  3C3C 0001               1286              MOVE    #1,D6
00001CF6  4243                    1287              CLR     D3
00001CF8  4E75                    1288              RTS
00001CFA                          1289              
00001CFA                          1290  OR_NOTWORD
00001CFA  B67C 0002               1291              CMP     #%010,D3
00001CFE  6600 0010               1292              BNE     OR_NOTLEFT
00001D02  4EB9 00001E5C           1293              JSR     SIZEISLONG
00001D08  3C3C 0001               1294              MOVE    #1,D6
00001D0C  4243                    1295              CLR     D3
00001D0E  4E75                    1296              RTS
00001D10                          1297              
00001D10                          1298  OR_NOTLEFT     ;check other direction
00001D10  B67C 0004               1299              CMP     #%100,D3
00001D14  6600 0010               1300              BNE     OR_NOTRIGHTBYTE
00001D18  4EB9 00001E3C           1301              JSR     SIZEISBYTE
00001D1E  3C3C 0002               1302              MOVE    #2,D6
00001D22  4243                    1303              CLR     D3
00001D24  4E75                    1304              RTS
00001D26                          1305              
00001D26                          1306  OR_NOTRIGHTBYTE
00001D26  B67C 0005               1307              CMP     #%101,D3
00001D2A  6600 0010               1308              BNE     OR_NOTRIGHTWORD
00001D2E  4EB9 00001E4C           1309              JSR     SIZEISWORD
00001D34  3C3C 0002               1310              MOVE    #2,D6
00001D38  4243                    1311              CLR     D3
00001D3A  4E75                    1312              RTS
00001D3C                          1313  
00001D3C                          1314  OR_NOTRIGHTWORD
00001D3C  B67C 0006               1315              CMP     #%110,D3
00001D40  6600 FE2A               1316              BNE     INVALID_EA
00001D44  4EB9 00001E5C           1317              JSR     SIZEISLONG
00001D4A  3C3C 0002               1318              MOVE    #2,D6
00001D4E  4243                    1319              CLR     D3
00001D50  4E75                    1320              RTS 
00001D52                          1321  
00001D52                          1322              
00001D52                          1323  
00001D52                          1324                     
00001D52                          1325  ****************************
00001D52                          1326  
00001D52                          1327                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001D52                          1328                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001D52                          1329  GETSIZE_ADD
00001D52  4EB8 1A74               1330              JSR     bits8to10
00001D56  B67C 0000               1331              CMP     #%000,D3
00001D5A  6600 0010               1332              BNE     ADD_NOTBYTE
00001D5E  4EB9 00001E3C           1333              JSR     SIZEISBYTE
00001D64  3C3C 0001               1334              MOVE    #1,D6
00001D68  4243                    1335              CLR     D3
00001D6A  4E75                    1336              RTS
00001D6C                          1337          
00001D6C                          1338  ADD_NOTBYTE 
00001D6C  B67C 0001               1339              CMP     #%001,D3
00001D70  6600 0010               1340              BNE     ADD_NOTWORD
00001D74  4EB9 00001E4C           1341              JSR     SIZEISWORD
00001D7A  3C3C 0001               1342              MOVE    #1,D6
00001D7E  4243                    1343              CLR     D3
00001D80  4E75                    1344              RTS
00001D82                          1345              
00001D82                          1346  ADD_NOTWORD
00001D82  B67C 0002               1347              CMP     #%010,D3
00001D86  6600 0010               1348              BNE     ADD_NOTLEFT
00001D8A  4EB9 00001E5C           1349              JSR     SIZEISLONG
00001D90  3C3C 0001               1350              MOVE    #1,D6
00001D94  4243                    1351              CLR     D3
00001D96  4E75                    1352              RTS
00001D98                          1353              
00001D98                          1354  ADD_NOTLEFT     ;check other direction
00001D98  B67C 0004               1355              CMP     #%100,D3
00001D9C  6600 0010               1356              BNE     ADD_NOTRIGHTBYTE
00001DA0  4EB9 00001E3C           1357              JSR     SIZEISBYTE
00001DA6  3C3C 0002               1358              MOVE    #2,D6
00001DAA  4243                    1359              CLR     D3
00001DAC  4E75                    1360              RTS
00001DAE                          1361              
00001DAE                          1362  ADD_NOTRIGHTBYTE
00001DAE  B67C 0005               1363              CMP     #%101,D3
00001DB2  6600 0010               1364              BNE     ADD_NOTRIGHTWORD
00001DB6  4EB9 00001E4C           1365              JSR     SIZEISWORD
00001DBC  3C3C 0002               1366              MOVE    #2,D6
00001DC0  4243                    1367              CLR     D3
00001DC2  4E75                    1368              RTS
00001DC4                          1369  
00001DC4                          1370  ADD_NOTRIGHTWORD
00001DC4  B67C 0006               1371              CMP     #%110,D3
00001DC8  6600 FDA2               1372              BNE     INVALID_EA
00001DCC  4EB9 00001E5C           1373              JSR     SIZEISLONG
00001DD2  3C3C 0002               1374              MOVE    #2,D6
00001DD6  4243                    1375              CLR     D3
00001DD8  4E75                    1376              RTS 
00001DDA                          1377                               
00001DDA                          1378                       
00001DDA                          1379                       
00001DDA                          1380  *****************************                  
00001DDA                          1381  GETSIZE_ADDI
00001DDA  4EB8 1A74               1382          JSR     bits8to10
00001DDE  B67C 0000               1383          CMP     #%000,D3
00001DE2  6600 000C               1384          BNE     ADDI_NOTBYTE
00001DE6  4EB9 00001E3C           1385          JSR     SIZEISBYTE
00001DEC  4243                    1386          CLR     D3
00001DEE  4E75                    1387          RTS
00001DF0                          1388  
00001DF0                          1389  ADDI_NOTBYTE
00001DF0  B67C 0001               1390          CMP     #%001,D3
00001DF4  6600 000C               1391          BNE     ADDI_NOTWORD
00001DF8  4EB9 00001E4C           1392          JSR     SIZEISWORD
00001DFE  4243                    1393          CLR     D3
00001E00  4E75                    1394          RTS
00001E02                          1395          
00001E02                          1396  ADDI_NOTWORD
00001E02  B67C 0002               1397          CMP     #%010,D3
00001E06  6600 FD64               1398          BNE     INVALID_EA
00001E0A  4EB9 00001E5C           1399          JSR     SIZEISLONG
00001E10  4243                    1400          CLR     D3
00001E12  4E75                    1401          RTS
00001E14                          1402          
00001E14                          1403                              
00001E14                          1404                       
00001E14                          1405  ********************************          
00001E14                          1406                       
00001E14                          1407                       
00001E14                          1408  ********************************                     
00001E14                          1409  GETSIZE_ADDA
00001E14  4EB8 1A74               1410          JSR     bits8to10
00001E18  B67C 0003               1411          CMP     #%011,D3
00001E1C  6600 000C               1412          BNE     ADDA_NOTWORD
00001E20  4EB9 00001E4C           1413          JSR     SIZEISWORD
00001E26  4243                    1414          CLR     D3
00001E28  4E75                    1415          RTS
00001E2A                          1416          
00001E2A                          1417  
00001E2A                          1418          
00001E2A                          1419  ADDA_NOTWORD
00001E2A  B67C 0007               1420          CMP     #%111,D3
00001E2E  6600 FD3C               1421          BNE     INVALID_EA
00001E32  4EB9 00001E5C           1422          JSR     SIZEISLONG
00001E38  4243                    1423          CLR     D3
00001E3A  4E75                    1424          RTS
00001E3C                          1425  **********************************        
00001E3C                          1426      
00001E3C                          1427  SIZEISBYTE
00001E3C  1CFC 002E               1428         MOVE.B   #'.',(A6)+
00001E40  1CFC 0042               1429         MOVE.B   #'B',(A6)+
00001E44  1CFC 0020               1430         MOVE.B   #' ',(A6)+
00001E48  4243                    1431         CLR      D3
00001E4A  4E75                    1432         RTS
00001E4C                          1433  
00001E4C                          1434  SIZEISWORD    
00001E4C  1CFC 002E               1435         MOVE.B   #'.',(A6)+
00001E50  1CFC 0057               1436         MOVE.B   #'W',(A6)+
00001E54  1CFC 0020               1437         MOVE.B   #' ',(A6)+
00001E58  4243                    1438         CLR      D3
00001E5A  4E75                    1439         RTS
00001E5C                          1440                  
00001E5C                          1441  SIZEISLONG    
00001E5C  1CFC 002E               1442         MOVE.B   #'.',(A6)+
00001E60  1CFC 004C               1443         MOVE.B   #'L',(A6)+
00001E64  1CFC 0020               1444         MOVE.B   #' ',(A6)+
00001E68                          1445  
00001E68  4243                    1446         CLR      D3
00001E6A  4E75                    1447         RTS
00001E6C                          1448                  
00001E6C                          1449       
00001E6C= 00000001                1450  BUFFER DC.L 1     
00001E70                          1451      INCLUDE 'helpers.x68'
00001E70  1019                    1452  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001E72  4EB9 00001E8A           1453                          JSR     sub_breakDownAs     *breaks down ASCII code
00001E78  D280                    1454                          ADD.L   D0,D1               *load that char into D1
00001E7A  0C11 0000               1455                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001E7E  6700 0006               1456                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001E82  E989                    1457                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001E84  60EA                    1458                          BRA     sub_AsToHeLoop      *loops through again
00001E86                          1459                          
00001E86  2E01                    1460  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001E88  4E75                    1461                          RTS
00001E8A  B03C 0030               1462  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001E8E  6D00 002A               1463                          BLT     as_ERROR                        
00001E92                          1464                          
00001E92  B03C 0039               1465                          CMP.B    #$39,D0            *is it an A-F letter?
00001E96  6E00 000C               1466                          BGT     as_LETTER
00001E9A                          1467                          
00001E9A  6000 0002               1468                          BRA     as_NUMBER
00001E9E                          1469                                                 
00001E9E  0400 0030               1470  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001EA2  4E75                    1471                          RTS
00001EA4                          1472                          
00001EA4  B03C 0041               1473  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001EA8  6D00 0010               1474                          BLT     as_ERROR
00001EAC                          1475                          
00001EAC  B03C 0046               1476                          CMP.B     #$46, D0
00001EB0  6E00 0008               1477                          BGT     as_ERROR
00001EB4                          1478                          
00001EB4  0400 0037               1479                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001EB8  4E75                    1480                          RTS
00001EBA                          1481                          
00001EBA  43F9 65727200           1482  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001EC0  103C 000D               1483                          MOVE.B  #13,D0
00001EC4  4E4F                    1484                          TRAP    #15  
00001EC6                          1485  sub_StartReadingData    
00001EC6  0801 0000               1486                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001ECA  6600 0006               1487                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001ECE                          1488                          
00001ECE  7E00                    1489                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001ED0  4E75                    1490  srdFinish               RTS
00001ED2                          1491  
00001ED2  43F8 1172               1492  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001ED6  103C 000E               1493                          MOVE.B  #14,D0
00001EDA  4E4F                    1494                          TRAP    #15
00001EDC                          1495                          
00001EDC  7E01                    1496                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001EDE  60F0                    1497                          BRA     srdFinish
00001EE0                          1498  sub_EndReadingData  
00001EE0  0801 0000               1499                          BTST    #0,D1               *checks if LSB is 1, 
00001EE4  6600 0018               1500                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001EE8                          1501                          
00001EE8  B5CB                    1502                          CMP.L   A3,A2               *end address must be greater than start address
00001EEA  6E00 0004               1503                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001EEE                          1504  
00001EEE  4E75                    1505  erdFinish               RTS
00001EF0                          1506  
00001EF0  43F8 1199               1507  erdFailAddrOrder        LEA     addr_order_check,A1
00001EF4  103C 000E               1508                          MOVE.B  #14,D0
00001EF8  4E4F                    1509                          TRAP    #15
00001EFA                          1510                          
00001EFA  7E01                    1511                          MOVE.L  #1,D7
00001EFC  60F0                    1512                          BRA     erdFinish
00001EFE                          1513  
00001EFE  43F8 1172               1514  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001F02  103C 000E               1515                          MOVE.B  #14,D0
00001F06  4E4F                    1516                          TRAP    #15
00001F08                          1517                          
00001F08  7E01                    1518                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001F0A  60E2                    1519                          BRA     erdFinish
00001F0C                          1520                          
00001F0C                          1521  
00001F0C                          1522  
00001F0C                          1523  
00001F0C                          1524  
00001F0C                          1525  
00001F0C                          1526  
00001F0C                          1527  
00001F0C                          1528  
00001F0C                          1529  -------------------- end include --------------------
00001F0C                          1530      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1B2A
ABSOLUTE_LONG_BUFFER  1B5A
ABSOLUTE_WORD_BUFFER  1B48
ADD                 1488
ADDA                1464
ADDA_BUFFER         146C
ADDA_DISP           1258
ADDA_NOTWORD        1E2A
ADDI                151C
ADDI_BUFFER         15A2
ADDI_DES            153E
ADDI_DISP           125D
ADDI_NOTBYTE        1DF0
ADDI_NOTWORD        1E02
ADDI_SRC            1530
ADDQ                16A8
ADDQ_BUFFER         1706
ADDQ_DEST           16DC
ADDQ_DISP           1262
ADDQ_NOTBYTE        1CA6
ADDQ_NOTWORD        1CB8
ADDQ_SRC            16C4
ADDRESS_BUFFER      1B24
ADDR_ODDBIT_MSG     1172
ADDR_ORDER_CHECK    1199
ADD_BUFFER          1490
ADD_DEST            14FA
ADD_DIRECTION_REVERSED  14C0
ADD_DISP            1254
ADD_NOTBYTE         1D6C
ADD_NOTLEFT         1D98
ADD_NOTRIGHTBYTE    1DAE
ADD_NOTRIGHTWORD    1DC4
ADD_NOTWORD         1D82
ADD_SRC             14D6
AND                 18E2
AND_BUFFER          18EC
AND_DISP            127D
ASL                 191E
ASL_BUFFER          1928
ASL_DISP            128C
ASR                 1902
ASR_BUFFER          190C
ASR_DISP            1290
AS_ERROR            1EBA
AS_LETTER           1EA4
AS_NUMBER           1E9E
ATHENDLOOP          1E86
BACKSLASHSIGH       12DA
BCC_DISP            12A4
BGT_DISP            12A8
BITS11TO13          1A86
BITS11TO16          1AA8
BITS14TO16          1A98
BITS1TO10           1AB8
BITS5TO7            1A4E
BITS5TO8            1A62
BITS8TO10           1A74
BLE_DISP            12AC
BUFFER              1E6C
CLOSEPAREN          12DE
CLR_DISP            1279
CMP                 18A2
CMP_BUFFER          18AC
CODE0000            135C
CODE0001            1370
CODE0010            1376
CODE0011            1376
CODE0100            1376
CODE0101            13AA
CODE0110            13AE
CODE0111            13B2
CODE1000            13B6
CODE1001            13C8
CODE1010            13CC
CODE1011            13D0
CODE1100            13D4
CODE1101            13E6
CODE1110            1432
CODE1111            1458
COMMASIGN           12D8
COPY_OPCODE         1C04
CR                  D
DIVU                1742
DIVU_BUFFER         176E
DIVU_DEST           17AE
DIVU_DISP           1270
DIVU_SRC            1784
DOLLARSIGN          12D2
DONE                1A4C
ENDTEST_MSG         11ED
ERDFAILADDRODDB     1EFE
ERDFAILADDRORDER    1EF0
ERDFINISH           1EEE
EXIT                12F7
FINISHER            1A1E
FIVE                19F2
FOUR                19E2
GETSIZE_ADD         1D52
GETSIZE_ADDA        1E14
GETSIZE_ADDI        1DDA
GETSIZE_ADDQ        1C90
GETSIZE_OR          1CCA
HEXATABLE           12B0
INPUT_BUFFER        12EC
INSERT_NUM          19A2
INVALIDEA_DISP      1231
INVALID_DISP        122C
INVALID_EA          1B6C
INVALID_OP          1B70
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            1972
JMP_TABLE           12FC
JSR                 1BA6
JSR_DISP            129C
LEA                 15BE
LEA_BUFFER          15E0
LEA_DEST            1684
LEA_DISP            1275
LEA_SRC             15F2
LF                  A
LINEBREAK           1229
LINECOUNT           12EB
LOCATION_ENDDATA    12F2
LOCATION_END_MSG    1155
LOCATION_STARTDATA  12EE
LOCATION_START_MSG  1136
LSL                 193A
LSL_BUFFER          1944
LSL_DISP            1284
LSR                 1956
LSR_BUFFER          1960
LSR_DISP            1288
MAIN_LOOP           109C
MINUSSIGN           12D6
MODE000             1ACA
MODE001             1AD0
MODE010             1AD8
MODE011             1AE2
MODE100             1AEC
MODE101             1AFA
MODE110             1B04
MODE111             1B0E
MOVEA_DISP          1242
MOVEB_BUFFER        1462
MOVEM               1BCC
MOVEM_DISP          124E
MOVEM_W             1BEC
MOVEQ               171E
MOVEQ_BUFFER        1728
MOVEQ_DISP          1248
MOVE_B              145C
MOVE_DISP           123D
MULS                18C2
MULS_BUFFER         18CC
MULS_DISP           126B
NOP                 1B8A
NOP_DISP            1239
ONE                 19B2
ONEPAREN            1A3E
OPENPAREN           12DC
OR                  17D6
OR_BUFFER           1814
OR_DEST             185A
OR_DIRECTION_REVERSED  17FC
OR_DISP             1281
OR_NOTBYTE          1CE4
OR_NOTLEFT          1D10
OR_NOTRIGHTBYTE     1D26
OR_NOTRIGHTWORD     1D3C
OR_NOTWORD          1CFA
OR_SRC              1828
PAUSE_MSG           11D3
PLUSSIGN            12D4
POSTINCR            1A2C
POUNDSIGN           12D0
PRINT_ADDRESS       1C0A
PRINT_BUFFER        1C2A
PRINT_DEREF_ADDRESS  1C46
PRINT_HEX           1C82
PRINT_ZEROES        1C6A
ROL_DISP            1294
ROR_DISP            1298
RTS                 1B98
RTS_DISP            12A0
SEVEN               1A12
SIX                 1A02
SIZEISBYTE          1E3C
SIZEISLONG          1E5C
SIZEISWORD          1E4C
SIZE_B              12E2
SIZE_L              12E8
SIZE_W              12E5
SPACE               12E0
SRDFAILADDRODDB     1ED2
SRDFINISH           1ED0
START               1000
SUB                 1882
SUB_ASTOHELOOP      1E70
SUB_BREAKDOWNAS     1E8A
SUB_BUFFER          188C
SUB_DISP            1267
SUB_ENDREADINGDATA  1EE0
SUB_STARTREADINGDATA  1EC6
TABLE_LENGTH        12F6
THREE               19D2
TWO                 19C2
WELCOME_MSG         10D2
