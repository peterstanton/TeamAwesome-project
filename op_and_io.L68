00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 9:22:20 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010D4              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001138             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012EE             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001CA6             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 0000122B             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001CFC             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001157             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012EE             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001CA6             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 0000122B             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001D16             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012FE             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001CA2             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C  3612                      80                   MOVE.W  (A2), D3
0000109E                            81                  
0000109E                            82                   ; MOVE.W  (A2), D3
0000109E                            83  
0000109E                            84                   * TEST OPCODES
0000109E                            85                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109E                            86                   ; MOVE.W  #$4E71,D3 * NOP
0000109E                            87                   ; MOVE.W  #$4E75,D3 * RTS
0000109E                            88                   ; MOVE.W  #$4EB0,D3 * JSR
0000109E                            89                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109E                            90                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109E                            91                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109E                            92                   ;MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109E                            93  
0000109E  363C 5201                 94                    MOVE.W    #$5201,D3    *ADDQ
000010A2                            95  
000010A2                            96                   ; MOVE.W     #$7E70, D3 *MOVEQ
000010A2                            97                   ; MOVE.W     #$80C0, D3 *DIVU
000010A2                            98                   ; MOVE.W     #$8000, D3 * OR
000010A2                            99                   ; MOVE.W        #$9000, D3 * SUB
000010A2                           100                   ; MOVE.W        #$B000, D3 * CMP
000010A2                           101                   ; MOVE.W        #$C1C0, D3 * MULS
000010A2                           102                   ; MOVE.W        #$C000, D3 * AND
000010A2                           103                   ; MOVE.W        #$E0F8, D3  *ASR
000010A2                           104                   ; MOVE.W        #$E1E2, D3  *ASL
000010A2                           105                   ; MOVE.W        #$E393, D3  *LSL
000010A2                           106                   ;MOVE.W        #$E2DC, D3  *LSR
000010A2  4EB9 00001B2E            107                   JSR    PRINT_ADDRESS
000010A8  544A                     108                   ADD.W   #2,A2
000010AA  3A03                     109                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AC  183C 000C                110                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010B0                           111  
000010B0  4EB9 00001B2E            112                   JSR    PRINT_ADDRESS      
000010B6                           113                   
000010B6                           114                   
000010B6                           115                   
000010B6  3A03                     116                   MOVE.W  D3,D5
000010B8  183C 000C                117                   MOVE.B  #12,D4          *Shift 12 bits to the right  
000010BC  E86B                     118                   LSR.W   D4,D3       *Move the bits
000010BE  C6FC 0006                119                   MULU    #6,D3       *Form offset     
000010C2  4EB0 3000                120                   JSR     0(A0,D3)   *Jump indirect with index
000010C6                           121                   
000010C6  4EB9 00001A94            122                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010CC  B4CB                     123                   CMP     A3,A2
000010CE  6E00 0229                124                   BGT     EXIT
000010D2  60BA                     125                   BRA     MAIN_LOOP
000010D4                           126                   
000010D4                           127                                  
000010D4                           128      INCLUDE 'definitions.x68'
000010D4                           129  
000010D4  =0000000D                130  CR              EQU     $0D         carriage return
000010D4  =0000000A                131  LF              EQU     $0A         line feed
000010D4= 43 53 53 20 34 32 ...    132  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010F8= 42 79 20 54 65 61 ...    133                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001138= 45 6E 74 65 72 20 ...    134  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001157= 45 6E 74 65 72 20 ...    135  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001174= 41 64 64 72 65 73 ...    136  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
0000119B= 45 6E 64 69 6E 67 ...    137  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011D5= 50 72 65 73 73 20 ...    138  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011EF= 52 65 61 63 68 65 ...    139  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000120A= 54 72 79 20 61 6E ...    140                      DC.B    'Try another location? (yes/no): ',0
0000122B= 0D 0A 00                 141  linebreak           DC.B    CR,LF,0
0000122E                           142                      
0000122E= 44 41 54 41 00           143  Invalid_disp        DC.B    'DATA',0
00001233= 57 52 4F 4E 47 45 ...    144  InvalidEA_disp      DC.B    'WRONGEA',0
0000123B                           145  
0000123B= 4E 4F 50 00              146  NOP_disp            DC.B    'NOP',0
0000123F= 4D 4F 56 45 00           147  MOVE_disp           DC.B    'MOVE',0
00001244= 4D 4F 56 45 41 00        148  MOVEA_disp          DC.B    'MOVEA',0
0000124A= 4D 4F 56 45 51 00        149  MOVEQ_disp          DC.B    'MOVEQ',0
00001250= 4D 4F 56 45 4D 00        150  MOVEM_disp          DC.B    'MOVEM',0
00001256= 41 44 44 00              151  ADD_disp            DC.B    'ADD',0
0000125A= 41 44 44 41 00           152  ADDA_disp           DC.B    'ADDA',0
0000125F= 41 44 44 49 00           153  ADDI_disp           DC.B    'ADDI',0
00001264= 41 44 44 51 00           154  ADDQ_disp           DC.B    'ADDQ',0
00001269= 53 55 42 00              155  SUB_disp            DC.B    'SUB',0
0000126D= 4D 55 4C 53 00           156  MULS_disp           DC.B    'MULS',0
00001272= 44 49 56 55 00           157  DIVU_disp           DC.B    'DIVU',0
00001277= 4C 45 41 00              158  LEA_disp            DC.B    'LEA',0
0000127B= 43 4C 52 00              159  CLR_disp            DC.B    'CLR',0
0000127F= 41 4E 44 00              160  AND_disp            DC.B    'AND',0
00001283= 4F 52 00                 161  OR_disp             DC.B    'OR',0
00001286= 4C 53 4C 00              162  LSL_disp            DC.B    'LSL',0
0000128A= 4C 53 52 00              163  LSR_disp            DC.B    'LSR',0
0000128E= 41 53 4C 00              164  ASL_disp            DC.B    'ASL',0
00001292= 41 53 52 00              165  ASR_disp            DC.B    'ASR',0
00001296= 52 4F 4C 00              166  ROL_disp            DC.B    'ROL',0
0000129A= 52 4F 52 00              167  ROR_disp            DC.B    'ROR',0
0000129E= 4A 53 52 00              168  JSR_disp            DC.B    'JSR',0
000012A2= 52 54 53 00              169  RTS_disp            DC.B    'RTS',0
000012A6= 42 43 43 00              170  BCC_disp            DC.B    'BCC',0
000012AA= 42 47 54 00              171  BGT_disp            DC.B    'BGT',0    
000012AE= 42 4C 45 00              172  BLE_disp            DC.b    'BLE',0
000012B2                           173  
000012B2                           174  
000012B2= 30 00                    175  hexaTable               DC.B    '0',0
000012B4= 31 00                    176                          DC.B    '1',0
000012B6= 32 00                    177                          DC.B    '2',0
000012B8= 33 00                    178                          DC.B    '3',0
000012BA= 34 00                    179                          DC.B    '4',0
000012BC= 35 00                    180                          DC.B    '5',0
000012BE= 36 00                    181                          DC.B    '6',0
000012C0= 37 00                    182                          DC.B    '7',0
000012C2= 38 00                    183                          DC.B    '8',0
000012C4= 39 00                    184                          DC.B    '9',0
000012C6= 41 00                    185                          DC.B    'A',0
000012C8= 42 00                    186                          DC.B    'B',0
000012CA= 43 00                    187                          DC.B    'C',0
000012CC= 44 00                    188                          DC.B    'D',0
000012CE= 45 00                    189                          DC.B    'E',0
000012D0= 46 00                    190                          DC.B    'F',0
000012D2= 23 00                    191  poundsign               DC.B    '#',0
000012D4= 24 00                    192  dollarsign              DC.B    '$',0
000012D6= 2B 00                    193  plussign                DC.B    '+',0
000012D8= 2D 00                    194  minussign               DC.B    '-',0
000012DA= 2C 00                    195  commasign               DC.B    ',',0
000012DC= 2F 00                    196  backslashsigh           DC.B    '/',0
000012DE= 28 00                    197  openparen               DC.B    '(',0
000012E0= 29 00                    198  closeparen              DC.B    ')',0
000012E2= 20 00                    199  space                   DC.B    ' ',0   
000012E4= 2E 42 00                 200  size_b                  DC.B    '.B',0
000012E7= 2E 57 00                 201  size_w                  DC.B    '.W',0        
000012EA= 2E 4C 00                 202  size_l                  DC.B    '.L',0
000012ED                           203  
000012ED                           204  linecount               DS.B    1       *storeage for lines on a screen
000012EE= 01                       205  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012F0                           206  location_startData      DS.L    1       *location on where to start reading data
000012F4                           207  location_endData        DS.L    1       *location on where to end reading data
000012F8                           208  table_length            DS.B    1       *Number of spaces in the table to print to console
000012F9                           209  
000012F9                           210  
000012F9                           211  -------------------- end include --------------------
000012F9                           212             
000012F9                           213  EXIT                 
000012FA  FFFF FFFF                214         SIMHALT   
000012FE                           215  
000012FE                           216  
000012FE                           217  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012FE  4EF9 0000135E            218  jmp_table      JMP         code0000
00001304                           219                  *ADDI
00001304                           220  
00001304  4EF9 00001372            221                 JMP         code0001
0000130A                           222  
0000130A  4EF9 00001376            223                 JMP         code0010
00001310                           224  
00001310  4EF9 0000137A            225                 JMP         code0011
00001316                           226  
00001316  4EF9 0000137E            227                 JMP         code0100
0000131C                           228                             
0000131C  4EF9 000013B2            229                 JMP         code0101
00001322                           230                 * ADDQ
00001322                           231                  
00001322                           232        
00001322  4EF9 000013B8            233                 JMP         code0110
00001328                           234                 * BCC
00001328                           235                 * BGT
00001328                           236                 * BLE
00001328                           237                 
00001328  4EF9 000013BC            238                 JMP         code0111
0000132E                           239                 * MOVEQ
0000132E                           240  
0000132E  4EF9 000013C2            241                 JMP         code1000
00001334                           242                 * DIVU
00001334                           243                 * OR
00001334                           244  
00001334  4EF9 000013D4            245                 JMP         code1001
0000133A                           246                  *SUB
0000133A  4EF9 000013DA            247                 JMP         code1010
00001340                           248                 
00001340  4EF9 000013DE            249                 JMP         code1011
00001346                           250                 * CMP
00001346                           251                 
00001346  4EF9 000013E4            252                 JMP         code1100
0000134C                           253                 * MULS
0000134C                           254                 * AND
0000134C                           255          
0000134C  4EF9 000013F6            256                 JMP         code1101
00001352                           257                 *ADD
00001352                           258                 *ADDA
00001352  4EF9 00001442            259                 JMP         code1110
00001358                           260                 * ASR
00001358                           261                 * ASL
00001358                           262                 * LSL
00001358                           263                 * LSR
00001358                           264                 * ROL
00001358                           265                 * ROR
00001358                           266  
00001358  4EF9 00001472            267                 JMP         code1111
0000135E                           268  
0000135E                           269  
0000135E                           270  code0000      
0000135E  4EB9 00001998            271                 JSR          bits5to8 // RETURNS INTO D3
00001364  B6BC 00000006            272                 CMP.L        #%0110, D3
0000136A  6600 073E                273                 BNE          INVALID_OP
0000136E  6000 01D0                274                 BRA          ADDI  
00001372                           275  
00001372  4E72 2700                276  code0001       STOP        #$2700
00001376                           277  
00001376  4E72 2700                278  code0010       STOP        #$2700
0000137A                           279  
0000137A  4E72 2700                280  code0011       STOP        #$2700
0000137E                           281  
0000137E                           282  code0100       
0000137E  4EB9 00001B28            283                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
00001384                           284                  
00001384                           285                 *NOP
00001384  C47C 0FFF                286                 AND     #%0000111111111111,D2
00001388  B4BC 00000E71            287                 CMP.L   #%000111001110001, D2
0000138E  6700 071E                288                 BEQ     NOP
00001392                           289                 
00001392                           290                 *RTS
00001392  C47C 0FFF                291                 AND     #%0000111111111111,D2
00001396  B4BC 00000E75            292                 CMP.L   #%0000111001110101, D2
0000139C  6700 071E                293                 BEQ     RTS
000013A0                           294  
000013A0                           295                 *JSR
000013A0  C47C 0FC0                296                 AND     #%0000111111000000,D2
000013A4  B4BC 00000E80            297                 CMP.L   #%0000111010000000,D2
000013AA  6700 071E                298                 BEQ     JSR
000013AE                           299                 
000013AE                           300                 * MOVEM
000013AE                           301                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000013AE                           302                ** AND     #%0000111110000000,D2
000013AE                           303                 * DATA REGISTER
000013AE                           304                ** CMP.L   #%0000100010000000, D2
000013AE                           305                 ** JSR      MOVEM
000013AE                           306                 * ADDRESS REGISTER (DECREMENTED)
000013AE                           307                 ** CMP.L  #%0000110010000000, D2
000013AE                           308                 ** JSR    MOVEM
000013AE                           309                  
000013AE                           310                  ** TO DO: BRANCH IF INVALID OPCODE
000013AE                           311                  *LEA - if it's not the top codes, it's LEA
000013AE  6000 0234                312                  BRA     LEA
000013B2                           313  code0101      
000013B2                           314  
000013B2  4EB9 000016E2            315                  JSR   ADDQ
000013B8                           316  
000013B8  4E72 2700                317  code0110        STOP        #$2700
000013BC                           318  
000013BC                           319  code0111       
000013BC  4EB9 00001758            320                  JSR       MOVEQ
000013C2                           321  
000013C2                           322  code1000      
000013C2  4EB9 000019AA            323                  JSR        bits8to10
000013C8  B67C 0003                324                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013CC  6700 03AE                325                  BEQ        DIVU
000013D0  6000 03CA                326                  BRA        OR       ** OTHERWISE OR
000013D4                           327                  
000013D4                           328  
000013D4                           329  code1001       
000013D4  4EB9 000017B8            330                 JSR         SUB
000013DA  4E72 2700                331  code1010       STOP        #$2700
000013DE                           332  
000013DE                           333  code1011       
000013DE  4EB9 000017D8            334                 JSR         CMP
000013E4                           335  
000013E4                           336  code1100      
000013E4  4EB9 000019AA            337                  JSR        bits8to10
000013EA  B67C 0007                338                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013EE  6700 0408                339                  BEQ        MULS
000013F2  6000 0424                340                  BRA        AND       ** OTHERWISE AND
000013F6                           341  
000013F6                           342  code1101       
000013F6  4EB9 00001B28            343                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013FC                           344                 *ADDA
000013FC  4EB9 000019AA            345                 JSR      bits8to10
00001402  B67C 0003                346                 CMP      #%011, D3  ** WORD
00001406  6700 006E                347                 BEQ      ADDA
0000140A  B67C 0007                348                 CMP      #%111, D3   ** LONG
0000140E  6700 0066                349                 BEQ      ADDA
00001412                           350                 
00001412                           351                 *ADD
00001412  B67C 0000                352                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00001416  6700 0084                353                 BEQ      ADD
0000141A  B67C 0001                354                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000141E  6700 007C                355                 BEQ      ADD
00001422  B67C 0002                356                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001426  6700 0074                357                 BEQ      ADD
0000142A  B67C 0004                358                 CMP      #%100, D3   ** BYTE TO EA
0000142E  6700 006C                359                 BEQ      ADD
00001432  B67C 0005                360                 CMP      #%101, D3   ** WORD TO EA
00001436  6700 0064                361                 BEQ      ADD
0000143A  B67C 0006                362                 CMP      #%110, D3   ** LONG TO EA
0000143E  6700 005C                363                 BEQ      ADD
00001442                           364                 
00001442                           365  
00001442                           366  code1110       
00001442                           367                  * ASR
00001442  4EB9 000019EE            368                  JSR     bits1to10
00001448  B67C 0383                369                  CMP     #%1110000011,D3
0000144C  6700 03EA                370                  BEQ     ASR
00001450                           371                  
00001450                           372                  * ASL
00001450  B67C 0387                373                  CMP     #%1110000111,D3
00001454  6700 03FE                374                  BEQ     ASL
00001458                           375                  
00001458                           376                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001458                           377                  * LSL
00001458  4244                     378                  CLR     D4
0000145A  2803                     379                  MOVE.L  D3,D4
0000145C  C8BC 00A98671            380                  AND.L   #11110001,D4
00001462  B87C 01C7                381                  CMP     #%111000111,D4
00001466  6700 0408                382                  BEQ     LSL
0000146A                           383                  
0000146A                           384                  * LSR
0000146A  B67C 038B                385                  CMP     #%1110001011,D3
0000146E  6700 041C                386                  BEQ     LSR
00001472                           387                  
00001472                           388                  * ROL
00001472                           389                  
00001472                           390                  * ROR
00001472                           391  
00001472  4E72 2700                392  code1111       STOP        #$2700
00001476                           393  
00001476                           394  ADDA    
00001476  4EB9 00001480            395                 JSR     ADDA_BUFFER
0000147C  6000 0616                396                 BRA     PRINT_BUFFER
00001480                           397                  
00001480                           398  ADDA_BUFFER
00001480  1CFC 0041                399                 MOVE.B   #'A',(A6)+
00001484  1CFC 0044                400                 MOVE.B   #'D', (A6)+  
00001488  1CFC 0044                401                 MOVE.B   #'D', (A6)+
0000148C  1CFC 0041                402                 MOVE.B   #'A', (A6)+
00001490  4EB9 00001C4A            403                 JSR      GETSIZE_ADDA
00001496  1CFC 0020                404                 MOVE.B   #' ', (A6)+
0000149A  4E75                     405                 RTS
0000149C                           406                 
0000149C                           407                 
0000149C                           408                 
0000149C                           409  *********************************************               
0000149C                           410  ADD    
0000149C  4EB9 000014A6            411                 JSR     ADD_BUFFER
000014A2  6000 05F0                412                 BRA     PRINT_BUFFER
000014A6                           413                  
000014A6                           414  ADD_BUFFER
000014A6  1CFC 0041                415                 MOVE.B   #'A',(A6)+
000014AA  1CFC 0044                416                 MOVE.B   #'D', (A6)+  
000014AE  1CFC 0044                417                 MOVE.B   #'D', (A6)+
000014B2  4EB9 00001B88            418                 JSR      GETSIZE_ADD
000014B8                           419                 
000014B8                           420                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014B8                           421                 
000014B8  BC7C 0001                422                 CMP      #1,D6
000014BC  6600 001A                423                 BNE      ADD_DIRECTION_REVERSED
000014C0  4EB9 000014FA            424                 JSR      ADD_SRC
000014C6  1CFC 002C                425                 MOVE.B   #',', (A6)+
000014CA  1CFC 0020                426                 MOVE.B   #' ', (A6)+
000014CE  4EB9 0000151E            427                 JSR      ADD_DEST
000014D4  6000 001C                428                 BRA      ADD_DONE
000014D8                           429                 
000014D8                           430                 
000014D8                           431  ADD_DIRECTION_REVERSED
000014D8                           432  
000014D8  4246                     433                 CLR      D6
000014DA  4EB9 0000151E            434                 JSR      ADD_DEST
000014E0  1CFC 002C                435                 MOVE.B   #',', (A6)+
000014E4  1CFC 0020                436                 MOVE.B   #' ', (A6)+
000014E8  4EB9 000014FA            437                 JSR      ADD_SRC
000014EE  6000 0002                438                 BRA      ADD_DONE              
000014F2                           439                 
000014F2                           440                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014F2                           441                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014F2                           442                 
000014F2                           443  ADD_DONE       
000014F2  4246                     444                 CLR      D6
000014F4  4EB9 00001A94            445                 JSR     PRINT_BUFFER
000014FA                           446  
000014FA                           447                  
000014FA                           448  
000014FA                           449  ***********************************************        
000014FA                           450  
000014FA                           451  
000014FA                           452  
000014FA                           453  ****************************************************************************************
000014FA                           454  ADD_SRC
000014FA                           455  
000014FA  4EB9 000019BC            456                  JSR    bits11to13
00001500  3803                     457                  MOVE   D3,D4
00001502  41F9 000018A8            458                  LEA     jmp_mode,A0    *Index into the table
00001508  C6FC 0006                459                  MULU   #6,D3
0000150C  4EB0 3000                460                  JSR    0(A0,D3)     
00001510  4EB9 000019CE            461                  JSR    bits14to16
00001516  4EB9 000018D8            462                  JSR    insert_num
0000151C  4E75                     463                  RTS
0000151E                           464  
0000151E                           465  
0000151E                           466  
0000151E                           467  
0000151E                           468  
0000151E                           469  ADD_DEST
0000151E  363C 0000                470                  MOVE.W #%000,D3     ;Can only have a data register.
00001522  3803                     471                  MOVE   D3,D4
00001524  41F9 000018A8            472                  LEA     jmp_mode,A0    *Index into the table
0000152A  C6FC 0006                473                  MULU    #6,D3       *Form offset     
0000152E  4EB0 3000                474                  JSR     0(A0,D3)   *Jump indirect with index
00001532                           475                  
00001532  4EB9 00001984            476                  JSR     bits5to7
00001538  4EB9 000018D8            477                  JSR     insert_num
0000153E  4E75                     478                  RTS
00001540                           479                          
00001540                           480  
00001540                           481  
00001540                           482  
00001540                           483  ADDI
00001540  4EB9 000015C8            484                  JSR     ADDI_BUFFER
00001546  4EB9 00001556            485                  JSR     ADDI_SRC
0000154C  4EB9 00001564            486                  JSR     ADDI_DES
00001552  6000 0540                487                  BRA     PRINT_BUFFER
00001556                           488                  
00001556                           489  ADDI_SRC                        
00001556  1CFC 0023                490                  MOVE.B  #'#', (A6)+
0000155A  1CFC 002C                491                  MOVE.B  #',', (A6)+
0000155E  1CFC 0020                492                  MOVE.B  #' ', (A6)+
00001562  4E75                     493                  RTS
00001564                           494                    ** TODO: IMPLEMENT THIS IN EA
00001564                           495                  ** Immediate field—Data immediately following the instruction.
00001564                           496                  **If size = 00, the data is the low-order byte of the immediate word.
00001564                           497                  **If size = 01, the data is the entire immediate word.
00001564                           498                  **If size = 10, the data is the next two immediate words. 
00001564                           499  ADDI_DES
00001564                           500                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001564                           501                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001564  4EB9 000019BC            502                 JSR      bits11to13
0000156A  B67C 0001                503                 CMP      #%001, D3 **AN
0000156E  6700 0536                504                 BEQ      INVALID_EA
00001572  B67C 0005                505                 CMP      #%101, D3 **COMPLICATED
00001576  6700 052E                506                 BEQ      INVALID_EA
0000157A  B67C 0006                507                 CMP      #%110, D3 **COMPLICATED
0000157E  6700 0526                508                 BEQ      INVALID_EA
00001582                           509                 
00001582  4EB9 000019DE            510                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001588  B67C 003C                511                 CMP      #%111100,D3 // immediate data
0000158C  6700 0518                512                 BEQ      INVALID_EA
00001590  B67C 003A                513                 CMP      #%111010,D3 // complicated
00001594  6700 0510                514                 BEQ      INVALID_EA
00001598  B67C 003B                515                 CMP      #%111011,D3 // complicated
0000159C  6700 0508                516                 BEQ      INVALID_EA
000015A0                           517                 
000015A0  4EB9 000019BC            518                 JSR      bits11to13 ** grab bits to jump with\
000015A6  3803                     519                 MOVE     D3,D4
000015A8  41F9 000018A8            520                 LEA     jmp_mode,A0    *Index into the table
000015AE  C6FC 0006                521                 MULU    #6,D3       *Form offset     
000015B2  4EB0 3000                522                 JSR     0(A0,D3)   *Jump indirect with index
000015B6                           523                 
000015B6  4243                     524                 CLR     D3
000015B8  4EB9 000019CE            525                 JSR     bits14to16
000015BE  4EB9 000018D8            526                 JSR     insert_num
000015C4  4244                     527                 CLR     D4
000015C6                           528                 
000015C6  4E75                     529                 RTS
000015C8                           530                 
000015C8                           531                             
000015C8                           532  ADDI_BUFFER
000015C8  1CFC 0041                533                 MOVE.B   #'A',(A6)+
000015CC  1CFC 0044                534                 MOVE.B   #'D', (A6)+  
000015D0  1CFC 0044                535                 MOVE.B   #'D', (A6)+
000015D4  1CFC 0049                536                 MOVE.B   #'I', (A6)+
000015D8                           537                 
000015D8  4EB9 00001C10            538                 JSR      GETSIZE_ADDI
000015DE                           539                 
000015DE                           540                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015DE                           541                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015DE  1CFC 0020                542                 MOVE.B   #' ', (A6)+
000015E2  4E75                     543                 RTS
000015E4                           544                              
000015E4                           545  LEA
000015E4  4EB9 000019AA            546                 JSR      bits8to10   // 1 1 1
000015EA  B47C 0007                547                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015EE  6600 04BA                548                 BNE      INVALID_OP
000015F2  4EB9 00001606            549                 JSR      LEA_BUFFER
000015F8  4EB9 00001618            550                 JSR      LEA_SRC
000015FE  4EB9 000016B8            551                 JSR      LEA_DEST
00001604  4E75                     552                 RTS
00001606                           553                 
00001606                           554  LEA_BUFFER 
00001606  1CFC 004C                555                 MOVE.B   #'L',(A6)+
0000160A  1CFC 0045                556                 MOVE.B   #'E', (A6)+  
0000160E  1CFC 0041                557                 MOVE.B   #'A', (A6)+
00001612  1CFC 0020                558                 MOVE.B   #' ', (A6)+
00001616  4E75                     559                 RTS
00001618                           560            
00001618                           561  LEA_SRC
00001618                           562              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00001618  4EB9 000019BC            563              JSR      bits11to13  // source mode - D3
0000161E  B67C 0000                564              CMP      #%000, D3
00001622  6700 0482                565              BEQ      INVALID_EA
00001626  B67C 0001                566              CMP      #%001, D3
0000162A  6700 047A                567              BEQ      INVALID_EA
0000162E  B67C 0003                568              CMP      #%011, D3
00001632  6700 0472                569              BEQ      INVALID_EA
00001636  B67C 0004                570              CMP      #%100, D3
0000163A  6700 046A                571              BEQ      INVALID_EA
0000163E  B67C 0005                572              CMP      #%101, D3
00001642  6700 0462                573              BEQ      INVALID_EA
00001646  B67C 0006                574              CMP      #%110, D3
0000164A  6700 045A                575              BEQ      INVALID_EA
0000164E                           576  
0000164E                           577              
0000164E                           578              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
0000164E  4EB9 000019CE            579              JSR      bits14to16 // source register - d4
00001654  B67C 0004                580              CMP      #%100, D3
00001658  6700 044C                581              BEQ      INVALID_EA
0000165C  B67C 0002                582              CMP      #%010, D3
00001660  6700 0444                583              BEQ      INVALID_EA
00001664  B67C 0003                584              CMP      #%011, D3
00001668  6700 043C                585              BEQ      INVALID_EA
0000166C                           586              
0000166C                           587  
0000166C  4EB9 000019DE            588               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001672  B67C 003C                589               CMP      #%111100,D3 // immediate data
00001676  6700 042E                590               BEQ      INVALID_EA
0000167A  B67C 003A                591               CMP      #%111010,D3 // complicated
0000167E  6700 0426                592               BEQ      INVALID_EA
00001682  B67C 003B                593               CMP      #%111011,D3 // complicated
00001686  6700 041E                594               BEQ      INVALID_EA
0000168A                           595     
0000168A  4EB9 000019BC            596               JSR      bits11to13 ** grab mode bits to jump with
00001690  3803                     597               MOVE    D3,D4
00001692                           598  
00001692  41F9 000018A8            599               LEA     jmp_mode,A0    *Index into the table
00001698  C6FC 0006                600               MULU    #6,D3       *Form offset     
0000169C  4EB0 3000                601               JSR     0(A0,D3)   *Jump indirect with index
000016A0                           602               
000016A0                           603  
000016A0  4243                     604               CLR     D3
000016A2  4EB9 000019CE            605               JSR     bits14to16
000016A8  4EB9 000018D8            606               JSR     insert_num
000016AE                           607               
000016AE  1CFC 002C                608               MOVE.B     #',', (A6)+
000016B2  1CFC 0020                609               MOVE.B     #' ', (A6)+
000016B6                           610  
000016B6  4E75                     611               RTS
000016B8                           612               
000016B8                           613  LEA_DEST    
000016B8  4244                     614                  CLR     D4
000016BA  41F9 000018A8            615                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
000016C0  363C 0001                616                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
000016C4  3803                     617                  MOVE    D3,D4
000016C6  41F9 000018A8            618                  LEA     jmp_mode,A0    *Index into the table
000016CC  C6FC 0006                619                  MULU    #6,D3       *Form offset     
000016D0  4EB0 3000                620                  JSR     0(A0,D3)   *Jump indirect with index
000016D4                           621                  
000016D4  4EB9 00001984            622                  JSR     bits5to7
000016DA  4EB9 000018D8            623                  JSR     insert_num
000016E0                           624                  
000016E0  4E75                     625                  RTS
000016E2                           626  
000016E2                           627  
000016E2                           628  ADDQ
000016E2  4EB9 00001740            629                  JSR     ADDQ_BUFFER
000016E8  4EB9 000016FE            630                  JSR     ADDQ_SRC
000016EE  1CFC 002C                631                  MOVE.B  #',',(A6)+
000016F2  1CFC 0020                632                  MOVE.B  #' ',(A6)+
000016F6  4EB9 00001716            633                  JSR     ADDQ_DEST
000016FC  4E75                     634                  RTS                 ;BRA     PRINT_BUFFER
000016FE                           635  
000016FE                           636  ADDQ_SRC
000016FE  4EB9 00001984            637                  JSR     bits5to7
00001704  1CFC 0023                638                  MOVE.B  #'#',(A6)+
00001708  183C 0000                639                  MOVE.B  #%000,D4
0000170C  4EB9 000018D8            640                  JSR     insert_num
00001712  4244                     641                  CLR     D4
00001714  4E75                     642                  RTS
00001716                           643                  
00001716                           644  ADDQ_DEST
00001716  4EB9 000019BC            645                 JSR      bits11to13
0000171C  3803                     646                 MOVE     D3,D4
0000171E  41F9 000018A8            647                 LEA     jmp_mode,A0    *Index into the table
00001724  C6FC 0006                648                 MULU    #6,D3       *Form offset     
00001728  4EB0 3000                649                 JSR     0(A0,D3)   *Jump indirect with index
0000172C  4243                     650                 CLR     D3
0000172E  4EB9 000019CE            651                 JSR     bits14to16
00001734  4EB9 000018D8            652                 JSR     insert_num
0000173A  4244                     653                 CLR     D4
0000173C  4243                     654                 CLR     D3
0000173E  4E75                     655                 RTS
00001740                           656                 
00001740                           657  
00001740                           658  ADDQ_BUFFER
00001740  1CFC 0041                659                 MOVE.B   #'A',(A6)+
00001744  1CFC 0044                660                 MOVE.B   #'D', (A6)+  
00001748  1CFC 0044                661                 MOVE.B   #'D', (A6)+
0000174C  1CFC 0051                662                 MOVE.B   #'Q', (A6)+
00001750  4EB9 00001B4E            663                 JSR      GETSIZE_ADDQ
00001756                           664                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00001756                           665                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001756  4E75                     666                 RTS
00001758                           667                 
00001758                           668  MOVEQ
00001758  4EB9 00001762            669                  JSR     MOVEQ_BUFFER
0000175E  6000 0334                670                  BRA     PRINT_BUFFER
00001762                           671  
00001762                           672  MOVEQ_BUFFER
00001762  1CFC 004D                673                 MOVE.B   #'M',(A6)+
00001766  1CFC 004F                674                 MOVE.B   #'O', (A6)+  
0000176A  1CFC 0056                675                 MOVE.B   #'V', (A6)+
0000176E  1CFC 0045                676                 MOVE.B   #'E', (A6)+
00001772  1CFC 0051                677                 MOVE.B   #'Q', (A6)+
00001776  1CFC 0020                678                 MOVE.B   #' ', (A6)+
0000177A  4E75                     679                 RTS
0000177C                           680                 
0000177C                           681                 
0000177C                           682  
0000177C                           683              
0000177C                           684  
0000177C                           685  DIVU
0000177C  4EB9 00001786            686                  JSR     DIVU_BUFFER
00001782  6000 0310                687                  BRA     PRINT_BUFFER
00001786                           688  
00001786                           689  DIVU_BUFFER
00001786  1CFC 0044                690                 MOVE.B   #'D',(A6)+
0000178A  1CFC 0049                691                 MOVE.B   #'I', (A6)+  
0000178E  1CFC 0056                692                 MOVE.B   #'V', (A6)+
00001792  1CFC 0055                693                 MOVE.B   #'U', (A6)+
00001796  1CFC 0020                694                 MOVE.B   #' ', (A6)+
0000179A  4E75                     695                 RTS  
0000179C                           696  OR    
0000179C  4EB9 000017A6            697                 JSR     OR_BUFFER
000017A2  6000 02F0                698                 BRA     PRINT_BUFFER
000017A6                           699                  
000017A6                           700  OR_BUFFER
000017A6  1CFC 004F                701                 MOVE.B   #'O',(A6)+
000017AA  1CFC 0052                702                 MOVE.B   #'R', (A6)+  
000017AE  1CFC 002E                703                 MOVE.B   #'.', (A6)+
000017B2                           704                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017B2                           705                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017B2                           706                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017B2  1CFC 0020                707                 MOVE.B   #' ', (A6)+
000017B6  4E75                     708                 RTS   
000017B8                           709  
000017B8                           710  SUB   
000017B8  4EB9 000017C2            711                 JSR     SUB_BUFFER
000017BE  6000 02D4                712                 BRA     PRINT_BUFFER               
000017C2                           713  
000017C2                           714  SUB_BUFFER
000017C2  1CFC 0053                715                 MOVE.B   #'S',(A6)+
000017C6  1CFC 0055                716                 MOVE.B   #'U', (A6)+  
000017CA  1CFC 0042                717                 MOVE.B   #'B', (A6)+
000017CE  1CFC 002E                718                 MOVE.B   #'.', (A6)+
000017D2                           719                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017D2                           720                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017D2                           721                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017D2  1CFC 0020                722                 MOVE.B   #' ', (A6)+
000017D6  4E75                     723                 RTS  
000017D8                           724  CMP   
000017D8  4EB9 000017E2            725                 JSR     CMP_BUFFER
000017DE  6000 02B4                726                 BRA     PRINT_BUFFER
000017E2                           727                  
000017E2                           728  CMP_BUFFER
000017E2  1CFC 0043                729                 MOVE.B   #'C',(A6)+
000017E6  1CFC 004D                730                 MOVE.B   #'M', (A6)+  
000017EA  1CFC 0050                731                 MOVE.B   #'P', (A6)+
000017EE  1CFC 002E                732                 MOVE.B   #'.', (A6)+
000017F2                           733                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017F2                           734                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017F2                           735                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017F2  1CFC 0020                736                 MOVE.B   #' ', (A6)+
000017F6  4E75                     737                 RTS   
000017F8                           738                 
000017F8                           739  MULS
000017F8  4EB9 00001802            740                  JSR     MULS_BUFFER
000017FE  6000 0294                741                  BRA     PRINT_BUFFER
00001802                           742  
00001802                           743  MULS_BUFFER
00001802  1CFC 004D                744                 MOVE.B   #'M',(A6)+
00001806  1CFC 0055                745                 MOVE.B   #'U', (A6)+  
0000180A  1CFC 004C                746                 MOVE.B   #'L', (A6)+
0000180E  1CFC 0053                747                 MOVE.B   #'S', (A6)+
00001812  1CFC 0020                748                 MOVE.B   #' ', (A6)+
00001816  4E75                     749                 RTS
00001818                           750  
00001818                           751  AND    
00001818  4EB9 00001822            752                 JSR     AND_BUFFER
0000181E  6000 0274                753                 BRA     PRINT_BUFFER
00001822                           754                  
00001822                           755  AND_BUFFER
00001822  1CFC 0041                756                 MOVE.B   #'A',(A6)+
00001826  1CFC 004E                757                 MOVE.B   #'N', (A6)+  
0000182A  1CFC 0044                758                 MOVE.B   #'D', (A6)+
0000182E  1CFC 002E                759                 MOVE.B   #'.', (A6)+
00001832                           760                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001832                           761                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001832                           762                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001832  1CFC 0020                763                 MOVE.B   #' ', (A6)+
00001836  4E75                     764                 RTS    
00001838                           765  
00001838                           766  ASR     
00001838  4EB9 00001842            767                  JSR     ASR_BUFFER
0000183E  6000 0254                768                  BRA     PRINT_BUFFER
00001842                           769  
00001842                           770  ASR_BUFFER
00001842  1CFC 0041                771                 MOVE.B   #'A',(A6)+
00001846  1CFC 0053                772                 MOVE.B   #'S', (A6)+  
0000184A  1CFC 0052                773                 MOVE.B   #'R', (A6)+
0000184E  1CFC 0020                774                 MOVE.B   #' ', (A6)+
00001852  4E75                     775                 RTS      
00001854                           776  
00001854                           777  ASL     
00001854  4EB9 0000185E            778                  JSR     ASL_BUFFER
0000185A  6000 0238                779                  BRA     PRINT_BUFFER
0000185E                           780  
0000185E                           781  ASL_BUFFER
0000185E  1CFC 0041                782                 MOVE.B   #'A',(A6)+
00001862  1CFC 0053                783                 MOVE.B   #'S', (A6)+  
00001866  1CFC 004C                784                 MOVE.B   #'L', (A6)+
0000186A  1CFC 0020                785                 MOVE.B   #' ', (A6)+
0000186E  4E75                     786                 RTS     
00001870                           787  
00001870                           788  LSL     
00001870  4EB9 0000187A            789                  JSR     LSL_BUFFER
00001876  6000 021C                790                  BRA     PRINT_BUFFER
0000187A                           791  
0000187A                           792  LSL_BUFFER
0000187A  1CFC 004C                793                 MOVE.B   #'L',(A6)+
0000187E  1CFC 0053                794                 MOVE.B   #'S', (A6)+  
00001882  1CFC 004C                795                 MOVE.B   #'L', (A6)+
00001886  1CFC 0020                796                 MOVE.B   #' ', (A6)+
0000188A  4E75                     797                 RTS     
0000188C                           798  
0000188C                           799  LSR     
0000188C  4EB9 00001896            800                  JSR     LSR_BUFFER
00001892  6000 0200                801                  BRA     PRINT_BUFFER
00001896                           802  
00001896                           803  LSR_BUFFER
00001896  1CFC 004C                804                 MOVE.B   #'L',(A6)+
0000189A  1CFC 0053                805                 MOVE.B   #'S', (A6)+  
0000189E  1CFC 0052                806                 MOVE.B   #'R', (A6)+
000018A2  1CFC 0020                807                 MOVE.B   #' ', (A6)+
000018A6  4E75                     808                 RTS       
000018A8                           809                 
000018A8                           810  jmp_mode
000018A8  4EF9 00001A00            811                  JMP     MODE000  ** DN
000018AE  4EF9 00001A06            812                  JMP     MODE001  ** AN
000018B4  4EF9 00001A0E            813                  JMP     MODE010  ** (AN)
000018BA  4EF9 00001A18            814                  JMP     MODE011  ** (AN)+   
000018C0  4EF9 00001A22            815                  JMP     MODE100  ** -(AN)
000018C6  4EF9 00001A30            816                  JMP     MODE101  **INVALID
000018CC  4EF9 00001A3A            817                  JMP     MODE110  **INVALID
000018D2  4EF9 00001A44            818                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000018D8                           819  
000018D8                           820                  
000018D8                           821  insert_num
000018D8                           822                  
000018D8                           823                  ;get number from D3
000018D8  B67C 0000                824                  CMP     #%000,D3       ;0
000018DC  6600 000A                825                  BNE     ONE         
000018E0  1CFC 0030                826                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000018E4  6000 006E                827                  BRA     FINISHER
000018E8                           828                  
000018E8  B67C 0001                829  ONE             CMP     #%001,D3       ;1
000018EC  6600 000A                830                  BNE     TWO 
000018F0  1CFC 0031                831                  MOVE.B  #'1',(A6)+
000018F4  6000 005E                832                  BRA     FINISHER
000018F8                           833  
000018F8                           834                  
000018F8  B67C 0002                835  TWO             CMP     #%010,D3        ;2
000018FC  6600 000A                836                  BNE     THREE
00001900  1CFC 0032                837                  MOVE.B  #'2',(A6)+
00001904  6000 004E                838                  BRA     FINISHER
00001908                           839                  
00001908  B67C 0003                840  THREE           CMP     #%011,D3        ;3
0000190C  6600 000A                841                  BNE     FOUR
00001910  1CFC 0033                842                  MOVE.B  #'3',(A6)+
00001914  6000 003E                843                  BRA     FINISHER
00001918                           844                  
00001918  B67C 0004                845  FOUR            CMP     #%100,D3        ;4
0000191C  6600 000A                846                  BNE     FIVE
00001920  1CFC 0034                847                  MOVE.B  #'4',(A6)+
00001924  6000 002E                848                  BRA     FINISHER
00001928                           849                  
00001928  B67C 0005                850  FIVE            CMP     #%101,D3        ;5
0000192C  6600 000A                851                  BNE     SIX
00001930  1CFC 0035                852                  MOVE.B  #'5',(A6)+
00001934  6000 001E                853                  BRA     FINISHER
00001938                           854                  
00001938  B67C 0006                855  SIX             CMP     #%110,D3        ;6
0000193C  6600 000A                856                  BNE     SEVEN
00001940  1CFC 0036                857                  MOVE.B  #'6',(A6)+
00001944  6000 000E                858                  BRA     FINISHER
00001948                           859                  
00001948  B67C 0007                860  SEVEN           CMP     #%111,D3        ;7
0000194C  1CFC 0037                861                  MOVE.B  #'7',(A6)+
00001950  6000 0002                862                  BRA     FINISHER
00001954                           863                  
00001954                           864  FINISHER                
00001954                           865                  
00001954                           866                  ;check D4, do we need to do stuff?
00001954  B87C 0002                867                  CMP     #%010,D4
00001958  6600 0008                868                  BNE     POSTINCR
0000195C  1CFC 0029                869                  MOVE.B  #')',(A6)+
00001960  4E75                     870                  RTS
00001962                           871                  
00001962  B87C 0003                872  POSTINCR        CMP     #%011,D4
00001966  6600 000C                873                  BNE     ONEPAREN
0000196A  1CFC 0029                874                  MOVE.B  #')',(A6)+
0000196E  1CFC 002B                875                  MOVE.B  #'+',(A6)+
00001972  4E75                     876                  RTS
00001974                           877                  
00001974  B87C 0004                878  ONEPAREN        CMP     #%100,D4
00001978  6600 0008                879                  BNE     DONE
0000197C  1CFC 0029                880                  MOVE.B  #')',(A6)+                
00001980                           881  
00001980  4244                     882                  CLR     D4
00001982  4E75                     883  DONE            RTS
00001984                           884  
00001984                           885          
00001984                           886                 
00001984                           887  bits5to7
00001984  4243                     888                 CLR      D3
00001986  4EB9 00001B28            889                 JSR      COPY_OPCODE  // opcode copied to D2
0000198C  C47C 0E00                890                 AND      #%0000111000000000, D2
00001990  E09A                     891                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001992  E29A                     892                 ROR.L    #1, D2
00001994  3602                     893                 MOVE.W   D2,D3 // moving isolated bits into d3
00001996  4E75                     894                 RTS
00001998                           895                 
00001998                           896  bits5to8
00001998  4243                     897                 CLR      D3
0000199A  4EB9 00001B28            898                 JSR      COPY_OPCODE  // opcode copied to D2
000019A0  C47C 0F00                899                 AND      #%0000111100000000, D2
000019A4  E09A                     900                 ROR.L    #8, D2          // rotate bits so isolated at the end
000019A6  3602                     901                 MOVE.W   D2,D3 // moving isolated bits into d3
000019A8  4E75                     902                 RTS
000019AA                           903                 
000019AA                           904  bits8to10
000019AA  4243                     905                 CLR      D3
000019AC  4EB9 00001B28            906                 JSR      COPY_OPCODE  // opcode copied to D2
000019B2  C47C 01C0                907                 AND      #%0000000111000000, D2
000019B6  EC9A                     908                 ROR.L    #6, D2          // rotate bits so isolated at the end
000019B8  3602                     909                 MOVE.W   D2,D3 // moving isolated bits into d3
000019BA  4E75                     910                 RTS               
000019BC                           911             
000019BC                           912  bits11to13
000019BC  4243                     913                 CLR      D3
000019BE  4EB9 00001B28            914                 JSR      COPY_OPCODE  // opcode copied to D2
000019C4  C47C 0038                915                 AND      #%0000000000111000, D2
000019C8  E69A                     916                 ROR.L    #3, D2          // rotate bits so isolated at the end
000019CA  3602                     917                 MOVE.W   D2,D3 // moving isolated bits into d3
000019CC  4E75                     918                 RTS
000019CE                           919             
000019CE                           920  bits14to16
000019CE  4243                     921                 CLR      D3
000019D0  4EB9 00001B28            922                 JSR      COPY_OPCODE  // opcode copied to D2
000019D6  C47C 0007                923                 AND      #%0000000000000111, D2
000019DA  3602                     924                 MOVE.W   D2,D3 // moving isolated bits into d3
000019DC  4E75                     925                 RTS
000019DE                           926  bits11to16
000019DE  4243                     927                 CLR      D3
000019E0  4EB9 00001B28            928                 JSR      COPY_OPCODE  // opcode copied to D2
000019E6  C47C 003F                929                 AND      #%0000000000111111, D2
000019EA  3602                     930                 MOVE.W   D2,D3 // moving isolated bits into d3
000019EC  4E75                     931                 RTS
000019EE                           932  bits1to10
000019EE  4243                     933                 CLR      D3
000019F0  4EB9 00001B28            934                 JSR      COPY_OPCODE  // opcode copied to D2
000019F6  C47C FFC0                935                 AND      #%1111111111000000, D2
000019FA  EC9A                     936                 ROR.L    #6, D2
000019FC  3602                     937                 MOVE.W   D2,D3 // moving isolated bits into d3
000019FE  4E75                     938                 RTS
00001A00                           939  ** DN       
00001A00                           940  MODE000         
00001A00  1CFC 0044                941                  MOVE.B  #'D',(A6)+     
00001A04  4E75                     942                  RTS
00001A06                           943  
00001A06                           944  ** AN
00001A06                           945  MODE001         
00001A06  4EB9 00001A4C            946                  JSR ADDRESS_BUFFER  
00001A0C  4E75                     947                  RTS      
00001A0E                           948  
00001A0E                           949   ** (AN)
00001A0E                           950  MODE010         
00001A0E  1CFC 0028                951                  MOVE.B  #'(', (A6)+
00001A12  1CFC 0041                952                  MOVE.B  #'A',(A6)+  
00001A16  4E75                     953                  RTS      
00001A18                           954  
00001A18                           955  ** (AN)+ 
00001A18                           956  MODE011         
00001A18  1CFC 0028                957                  MOVE.B  #'(', (A6)+
00001A1C  1CFC 0041                958                  MOVE.B  #'A',(A6)+ 
00001A20  4E75                     959                  RTS       
00001A22                           960  
00001A22                           961   ** -(AN)
00001A22                           962  MODE100         
00001A22  1CFC 002D                963                  MOVE.B  #'-', (A6)+
00001A26  1CFC 0028                964                  MOVE.B  #'(', (A6)+
00001A2A  1CFC 0041                965                  MOVE.B  #'A',(A6)+
00001A2E  4E75                     966                  RTS
00001A30                           967                  
00001A30                           968  **INVALID               
00001A30                           969  MODE101         
00001A30  1CFC 0028                970                  MOVE.B  #'(', (A6)+
00001A34  1CFC 0041                971                  MOVE.B  #'A',(A6)+ 
00001A38  4E75                     972                  RTS
00001A3A                           973                  
00001A3A                           974  **INVALID
00001A3A                           975  MODE110         
00001A3A  1CFC 0028                976                  MOVE.B  #'(', (A6)+
00001A3E  1CFC 0041                977                  MOVE.B  #'A',(A6)+
00001A42  4E75                     978                  RTS  
00001A44                           979  
00001A44                           980  ** ABSOLUTE AND IMMEDIATE            
00001A44                           981  MODE111         
00001A44                           982                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001A44  4EB9 00001A52            983                 JSR ABSOLUTE_BUFFER  
00001A4A  4E75                     984                 RTS            
00001A4C                           985                                          
00001A4C                           986  ADDRESS_BUFFER
00001A4C  1CFC 0041                987                  MOVE.B  #'A',(A6)+ 
00001A50  4E75                     988                  RTS
00001A52                           989                 
00001A52                           990  ABSOLUTE_BUFFER
00001A52  4243                     991                 CLR      D3
00001A54  3604                     992                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001A56  1CF8 0024                993                 MOVE.B   '$', (A6)+
00001A5A  B67C 0000                994                 CMP.W    #%000, D3
00001A5E  6700 0010                995                 BEQ      ABSOLUTE_WORD_BUFFER
00001A62  4243                     996                 CLR      D3
00001A64  3604                     997                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001A66  B67C 0001                998                 CMP.W    #%001, D3
00001A6A  6700 0016                999                 BEQ      ABSOLUTE_LONG_BUFFER
00001A6E  4E75                    1000                 RTS
00001A70                          1001                 
00001A70                          1002  ABSOLUTE_WORD_BUFFER
00001A70                          1003                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A70                          1004                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A70  1CFC 0046               1005                         MOVE.B #'F', (A6)+ 
00001A74  1CFC 0046               1006                         MOVE.B #'F', (A6)+ 
00001A78  1CFC 0046               1007                         MOVE.B #'F', (A6)+ 
00001A7C  1CFC 0046               1008                         MOVE.B #'F', (A6)+ 
00001A80  4E75                    1009                         RTS       
00001A82                          1010                    
00001A82                          1011  ABSOLUTE_LONG_BUFFER       
00001A82                          1012                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A82                          1013                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A82  1CFC 0047               1014                         MOVE.B #'G', (A6)+ 
00001A86  1CFC 0047               1015                         MOVE.B #'G', (A6)+ 
00001A8A  1CFC 0047               1016                         MOVE.B #'G', (A6)+ 
00001A8E  1CFC 0047               1017                         MOVE.B #'G', (A6)+
00001A92  4E75                    1018                         RTS 
00001A94                          1019                                                      
00001A94                          1020  
00001A94                          1021  PRINT_BUFFER    
00001A94  1CFC 0000               1022                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001A98  43F9 00001CA2           1023                 LEA      BUFFER, A1
00001A9E  303C 000E               1024                 MOVE.W   #14,D0
00001AA2  4E4F                    1025                 TRAP     #15
00001AA4  4E75                    1026                 RTS
00001AA6                          1027                 
00001AA6                          1028                 
00001AA6                          1029  
00001AA6                          1030  INVALID_EA  
00001AA6                          1031                  * TODO: IMPLEMENT
00001AA6                          1032                  *** CLEAR OUT A6
00001AA6                          1033                  ** PUT INVALID MESSAGE INTO A6
00001AA6  6000 F851               1034                  BRA EXIT
00001AAA                          1035  INVALID_OP  
00001AAA                          1036                  ** TODO: IMPLEMENT
00001AAA                          1037                 *** CLEAR OUT A6
00001AAA                          1038                  ** PUT INVALID MESSAGE INTO A6
00001AAA  6000 F84D               1039                  BRA EXIT             
00001AAE                          1040                  
00001AAE  43F8 123B               1041  NOP                 LEA     NOP_disp,A1          
00001AB2  103C 000E               1042                      MOVE.B  #14,D0
00001AB6  4E4F                    1043                      TRAP    #15
00001AB8  6000 F83F               1044                      BRA     EXIT
00001ABC                          1045                   
00001ABC                          1046  RTS      
00001ABC  43F8 12A2               1047                      LEA     RTS_disp,A1          
00001AC0  103C 000E               1048                      MOVE.B  #14,D0
00001AC4  4E4F                    1049                      TRAP    #15 
00001AC6  6000 F831               1050                      BRA     EXIT
00001ACA                          1051  JSR      
00001ACA  4DF9 00001CA2           1052                      LEA     BUFFER, A6
00001AD0  1CFC 004A               1053                      MOVE.B #'J', (A6)+
00001AD4  1CFC 0053               1054                      MOVE.B #'S', (A6)+
00001AD8  1CFC 0052               1055                      MOVE.B #'R', (A6)+
00001ADC  1CFC 0020               1056                      MOVE.B #' ', (A6)+
00001AE0  43F9 00001CA2           1057                      LEA     BUFFER, A1
00001AE6                          1058                      ** BITS 10 - 12 MODE       
00001AE6                          1059                      ** BITS 13 - 16 REGISTER
00001AE6  103C 000E               1060                      MOVE.B  #14,D0
00001AEA  4E4F                    1061                      TRAP    #15 
00001AEC  6000 F80B               1062                      BRA     EXIT
00001AF0                          1063                    
00001AF0                          1064  MOVEM      
00001AF0                          1065                     
00001AF0                          1066                      ** SIZE SUBROUTINE
00001AF0                          1067                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001AF0  C47C 0040               1068                      AND #%0000000001000000,D2 
00001AF4                          1069                      * WORD
00001AF4  B4BC 00000040           1070                      CMP.L   #%0000000001000000,D2
00001AFA  4EB9 00001B10           1071                      JSR     MOVEM_W 
00001B00                          1072                      *LONG
00001B00  B4BC 00000040           1073                      CMP.L   #%0000000001000000,D2 
00001B06                          1074                     ** JSR     MOVEM_L
00001B06  103C 000E               1075                      MOVE.B  #14,D0
00001B0A  4E4F                    1076                      TRAP    #15
00001B0C  6000 F7EB               1077                      BRA     EXIT 
00001B10                          1078                      
00001B10                          1079  MOVEM_W 
00001B10  43F8 1250               1080                       LEA     MOVEM_disp,A1
00001B14                          1081                      * PRINT MOVEM
00001B14  103C 000E               1082                       MOVE.B  #14,D0
00001B18  4E4F                    1083                       TRAP    #15
00001B1A                          1084          
00001B1A                          1085                      * PRINT WORD PORTION
00001B1A  41F8 12E7               1086                       LEA     size_w, A0
00001B1E  103C 000E               1087                       MOVE.B  #14,D0
00001B22  4E4F                    1088                       TRAP    #15 
00001B24                          1089          
00001B24  6000 F7D3               1090                       BRA     EXIT 
00001B28                          1091       
00001B28                          1092     
00001B28                          1093  COPY_OPCODE 
00001B28                          1094                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001B28  4242                    1095                       CLR    D2  
00001B2A  3405                    1096                       MOVE.W D5,D2 
00001B2C  4E75                    1097                       RTS  
00001B2E                          1098  
00001B2E                          1099  PRINT_ADDRESS     
00001B2E  4242                    1100                   CLR         D2
00001B30  143C 0010               1101                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B34  220A                    1102                   MOVE.L      A2,D1        
00001B36  103C 000F               1103                   MOVE.B      #15,D0          
00001B3A  4E4F                    1104                   TRAP        #15            
00001B3C  1CFC 0020               1105                   MOVE.B      #' ', (A6)+
00001B40  1CFC 0020               1106                   MOVE.B      #' ', (A6)+
00001B44  1CFC 0020               1107                   MOVE.B      #' ', (A6)+
00001B48  1CFC 0020               1108                   MOVE.B      #' ', (A6)+
00001B4C  4E75                    1109                   RTS                    
00001B4E                          1110                   
00001B4E                          1111                   
00001B4E                          1112  ***************************
00001B4E                          1113  
00001B4E                          1114  GETSIZE_ADDQ
00001B4E                          1115                   
00001B4E                          1116                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001B4E                          1117                 
00001B4E  4EB8 19AA               1118             JSR      bits8to10
00001B52  B67C 0000               1119             CMP      #%000,D3
00001B56  6600 000C               1120             BNE      ADDQ_NOTBYTE
00001B5A  4EB9 00001C72           1121             JSR      SIZEISBYTE
00001B60  4243                    1122             CLR      D3
00001B62  4E75                    1123             RTS
00001B64                          1124             
00001B64                          1125  ADDQ_NOTBYTE
00001B64  B67C 0001               1126             CMP      #%001,D3
00001B68  6600 000C               1127             BNE      ADDQ_NOTWORD
00001B6C  4EB9 00001C82           1128             JSR      SIZEISWORD
00001B72  4243                    1129             CLR      D3
00001B74  4E75                    1130             RTS
00001B76                          1131             
00001B76                          1132  ADDQ_NOTWORD
00001B76  B67C 0002               1133             CMP      #%010,D3
00001B7A  6600 FF2A               1134             BNE      INVALID_EA
00001B7E  4EB9 00001C92           1135             JSR      SIZEISLONG
00001B84  4243                    1136             CLR      D3
00001B86  4E75                    1137             RTS
00001B88                          1138                   
00001B88                          1139                                   
00001B88                          1140  ****************************
00001B88                          1141  
00001B88                          1142                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001B88                          1143                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001B88                          1144                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001B88                          1145  GETSIZE_ADD
00001B88  4EB8 19AA               1146              JSR     bits8to10
00001B8C  B67C 0000               1147              CMP     #%000,D3
00001B90  6600 0010               1148              BNE     ADD_NOTBYTE
00001B94  4EB9 00001C72           1149              JSR     SIZEISBYTE
00001B9A  3C3C 0001               1150              MOVE    #1,D6
00001B9E  4243                    1151              CLR     D3
00001BA0  4E75                    1152              RTS
00001BA2                          1153          
00001BA2                          1154  ADD_NOTBYTE 
00001BA2  B67C 0001               1155              CMP     #%001,D3
00001BA6  6600 0010               1156              BNE     ADD_NOTWORD
00001BAA  4EB9 00001C82           1157              JSR     SIZEISWORD
00001BB0  3C3C 0001               1158              MOVE    #1,D6
00001BB4  4243                    1159              CLR     D3
00001BB6  4E75                    1160              RTS
00001BB8                          1161              
00001BB8                          1162  ADD_NOTWORD
00001BB8  B67C 0002               1163              CMP     #%010,D3
00001BBC  6600 0010               1164              BNE     ADD_NOTLEFT
00001BC0  4EB9 00001C92           1165              JSR     SIZEISLONG
00001BC6  3C3C 0001               1166              MOVE    #1,D6
00001BCA  4243                    1167              CLR     D3
00001BCC  4E75                    1168              RTS
00001BCE                          1169              
00001BCE                          1170  ADD_NOTLEFT     ;check other direction
00001BCE  B67C 0004               1171              CMP     #%100,D3
00001BD2  6600 0010               1172              BNE     ADD_NOTRIGHTBYTE
00001BD6  4EB9 00001C72           1173              JSR     SIZEISBYTE
00001BDC  3C3C 0002               1174              MOVE    #2,D6
00001BE0  4243                    1175              CLR     D3
00001BE2  4E75                    1176              RTS
00001BE4                          1177              
00001BE4                          1178  ADD_NOTRIGHTBYTE
00001BE4  B67C 0005               1179              CMP     #%101,D3
00001BE8  6600 0010               1180              BNE     ADD_NOTRIGHTWORD
00001BEC  4EB9 00001C82           1181              JSR     SIZEISWORD
00001BF2  3C3C 0002               1182              MOVE    #2,D6
00001BF6  4243                    1183              CLR     D3
00001BF8  4E75                    1184              RTS
00001BFA                          1185  
00001BFA                          1186  ADD_NOTRIGHTWORD
00001BFA  B67C 0006               1187              CMP     #%110,D3
00001BFE  6600 FEA6               1188              BNE     INVALID_EA
00001C02  4EB9 00001C92           1189              JSR     SIZEISLONG
00001C08  3C3C 0002               1190              MOVE    #2,D6
00001C0C  4243                    1191              CLR     D3
00001C0E  4E75                    1192              RTS 
00001C10                          1193                               
00001C10                          1194                       
00001C10                          1195                       
00001C10                          1196  *****************************                  
00001C10                          1197  GETSIZE_ADDI
00001C10  4EB8 19AA               1198          JSR     bits8to10
00001C14  B67C 0000               1199          CMP     #%000,D3
00001C18  6600 000C               1200          BNE     ADDI_NOTBYTE
00001C1C  4EB9 00001C72           1201          JSR     SIZEISBYTE
00001C22  4243                    1202          CLR     D3
00001C24  4E75                    1203          RTS
00001C26                          1204  
00001C26                          1205  ADDI_NOTBYTE
00001C26  B67C 0001               1206          CMP     #%001,D3
00001C2A  6600 000C               1207          BNE     ADDI_NOTWORD
00001C2E  4EB9 00001C82           1208          JSR     SIZEISWORD
00001C34  4243                    1209          CLR     D3
00001C36  4E75                    1210          RTS
00001C38                          1211          
00001C38                          1212  ADDI_NOTWORD
00001C38  B67C 0002               1213          CMP     #%010,D3
00001C3C  6600 FE68               1214          BNE     INVALID_EA
00001C40  4EB9 00001C92           1215          JSR     SIZEISLONG
00001C46  4243                    1216          CLR     D3
00001C48  4E75                    1217          RTS
00001C4A                          1218          
00001C4A                          1219                              
00001C4A                          1220                       
00001C4A                          1221  ********************************          
00001C4A                          1222                       
00001C4A                          1223                       
00001C4A                          1224  ********************************                     
00001C4A                          1225  GETSIZE_ADDA
00001C4A  4EB8 19AA               1226          JSR     bits8to10
00001C4E  B67C 0003               1227          CMP     #%011,D3
00001C52  6600 000C               1228          BNE     ADDA_NOTWORD
00001C56  4EB9 00001C82           1229          JSR     SIZEISWORD
00001C5C  4243                    1230          CLR     D3
00001C5E  4E75                    1231          RTS
00001C60                          1232          
00001C60                          1233  
00001C60                          1234          
00001C60                          1235  ADDA_NOTWORD
00001C60  B67C 0007               1236          CMP     #%111,D3
00001C64  6600 FE40               1237          BNE     INVALID_EA
00001C68  4EB9 00001C92           1238          JSR     SIZEISLONG
00001C6E  4243                    1239          CLR     D3
00001C70  4E75                    1240          RTS
00001C72                          1241  **********************************        
00001C72                          1242      
00001C72                          1243  SIZEISBYTE
00001C72  1CFC 002E               1244         MOVE.B   #'.',(A6)+
00001C76  1CFC 0042               1245         MOVE.B   #'B',(A6)+
00001C7A  1CFC 0020               1246         MOVE.B   #' ',(A6)+
00001C7E  4243                    1247         CLR      D3
00001C80  4E75                    1248         RTS
00001C82                          1249  
00001C82                          1250  SIZEISWORD    
00001C82  1CFC 002E               1251         MOVE.B   #'.',(A6)+
00001C86  1CFC 0057               1252         MOVE.B   #'W',(A6)+
00001C8A  1CFC 0020               1253         MOVE.B   #' ',(A6)+
00001C8E  4243                    1254         CLR      D3
00001C90  4E75                    1255         RTS
00001C92                          1256                  
00001C92                          1257  SIZEISLONG    
00001C92  1CFC 002E               1258         MOVE.B   #'.',(A6)+
00001C96  1CFC 004C               1259         MOVE.B   #'L',(A6)+
00001C9A  1CFC 0020               1260         MOVE.B   #' ',(A6)+
00001C9E                          1261  
00001C9E  4243                    1262         CLR      D3
00001CA0  4E75                    1263         RTS
00001CA2                          1264                  
00001CA2                          1265       
00001CA2= 00000001                1266  BUFFER DC.L 1     
00001CA6                          1267      INCLUDE 'helpers.x68'
00001CA6  1019                    1268  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001CA8  4EB9 00001CC0           1269                          JSR     sub_breakDownAs     *breaks down ASCII code
00001CAE  D280                    1270                          ADD.L   D0,D1               *load that char into D1
00001CB0  0C11 0000               1271                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001CB4  6700 0006               1272                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001CB8  E989                    1273                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001CBA  60EA                    1274                          BRA     sub_AsToHeLoop      *loops through again
00001CBC                          1275                          
00001CBC  2E01                    1276  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001CBE  4E75                    1277                          RTS
00001CC0  B03C 0030               1278  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001CC4  6D00 002A               1279                          BLT     as_ERROR                        
00001CC8                          1280                          
00001CC8  B03C 0039               1281                          CMP.B    #$39,D0            *is it an A-F letter?
00001CCC  6E00 000C               1282                          BGT     as_LETTER
00001CD0                          1283                          
00001CD0  6000 0002               1284                          BRA     as_NUMBER
00001CD4                          1285                                                 
00001CD4  0400 0030               1286  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001CD8  4E75                    1287                          RTS
00001CDA                          1288                          
00001CDA  B03C 0041               1289  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001CDE  6D00 0010               1290                          BLT     as_ERROR
00001CE2                          1291                          
00001CE2  B03C 0046               1292                          CMP.B     #$46, D0
00001CE6  6E00 0008               1293                          BGT     as_ERROR
00001CEA                          1294                          
00001CEA  0400 0037               1295                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001CEE  4E75                    1296                          RTS
00001CF0                          1297                          
00001CF0  43F9 65727200           1298  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001CF6  103C 000D               1299                          MOVE.B  #13,D0
00001CFA  4E4F                    1300                          TRAP    #15  
00001CFC                          1301  sub_StartReadingData    
00001CFC  0801 0000               1302                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001D00  6600 0006               1303                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001D04                          1304                          
00001D04  7E00                    1305                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001D06  4E75                    1306  srdFinish               RTS
00001D08                          1307  
00001D08  43F8 1174               1308  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D0C  103C 000E               1309                          MOVE.B  #14,D0
00001D10  4E4F                    1310                          TRAP    #15
00001D12                          1311                          
00001D12  7E01                    1312                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D14  60F0                    1313                          BRA     srdFinish
00001D16                          1314  sub_EndReadingData  
00001D16  0801 0000               1315                          BTST    #0,D1               *checks if LSB is 1, 
00001D1A  6600 0018               1316                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001D1E                          1317                          
00001D1E  B5CB                    1318                          CMP.L   A3,A2               *end address must be greater than start address
00001D20  6E00 0004               1319                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001D24                          1320  
00001D24  4E75                    1321  erdFinish               RTS
00001D26                          1322  
00001D26  43F8 119B               1323  erdFailAddrOrder        LEA     addr_order_check,A1
00001D2A  103C 000E               1324                          MOVE.B  #14,D0
00001D2E  4E4F                    1325                          TRAP    #15
00001D30                          1326                          
00001D30  7E01                    1327                          MOVE.L  #1,D7
00001D32  60F0                    1328                          BRA     erdFinish
00001D34                          1329  
00001D34  43F8 1174               1330  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D38  103C 000E               1331                          MOVE.B  #14,D0
00001D3C  4E4F                    1332                          TRAP    #15
00001D3E                          1333                          
00001D3E  7E01                    1334                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D40  60E2                    1335                          BRA     erdFinish
00001D42                          1336                          
00001D42                          1337  
00001D42                          1338  
00001D42                          1339  
00001D42                          1340  
00001D42                          1341  
00001D42                          1342  
00001D42                          1343  
00001D42                          1344  
00001D42                          1345  -------------------- end include --------------------
00001D42                          1346      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1A52
ABSOLUTE_LONG_BUFFER  1A82
ABSOLUTE_WORD_BUFFER  1A70
ADD                 149C
ADDA                1476
ADDA_BUFFER         1480
ADDA_DISP           125A
ADDA_NOTWORD        1C60
ADDI                1540
ADDI_BUFFER         15C8
ADDI_DES            1564
ADDI_DISP           125F
ADDI_NOTBYTE        1C26
ADDI_NOTWORD        1C38
ADDI_SRC            1556
ADDQ                16E2
ADDQ_BUFFER         1740
ADDQ_DEST           1716
ADDQ_DISP           1264
ADDQ_NOTBYTE        1B64
ADDQ_NOTWORD        1B76
ADDQ_SRC            16FE
ADDRESS_BUFFER      1A4C
ADDR_ODDBIT_MSG     1174
ADDR_ORDER_CHECK    119B
ADD_BUFFER          14A6
ADD_DEST            151E
ADD_DIRECTION_REVERSED  14D8
ADD_DISP            1256
ADD_DONE            14F2
ADD_NOTBYTE         1BA2
ADD_NOTLEFT         1BCE
ADD_NOTRIGHTBYTE    1BE4
ADD_NOTRIGHTWORD    1BFA
ADD_NOTWORD         1BB8
ADD_SRC             14FA
AND                 1818
AND_BUFFER          1822
AND_DISP            127F
ASL                 1854
ASL_BUFFER          185E
ASL_DISP            128E
ASR                 1838
ASR_BUFFER          1842
ASR_DISP            1292
AS_ERROR            1CF0
AS_LETTER           1CDA
AS_NUMBER           1CD4
ATHENDLOOP          1CBC
BACKSLASHSIGH       12DC
BCC_DISP            12A6
BGT_DISP            12AA
BITS11TO13          19BC
BITS11TO16          19DE
BITS14TO16          19CE
BITS1TO10           19EE
BITS5TO7            1984
BITS5TO8            1998
BITS8TO10           19AA
BLE_DISP            12AE
BUFFER              1CA2
CLOSEPAREN          12E0
CLR_DISP            127B
CMP                 17D8
CMP_BUFFER          17E2
CODE0000            135E
CODE0001            1372
CODE0010            1376
CODE0011            137A
CODE0100            137E
CODE0101            13B2
CODE0110            13B8
CODE0111            13BC
CODE1000            13C2
CODE1001            13D4
CODE1010            13DA
CODE1011            13DE
CODE1100            13E4
CODE1101            13F6
CODE1110            1442
CODE1111            1472
COMMASIGN           12DA
COPY_OPCODE         1B28
CR                  D
DIVU                177C
DIVU_BUFFER         1786
DIVU_DISP           1272
DOLLARSIGN          12D4
DONE                1982
ENDTEST_MSG         11EF
ERDFAILADDRODDB     1D34
ERDFAILADDRORDER    1D26
ERDFINISH           1D24
EXIT                12F9
FINISHER            1954
FIVE                1928
FOUR                1918
GETSIZE_ADD         1B88
GETSIZE_ADDA        1C4A
GETSIZE_ADDI        1C10
GETSIZE_ADDQ        1B4E
HEXATABLE           12B2
INPUT_BUFFER        12EE
INSERT_NUM          18D8
INVALIDEA_DISP      1233
INVALID_DISP        122E
INVALID_EA          1AA6
INVALID_OP          1AAA
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            18A8
JMP_TABLE           12FE
JSR                 1ACA
JSR_DISP            129E
LEA                 15E4
LEA_BUFFER          1606
LEA_DEST            16B8
LEA_DISP            1277
LEA_SRC             1618
LF                  A
LINEBREAK           122B
LINECOUNT           12ED
LOCATION_ENDDATA    12F4
LOCATION_END_MSG    1157
LOCATION_STARTDATA  12F0
LOCATION_START_MSG  1138
LSL                 1870
LSL_BUFFER          187A
LSL_DISP            1286
LSR                 188C
LSR_BUFFER          1896
LSR_DISP            128A
MAIN_LOOP           108E
MINUSSIGN           12D8
MODE000             1A00
MODE001             1A06
MODE010             1A0E
MODE011             1A18
MODE100             1A22
MODE101             1A30
MODE110             1A3A
MODE111             1A44
MOVEA_DISP          1244
MOVEM               1AF0
MOVEM_DISP          1250
MOVEM_W             1B10
MOVEQ               1758
MOVEQ_BUFFER        1762
MOVEQ_DISP          124A
MOVE_DISP           123F
MULS                17F8
MULS_BUFFER         1802
MULS_DISP           126D
NOP                 1AAE
NOP_DISP            123B
ONE                 18E8
ONEPAREN            1974
OPENPAREN           12DE
OR                  179C
OR_BUFFER           17A6
OR_DISP             1283
PAUSE_MSG           11D5
PLUSSIGN            12D6
POSTINCR            1962
POUNDSIGN           12D2
PRINT_ADDRESS       1B2E
PRINT_BUFFER        1A94
ROL_DISP            1296
ROR_DISP            129A
RTS                 1ABC
RTS_DISP            12A2
SEVEN               1948
SIX                 1938
SIZEISBYTE          1C72
SIZEISLONG          1C92
SIZEISWORD          1C82
SIZE_B              12E4
SIZE_L              12EA
SIZE_W              12E7
SPACE               12E2
SRDFAILADDRODDB     1D08
SRDFINISH           1D06
START               1000
SUB                 17B8
SUB_ASTOHELOOP      1CA6
SUB_BREAKDOWNAS     1CC0
SUB_BUFFER          17C2
SUB_DISP            1269
SUB_ENDREADINGDATA  1D16
SUB_STARTREADINGDATA  1CFC
TABLE_LENGTH        12F8
THREE               1908
TWO                 18F8
WELCOME_MSG         10D4
