00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 2:36:23 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D4 - MODE
00000000                             3  *** D5 - CURRENT OPCODE
00000000                             4  *** D6 - 
00000000                             5  ***
00000000                             6  
00000000                             7  
00006000                             8  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       9                     ADDQ.B  #$1,D1      
00006002                            10                   
00006002  41F9 0000624E             11                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 00006ADE             12                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      13                   CLR.L   D3              *Zero it
00006010                            14                   * TEST OPCODES
00006010  363C 45D7                 15                    MOVE.W  #$45D7,D3 * LEA (A7), A2
00006014                            16                   ; MOVE.W  #$4E71,D3 * NOP
00006014                            17                   ; MOVE.W  #$4E75,D3 * RTS
00006014                            18                   ; MOVE.W  #$4EB0,D3 * JSR
00006014                            19                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006014                            20                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
00006014                            21                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
00006014                            22                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006014                            23                   ;  MOVE.W  #$D579, D3  * ADD.W D2,$FF0FF0FF
00006014                            24                   ; MOVE.W    #$5201,D3    *ADDQ
00006014                            25  
00006014                            26                   ; MOVE.W     #$7E70, D3 *MOVEQ
00006014                            27                   ; MOVE.W     #$80C0, D3 *DIVU
00006014                            28                   ; MOVE.W     #$8000, D3 * OR
00006014                            29                   ; MOVE.W        #$9000, D3 * SUB
00006014                            30                   ; MOVE.W        #$B000, D3 * CMP
00006014                            31                   ; MOVE.W        #$C1C0, D3 * MULS
00006014                            32                   ; MOVE.W        #$C000, D3 * AND
00006014                            33                   ; MOVE.W        #$E0F8, D3  *ASR
00006014                            34                   ; MOVE.W        #$E1E2, D3  *ASL
00006014                            35                   ;MOVE.W        #$E393, D3  *LSL
00006014                            36                   ;MOVE.W        #$E2DC, D3  *LSR
00006014                            37  
00006014                            38                   
00006014  3A03                      39                   MOVE.W  D3,D5
00006016  183C 000C                 40                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601A                            41  
0000601A                            42             
0000601A  E86B                      43                   LSR.W   D4,D3       *Move the bits
0000601C  C6FC 0006                 44                   MULU    #6,D3       *Form offset     
00006020  4EB0 3000                 45                   JSR     0(A0,D3)   *Jump indirect with index
00006024                            46                  
00006024                            47      INCLUDE 'definitions.x68'
00006024                            48  
00006024  =0000000D                 49  CR              EQU     $0D         carriage return
00006024  =0000000A                 50  LF              EQU     $0A         line feed
00006024= 43 53 53 20 34 32 ...     51  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
00006048= 42 79 20 54 65 61 ...     52                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00006088= 45 6E 74 65 72 20 ...     53  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060A7= 45 6E 74 65 72 20 ...     54  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C4= 41 64 64 72 65 73 ...     55  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EB= 45 6E 64 69 6E 67 ...     56  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006125= 50 72 65 73 73 20 ...     57  pause_msg           DC.B    'Press enter to continue!',CR,LF
0000613F= 52 65 61 63 68 65 ...     58  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615A= 54 72 79 20 61 6E ...     59                      DC.B    'Try another location? (yes/no): ',0
0000617B= 0D 0A 00                  60  linebreak           DC.B    CR,LF,0
0000617E                            61                      
0000617E= 44 41 54 41 00            62  Invalid_disp        DC.B    'DATA',0
00006183= 57 52 4F 4E 47 45 ...     63  InvalidEA_disp      DC.B    'WRONGEA',0
0000618B                            64  
0000618B= 4E 4F 50 00               65  NOP_disp            DC.B    'NOP',0
0000618F= 4D 4F 56 45 00            66  MOVE_disp           DC.B    'MOVE',0
00006194= 4D 4F 56 45 41 00         67  MOVEA_disp          DC.B    'MOVEA',0
0000619A= 4D 4F 56 45 51 00         68  MOVEQ_disp          DC.B    'MOVEQ',0
000061A0= 4D 4F 56 45 4D 00         69  MOVEM_disp          DC.B    'MOVEM',0
000061A6= 41 44 44 00               70  ADD_disp            DC.B    'ADD',0
000061AA= 41 44 44 41 00            71  ADDA_disp           DC.B    'ADDA',0
000061AF= 41 44 44 49 00            72  ADDI_disp           DC.B    'ADDI',0
000061B4= 41 44 44 51 00            73  ADDQ_disp           DC.B    'ADDQ',0
000061B9= 53 55 42 00               74  SUB_disp            DC.B    'SUB',0
000061BD= 4D 55 4C 53 00            75  MULS_disp           DC.B    'MULS',0
000061C2= 44 49 56 55 00            76  DIVU_disp           DC.B    'DIVU',0
000061C7= 4C 45 41 00               77  LEA_disp            DC.B    'LEA',0
000061CB= 43 4C 52 00               78  CLR_disp            DC.B    'CLR',0
000061CF= 41 4E 44 00               79  AND_disp            DC.B    'AND',0
000061D3= 4F 52 00                  80  OR_disp             DC.B    'OR',0
000061D6= 4C 53 4C 00               81  LSL_disp            DC.B    'LSL',0
000061DA= 4C 53 52 00               82  LSR_disp            DC.B    'LSR',0
000061DE= 41 53 4C 00               83  ASL_disp            DC.B    'ASL',0
000061E2= 41 53 52 00               84  ASR_disp            DC.B    'ASR',0
000061E6= 52 4F 4C 00               85  ROL_disp            DC.B    'ROL',0
000061EA= 52 4F 52 00               86  ROR_disp            DC.B    'ROR',0
000061EE= 4A 53 52 00               87  JSR_disp            DC.B    'JSR',0
000061F2= 52 54 53 00               88  RTS_disp            DC.B    'RTS',0
000061F6= 42 43 43 00               89  BCC_disp            DC.B    'BCC',0
000061FA= 42 47 54 00               90  BGT_disp            DC.B    'BGT',0    
000061FE= 42 4C 45 00               91  BLE_disp            DC.b    'BLE',0
00006202                            92  
00006202                            93  
00006202= 30 00                     94  hexaTable               DC.B    '0',0
00006204= 31 00                     95                          DC.B    '1',0
00006206= 32 00                     96                          DC.B    '2',0
00006208= 33 00                     97                          DC.B    '3',0
0000620A= 34 00                     98                          DC.B    '4',0
0000620C= 35 00                     99                          DC.B    '5',0
0000620E= 36 00                    100                          DC.B    '6',0
00006210= 37 00                    101                          DC.B    '7',0
00006212= 38 00                    102                          DC.B    '8',0
00006214= 39 00                    103                          DC.B    '9',0
00006216= 41 00                    104                          DC.B    'A',0
00006218= 42 00                    105                          DC.B    'B',0
0000621A= 43 00                    106                          DC.B    'C',0
0000621C= 44 00                    107                          DC.B    'D',0
0000621E= 45 00                    108                          DC.B    'E',0
00006220= 46 00                    109                          DC.B    'F',0
00006222= 23 00                    110  poundsign               DC.B    '#',0
00006224= 24 00                    111  dollarsign              DC.B    '$',0
00006226= 2B 00                    112  plussign                DC.B    '+',0
00006228= 2D 00                    113  minussign               DC.B    '-',0
0000622A= 2C 00                    114  commasign               DC.B    ',',0
0000622C= 2F 00                    115  backslashsigh           DC.B    '/',0
0000622E= 28 00                    116  openparen               DC.B    '(',0
00006230= 29 00                    117  closeparen              DC.B    ')',0
00006232= 20 00                    118  space                   DC.B    ' ',0   
00006234= 2E 42 00                 119  size_b                  DC.B    '.B',0
00006237= 2E 57 00                 120  size_w                  DC.B    '.W',0        
0000623A= 2E 4C 00                 121  size_l                  DC.B    '.L',0
0000623D                           122  
0000623D                           123  linecount               DS.B    1       *storeage for lines on a screen
0000623E= 01                       124  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006240                           125  location_startData      DS.L    1       *location on where to start reading data
00006244                           126  location_endData        DS.L    1       *location on where to end reading data
00006248                           127  table_length            DS.B    1       *Number of spaces in the table to print to console
00006249                           128  
00006249                           129  
00006249                           130  -------------------- end include --------------------
00006249                           131             
00006249                           132  EXIT                 
0000624A  FFFF FFFF                133         SIMHALT   
0000624E                           134  
0000624E                           135  
0000624E                           136  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
0000624E  4EF9 000062AE            137  jmp_table      JMP         code0000
00006254                           138                  *ADDI
00006254                           139  
00006254  4EF9 000062C2            140                 JMP         code0001
0000625A                           141  
0000625A  4EF9 000062C6            142                 JMP         code0010
00006260                           143  
00006260  4EF9 000062CA            144                 JMP         code0011
00006266                           145  
00006266  4EF9 000062CE            146                 JMP         code0100
0000626C                           147                             
0000626C  4EF9 00006302            148                 JMP         code0101
00006272                           149                 * ADDQ
00006272                           150                  
00006272                           151        
00006272  4EF9 00006308            152                 JMP         code0110
00006278                           153                 * BCC
00006278                           154                 * BGT
00006278                           155                 * BLE
00006278                           156                 
00006278  4EF9 0000630C            157                 JMP         code0111
0000627E                           158                 * MOVEQ
0000627E                           159  
0000627E  4EF9 00006312            160                 JMP         code1000
00006284                           161                 * DIVU
00006284                           162                 * OR
00006284                           163  
00006284  4EF9 00006324            164                 JMP         code1001
0000628A                           165                  *SUB
0000628A  4EF9 0000632A            166                 JMP         code1010
00006290                           167                 
00006290  4EF9 0000632E            168                 JMP         code1011
00006296                           169                 * CMP
00006296                           170                 
00006296  4EF9 00006334            171                 JMP         code1100
0000629C                           172                 * MULS
0000629C                           173                 * AND
0000629C                           174          
0000629C  4EF9 00006346            175                 JMP         code1101
000062A2                           176                 *ADD
000062A2                           177                 *ADDA
000062A2  4EF9 00006392            178                 JMP         code1110
000062A8                           179                 * ASR
000062A8                           180                 * ASL
000062A8                           181                 * LSL
000062A8                           182                 * LSR
000062A8                           183                 * ROL
000062A8                           184                 * ROR
000062A8                           185  
000062A8  4EF9 000063C2            186                 JMP         code1111
000062AE                           187  
000062AE                           188  
000062AE                           189  code0000      
000062AE  4EB9 00006846            190                 JSR          bits5to8 // RETURNS INTO D3
000062B4  B6BC 00000006            191                 CMP.L        #%0110, D3
000062BA  6600 0690                192                 BNE          INVALID_OP
000062BE  6000 0188                193                 BRA          ADDI  
000062C2                           194  
000062C2  4E72 2700                195  code0001       STOP        #$2700
000062C6                           196  
000062C6  4E72 2700                197  code0010       STOP        #$2700
000062CA                           198  
000062CA  4E72 2700                199  code0011       STOP        #$2700
000062CE                           200  
000062CE                           201  code0100       
000062CE  4EB9 000069CA            202                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D4                           203                  
000062D4                           204                 *NOP
000062D4  C47C 0FFF                205                 AND     #%0000111111111111,D2
000062D8  B4BC 00000E71            206                 CMP.L   #%000111001110001, D2
000062DE  6700 0670                207                 BEQ     NOP
000062E2                           208                 
000062E2                           209                 *RTS
000062E2  C47C 0FFF                210                 AND     #%0000111111111111,D2
000062E6  B4BC 00000E75            211                 CMP.L   #%0000111001110101, D2
000062EC  6700 0670                212                 BEQ     RTS
000062F0                           213  
000062F0                           214                 *JSR
000062F0  C47C 0FC0                215                 AND     #%0000111111000000,D2
000062F4  B4BC 00000E80            216                 CMP.L   #%0000111010000000,D2
000062FA  6700 0670                217                 BEQ     JSR
000062FE                           218                 
000062FE                           219                 * MOVEM
000062FE                           220                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000062FE                           221                ** AND     #%0000111110000000,D2
000062FE                           222                 * DATA REGISTER
000062FE                           223                ** CMP.L   #%0000100010000000, D2
000062FE                           224                 ** JSR      MOVEM
000062FE                           225                 * ADDRESS REGISTER (DECREMENTED)
000062FE                           226                 ** CMP.L  #%0000110010000000, D2
000062FE                           227                 ** JSR    MOVEM
000062FE                           228                  
000062FE                           229                  ** TO DO: BRANCH IF INVALID OPCODE
000062FE                           230                  *LEA - if it's not the top codes, it's LEA
000062FE  6000 01EC                231                  BRA     LEA
00006302                           232  code0101      
00006302                           233  
00006302  4EB9 000065E6            234                  JSR   ADDQ
00006308                           235  
00006308  4E72 2700                236  code0110        STOP        #$2700
0000630C                           237  
0000630C                           238  code0111       
0000630C  4EB9 00006606            239                  JSR       MOVEQ
00006312                           240  
00006312                           241  code1000      
00006312  4EB9 00006858            242                  JSR        bits8to10
00006318  B67C 0003                243                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
0000631C  6700 030C                244                  BEQ        DIVU
00006320  6000 0328                245                  BRA        OR       ** OTHERWISE OR
00006324                           246                  
00006324                           247  
00006324                           248  code1001       
00006324  4EB9 00006666            249                 JSR         SUB
0000632A  4E72 2700                250  code1010       STOP        #$2700
0000632E                           251  
0000632E                           252  code1011       
0000632E  4EB9 00006686            253                 JSR         CMP
00006334                           254  
00006334                           255  code1100      
00006334  4EB9 00006858            256                  JSR        bits8to10
0000633A  B67C 0007                257                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
0000633E  6700 0366                258                  BEQ        MULS
00006342  6000 0382                259                  BRA        AND       ** OTHERWISE AND
00006346                           260  
00006346                           261  code1101       
00006346  4EB9 000069CA            262                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000634C                           263                 *ADDA
0000634C  4EB9 00006858            264                 JSR      bits8to10
00006352  B67C 0003                265                 CMP      #%011, D3  ** WORD
00006356  6700 006E                266                 BEQ      ADDA
0000635A  B67C 0007                267                 CMP      #%111, D3   ** LONG
0000635E  6700 0066                268                 BEQ      ADDA
00006362                           269                 
00006362                           270                 *ADD
00006362  B67C 0000                271                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00006366  6700 0084                272                 BEQ      ADD
0000636A  B67C 0001                273                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000636E  6700 007C                274                 BEQ      ADD
00006372  B67C 0002                275                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00006376  6700 0074                276                 BEQ      ADD
0000637A  B67C 0004                277                 CMP      #%100, D3   ** BYTE TO EA
0000637E  6700 006C                278                 BEQ      ADD
00006382  B67C 0005                279                 CMP      #%101, D3   ** WORD TO EA
00006386  6700 0064                280                 BEQ      ADD
0000638A  B67C 0006                281                 CMP      #%110, D3   ** LONG TO EA
0000638E  6700 005C                282                 BEQ      ADD
00006392                           283                 
00006392                           284  
00006392                           285  code1110       
00006392                           286                  * ASR
00006392  4EB9 0000689C            287                  JSR     bits1to10
00006398  B67C 0383                288                  CMP     #%1110000011,D3
0000639C  6700 0348                289                  BEQ     ASR
000063A0                           290                  
000063A0                           291                  * ASL
000063A0  B67C 0387                292                  CMP     #%1110000111,D3
000063A4  6700 035C                293                  BEQ     ASL
000063A8                           294                  
000063A8                           295                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
000063A8                           296                  * LSL
000063A8  4244                     297                  CLR     D4
000063AA  2803                     298                  MOVE.L  D3,D4
000063AC  C8BC 00A98671            299                  AND.L   #11110001,D4
000063B2  B87C 01C7                300                  CMP     #%111000111,D4
000063B6  6700 0366                301                  BEQ     LSL
000063BA                           302                  
000063BA                           303                  * LSR
000063BA  B67C 038B                304                  CMP     #%1110001011,D3
000063BE  6700 037A                305                  BEQ     LSR
000063C2                           306                  
000063C2                           307                  * ROL
000063C2                           308                  
000063C2                           309                  * ROR
000063C2                           310  
000063C2  4E72 2700                311  code1111       STOP        #$2700
000063C6                           312  
000063C6                           313  ADDA    
000063C6  4EB9 000063D0            314                 JSR     ADDA_BUFFER
000063CC  6000 0566                315                 BRA     PRINT_BUFFER
000063D0                           316                  
000063D0                           317  ADDA_BUFFER
000063D0  1CFC 0041                318                 MOVE.B   #'A',(A6)+
000063D4  1CFC 0044                319                 MOVE.B   #'D', (A6)+  
000063D8  1CFC 0044                320                 MOVE.B   #'D', (A6)+
000063DC  1CFC 0041                321                 MOVE.B   #'A', (A6)+
000063E0  4EB9 00006A92            322                 JSR      GETSIZE_ADDA
000063E6  1CFC 0020                323                 MOVE.B   #' ', (A6)+
000063EA  4E75                     324                 RTS
000063EC                           325                 
000063EC                           326                 
000063EC                           327                 
000063EC                           328  *********************************************               
000063EC                           329  ADD    
000063EC  4EB9 0000642C            330                 JSR     ADD_BUFFER
000063F2  4EB9 00006934            331                 JSR     PRINT_BUFFER
000063F8                           332                ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000063F8                           333                 
000063F8  BC7C 0001                334                 CMP      #1,D6
000063FC  6600 0016                335                 BNE      ADD_DIRECTION_REVERSED
00006400  4EB9 00006440            336                 JSR      ADD_SRC
00006406  1CFC 0020                337                 MOVE.B   #' ', (A6)+
0000640A  4EB9 00006440            338                 JSR      ADD_DEST
00006410  6000 0016                339                 BRA      ADD_DONE
00006414                           340                 
00006414                           341  ADD_DIRECTION_REVERSED
00006414                           342  
00006414  4EB9 00006440            343                 JSR      ADD_DEST
0000641A  1CFC 0020                344                 MOVE.B   #' ', (A6)+
0000641E  4EB9 00006440            345                 JSR      ADD_SRC
00006424  6000 0002                346                 BRA      ADD_DONE              
00006428                           347                 
00006428                           348                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006428                           349                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006428                           350                 
00006428  4246                     351  ADD_DONE       CLR      D6
0000642A  4E75                     352                 RTS     
0000642C                           353                  
0000642C                           354  ADD_BUFFER
0000642C  1CFC 0041                355                 MOVE.B   #'A',(A6)+
00006430  1CFC 0044                356                 MOVE.B   #'D', (A6)+  
00006434  1CFC 0044                357                 MOVE.B   #'D', (A6)+
00006438  4EB9 000069D0            358                 JSR      GETSIZE_ADD
0000643E  4E75                     359                 RTS
00006440                           360  
00006440                           361  
00006440                           362  ***********************************************        
00006440                           363  
00006440                           364  
00006440                           365  
00006440                           366  
00006440                           367  ADD_SRC
00006440                           368  
00006440                           369  
00006440                           370  
00006440                           371  
00006440                           372  
00006440                           373  ADD_DEST
00006440  4EB9 00006832            374                  JSR    bits5to7
00006446  3803                     375                  MOVE   D3,D4
00006448                           376  
00006448                           377    
00006448                           378  
00006448                           379  
00006448                           380  
00006448                           381  ADDI
00006448  4EB9 000064D0            382                  JSR     ADDI_BUFFER
0000644E  4EB9 0000645E            383                  JSR     ADDI_SRC
00006454  4EB9 0000646C            384                  JSR     ADDI_DES
0000645A  6000 04D8                385                  BRA     PRINT_BUFFER
0000645E                           386                  
0000645E                           387  ADDI_SRC                        
0000645E  1CFC 0023                388                  MOVE.B  #'#', (A6)+
00006462  1CFC 002C                389                  MOVE.B  #',', (A6)+
00006466  1CFC 0020                390                  MOVE.B  #' ', (A6)+
0000646A  4E75                     391                  RTS
0000646C                           392                    ** TODO: IMPLEMENT THIS IN EA
0000646C                           393                  ** Immediate field—Data immediately following the instruction.
0000646C                           394                  **If size = 00, the data is the low-order byte of the immediate word.
0000646C                           395                  **If size = 01, the data is the entire immediate word.
0000646C                           396                  **If size = 10, the data is the next two immediate words. 
0000646C                           397  ADDI_DES
0000646C                           398                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
0000646C                           399                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
0000646C  4EB9 0000686A            400                 JSR      bits11to13
00006472  B67C 0001                401                 CMP      #%001, D3 **AN
00006476  6700 04D0                402                 BEQ      INVALID_EA
0000647A  B67C 0005                403                 CMP      #%101, D3 **COMPLICATED
0000647E  6700 04C8                404                 BEQ      INVALID_EA
00006482  B67C 0006                405                 CMP      #%110, D3 **COMPLICATED
00006486  6700 04C0                406                 BEQ      INVALID_EA
0000648A                           407                 
0000648A  4EB9 0000688C            408                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00006490  B67C 003C                409                 CMP      #%111100,D3 // immediate data
00006494  6700 04B2                410                 BEQ      INVALID_EA
00006498  B67C 003A                411                 CMP      #%111010,D3 // complicated
0000649C  6700 04AA                412                 BEQ      INVALID_EA
000064A0  B67C 003B                413                 CMP      #%111011,D3 // complicated
000064A4  6700 04A2                414                 BEQ      INVALID_EA
000064A8                           415                 
000064A8  4EB9 0000686A            416                 JSR      bits11to13 ** grab bits to jump with\
000064AE  3803                     417                 MOVE     D3,D4
000064B0  41F9 00006756            418                 LEA     jmp_mode,A0    *Index into the table
000064B6  C6FC 0006                419                 MULU    #6,D3       *Form offset     
000064BA  4EB0 3000                420                 JSR     0(A0,D3)   *Jump indirect with index
000064BE                           421                 
000064BE  4243                     422                 CLR     D3
000064C0  4EB9 0000687C            423                 JSR     bits14to16
000064C6  4EB9 00006786            424                 JSR     insert_num
000064CC  4244                     425                 CLR     D4
000064CE                           426                 
000064CE  4E75                     427                 RTS
000064D0                           428                 
000064D0                           429                             
000064D0                           430  ADDI_BUFFER
000064D0  1CFC 0041                431                 MOVE.B   #'A',(A6)+
000064D4  1CFC 0044                432                 MOVE.B   #'D', (A6)+  
000064D8  1CFC 0044                433                 MOVE.B   #'D', (A6)+
000064DC  1CFC 0049                434                 MOVE.B   #'I', (A6)+
000064E0                           435                 
000064E0  4EB9 00006A58            436                 JSR      GETSIZE_ADDI
000064E6                           437                 
000064E6                           438                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000064E6                           439                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000064E6  1CFC 0020                440                 MOVE.B   #' ', (A6)+
000064EA  4E75                     441                 RTS
000064EC                           442                              
000064EC                           443  LEA
000064EC  4EB9 00006858            444                 JSR      bits8to10   // 1 1 1
000064F2  B47C 0007                445                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000064F6  6600 0454                446                 BNE      INVALID_OP
000064FA  4EB9 00006510            447                 JSR      LEA_BUFFER
00006500  4EB9 00006522            448                 JSR      LEA_SRC
00006506  4EB9 000065C2            449                 JSR      LEA_DEST
0000650C  6000 0426                450                 BRA      PRINT_BUFFER
00006510                           451                 
00006510                           452  LEA_BUFFER 
00006510  1CFC 004C                453                 MOVE.B   #'L',(A6)+
00006514  1CFC 0045                454                 MOVE.B   #'E', (A6)+  
00006518  1CFC 0041                455                 MOVE.B   #'A', (A6)+
0000651C  1CFC 0020                456                 MOVE.B   #' ', (A6)+
00006520  4E75                     457                 RTS
00006522                           458            
00006522                           459  LEA_SRC
00006522                           460              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00006522  4EB9 0000686A            461              JSR      bits11to13  // source mode - D3
00006528  B67C 0000                462              CMP      #%000, D3
0000652C  6700 041A                463              BEQ      INVALID_EA
00006530  B67C 0001                464              CMP      #%001, D3
00006534  6700 0412                465              BEQ      INVALID_EA
00006538  B67C 0003                466              CMP      #%011, D3
0000653C  6700 040A                467              BEQ      INVALID_EA
00006540  B67C 0004                468              CMP      #%100, D3
00006544  6700 0402                469              BEQ      INVALID_EA
00006548  B67C 0005                470              CMP      #%101, D3
0000654C  6700 03FA                471              BEQ      INVALID_EA
00006550  B67C 0006                472              CMP      #%110, D3
00006554  6700 03F2                473              BEQ      INVALID_EA
00006558                           474  
00006558                           475              
00006558                           476              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00006558  4EB9 0000687C            477              JSR      bits14to16 // source register - d4
0000655E  B67C 0004                478              CMP      #%100, D3
00006562  6700 03E4                479              BEQ      INVALID_EA
00006566  B67C 0002                480              CMP      #%010, D3
0000656A  6700 03DC                481              BEQ      INVALID_EA
0000656E  B67C 0003                482              CMP      #%011, D3
00006572  6700 03D4                483              BEQ      INVALID_EA
00006576                           484              
00006576                           485  
00006576  4EB9 0000688C            486               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000657C  B67C 003C                487               CMP      #%111100,D3 // immediate data
00006580  6700 03C6                488               BEQ      INVALID_EA
00006584  B67C 003A                489               CMP      #%111010,D3 // complicated
00006588  6700 03BE                490               BEQ      INVALID_EA
0000658C  B67C 003B                491               CMP      #%111011,D3 // complicated
00006590  6700 03B6                492               BEQ      INVALID_EA
00006594                           493     
00006594  4EB9 0000686A            494               JSR      bits11to13 ** grab mode bits to jump with
0000659A  3803                     495               MOVE    D3,D4
0000659C                           496  
0000659C  41F9 00006756            497               LEA     jmp_mode,A0    *Index into the table
000065A2  C6FC 0006                498               MULU    #6,D3       *Form offset     
000065A6  4EB0 3000                499               JSR     0(A0,D3)   *Jump indirect with index
000065AA                           500               
000065AA                           501  
000065AA  4243                     502               CLR     D3
000065AC  4EB9 0000687C            503               JSR     bits14to16
000065B2  4EB9 00006786            504               JSR     insert_num
000065B8                           505               
000065B8  1CFC 002C                506               MOVE.B     #',', (A6)+
000065BC  1CFC 0020                507               MOVE.B     #' ', (A6)+
000065C0                           508  
000065C0  4E75                     509               RTS
000065C2                           510               
000065C2                           511  LEA_DEST    
000065C2  4244                     512                  CLR     D4
000065C4  41F9 00006756            513                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
000065CA  363C 0001                514                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
000065CE  3803                     515                  MOVE    D3,D4
000065D0  C6FC 0006                516                  MULU    #6,D3       *Form offset     
000065D4  4EB0 3000                517                  JSR     0(A0,D3)   *Jump indirect with index
000065D8                           518                  
000065D8  4EB9 00006832            519                  JSR     bits5to7
000065DE  4EB9 00006786            520                  JSR     insert_num
000065E4                           521                  
000065E4  4E75                     522                  RTS
000065E6                           523  
000065E6                           524  
000065E6                           525  ADDQ
000065E6  4EB9 000065F0            526                  JSR     ADDQ_BUFFER
000065EC  6000 0346                527                  BRA     PRINT_BUFFER
000065F0                           528  
000065F0                           529  ADDQ_BUFFER
000065F0  1CFC 0041                530                 MOVE.B   #'A',(A6)+
000065F4  1CFC 0044                531                 MOVE.B   #'D', (A6)+  
000065F8  1CFC 0044                532                 MOVE.B   #'D', (A6)+
000065FC  1CFC 0051                533                 MOVE.B   #'Q', (A6)+
00006600                           534                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00006600                           535                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006600  1CFC 0020                536                 MOVE.B   #' ', (A6)+
00006604  4E75                     537                 RTS
00006606                           538                 
00006606                           539  MOVEQ
00006606  4EB9 00006610            540                  JSR     MOVEQ_BUFFER
0000660C  6000 0326                541                  BRA     PRINT_BUFFER
00006610                           542  
00006610                           543  MOVEQ_BUFFER
00006610  1CFC 004D                544                 MOVE.B   #'M',(A6)+
00006614  1CFC 004F                545                 MOVE.B   #'O', (A6)+  
00006618  1CFC 0056                546                 MOVE.B   #'V', (A6)+
0000661C  1CFC 0045                547                 MOVE.B   #'E', (A6)+
00006620  1CFC 0051                548                 MOVE.B   #'Q', (A6)+
00006624  1CFC 0020                549                 MOVE.B   #' ', (A6)+
00006628  4E75                     550                 RTS
0000662A                           551  
0000662A                           552  DIVU
0000662A  4EB9 00006634            553                  JSR     DIVU_BUFFER
00006630  6000 0302                554                  BRA     PRINT_BUFFER
00006634                           555  
00006634                           556  DIVU_BUFFER
00006634  1CFC 0044                557                 MOVE.B   #'D',(A6)+
00006638  1CFC 0049                558                 MOVE.B   #'I', (A6)+  
0000663C  1CFC 0056                559                 MOVE.B   #'V', (A6)+
00006640  1CFC 0055                560                 MOVE.B   #'U', (A6)+
00006644  1CFC 0020                561                 MOVE.B   #' ', (A6)+
00006648  4E75                     562                 RTS  
0000664A                           563  OR    
0000664A  4EB9 00006654            564                 JSR     OR_BUFFER
00006650  6000 02E2                565                 BRA     PRINT_BUFFER
00006654                           566                  
00006654                           567  OR_BUFFER
00006654  1CFC 004F                568                 MOVE.B   #'O',(A6)+
00006658  1CFC 0052                569                 MOVE.B   #'R', (A6)+  
0000665C  1CFC 002E                570                 MOVE.B   #'.', (A6)+
00006660                           571                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006660                           572                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006660                           573                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006660  1CFC 0020                574                 MOVE.B   #' ', (A6)+
00006664  4E75                     575                 RTS   
00006666                           576  
00006666                           577  SUB   
00006666  4EB9 00006670            578                 JSR     SUB_BUFFER
0000666C  6000 02C6                579                 BRA     PRINT_BUFFER               
00006670                           580  
00006670                           581  SUB_BUFFER
00006670  1CFC 0053                582                 MOVE.B   #'S',(A6)+
00006674  1CFC 0055                583                 MOVE.B   #'U', (A6)+  
00006678  1CFC 0042                584                 MOVE.B   #'B', (A6)+
0000667C  1CFC 002E                585                 MOVE.B   #'.', (A6)+
00006680                           586                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006680                           587                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006680                           588                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006680  1CFC 0020                589                 MOVE.B   #' ', (A6)+
00006684  4E75                     590                 RTS  
00006686                           591  CMP   
00006686  4EB9 00006690            592                 JSR     CMP_BUFFER
0000668C  6000 02A6                593                 BRA     PRINT_BUFFER
00006690                           594                  
00006690                           595  CMP_BUFFER
00006690  1CFC 0043                596                 MOVE.B   #'C',(A6)+
00006694  1CFC 004D                597                 MOVE.B   #'M', (A6)+  
00006698  1CFC 0050                598                 MOVE.B   #'P', (A6)+
0000669C  1CFC 002E                599                 MOVE.B   #'.', (A6)+
000066A0                           600                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066A0                           601                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066A0                           602                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066A0  1CFC 0020                603                 MOVE.B   #' ', (A6)+
000066A4  4E75                     604                 RTS   
000066A6                           605                 
000066A6                           606  MULS
000066A6  4EB9 000066B0            607                  JSR     MULS_BUFFER
000066AC  6000 0286                608                  BRA     PRINT_BUFFER
000066B0                           609  
000066B0                           610  MULS_BUFFER
000066B0  1CFC 004D                611                 MOVE.B   #'M',(A6)+
000066B4  1CFC 0055                612                 MOVE.B   #'U', (A6)+  
000066B8  1CFC 004C                613                 MOVE.B   #'L', (A6)+
000066BC  1CFC 0053                614                 MOVE.B   #'S', (A6)+
000066C0  1CFC 0020                615                 MOVE.B   #' ', (A6)+
000066C4  4E75                     616                 RTS
000066C6                           617  
000066C6                           618  AND    
000066C6  4EB9 000066D0            619                 JSR     AND_BUFFER
000066CC  6000 0266                620                 BRA     PRINT_BUFFER
000066D0                           621                  
000066D0                           622  AND_BUFFER
000066D0  1CFC 0041                623                 MOVE.B   #'A',(A6)+
000066D4  1CFC 004E                624                 MOVE.B   #'N', (A6)+  
000066D8  1CFC 0044                625                 MOVE.B   #'D', (A6)+
000066DC  1CFC 002E                626                 MOVE.B   #'.', (A6)+
000066E0                           627                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066E0                           628                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066E0                           629                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066E0  1CFC 0020                630                 MOVE.B   #' ', (A6)+
000066E4  4E75                     631                 RTS    
000066E6                           632  
000066E6                           633  ASR     
000066E6  4EB9 000066F0            634                  JSR     ASR_BUFFER
000066EC  6000 0246                635                  BRA     PRINT_BUFFER
000066F0                           636  
000066F0                           637  ASR_BUFFER
000066F0  1CFC 0041                638                 MOVE.B   #'A',(A6)+
000066F4  1CFC 0053                639                 MOVE.B   #'S', (A6)+  
000066F8  1CFC 0052                640                 MOVE.B   #'R', (A6)+
000066FC  1CFC 0020                641                 MOVE.B   #' ', (A6)+
00006700  4E75                     642                 RTS      
00006702                           643  
00006702                           644  ASL     
00006702  4EB9 0000670C            645                  JSR     ASL_BUFFER
00006708  6000 022A                646                  BRA     PRINT_BUFFER
0000670C                           647  
0000670C                           648  ASL_BUFFER
0000670C  1CFC 0041                649                 MOVE.B   #'A',(A6)+
00006710  1CFC 0053                650                 MOVE.B   #'S', (A6)+  
00006714  1CFC 004C                651                 MOVE.B   #'L', (A6)+
00006718  1CFC 0020                652                 MOVE.B   #' ', (A6)+
0000671C  4E75                     653                 RTS     
0000671E                           654  
0000671E                           655  LSL     
0000671E  4EB9 00006728            656                  JSR     LSL_BUFFER
00006724  6000 020E                657                  BRA     PRINT_BUFFER
00006728                           658  
00006728                           659  LSL_BUFFER
00006728  1CFC 004C                660                 MOVE.B   #'L',(A6)+
0000672C  1CFC 0053                661                 MOVE.B   #'S', (A6)+  
00006730  1CFC 004C                662                 MOVE.B   #'L', (A6)+
00006734  1CFC 0020                663                 MOVE.B   #' ', (A6)+
00006738  4E75                     664                 RTS     
0000673A                           665  
0000673A                           666  LSR     
0000673A  4EB9 00006744            667                  JSR     LSR_BUFFER
00006740  6000 01F2                668                  BRA     PRINT_BUFFER
00006744                           669  
00006744                           670  LSR_BUFFER
00006744  1CFC 004C                671                 MOVE.B   #'L',(A6)+
00006748  1CFC 0053                672                 MOVE.B   #'S', (A6)+  
0000674C  1CFC 0052                673                 MOVE.B   #'R', (A6)+
00006750  1CFC 0020                674                 MOVE.B   #' ', (A6)+
00006754  4E75                     675                 RTS       
00006756                           676                 
00006756                           677  jmp_mode
00006756  4EF9 000068AE            678                  JMP     MODE000  ** DN
0000675C  4EF9 000068B4            679                  JMP     MODE001  ** AN
00006762  4EF9 000068BC            680                  JMP     MODE010  ** (AN)
00006768  4EF9 000068C6            681                  JMP     MODE011  ** (AN)+   
0000676E  4EF9 000068CE            682                  JMP     MODE100  ** -(AN)
00006774  4EF9 000068DA            683                  JMP     MODE101  **INVALID
0000677A  4EF9 000068E2            684                  JMP     MODE110  **INVALID
00006780  4EF9 000068EA            685                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00006786                           686  
00006786                           687                  
00006786                           688  insert_num
00006786                           689                  
00006786                           690                  ;get number from D3
00006786  B67C 0000                691                  CMP     #%000,D3       ;0
0000678A  6600 000A                692                  BNE     ONE         
0000678E  1CFC 0030                693                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
00006792  6000 006E                694                  BRA     FINISHER
00006796                           695                  
00006796  B67C 0001                696  ONE             CMP     #%001,D3       ;1
0000679A  6600 000A                697                  BNE     TWO 
0000679E  1CFC 0031                698                  MOVE.B  #'1',(A6)+
000067A2  6000 005E                699                  BRA     FINISHER
000067A6                           700  
000067A6                           701                  
000067A6  B67C 0002                702  TWO             CMP     #%010,D3        ;2
000067AA  6600 000A                703                  BNE     THREE
000067AE  1CFC 0032                704                  MOVE.B  #'2',(A6)+
000067B2  6000 004E                705                  BRA     FINISHER
000067B6                           706                  
000067B6  B67C 0003                707  THREE           CMP     #%011,D3        ;3
000067BA  6600 000A                708                  BNE     FOUR
000067BE  1CFC 0033                709                  MOVE.B  #'3',(A6)+
000067C2  6000 003E                710                  BRA     FINISHER
000067C6                           711                  
000067C6  B67C 0004                712  FOUR            CMP     #%100,D3        ;4
000067CA  6600 000A                713                  BNE     FIVE
000067CE  1CFC 0034                714                  MOVE.B  #'4',(A6)+
000067D2  6000 002E                715                  BRA     FINISHER
000067D6                           716                  
000067D6  B67C 0005                717  FIVE            CMP     #%101,D3        ;5
000067DA  6600 000A                718                  BNE     SIX
000067DE  1CFC 0035                719                  MOVE.B  #'5',(A6)+
000067E2  6000 001E                720                  BRA     FINISHER
000067E6                           721                  
000067E6  B67C 0006                722  SIX             CMP     #%110,D3        ;6
000067EA  6600 000A                723                  BNE     SEVEN
000067EE  1CFC 0036                724                  MOVE.B  #'6',(A6)+
000067F2  6000 000E                725                  BRA     FINISHER
000067F6                           726                  
000067F6  B67C 0007                727  SEVEN           CMP     #%111,D3        ;7
000067FA  1CFC 0037                728                  MOVE.B  #'7',(A6)+
000067FE  6000 0002                729                  BRA     FINISHER
00006802                           730                  
00006802                           731  FINISHER                
00006802                           732                  
00006802                           733                  ;check D4, do we need to do stuff?
00006802  B87C 0002                734                  CMP     #%010,D4
00006806  6600 0008                735                  BNE     POSTINCR
0000680A  1CFC 0029                736                  MOVE.B  #')',(A6)+
0000680E  4E75                     737                  RTS
00006810                           738                  
00006810  B87C 0003                739  POSTINCR        CMP     #%011,D4
00006814  6600 000C                740                  BNE     ONEPAREN
00006818  1CFC 0029                741                  MOVE.B  #')',(A6)+
0000681C  1CFC 002B                742                  MOVE.B  #'+',(A6)+
00006820  4E75                     743                  RTS
00006822                           744                  
00006822  B87C 0004                745  ONEPAREN        CMP     #%100,D4
00006826  6600 0008                746                  BNE     DONE
0000682A  1CFC 0029                747                  MOVE.B  #')',(A6)+                
0000682E                           748  
0000682E  4244                     749                  CLR     D4
00006830  4E75                     750  DONE            RTS
00006832                           751  
00006832                           752          
00006832                           753                 
00006832                           754  bits5to7
00006832  4243                     755                 CLR      D3
00006834  4EB9 000069CA            756                 JSR      COPY_OPCODE  // opcode copied to D2
0000683A  C47C 0E00                757                 AND      #%0000111000000000, D2
0000683E  E09A                     758                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006840  E29A                     759                 ROR.L    #1, D2
00006842  3602                     760                 MOVE.W   D2,D3 // moving isolated bits into d3
00006844  4E75                     761                 RTS
00006846                           762                 
00006846                           763  bits5to8
00006846  4243                     764                 CLR      D3
00006848  4EB9 000069CA            765                 JSR      COPY_OPCODE  // opcode copied to D2
0000684E  C47C 0F00                766                 AND      #%0000111100000000, D2
00006852  E09A                     767                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006854  3602                     768                 MOVE.W   D2,D3 // moving isolated bits into d3
00006856  4E75                     769                 RTS
00006858                           770                 
00006858                           771  bits8to10
00006858  4243                     772                 CLR      D3
0000685A  4EB9 000069CA            773                 JSR      COPY_OPCODE  // opcode copied to D2
00006860  C47C 01C0                774                 AND      #%0000000111000000, D2
00006864  EC9A                     775                 ROR.L    #6, D2          // rotate bits so isolated at the end
00006866  3602                     776                 MOVE.W   D2,D3 // moving isolated bits into d3
00006868  4E75                     777                 RTS               
0000686A                           778             
0000686A                           779  bits11to13
0000686A  4243                     780                 CLR      D3
0000686C  4EB9 000069CA            781                 JSR      COPY_OPCODE  // opcode copied to D2
00006872  C47C 0038                782                 AND      #%0000000000111000, D2
00006876  E69A                     783                 ROR.L    #3, D2          // rotate bits so isolated at the end
00006878  3602                     784                 MOVE.W   D2,D3 // moving isolated bits into d3
0000687A  4E75                     785                 RTS
0000687C                           786             
0000687C                           787  bits14to16
0000687C  4243                     788                 CLR      D3
0000687E  4EB9 000069CA            789                 JSR      COPY_OPCODE  // opcode copied to D2
00006884  C47C 0007                790                 AND      #%0000000000000111, D2
00006888  3602                     791                 MOVE.W   D2,D3 // moving isolated bits into d3
0000688A  4E75                     792                 RTS
0000688C                           793  bits11to16
0000688C  4243                     794                 CLR      D3
0000688E  4EB9 000069CA            795                 JSR      COPY_OPCODE  // opcode copied to D2
00006894  C47C 003F                796                 AND      #%0000000000111111, D2
00006898  3602                     797                 MOVE.W   D2,D3 // moving isolated bits into d3
0000689A  4E75                     798                 RTS
0000689C                           799  bits1to10
0000689C  4243                     800                 CLR      D3
0000689E  4EB9 000069CA            801                 JSR      COPY_OPCODE  // opcode copied to D2
000068A4  C47C FFC0                802                 AND      #%1111111111000000, D2
000068A8  EC9A                     803                 ROR.L    #6, D2
000068AA  3602                     804                 MOVE.W   D2,D3 // moving isolated bits into d3
000068AC  4E75                     805                 RTS
000068AE                           806  ** DN       
000068AE                           807  MODE000         
000068AE  1CFC 0044                808                  MOVE.B  #'D',(A6)+     
000068B2  4E75                     809                  RTS
000068B4                           810  
000068B4                           811  ** AN
000068B4                           812  MODE001         
000068B4  4EB9 000068F2            813                  JSR ADDRESS_BUFFER  
000068BA  4E75                     814                  RTS      
000068BC                           815  
000068BC                           816   ** (AN)
000068BC                           817  MODE010         
000068BC  1CFC 0028                818                  MOVE.B  #'(', (A6)+
000068C0  1CFC 0041                819                  MOVE.B  #'A',(A6)+  
000068C4  4E75                     820                  RTS      
000068C6                           821  
000068C6                           822  ** (AN)+ 
000068C6                           823  MODE011         
000068C6  1CFC 0028                824                  MOVE.B  #'(', (A6)+
000068CA  1CFC 0041                825                  MOVE.B  #'A',(A6)+        
000068CE                           826  
000068CE                           827   ** -(AN)
000068CE                           828  MODE100         
000068CE  1CFC 002D                829                  MOVE.B  #'-', (A6)+
000068D2  1CFC 0028                830                  MOVE.B  #'(', (A6)+
000068D6  1CFC 0041                831                  MOVE.B  #'A',(A6)+
000068DA                           832                  
000068DA                           833  **INVALID               
000068DA                           834  MODE101         
000068DA  1CFC 0028                835                  MOVE.B  #'(', (A6)+
000068DE  1CFC 0041                836                  MOVE.B  #'A',(A6)+ 
000068E2                           837                  
000068E2                           838  **INVALID
000068E2                           839  MODE110         
000068E2  1CFC 0028                840                  MOVE.B  #'(', (A6)+
000068E6  1CFC 0041                841                  MOVE.B  #'A',(A6)+  
000068EA                           842  
000068EA                           843  ** ABSOLUTE AND IMMEDIATE            
000068EA                           844  MODE111         
000068EA                           845                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
000068EA  4EB9 000068F8            846                 JSR ABSOLUTE_BUFFER  
000068F0  4E75                     847                 RTS            
000068F2                           848                                          
000068F2                           849  ADDRESS_BUFFER
000068F2  1CFC 0041                850                  MOVE.B  #'A',(A6)+ 
000068F6  4E75                     851                  RTS
000068F8                           852                 
000068F8                           853  ABSOLUTE_BUFFER
000068F8  4243                     854                 CLR      D3
000068FA  3604                     855                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000068FC  1CF8 0024                856                 MOVE.B   '$', (A6)+
00006900  B67C 0000                857                 CMP.W    #%000, D3
00006904  6700 000E                858                 BEQ      ABSOLUTE_WORD_BUFFER
00006908  4243                     859                 CLR      D3
0000690A  3604                     860                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
0000690C  B67C 0001                861                 CMP.W    #%001, D3
00006910  6700 0012                862                 BEQ      ABSOLUTE_LONG_BUFFER
00006914                           863                 
00006914                           864  ABSOLUTE_WORD_BUFFER
00006914                           865                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00006914                           866                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00006914  1CFC 0046                867                         MOVE.B #'F', (A6)+ 
00006918  1CFC 0046                868                         MOVE.B #'F', (A6)+ 
0000691C  1CFC 0046                869                         MOVE.B #'F', (A6)+ 
00006920  1CFC 0046                870                         MOVE.B #'F', (A6)+   
00006924                           871  ABSOLUTE_LONG_BUFFER       
00006924                           872                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00006924                           873                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00006924  1CFC 0047                874                         MOVE.B #'G', (A6)+ 
00006928  1CFC 0047                875                         MOVE.B #'G', (A6)+ 
0000692C  1CFC 0047                876                         MOVE.B #'G', (A6)+ 
00006930  1CFC 0047                877                         MOVE.B #'G', (A6)+ 
00006934                           878                                                      
00006934                           879  
00006934                           880  PRINT_BUFFER    
00006934  1CFC 0000                881                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00006938  43F9 00006ADE            882                 LEA      BUFFER, A1
0000693E  303C 000E                883                 MOVE.W   #14,D0
00006942  4E4F                     884                 TRAP     #15
00006944  6000 F903                885                 BRA EXIT
00006948                           886                 
00006948                           887                 
00006948                           888  
00006948                           889  INVALID_EA  
00006948                           890                  * TODO: IMPLEMENT
00006948                           891                  *** CLEAR OUT A6
00006948                           892                  ** PUT INVALID MESSAGE INTO A6
00006948  6000 F8FF                893                  BRA EXIT
0000694C                           894  INVALID_OP  
0000694C                           895                  ** TODO: IMPLEMENT
0000694C                           896                 *** CLEAR OUT A6
0000694C                           897                  ** PUT INVALID MESSAGE INTO A6
0000694C  6000 F8FB                898                  BRA EXIT             
00006950                           899                  
00006950  43F8 618B                900  NOP                 LEA     NOP_disp,A1          
00006954  103C 000E                901                      MOVE.B  #14,D0
00006958  4E4F                     902                      TRAP    #15
0000695A  6000 F8ED                903                      BRA     EXIT
0000695E                           904                   
0000695E                           905  RTS      
0000695E  43F8 61F2                906                      LEA     RTS_disp,A1          
00006962  103C 000E                907                      MOVE.B  #14,D0
00006966  4E4F                     908                      TRAP    #15 
00006968  6000 F8DF                909                      BRA     EXIT
0000696C                           910  JSR      
0000696C  4DF9 00006ADE            911                      LEA     BUFFER, A6
00006972  1CFC 004A                912                      MOVE.B #'J', (A6)+
00006976  1CFC 0053                913                      MOVE.B #'S', (A6)+
0000697A  1CFC 0052                914                      MOVE.B #'R', (A6)+
0000697E  1CFC 0020                915                      MOVE.B #' ', (A6)+
00006982  43F9 00006ADE            916                      LEA     BUFFER, A1
00006988                           917                      ** BITS 10 - 12 MODE       
00006988                           918                      ** BITS 13 - 16 REGISTER
00006988  103C 000E                919                      MOVE.B  #14,D0
0000698C  4E4F                     920                      TRAP    #15 
0000698E  6000 F8B9                921                      BRA     EXIT
00006992                           922                    
00006992                           923  MOVEM      
00006992                           924                     
00006992                           925                      ** SIZE SUBROUTINE
00006992                           926                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00006992  C47C 0040                927                      AND #%0000000001000000,D2 
00006996                           928                      * WORD
00006996  B4BC 00000040            929                      CMP.L   #%0000000001000000,D2
0000699C  4EB9 000069B2            930                      JSR     MOVEM_W 
000069A2                           931                      *LONG
000069A2  B4BC 00000040            932                      CMP.L   #%0000000001000000,D2 
000069A8                           933                     ** JSR     MOVEM_L
000069A8  103C 000E                934                      MOVE.B  #14,D0
000069AC  4E4F                     935                      TRAP    #15
000069AE  6000 F899                936                      BRA     EXIT 
000069B2                           937                      
000069B2                           938  MOVEM_W 
000069B2  43F8 61A0                939                       LEA     MOVEM_disp,A1
000069B6                           940                      * PRINT MOVEM
000069B6  103C 000E                941                       MOVE.B  #14,D0
000069BA  4E4F                     942                       TRAP    #15
000069BC                           943          
000069BC                           944                      * PRINT WORD PORTION
000069BC  41F8 6237                945                       LEA     size_w, A0
000069C0  103C 000E                946                       MOVE.B  #14,D0
000069C4  4E4F                     947                       TRAP    #15 
000069C6                           948          
000069C6  6000 F881                949                       BRA     EXIT 
000069CA                           950       
000069CA                           951     
000069CA                           952  COPY_OPCODE 
000069CA                           953                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
000069CA  4242                     954                       CLR    D2  
000069CC  3405                     955                       MOVE.W D5,D2 
000069CE  4E75                     956                       RTS  
000069D0                           957                       
000069D0                           958  ****************************
000069D0                           959  
000069D0                           960                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000069D0                           961                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000069D0                           962                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000069D0                           963  GETSIZE_ADD
000069D0  4EB8 6858                964              JSR     bits8to10
000069D4  B67C 0000                965              CMP     #%000,D3
000069D8  6600 0010                966              BNE     ADD_NOTBYTE
000069DC  4EB9 00006ABA            967              JSR     SIZEISBYTE
000069E2  3C3C 0001                968              MOVE    #1,D6
000069E6  4243                     969              CLR     D3
000069E8  4E75                     970              RTS
000069EA                           971          
000069EA                           972  ADD_NOTBYTE 
000069EA  B67C 0001                973              CMP     #%001,D3
000069EE  6600 0010                974              BNE     ADD_NOTWORD
000069F2  4EB9 00006AC6            975              JSR     SIZEISWORD
000069F8  3C3C 0001                976              MOVE    #1,D6
000069FC  4243                     977              CLR     D3
000069FE  4E75                     978              RTS
00006A00                           979              
00006A00                           980  ADD_NOTWORD
00006A00  B67C 0002                981              CMP     #%010,D3
00006A04  6600 0010                982              BNE     ADD_NOTLEFT
00006A08  4EB9 00006AD2            983              JSR     SIZEISLONG
00006A0E  3C3C 0001                984              MOVE    #1,D6
00006A12  4243                     985              CLR     D3
00006A14  4E75                     986              RTS
00006A16                           987              
00006A16                           988  ADD_NOTLEFT     ;check other direction
00006A16  B67C 0004                989              CMP     #%100,D3
00006A1A  6600 0010                990              BNE     ADD_NOTRIGHTBYTE
00006A1E  4EB9 00006ABA            991              JSR     SIZEISBYTE
00006A24  3C3C 0002                992              MOVE    #2,D6
00006A28  4243                     993              CLR     D3
00006A2A  4E75                     994              RTS
00006A2C                           995              
00006A2C                           996  ADD_NOTRIGHTBYTE
00006A2C  B67C 0005                997              CMP     #%101,D3
00006A30  6600 0010                998              BNE     ADD_NOTRIGHTWORD
00006A34  4EB9 00006AC6            999              JSR     SIZEISWORD
00006A3A  3C3C 0002               1000              MOVE    #2,D6
00006A3E  4243                    1001              CLR     D3
00006A40  4E75                    1002              RTS
00006A42                          1003  
00006A42                          1004  ADD_NOTRIGHTWORD
00006A42  B67C 0006               1005              CMP     #%110,D3
00006A46  6600 FF00               1006              BNE     INVALID_EA
00006A4A  4EB9 00006AD2           1007              JSR     SIZEISLONG
00006A50  3C3C 0002               1008              MOVE    #2,D6
00006A54  4243                    1009              CLR     D3
00006A56  4E75                    1010              RTS 
00006A58                          1011                               
00006A58                          1012                       
00006A58                          1013                       
00006A58                          1014  *****************************                  
00006A58                          1015  GETSIZE_ADDI
00006A58  4EB8 6858               1016          JSR     bits8to10
00006A5C  B67C 0000               1017          CMP     #%000,D3
00006A60  6600 000C               1018          BNE     ADDI_NOTBYTE
00006A64  4EB9 00006ABA           1019          JSR     SIZEISBYTE
00006A6A  4243                    1020          CLR     D3
00006A6C  4E75                    1021          RTS
00006A6E                          1022  
00006A6E                          1023  ADDI_NOTBYTE
00006A6E  B67C 0001               1024          CMP     #%001,D3
00006A72  6600 000C               1025          BNE     ADDI_NOTWORD
00006A76  4EB9 00006AC6           1026          JSR     SIZEISWORD
00006A7C  4243                    1027          CLR     D3
00006A7E  4E75                    1028          RTS
00006A80                          1029          
00006A80                          1030  ADDI_NOTWORD
00006A80  B67C 0002               1031          CMP     #%010,D3
00006A84  6600 FEC2               1032          BNE     INVALID_EA
00006A88  4EB9 00006AD2           1033          JSR     SIZEISLONG
00006A8E  4243                    1034          CLR     D3
00006A90  4E75                    1035          RTS
00006A92                          1036          
00006A92                          1037                              
00006A92                          1038                       
00006A92                          1039  ********************************          
00006A92                          1040                       
00006A92                          1041                       
00006A92                          1042  ********************************                     
00006A92                          1043  GETSIZE_ADDA
00006A92  4EB8 6858               1044          JSR     bits8to10
00006A96  B67C 0003               1045          CMP     #%011,D3
00006A9A  6600 000C               1046          BNE     ADDA_NOTWORD
00006A9E  4EB9 00006AC6           1047          JSR     SIZEISWORD
00006AA4  4243                    1048          CLR     D3
00006AA6  4E75                    1049          RTS
00006AA8                          1050          
00006AA8                          1051  
00006AA8                          1052          
00006AA8                          1053  ADDA_NOTWORD
00006AA8  B67C 0007               1054          CMP     #%111,D3
00006AAC  6600 FE9A               1055          BNE     INVALID_EA
00006AB0  4EB9 00006AD2           1056          JSR     SIZEISLONG
00006AB6  4243                    1057          CLR     D3
00006AB8  4E75                    1058          RTS
00006ABA                          1059  **********************************        
00006ABA                          1060      
00006ABA                          1061  SIZEISBYTE
00006ABA  1CFC 002E               1062         MOVE.B   #'.',(A6)+
00006ABE  1CFC 0042               1063         MOVE.B   #'B',(A6)+
00006AC2  4243                    1064         CLR      D3
00006AC4  4E75                    1065         RTS
00006AC6                          1066  
00006AC6                          1067  SIZEISWORD    
00006AC6  1CFC 002E               1068         MOVE.B   #'.',(A6)+
00006ACA  1CFC 0057               1069         MOVE.B   #'W',(A6)+
00006ACE  4243                    1070         CLR      D3
00006AD0  4E75                    1071         RTS
00006AD2                          1072                  
00006AD2                          1073  SIZEISLONG    
00006AD2  1CFC 002E               1074         MOVE.B   #'.',(A6)+
00006AD6  1CFC 004C               1075         MOVE.B   #'L',(A6)+
00006ADA  4243                    1076         CLR      D3
00006ADC  4E75                    1077         RTS
00006ADE                          1078                  
00006ADE                          1079       
00006ADE= 20 20 20 20 20 00       1080  BUFFER DC.B '     ',0     
00006AE4                          1081        
00006AE4                          1082  
00006AE4                          1083      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     68F8
ABSOLUTE_LONG_BUFFER  6924
ABSOLUTE_WORD_BUFFER  6914
ADD                 63EC
ADDA                63C6
ADDA_BUFFER         63D0
ADDA_DISP           61AA
ADDA_NOTWORD        6AA8
ADDI                6448
ADDI_BUFFER         64D0
ADDI_DES            646C
ADDI_DISP           61AF
ADDI_NOTBYTE        6A6E
ADDI_NOTWORD        6A80
ADDI_SRC            645E
ADDQ                65E6
ADDQ_BUFFER         65F0
ADDQ_DISP           61B4
ADDRESS_BUFFER      68F2
ADDR_ODDBIT_MSG     60C4
ADDR_ORDER_CHECK    60EB
ADD_BUFFER          642C
ADD_DEST            6440
ADD_DIRECTION_REVERSED  6414
ADD_DISP            61A6
ADD_DONE            6428
ADD_NOTBYTE         69EA
ADD_NOTLEFT         6A16
ADD_NOTRIGHTBYTE    6A2C
ADD_NOTRIGHTWORD    6A42
ADD_NOTWORD         6A00
ADD_SRC             6440
AND                 66C6
AND_BUFFER          66D0
AND_DISP            61CF
ASL                 6702
ASL_BUFFER          670C
ASL_DISP            61DE
ASR                 66E6
ASR_BUFFER          66F0
ASR_DISP            61E2
BACKSLASHSIGH       622C
BCC_DISP            61F6
BGT_DISP            61FA
BITS11TO13          686A
BITS11TO16          688C
BITS14TO16          687C
BITS1TO10           689C
BITS5TO7            6832
BITS5TO8            6846
BITS8TO10           6858
BLE_DISP            61FE
BUFFER              6ADE
CLOSEPAREN          6230
CLR_DISP            61CB
CMP                 6686
CMP_BUFFER          6690
CODE0000            62AE
CODE0001            62C2
CODE0010            62C6
CODE0011            62CA
CODE0100            62CE
CODE0101            6302
CODE0110            6308
CODE0111            630C
CODE1000            6312
CODE1001            6324
CODE1010            632A
CODE1011            632E
CODE1100            6334
CODE1101            6346
CODE1110            6392
CODE1111            63C2
COMMASIGN           622A
COPY_OPCODE         69CA
CR                  D
DIVU                662A
DIVU_BUFFER         6634
DIVU_DISP           61C2
DOLLARSIGN          6224
DONE                6830
ENDTEST_MSG         613F
EXIT                6249
FINISHER            6802
FIVE                67D6
FOUR                67C6
GETSIZE_ADD         69D0
GETSIZE_ADDA        6A92
GETSIZE_ADDI        6A58
HEXATABLE           6202
INPUT_BUFFER        623E
INSERT_NUM          6786
INVALIDEA_DISP      6183
INVALID_DISP        617E
INVALID_EA          6948
INVALID_OP          694C
JMP_MODE            6756
JMP_TABLE           624E
JSR                 696C
JSR_DISP            61EE
LEA                 64EC
LEA_BUFFER          6510
LEA_DEST            65C2
LEA_DISP            61C7
LEA_SRC             6522
LF                  A
LINEBREAK           617B
LINECOUNT           623D
LOCATION_ENDDATA    6244
LOCATION_END_MSG    60A7
LOCATION_STARTDATA  6240
LOCATION_START_MSG  6088
LSL                 671E
LSL_BUFFER          6728
LSL_DISP            61D6
LSR                 673A
LSR_BUFFER          6744
LSR_DISP            61DA
MINUSSIGN           6228
MODE000             68AE
MODE001             68B4
MODE010             68BC
MODE011             68C6
MODE100             68CE
MODE101             68DA
MODE110             68E2
MODE111             68EA
MOVEA_DISP          6194
MOVEM               6992
MOVEM_DISP          61A0
MOVEM_W             69B2
MOVEQ               6606
MOVEQ_BUFFER        6610
MOVEQ_DISP          619A
MOVE_DISP           618F
MULS                66A6
MULS_BUFFER         66B0
MULS_DISP           61BD
NOP                 6950
NOP_DISP            618B
ONE                 6796
ONEPAREN            6822
OPENPAREN           622E
OR                  664A
OR_BUFFER           6654
OR_DISP             61D3
PAUSE_MSG           6125
PLUSSIGN            6226
POSTINCR            6810
POUNDSIGN           6222
PRINT_BUFFER        6934
ROL_DISP            61E6
ROR_DISP            61EA
RTS                 695E
RTS_DISP            61F2
SEVEN               67F6
SIX                 67E6
SIZEISBYTE          6ABA
SIZEISLONG          6AD2
SIZEISWORD          6AC6
SIZE_B              6234
SIZE_L              623A
SIZE_W              6237
SPACE               6232
START               6000
SUB                 6666
SUB_BUFFER          6670
SUB_DISP            61B9
TABLE_LENGTH        6248
THREE               67B6
TWO                 67A6
WELCOME_MSG         6024
