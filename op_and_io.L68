00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 9:41:56 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C6              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 0000112A             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012E0             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001C4A             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 0000121D             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001CA0             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001149             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012E0             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001C4A             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 0000121D             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001CBA             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012F0             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001C46             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C                            80                  ; MOVE.W  (A2), D3
0000109C                            81  
0000109C                            82                   * TEST OPCODES
0000109C                            83                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109C                            84                   ;MOVE.W  #$4E71,D3 * NOP
0000109C                            85                   ; MOVE.W  #$4E75,D3 * RTS
0000109C                            86                   ; MOVE.W  #$4EB0,D3 * JSR
0000109C                            87                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109C                            88                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109C                            89                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109C                            90                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109C                            91  
0000109C  363C 5201                 92                   MOVE.W    #$5201,D3    *ADDQ
000010A0                            93  
000010A0                            94                   ; MOVE.W     #$7E70, D3 *MOVEQ
000010A0                            95                   ; MOVE.W     #$80C0, D3 *DIVU
000010A0                            96                   ; MOVE.W     #$8000, D3 * OR
000010A0                            97                   ; MOVE.W        #$9000, D3 * SUB
000010A0                            98                   ; MOVE.W        #$B000, D3 * CMP
000010A0                            99                   ; MOVE.W        #$C1C0, D3 * MULS
000010A0                           100                   ; MOVE.W        #$C000, D3 * AND
000010A0                           101                   ; MOVE.W        #$E0F8, D3  *ASR
000010A0                           102                   ; MOVE.W        #$E1E2, D3  *ASL
000010A0                           103                   ; MOVE.W        #$E393, D3  *LSL
000010A0                           104                   ; MOVE.W        #$E2DC, D3  *LSR
000010A0                           105  
000010A0  4EB9 00001ACA            106                   JSR    PRINT_ADDRESS
000010A6  544A                     107                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010A8  3A03                     108                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AA  183C 000C                109                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010AE  E86B                     110                   LSR.W   D4,D3       *Move the bits
000010B0  C6FC 0006                111                   MULU    #6,D3       *Form offset     
000010B4  4EB0 3000                112                   JSR     0(A0,D3)   *Jump indirect with index
000010B8  4EB9 00001AEA            113                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010BE  B4CB                     114                   CMP     A3,A2
000010C0  6E00 0229                115                   BGT     EXIT
000010C4  60C8                     116                   BRA     MAIN_LOOP
000010C6                           117                   
000010C6                           118                                  
000010C6                           119      INCLUDE 'definitions.x68'
000010C6                           120  
000010C6  =0000000D                121  CR              EQU     $0D         carriage return
000010C6  =0000000A                122  LF              EQU     $0A         line feed
000010C6= 43 53 53 20 34 32 ...    123  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010EA= 42 79 20 54 65 61 ...    124                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
0000112A= 45 6E 74 65 72 20 ...    125  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001149= 45 6E 74 65 72 20 ...    126  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001166= 41 64 64 72 65 73 ...    127  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
0000118D= 45 6E 64 69 6E 67 ...    128  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C7= 50 72 65 73 73 20 ...    129  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011E1= 52 65 61 63 68 65 ...    130  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011FC= 54 72 79 20 61 6E ...    131                      DC.B    'Try another location? (yes/no): ',0
0000121D= 0D 0A 00                 132  linebreak           DC.B    CR,LF,0
00001220                           133                      
00001220= 44 41 54 41 00           134  Invalid_disp        DC.B    'DATA',0
00001225= 57 52 4F 4E 47 45 ...    135  InvalidEA_disp      DC.B    'WRONGEA',0
0000122D                           136  
0000122D= 4E 4F 50 00              137  NOP_disp            DC.B    'NOP',0
00001231= 4D 4F 56 45 00           138  MOVE_disp           DC.B    'MOVE',0
00001236= 4D 4F 56 45 41 00        139  MOVEA_disp          DC.B    'MOVEA',0
0000123C= 4D 4F 56 45 51 00        140  MOVEQ_disp          DC.B    'MOVEQ',0
00001242= 4D 4F 56 45 4D 00        141  MOVEM_disp          DC.B    'MOVEM',0
00001248= 41 44 44 00              142  ADD_disp            DC.B    'ADD',0
0000124C= 41 44 44 41 00           143  ADDA_disp           DC.B    'ADDA',0
00001251= 41 44 44 49 00           144  ADDI_disp           DC.B    'ADDI',0
00001256= 41 44 44 51 00           145  ADDQ_disp           DC.B    'ADDQ',0
0000125B= 53 55 42 00              146  SUB_disp            DC.B    'SUB',0
0000125F= 4D 55 4C 53 00           147  MULS_disp           DC.B    'MULS',0
00001264= 44 49 56 55 00           148  DIVU_disp           DC.B    'DIVU',0
00001269= 4C 45 41 00              149  LEA_disp            DC.B    'LEA',0
0000126D= 43 4C 52 00              150  CLR_disp            DC.B    'CLR',0
00001271= 41 4E 44 00              151  AND_disp            DC.B    'AND',0
00001275= 4F 52 00                 152  OR_disp             DC.B    'OR',0
00001278= 4C 53 4C 00              153  LSL_disp            DC.B    'LSL',0
0000127C= 4C 53 52 00              154  LSR_disp            DC.B    'LSR',0
00001280= 41 53 4C 00              155  ASL_disp            DC.B    'ASL',0
00001284= 41 53 52 00              156  ASR_disp            DC.B    'ASR',0
00001288= 52 4F 4C 00              157  ROL_disp            DC.B    'ROL',0
0000128C= 52 4F 52 00              158  ROR_disp            DC.B    'ROR',0
00001290= 4A 53 52 00              159  JSR_disp            DC.B    'JSR',0
00001294= 52 54 53 00              160  RTS_disp            DC.B    'RTS',0
00001298= 42 43 43 00              161  BCC_disp            DC.B    'BCC',0
0000129C= 42 47 54 00              162  BGT_disp            DC.B    'BGT',0    
000012A0= 42 4C 45 00              163  BLE_disp            DC.b    'BLE',0
000012A4                           164  
000012A4                           165  
000012A4= 30 00                    166  hexaTable               DC.B    '0',0
000012A6= 31 00                    167                          DC.B    '1',0
000012A8= 32 00                    168                          DC.B    '2',0
000012AA= 33 00                    169                          DC.B    '3',0
000012AC= 34 00                    170                          DC.B    '4',0
000012AE= 35 00                    171                          DC.B    '5',0
000012B0= 36 00                    172                          DC.B    '6',0
000012B2= 37 00                    173                          DC.B    '7',0
000012B4= 38 00                    174                          DC.B    '8',0
000012B6= 39 00                    175                          DC.B    '9',0
000012B8= 41 00                    176                          DC.B    'A',0
000012BA= 42 00                    177                          DC.B    'B',0
000012BC= 43 00                    178                          DC.B    'C',0
000012BE= 44 00                    179                          DC.B    'D',0
000012C0= 45 00                    180                          DC.B    'E',0
000012C2= 46 00                    181                          DC.B    'F',0
000012C4= 23 00                    182  poundsign               DC.B    '#',0
000012C6= 24 00                    183  dollarsign              DC.B    '$',0
000012C8= 2B 00                    184  plussign                DC.B    '+',0
000012CA= 2D 00                    185  minussign               DC.B    '-',0
000012CC= 2C 00                    186  commasign               DC.B    ',',0
000012CE= 2F 00                    187  backslashsigh           DC.B    '/',0
000012D0= 28 00                    188  openparen               DC.B    '(',0
000012D2= 29 00                    189  closeparen              DC.B    ')',0
000012D4= 20 00                    190  space                   DC.B    ' ',0   
000012D6= 2E 42 00                 191  size_b                  DC.B    '.B',0
000012D9= 2E 57 00                 192  size_w                  DC.B    '.W',0        
000012DC= 2E 4C 00                 193  size_l                  DC.B    '.L',0
000012DF                           194  
000012DF                           195  linecount               DS.B    1       *storeage for lines on a screen
000012E0= 01                       196  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012E2                           197  location_startData      DS.L    1       *location on where to start reading data
000012E6                           198  location_endData        DS.L    1       *location on where to end reading data
000012EA                           199  table_length            DS.B    1       *Number of spaces in the table to print to console
000012EB                           200  
000012EB                           201  
000012EB                           202  -------------------- end include --------------------
000012EB                           203             
000012EB                           204  EXIT                 
000012EC  FFFF FFFF                205         SIMHALT   
000012F0                           206  
000012F0                           207  
000012F0                           208  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012F0  4EF9 00001350            209  jmp_table      JMP         code0000
000012F6                           210                  *ADDI
000012F6                           211  
000012F6  4EF9 00001364            212                 JMP         code0001
000012FC                           213  
000012FC  4EF9 00001368            214                 JMP         code0010
00001302                           215  
00001302  4EF9 0000136C            216                 JMP         code0011
00001308                           217  
00001308  4EF9 00001370            218                 JMP         code0100
0000130E                           219                             
0000130E  4EF9 000013A4            220                 JMP         code0101
00001314                           221                 * ADDQ
00001314                           222                  
00001314                           223        
00001314  4EF9 000013AA            224                 JMP         code0110
0000131A                           225                 * BCC
0000131A                           226                 * BGT
0000131A                           227                 * BLE
0000131A                           228                 
0000131A  4EF9 000013AE            229                 JMP         code0111
00001320                           230                 * MOVEQ
00001320                           231  
00001320  4EF9 000013B4            232                 JMP         code1000
00001326                           233                 * DIVU
00001326                           234                 * OR
00001326                           235  
00001326  4EF9 000013C6            236                 JMP         code1001
0000132C                           237                  *SUB
0000132C  4EF9 000013CC            238                 JMP         code1010
00001332                           239                 
00001332  4EF9 000013D0            240                 JMP         code1011
00001338                           241                 * CMP
00001338                           242                 
00001338  4EF9 000013D6            243                 JMP         code1100
0000133E                           244                 * MULS
0000133E                           245                 * AND
0000133E                           246          
0000133E  4EF9 000013E8            247                 JMP         code1101
00001344                           248                 *ADD
00001344                           249                 *ADDA
00001344  4EF9 00001434            250                 JMP         code1110
0000134A                           251                 * ASR
0000134A                           252                 * ASL
0000134A                           253                 * LSL
0000134A                           254                 * LSR
0000134A                           255                 * ROL
0000134A                           256                 * ROR
0000134A                           257  
0000134A  4EF9 00001464            258                 JMP         code1111
00001350                           259  
00001350                           260  
00001350                           261  code0000      
00001350  4EB9 00001920            262                 JSR          bits5to8 // RETURNS INTO D3
00001356  B6BC 00000006            263                 CMP.L        #%0110, D3
0000135C  6600 06CE                264                 BNE          INVALID_OP
00001360  6000 01D0                265                 BRA          ADDI  
00001364                           266  
00001364  4E72 2700                267  code0001       STOP        #$2700
00001368                           268  
00001368  4E72 2700                269  code0010       STOP        #$2700
0000136C                           270  
0000136C  4E72 2700                271  code0011       STOP        #$2700
00001370                           272  
00001370                           273  code0100       
00001370  4EB9 00001AC4            274                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
00001376                           275                  
00001376                           276                 *NOP
00001376  C47C 0FFF                277                 AND     #%0000111111111111,D2
0000137A  B4BC 00000E71            278                 CMP.L   #%000111001110001, D2
00001380  6700 06C8                279                 BEQ     NOP
00001384                           280                 
00001384                           281                 *RTS
00001384  C47C 0FFF                282                 AND     #%0000111111111111,D2
00001388  B4BC 00000E75            283                 CMP.L   #%0000111001110101, D2
0000138E  6700 06C8                284                 BEQ     RTS
00001392                           285  
00001392                           286                 *JSR
00001392  C47C 0FC0                287                 AND     #%0000111111000000,D2
00001396  B4BC 00000E80            288                 CMP.L   #%0000111010000000,D2
0000139C  6700 06C8                289                 BEQ     JSR
000013A0                           290                 
000013A0                           291                 * MOVEM
000013A0                           292                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000013A0                           293                ** AND     #%0000111110000000,D2
000013A0                           294                 * DATA REGISTER
000013A0                           295                ** CMP.L   #%0000100010000000, D2
000013A0                           296                 ** JSR      MOVEM
000013A0                           297                 * ADDRESS REGISTER (DECREMENTED)
000013A0                           298                 ** CMP.L  #%0000110010000000, D2
000013A0                           299                 ** JSR    MOVEM
000013A0                           300                  
000013A0                           301                  ** TO DO: BRANCH IF INVALID OPCODE
000013A0                           302                  *LEA - if it's not the top codes, it's LEA
000013A0  6000 0234                303                  BRA     LEA
000013A4                           304  code0101      
000013A4                           305  
000013A4  4EB9 000016C0            306                  JSR   ADDQ
000013AA                           307  
000013AA  4E72 2700                308  code0110        STOP        #$2700
000013AE                           309  
000013AE                           310  code0111       
000013AE  4EB9 000016E0            311                  JSR       MOVEQ
000013B4                           312  
000013B4                           313  code1000      
000013B4  4EB9 00001932            314                  JSR        bits8to10
000013BA  B67C 0003                315                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013BE  6700 0344                316                  BEQ        DIVU
000013C2  6000 0360                317                  BRA        OR       ** OTHERWISE OR
000013C6                           318                  
000013C6                           319  
000013C6                           320  code1001       
000013C6  4EB9 00001740            321                 JSR         SUB
000013CC  4E72 2700                322  code1010       STOP        #$2700
000013D0                           323  
000013D0                           324  code1011       
000013D0  4EB9 00001760            325                 JSR         CMP
000013D6                           326  
000013D6                           327  code1100      
000013D6  4EB9 00001932            328                  JSR        bits8to10
000013DC  B67C 0007                329                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013E0  6700 039E                330                  BEQ        MULS
000013E4  6000 03BA                331                  BRA        AND       ** OTHERWISE AND
000013E8                           332  
000013E8                           333  code1101       
000013E8  4EB9 00001AC4            334                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013EE                           335                 *ADDA
000013EE  4EB9 00001932            336                 JSR      bits8to10
000013F4  B67C 0003                337                 CMP      #%011, D3  ** WORD
000013F8  6700 006E                338                 BEQ      ADDA
000013FC  B67C 0007                339                 CMP      #%111, D3   ** LONG
00001400  6700 0066                340                 BEQ      ADDA
00001404                           341                 
00001404                           342                 *ADD
00001404  B67C 0000                343                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00001408  6700 0084                344                 BEQ      ADD
0000140C  B67C 0001                345                 CMP      #%001, D3   ** WORD TO DATA REGISTER
00001410  6700 007C                346                 BEQ      ADD
00001414  B67C 0002                347                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001418  6700 0074                348                 BEQ      ADD
0000141C  B67C 0004                349                 CMP      #%100, D3   ** BYTE TO EA
00001420  6700 006C                350                 BEQ      ADD
00001424  B67C 0005                351                 CMP      #%101, D3   ** WORD TO EA
00001428  6700 0064                352                 BEQ      ADD
0000142C  B67C 0006                353                 CMP      #%110, D3   ** LONG TO EA
00001430  6700 005C                354                 BEQ      ADD
00001434                           355                 
00001434                           356  
00001434                           357  code1110       
00001434                           358                  * ASR
00001434  4EB9 00001976            359                  JSR     bits1to10
0000143A  B67C 0383                360                  CMP     #%1110000011,D3
0000143E  6700 0380                361                  BEQ     ASR
00001442                           362                  
00001442                           363                  * ASL
00001442  B67C 0387                364                  CMP     #%1110000111,D3
00001446  6700 0394                365                  BEQ     ASL
0000144A                           366                  
0000144A                           367                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
0000144A                           368                  * LSL
0000144A  4244                     369                  CLR     D4
0000144C  2803                     370                  MOVE.L  D3,D4
0000144E  C8BC 00A98671            371                  AND.L   #11110001,D4
00001454  B87C 01C7                372                  CMP     #%111000111,D4
00001458  6700 039E                373                  BEQ     LSL
0000145C                           374                  
0000145C                           375                  * LSR
0000145C  B67C 038B                376                  CMP     #%1110001011,D3
00001460  6700 03B2                377                  BEQ     LSR
00001464                           378                  
00001464                           379                  * ROL
00001464                           380                  
00001464                           381                  * ROR
00001464                           382  
00001464  4E72 2700                383  code1111       STOP        #$2700
00001468                           384  
00001468                           385  ADDA    
00001468  4EB9 00001472            386                 JSR     ADDA_BUFFER
0000146E  6000 067A                387                 BRA     PRINT_BUFFER
00001472                           388                  
00001472                           389  ADDA_BUFFER
00001472  1CFC 0041                390                 MOVE.B   #'A',(A6)+
00001476  1CFC 0044                391                 MOVE.B   #'D', (A6)+  
0000147A  1CFC 0044                392                 MOVE.B   #'D', (A6)+
0000147E  1CFC 0041                393                 MOVE.B   #'A', (A6)+
00001482  4EB9 00001BEE            394                 JSR      GETSIZE_ADDA
00001488  1CFC 0020                395                 MOVE.B   #' ', (A6)+
0000148C  4E75                     396                 RTS
0000148E                           397                 
0000148E                           398                 
0000148E                           399                 
0000148E                           400  *********************************************               
0000148E                           401  ADD    
0000148E  4EB9 00001498            402                 JSR     ADD_BUFFER
00001494  6000 0654                403                 BRA     PRINT_BUFFER
00001498                           404                  
00001498                           405  ADD_BUFFER
00001498  1CFC 0041                406                 MOVE.B   #'A',(A6)+
0000149C  1CFC 0044                407                 MOVE.B   #'D', (A6)+  
000014A0  1CFC 0044                408                 MOVE.B   #'D', (A6)+
000014A4  4EB9 00001B2C            409                 JSR      GETSIZE_ADD
000014AA                           410                 
000014AA                           411                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014AA                           412                 
000014AA  BC7C 0001                413                 CMP      #1,D6
000014AE  6600 001A                414                 BNE      ADD_DIRECTION_REVERSED
000014B2  4EB9 000014EC            415                 JSR      ADD_SRC
000014B8  1CFC 002C                416                 MOVE.B   #',', (A6)+
000014BC  1CFC 0020                417                 MOVE.B   #' ', (A6)+
000014C0  4EB9 00001510            418                 JSR      ADD_DEST
000014C6  6000 001C                419                 BRA      ADD_DONE
000014CA                           420                 
000014CA                           421                 
000014CA                           422  ADD_DIRECTION_REVERSED
000014CA                           423  
000014CA  4246                     424                 CLR      D6
000014CC  4EB9 00001510            425                 JSR      ADD_DEST
000014D2  1CFC 002C                426                 MOVE.B   #',', (A6)+
000014D6  1CFC 0020                427                 MOVE.B   #' ', (A6)+
000014DA  4EB9 000014EC            428                 JSR      ADD_SRC
000014E0  6000 0002                429                 BRA      ADD_DONE              
000014E4                           430                 
000014E4                           431                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014E4                           432                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014E4                           433                 
000014E4                           434  ADD_DONE       
000014E4  4246                     435                 CLR      D6
000014E6  4EB9 00001AEA            436                 JSR     PRINT_BUFFER
000014EC                           437  
000014EC                           438                  
000014EC                           439  
000014EC                           440  ***********************************************        
000014EC                           441  
000014EC                           442  
000014EC                           443  
000014EC                           444  ****************************************************************************************
000014EC                           445  ADD_SRC
000014EC                           446  
000014EC  4EB9 00001944            447                  JSR    bits11to13
000014F2  3803                     448                  MOVE   D3,D4
000014F4  41F9 00001830            449                  LEA     jmp_mode,A0    *Index into the table
000014FA  C6FC 0006                450                  MULU   #6,D3
000014FE  4EB0 3000                451                  JSR    0(A0,D3)     
00001502  4EB9 00001956            452                  JSR    bits14to16
00001508  4EB9 00001860            453                  JSR    insert_num
0000150E  4E75                     454                  RTS
00001510                           455  
00001510                           456  
00001510                           457  
00001510                           458  
00001510                           459  
00001510                           460  ADD_DEST
00001510  363C 0000                461                  MOVE.W #%000,D3     ;Can only have a data register.
00001514  3803                     462                  MOVE   D3,D4
00001516  41F9 00001830            463                  LEA     jmp_mode,A0    *Index into the table
0000151C  C6FC 0006                464                  MULU    #6,D3       *Form offset     
00001520  4EB0 3000                465                  JSR     0(A0,D3)   *Jump indirect with index
00001524                           466                  
00001524  4EB9 0000190C            467                  JSR     bits5to7
0000152A  4EB9 00001860            468                  JSR     insert_num
00001530  4E75                     469                  RTS
00001532                           470                          
00001532                           471  
00001532                           472  
00001532                           473  
00001532                           474  ADDI
00001532  4EB9 000015BA            475                  JSR     ADDI_BUFFER
00001538  4EB9 00001548            476                  JSR     ADDI_SRC
0000153E  4EB9 00001556            477                  JSR     ADDI_DES
00001544  6000 05A4                478                  BRA     PRINT_BUFFER
00001548                           479                  
00001548                           480  ADDI_SRC                        
00001548  1CFC 0023                481                  MOVE.B  #'#', (A6)+
0000154C  1CFC 002C                482                  MOVE.B  #',', (A6)+
00001550  1CFC 0020                483                  MOVE.B  #' ', (A6)+
00001554  4E75                     484                  RTS
00001556                           485                    ** TODO: IMPLEMENT THIS IN EA
00001556                           486                  ** Immediate field—Data immediately following the instruction.
00001556                           487                  **If size = 00, the data is the low-order byte of the immediate word.
00001556                           488                  **If size = 01, the data is the entire immediate word.
00001556                           489                  **If size = 10, the data is the next two immediate words. 
00001556                           490  ADDI_DES
00001556                           491                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001556                           492                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001556  4EB9 00001944            493                 JSR      bits11to13
0000155C  B67C 0001                494                 CMP      #%001, D3 **AN
00001560  6700 04C6                495                 BEQ      INVALID_EA
00001564  B67C 0005                496                 CMP      #%101, D3 **COMPLICATED
00001568  6700 04BE                497                 BEQ      INVALID_EA
0000156C  B67C 0006                498                 CMP      #%110, D3 **COMPLICATED
00001570  6700 04B6                499                 BEQ      INVALID_EA
00001574                           500                 
00001574  4EB9 00001966            501                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000157A  B67C 003C                502                 CMP      #%111100,D3 // immediate data
0000157E  6700 04A8                503                 BEQ      INVALID_EA
00001582  B67C 003A                504                 CMP      #%111010,D3 // complicated
00001586  6700 04A0                505                 BEQ      INVALID_EA
0000158A  B67C 003B                506                 CMP      #%111011,D3 // complicated
0000158E  6700 0498                507                 BEQ      INVALID_EA
00001592                           508                 
00001592  4EB9 00001944            509                 JSR      bits11to13 ** grab bits to jump with\
00001598  3803                     510                 MOVE     D3,D4
0000159A  41F9 00001830            511                 LEA     jmp_mode,A0    *Index into the table
000015A0  C6FC 0006                512                 MULU    #6,D3       *Form offset     
000015A4  4EB0 3000                513                 JSR     0(A0,D3)   *Jump indirect with index
000015A8                           514                 
000015A8  4243                     515                 CLR     D3
000015AA  4EB9 00001956            516                 JSR     bits14to16
000015B0  4EB9 00001860            517                 JSR     insert_num
000015B6  4244                     518                 CLR     D4
000015B8                           519                 
000015B8  4E75                     520                 RTS
000015BA                           521                 
000015BA                           522                             
000015BA                           523  ADDI_BUFFER
000015BA  1CFC 0041                524                 MOVE.B   #'A',(A6)+
000015BE  1CFC 0044                525                 MOVE.B   #'D', (A6)+  
000015C2  1CFC 0044                526                 MOVE.B   #'D', (A6)+
000015C6  1CFC 0049                527                 MOVE.B   #'I', (A6)+
000015CA                           528                 
000015CA  4EB9 00001BB4            529                 JSR      GETSIZE_ADDI
000015D0                           530                 
000015D0                           531                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015D0                           532                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015D0  1CFC 0020                533                 MOVE.B   #' ', (A6)+
000015D4  4E75                     534                 RTS
000015D6                           535                              
000015D6                           536  LEA
000015D6  4EB9 00001932            537                 JSR      bits8to10   // 1 1 1
000015DC  B47C 0007                538                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015E0  6600 044A                539                 BNE      INVALID_OP
000015E4  4EB9 000015F8            540                 JSR      LEA_BUFFER
000015EA  4EB9 0000160A            541                 JSR      LEA_SRC
000015F0  4EB9 0000169C            542                 JSR      LEA_DEST
000015F6  4E75                     543                 RTS
000015F8                           544                 
000015F8                           545  LEA_BUFFER 
000015F8  1CFC 004C                546                 MOVE.B   #'L',(A6)+
000015FC  1CFC 0045                547                 MOVE.B   #'E', (A6)+  
00001600  1CFC 0041                548                 MOVE.B   #'A', (A6)+
00001604  1CFC 0020                549                 MOVE.B   #' ', (A6)+
00001608  4E75                     550                 RTS
0000160A                           551            
0000160A                           552  LEA_SRC
0000160A                           553              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
0000160A  4EB9 00001944            554              JSR      bits11to13  // source mode - D3
00001610  B67C 0000                555              CMP      #%000, D3
00001614  6700 0412                556              BEQ      INVALID_EA
00001618  B67C 0001                557              CMP      #%001, D3
0000161C  6700 040A                558              BEQ      INVALID_EA
00001620  B67C 0003                559              CMP      #%011, D3
00001624  6700 0402                560              BEQ      INVALID_EA
00001628  B67C 0004                561              CMP      #%100, D3
0000162C  6700 03FA                562              BEQ      INVALID_EA
00001630  B67C 0005                563              CMP      #%101, D3
00001634  6700 03F2                564              BEQ      INVALID_EA
00001638  B67C 0006                565              CMP      #%110, D3
0000163C  6700 03EA                566              BEQ      INVALID_EA
00001640                           567  
00001640                           568              
00001640                           569              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00001640  4EB9 00001956            570              JSR      bits14to16 // source register - d4
00001646  B67C 0004                571              CMP      #%100, D3
0000164A  6700 03DC                572              BEQ      INVALID_EA
0000164E  B67C 0002                573              CMP      #%010, D3
00001652  6700 03D4                574              BEQ      INVALID_EA
00001656  B67C 0003                575              CMP      #%011, D3
0000165A  6700 03CC                576              BEQ      INVALID_EA
0000165E                           577              
0000165E                           578  
0000165E  4EB9 00001966            579               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001664  B67C 003C                580               CMP      #%111100,D3 // immediate data
00001668  6700 03BE                581               BEQ      INVALID_EA
0000166C  B67C 003A                582               CMP      #%111010,D3 // complicated
00001670  6700 03B6                583               BEQ      INVALID_EA
00001674  B67C 003B                584               CMP      #%111011,D3 // complicated
00001678  6700 03AE                585               BEQ      INVALID_EA
0000167C                           586     
0000167C  4EB9 00001944            587               JSR      bits11to13 ** grab mode bits to jump with
00001682  3803                     588               MOVE    D3,D4
00001684                           589  
00001684  41F9 00001830            590               LEA     jmp_mode,A0    *Index into the table
0000168A  C6FC 0006                591               MULU    #6,D3       *Form offset     
0000168E  4EB0 3000                592               JSR     0(A0,D3)   *Jump indirect with index
00001692                           593   
00001692  1CFC 002C                594               MOVE.B     #',', (A6)+
00001696  1CFC 0020                595               MOVE.B     #' ', (A6)+
0000169A                           596  
0000169A  4E75                     597               RTS
0000169C                           598               
0000169C                           599  LEA_DEST    
0000169C  4244                     600                  CLR     D4
0000169E  41F9 00001830            601                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
000016A4  363C 0001                602                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
000016A8  3803                     603                  MOVE    D3,D4
000016AA  C6FC 0006                604                  MULU    #6,D3       *Form offset     
000016AE  4EB0 3000                605                  JSR     0(A0,D3)   *Jump indirect with index
000016B2                           606                  
000016B2  4EB9 0000190C            607                  JSR     bits5to7
000016B8  4EB9 00001860            608                  JSR     insert_num
000016BE                           609                  
000016BE  4E75                     610                  RTS
000016C0                           611  
000016C0                           612  
000016C0                           613  ADDQ
000016C0  4EB9 000016CA            614                  JSR     ADDQ_BUFFER
000016C6  6000 0422                615                  BRA     PRINT_BUFFER
000016CA                           616  
000016CA                           617  ADDQ_BUFFER
000016CA  1CFC 0041                618                 MOVE.B   #'A',(A6)+
000016CE  1CFC 0044                619                 MOVE.B   #'D', (A6)+  
000016D2  1CFC 0044                620                 MOVE.B   #'D', (A6)+
000016D6  1CFC 0051                621                 MOVE.B   #'Q', (A6)+
000016DA                           622                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
000016DA                           623                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000016DA  1CFC 0020                624                 MOVE.B   #' ', (A6)+
000016DE  4E75                     625                 RTS
000016E0                           626                 
000016E0                           627  MOVEQ
000016E0  4EB9 000016EA            628                  JSR     MOVEQ_BUFFER
000016E6  6000 0402                629                  BRA     PRINT_BUFFER
000016EA                           630  
000016EA                           631  MOVEQ_BUFFER
000016EA  1CFC 004D                632                 MOVE.B   #'M',(A6)+
000016EE  1CFC 004F                633                 MOVE.B   #'O', (A6)+  
000016F2  1CFC 0056                634                 MOVE.B   #'V', (A6)+
000016F6  1CFC 0045                635                 MOVE.B   #'E', (A6)+
000016FA  1CFC 0051                636                 MOVE.B   #'Q', (A6)+
000016FE  1CFC 0020                637                 MOVE.B   #' ', (A6)+
00001702  4E75                     638                 RTS
00001704                           639  
00001704                           640  DIVU
00001704  4EB9 0000170E            641                  JSR     DIVU_BUFFER
0000170A  6000 03DE                642                  BRA     PRINT_BUFFER
0000170E                           643  
0000170E                           644  DIVU_BUFFER
0000170E  1CFC 0044                645                 MOVE.B   #'D',(A6)+
00001712  1CFC 0049                646                 MOVE.B   #'I', (A6)+  
00001716  1CFC 0056                647                 MOVE.B   #'V', (A6)+
0000171A  1CFC 0055                648                 MOVE.B   #'U', (A6)+
0000171E  1CFC 0020                649                 MOVE.B   #' ', (A6)+
00001722  4E75                     650                 RTS  
00001724                           651  OR    
00001724  4EB9 0000172E            652                 JSR     OR_BUFFER
0000172A  6000 03BE                653                 BRA     PRINT_BUFFER
0000172E                           654                  
0000172E                           655  OR_BUFFER
0000172E  1CFC 004F                656                 MOVE.B   #'O',(A6)+
00001732  1CFC 0052                657                 MOVE.B   #'R', (A6)+  
00001736  1CFC 002E                658                 MOVE.B   #'.', (A6)+
0000173A                           659                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000173A                           660                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000173A                           661                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000173A  1CFC 0020                662                 MOVE.B   #' ', (A6)+
0000173E  4E75                     663                 RTS   
00001740                           664  
00001740                           665  SUB   
00001740  4EB9 0000174A            666                 JSR     SUB_BUFFER
00001746  6000 03A2                667                 BRA     PRINT_BUFFER               
0000174A                           668  
0000174A                           669  SUB_BUFFER
0000174A  1CFC 0053                670                 MOVE.B   #'S',(A6)+
0000174E  1CFC 0055                671                 MOVE.B   #'U', (A6)+  
00001752  1CFC 0042                672                 MOVE.B   #'B', (A6)+
00001756  1CFC 002E                673                 MOVE.B   #'.', (A6)+
0000175A                           674                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000175A                           675                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000175A                           676                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000175A  1CFC 0020                677                 MOVE.B   #' ', (A6)+
0000175E  4E75                     678                 RTS  
00001760                           679  CMP   
00001760  4EB9 0000176A            680                 JSR     CMP_BUFFER
00001766  6000 0382                681                 BRA     PRINT_BUFFER
0000176A                           682                  
0000176A                           683  CMP_BUFFER
0000176A  1CFC 0043                684                 MOVE.B   #'C',(A6)+
0000176E  1CFC 004D                685                 MOVE.B   #'M', (A6)+  
00001772  1CFC 0050                686                 MOVE.B   #'P', (A6)+
00001776  1CFC 002E                687                 MOVE.B   #'.', (A6)+
0000177A                           688                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000177A                           689                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000177A                           690                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000177A  1CFC 0020                691                 MOVE.B   #' ', (A6)+
0000177E  4E75                     692                 RTS   
00001780                           693                 
00001780                           694  MULS
00001780  4EB9 0000178A            695                  JSR     MULS_BUFFER
00001786  6000 0362                696                  BRA     PRINT_BUFFER
0000178A                           697  
0000178A                           698  MULS_BUFFER
0000178A  1CFC 004D                699                 MOVE.B   #'M',(A6)+
0000178E  1CFC 0055                700                 MOVE.B   #'U', (A6)+  
00001792  1CFC 004C                701                 MOVE.B   #'L', (A6)+
00001796  1CFC 0053                702                 MOVE.B   #'S', (A6)+
0000179A  1CFC 0020                703                 MOVE.B   #' ', (A6)+
0000179E  4E75                     704                 RTS
000017A0                           705  
000017A0                           706  AND    
000017A0  4EB9 000017AA            707                 JSR     AND_BUFFER
000017A6  6000 0342                708                 BRA     PRINT_BUFFER
000017AA                           709                  
000017AA                           710  AND_BUFFER
000017AA  1CFC 0041                711                 MOVE.B   #'A',(A6)+
000017AE  1CFC 004E                712                 MOVE.B   #'N', (A6)+  
000017B2  1CFC 0044                713                 MOVE.B   #'D', (A6)+
000017B6  1CFC 002E                714                 MOVE.B   #'.', (A6)+
000017BA                           715                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017BA                           716                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017BA                           717                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017BA  1CFC 0020                718                 MOVE.B   #' ', (A6)+
000017BE  4E75                     719                 RTS    
000017C0                           720  
000017C0                           721  ASR     
000017C0  4EB9 000017CA            722                  JSR     ASR_BUFFER
000017C6  6000 0322                723                  BRA     PRINT_BUFFER
000017CA                           724  
000017CA                           725  ASR_BUFFER
000017CA  1CFC 0041                726                 MOVE.B   #'A',(A6)+
000017CE  1CFC 0053                727                 MOVE.B   #'S', (A6)+  
000017D2  1CFC 0052                728                 MOVE.B   #'R', (A6)+
000017D6  1CFC 0020                729                 MOVE.B   #' ', (A6)+
000017DA  4E75                     730                 RTS      
000017DC                           731  
000017DC                           732  ASL     
000017DC  4EB9 000017E6            733                  JSR     ASL_BUFFER
000017E2  6000 0306                734                  BRA     PRINT_BUFFER
000017E6                           735  
000017E6                           736  ASL_BUFFER
000017E6  1CFC 0041                737                 MOVE.B   #'A',(A6)+
000017EA  1CFC 0053                738                 MOVE.B   #'S', (A6)+  
000017EE  1CFC 004C                739                 MOVE.B   #'L', (A6)+
000017F2  1CFC 0020                740                 MOVE.B   #' ', (A6)+
000017F6  4E75                     741                 RTS     
000017F8                           742  
000017F8                           743  LSL     
000017F8  4EB9 00001802            744                  JSR     LSL_BUFFER
000017FE  6000 02EA                745                  BRA     PRINT_BUFFER
00001802                           746  
00001802                           747  LSL_BUFFER
00001802  1CFC 004C                748                 MOVE.B   #'L',(A6)+
00001806  1CFC 0053                749                 MOVE.B   #'S', (A6)+  
0000180A  1CFC 004C                750                 MOVE.B   #'L', (A6)+
0000180E  1CFC 0020                751                 MOVE.B   #' ', (A6)+
00001812  4E75                     752                 RTS     
00001814                           753  
00001814                           754  LSR     
00001814  4EB9 0000181E            755                  JSR     LSR_BUFFER
0000181A  6000 02CE                756                  BRA     PRINT_BUFFER
0000181E                           757  
0000181E                           758  LSR_BUFFER
0000181E  1CFC 004C                759                 MOVE.B   #'L',(A6)+
00001822  1CFC 0053                760                 MOVE.B   #'S', (A6)+  
00001826  1CFC 0052                761                 MOVE.B   #'R', (A6)+
0000182A  1CFC 0020                762                 MOVE.B   #' ', (A6)+
0000182E  4E75                     763                 RTS       
00001830                           764                 
00001830                           765  jmp_mode
00001830  4EF9 00001988            766                  JMP     MODE000  ** DN
00001836  4EF9 0000198E            767                  JMP     MODE001  ** AN
0000183C  4EF9 00001996            768                  JMP     MODE010  ** (AN)
00001842  4EF9 000019A0            769                  JMP     MODE011  ** (AN)+   
00001848  4EF9 000019AA            770                  JMP     MODE100  ** -(AN)
0000184E  4EF9 000019B8            771                  JMP     MODE101  **INVALID
00001854  4EF9 000019C2            772                  JMP     MODE110  **INVALID
0000185A  4EF9 000019CC            773                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00001860                           774  
00001860                           775                  
00001860                           776  insert_num
00001860                           777                  
00001860                           778                  ;get number from D3
00001860  B67C 0000                779                  CMP     #%000,D3       ;0
00001864  6600 000A                780                  BNE     ONE         
00001868  1CFC 0030                781                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
0000186C  6000 006E                782                  BRA     FINISHER
00001870                           783                  
00001870  B67C 0001                784  ONE             CMP     #%001,D3       ;1
00001874  6600 000A                785                  BNE     TWO 
00001878  1CFC 0031                786                  MOVE.B  #'1',(A6)+
0000187C  6000 005E                787                  BRA     FINISHER
00001880                           788  
00001880                           789                  
00001880  B67C 0002                790  TWO             CMP     #%010,D3        ;2
00001884  6600 000A                791                  BNE     THREE
00001888  1CFC 0032                792                  MOVE.B  #'2',(A6)+
0000188C  6000 004E                793                  BRA     FINISHER
00001890                           794                  
00001890  B67C 0003                795  THREE           CMP     #%011,D3        ;3
00001894  6600 000A                796                  BNE     FOUR
00001898  1CFC 0033                797                  MOVE.B  #'3',(A6)+
0000189C  6000 003E                798                  BRA     FINISHER
000018A0                           799                  
000018A0  B67C 0004                800  FOUR            CMP     #%100,D3        ;4
000018A4  6600 000A                801                  BNE     FIVE
000018A8  1CFC 0034                802                  MOVE.B  #'4',(A6)+
000018AC  6000 002E                803                  BRA     FINISHER
000018B0                           804                  
000018B0  B67C 0005                805  FIVE            CMP     #%101,D3        ;5
000018B4  6600 000A                806                  BNE     SIX
000018B8  1CFC 0035                807                  MOVE.B  #'5',(A6)+
000018BC  6000 001E                808                  BRA     FINISHER
000018C0                           809                  
000018C0  B67C 0006                810  SIX             CMP     #%110,D3        ;6
000018C4  6600 000A                811                  BNE     SEVEN
000018C8  1CFC 0036                812                  MOVE.B  #'6',(A6)+
000018CC  6000 000E                813                  BRA     FINISHER
000018D0                           814                  
000018D0  B67C 0007                815  SEVEN           CMP     #%111,D3        ;7
000018D4  1CFC 0037                816                  MOVE.B  #'7',(A6)+
000018D8  6000 0002                817                  BRA     FINISHER
000018DC                           818                  
000018DC                           819  FINISHER                
000018DC                           820                  
000018DC                           821                  ;check D4, do we need to do stuff?
000018DC  B87C 0002                822                  CMP     #%010,D4
000018E0  6600 0008                823                  BNE     POSTINCR
000018E4  1CFC 0029                824                  MOVE.B  #')',(A6)+
000018E8  4E75                     825                  RTS
000018EA                           826                  
000018EA  B87C 0003                827  POSTINCR        CMP     #%011,D4
000018EE  6600 000C                828                  BNE     ONEPAREN
000018F2  1CFC 0029                829                  MOVE.B  #')',(A6)+
000018F6  1CFC 002B                830                  MOVE.B  #'+',(A6)+
000018FA  4E75                     831                  RTS
000018FC                           832                  
000018FC  B87C 0004                833  ONEPAREN        CMP     #%100,D4
00001900  6600 0008                834                  BNE     DONE
00001904  1CFC 0029                835                  MOVE.B  #')',(A6)+                
00001908                           836  
00001908  4244                     837                  CLR     D4
0000190A  4E75                     838  DONE            RTS
0000190C                           839  
0000190C                           840          
0000190C                           841                 
0000190C                           842  bits5to7
0000190C  4243                     843                 CLR      D3
0000190E  4EB9 00001AC4            844                 JSR      COPY_OPCODE  // opcode copied to D2
00001914  C47C 0E00                845                 AND      #%0000111000000000, D2
00001918  E09A                     846                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000191A  E29A                     847                 ROR.L    #1, D2
0000191C  3602                     848                 MOVE.W   D2,D3 // moving isolated bits into d3
0000191E  4E75                     849                 RTS
00001920                           850                 
00001920                           851  bits5to8
00001920  4243                     852                 CLR      D3
00001922  4EB9 00001AC4            853                 JSR      COPY_OPCODE  // opcode copied to D2
00001928  C47C 0F00                854                 AND      #%0000111100000000, D2
0000192C  E09A                     855                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000192E  3602                     856                 MOVE.W   D2,D3 // moving isolated bits into d3
00001930  4E75                     857                 RTS
00001932                           858                 
00001932                           859  bits8to10
00001932  4243                     860                 CLR      D3
00001934  4EB9 00001AC4            861                 JSR      COPY_OPCODE  // opcode copied to D2
0000193A  C47C 01C0                862                 AND      #%0000000111000000, D2
0000193E  EC9A                     863                 ROR.L    #6, D2          // rotate bits so isolated at the end
00001940  3602                     864                 MOVE.W   D2,D3 // moving isolated bits into d3
00001942  4E75                     865                 RTS               
00001944                           866             
00001944                           867  bits11to13
00001944  4243                     868                 CLR      D3
00001946  4EB9 00001AC4            869                 JSR      COPY_OPCODE  // opcode copied to D2
0000194C  C47C 0038                870                 AND      #%0000000000111000, D2
00001950  E69A                     871                 ROR.L    #3, D2          // rotate bits so isolated at the end
00001952  3602                     872                 MOVE.W   D2,D3 // moving isolated bits into d3
00001954  4E75                     873                 RTS
00001956                           874             
00001956                           875  bits14to16
00001956  4243                     876                 CLR      D3
00001958  4EB9 00001AC4            877                 JSR      COPY_OPCODE  // opcode copied to D2
0000195E  C47C 0007                878                 AND      #%0000000000000111, D2
00001962  3602                     879                 MOVE.W   D2,D3 // moving isolated bits into d3
00001964  4E75                     880                 RTS
00001966                           881  bits11to16
00001966  4243                     882                 CLR      D3
00001968  4EB9 00001AC4            883                 JSR      COPY_OPCODE  // opcode copied to D2
0000196E  C47C 003F                884                 AND      #%0000000000111111, D2
00001972  3602                     885                 MOVE.W   D2,D3 // moving isolated bits into d3
00001974  4E75                     886                 RTS
00001976                           887  bits1to10
00001976  4243                     888                 CLR      D3
00001978  4EB9 00001AC4            889                 JSR      COPY_OPCODE  // opcode copied to D2
0000197E  C47C FFC0                890                 AND      #%1111111111000000, D2
00001982  EC9A                     891                 ROR.L    #6, D2
00001984  3602                     892                 MOVE.W   D2,D3 // moving isolated bits into d3
00001986  4E75                     893                 RTS
00001988                           894  ** DN       
00001988                           895  MODE000         
00001988  1CFC 0044                896                  MOVE.B  #'D',(A6)+     
0000198C  4E75                     897                  RTS
0000198E                           898  
0000198E                           899  ** AN
0000198E                           900  MODE001         
0000198E  4EB9 000019E0            901                  JSR ADDRESS_BUFFER  
00001994  4E75                     902                  RTS      
00001996                           903  
00001996                           904   ** (AN)
00001996                           905  MODE010         
00001996  1CFC 0028                906                  MOVE.B  #'(', (A6)+
0000199A  1CFC 0041                907                  MOVE.B  #'A',(A6)+  
0000199E  4E75                     908                  RTS      
000019A0                           909  
000019A0                           910  ** (AN)+ 
000019A0                           911  MODE011         
000019A0  1CFC 0028                912                  MOVE.B  #'(', (A6)+
000019A4  1CFC 0041                913                  MOVE.B  #'A',(A6)+ 
000019A8  4E75                     914                  RTS       
000019AA                           915  
000019AA                           916   ** -(AN)
000019AA                           917  MODE100         
000019AA  1CFC 002D                918                  MOVE.B  #'-', (A6)+
000019AE  1CFC 0028                919                  MOVE.B  #'(', (A6)+
000019B2  1CFC 0041                920                  MOVE.B  #'A',(A6)+
000019B6  4E75                     921                  RTS
000019B8                           922                  
000019B8                           923  **INVALID               
000019B8                           924  MODE101         
000019B8  1CFC 0028                925                  MOVE.B  #'(', (A6)+
000019BC  1CFC 0041                926                  MOVE.B  #'A',(A6)+ 
000019C0  4E75                     927                  RTS
000019C2                           928                  
000019C2                           929  **INVALID
000019C2                           930  MODE110         
000019C2  1CFC 0028                931                  MOVE.B  #'(', (A6)+
000019C6  1CFC 0041                932                  MOVE.B  #'A',(A6)+
000019CA  4E75                     933                  RTS  
000019CC                           934  
000019CC                           935  ** ABSOLUTE AND IMMEDIATE            
000019CC                           936  MODE111         
000019CC                           937                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
000019CC  1CFC 0024                938                 MOVE.B   #'$', (A6)+  
000019D0  4EB9 00001B06            939                 JSR      PRINT_DEREF_ADDRESS
000019D6  544A                     940                 ADD.W    #2, A2
000019D8  4EB9 00001B06            941                 JSR      PRINT_DEREF_ADDRESS
000019DE  4E75                     942                 RTS            
000019E0                           943                                          
000019E0                           944  ADDRESS_BUFFER
000019E0  1CFC 0041                945                  MOVE.B  #'A',(A6)+ 
000019E4  4E75                     946                  RTS
000019E6                           947                 
000019E6                           948  ABSOLUTE_BUFFER
000019E6  4243                     949                 CLR      D3
000019E8  3604                     950                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000019EA  1CF8 0024                951                 MOVE.B   '$', (A6)+
000019EE  B67C 0000                952                 CMP.W    #%000, D3
000019F2  6700 0010                953                 BEQ      ABSOLUTE_WORD_BUFFER
000019F6  4243                     954                 CLR      D3
000019F8  3604                     955                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
000019FA  B67C 0001                956                 CMP.W    #%001, D3
000019FE  6700 0016                957                 BEQ      ABSOLUTE_LONG_BUFFER
00001A02  4E75                     958                 RTS
00001A04                           959                 
00001A04                           960  ABSOLUTE_WORD_BUFFER
00001A04                           961                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A04                           962                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A04  1CFC 0046                963                         MOVE.B #'F', (A6)+ 
00001A08  1CFC 0046                964                         MOVE.B #'F', (A6)+ 
00001A0C  1CFC 0046                965                         MOVE.B #'F', (A6)+ 
00001A10  1CFC 0046                966                         MOVE.B #'F', (A6)+ 
00001A14  4E75                     967                         RTS       
00001A16                           968                    
00001A16                           969  ABSOLUTE_LONG_BUFFER       
00001A16                           970                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A16                           971                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A16  1CFC 0047                972                         MOVE.B #'G', (A6)+ 
00001A1A  1CFC 0047                973                         MOVE.B #'G', (A6)+ 
00001A1E  1CFC 0047                974                         MOVE.B #'G', (A6)+ 
00001A22  1CFC 0047                975                         MOVE.B #'G', (A6)+
00001A26  4E75                     976                         RTS 
00001A28                           977  
00001A28                           978  INVALID_EA  
00001A28                           979                  * TODO: IMPLEMENT
00001A28                           980                  *** CLEAR OUT A6
00001A28                           981                  ** PUT INVALID MESSAGE INTO A6
00001A28  6000 F8C1                982                  BRA EXIT
00001A2C                           983  INVALID_OP  
00001A2C                           984                  ** TODO: IMPLEMENT
00001A2C                           985                 *** CLEAR OUT A6
00001A2C                           986                  ** PUT INVALID MESSAGE INTO A6
00001A2C  1CFC 0044                987                      MOVE.B #'D', (A6)+
00001A30  1CFC 0041                988                      MOVE.B #'A', (A6)+
00001A34  1CFC 0054                989                      MOVE.B #'T', (A6)+
00001A38  1CFC 0041                990                      MOVE.B #'A', (A6)+ 
00001A3C  1CFC 0020                991                      MOVE.B #' ', (A6)+ 
00001A40  4EB9 00001B06            992                      JSR     PRINT_DEREF_ADDRESS
00001A46  6000 F8A3                993                      BRA     EXIT
00001A4A                           994            
00001A4A                           995                  
00001A4A  43F8 122D                996  NOP                 LEA     NOP_disp,A1          
00001A4E  103C 000E                997                      MOVE.B  #14,D0
00001A52  4E4F                     998                      TRAP    #15
00001A54  6000 F895                999                      BRA     EXIT
00001A58                          1000                   
00001A58                          1001  RTS      
00001A58  43F8 1294               1002                      LEA     RTS_disp,A1          
00001A5C  103C 000E               1003                      MOVE.B  #14,D0
00001A60  4E4F                    1004                      TRAP    #15 
00001A62  6000 F887               1005                      BRA     EXIT
00001A66                          1006  JSR      
00001A66  4DF9 00001C46           1007                      LEA     BUFFER, A6
00001A6C  1CFC 004A               1008                      MOVE.B #'J', (A6)+
00001A70  1CFC 0053               1009                      MOVE.B #'S', (A6)+
00001A74  1CFC 0052               1010                      MOVE.B #'R', (A6)+
00001A78  1CFC 0020               1011                      MOVE.B #' ', (A6)+
00001A7C  43F9 00001C46           1012                      LEA     BUFFER, A1
00001A82                          1013                      ** BITS 10 - 12 MODE       
00001A82                          1014                      ** BITS 13 - 16 REGISTER
00001A82  103C 000E               1015                      MOVE.B  #14,D0
00001A86  4E4F                    1016                      TRAP    #15 
00001A88  6000 F861               1017                      BRA     EXIT
00001A8C                          1018                    
00001A8C                          1019  MOVEM      
00001A8C                          1020                     
00001A8C                          1021                      ** SIZE SUBROUTINE
00001A8C                          1022                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001A8C  C47C 0040               1023                      AND #%0000000001000000,D2 
00001A90                          1024                      * WORD
00001A90  B4BC 00000040           1025                      CMP.L   #%0000000001000000,D2
00001A96  4EB9 00001AAC           1026                      JSR     MOVEM_W 
00001A9C                          1027                      *LONG
00001A9C  B4BC 00000040           1028                      CMP.L   #%0000000001000000,D2 
00001AA2                          1029                     ** JSR     MOVEM_L
00001AA2  103C 000E               1030                      MOVE.B  #14,D0
00001AA6  4E4F                    1031                      TRAP    #15
00001AA8  6000 F841               1032                      BRA     EXIT 
00001AAC                          1033                      
00001AAC                          1034  MOVEM_W 
00001AAC  43F8 1242               1035                       LEA     MOVEM_disp,A1
00001AB0                          1036                      * PRINT MOVEM
00001AB0  103C 000E               1037                       MOVE.B  #14,D0
00001AB4  4E4F                    1038                       TRAP    #15
00001AB6                          1039          
00001AB6                          1040                      * PRINT WORD PORTION
00001AB6  41F8 12D9               1041                       LEA     size_w, A0
00001ABA  103C 000E               1042                       MOVE.B  #14,D0
00001ABE  4E4F                    1043                       TRAP    #15 
00001AC0                          1044          
00001AC0  6000 F829               1045                       BRA     EXIT 
00001AC4                          1046       
00001AC4                          1047     
00001AC4                          1048  COPY_OPCODE 
00001AC4                          1049                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001AC4  4242                    1050                       CLR    D2  
00001AC6  3405                    1051                       MOVE.W D5,D2 
00001AC8  4E75                    1052                       RTS  
00001ACA                          1053  
00001ACA                          1054  PRINT_ADDRESS     
00001ACA  4242                    1055                   CLR         D2
00001ACC  143C 0010               1056                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001AD0  220A                    1057                   MOVE.L      A2,D1        
00001AD2  103C 000F               1058                   MOVE.B      #15,D0          
00001AD6  4E4F                    1059                   TRAP        #15            
00001AD8  1CFC 0020               1060                   MOVE.B      #' ', (A6)+
00001ADC  1CFC 0020               1061                   MOVE.B      #' ', (A6)+
00001AE0  1CFC 0020               1062                   MOVE.B      #' ', (A6)+
00001AE4  1CFC 0020               1063                   MOVE.B      #' ', (A6)+
00001AE8  4E75                    1064                   RTS     
00001AEA                          1065  PRINT_BUFFER    
00001AEA  1CFC 0000               1066                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001AEE  43F9 00001C46           1067                 LEA      BUFFER, A1
00001AF4  303C 000E               1068                 MOVE.W   #14,D0
00001AF8  4E4F                    1069                 TRAP     #15
00001AFA  43F8 121D               1070                 LEA     linebreak,A1            *appends line at the end of the user input
00001AFE  103C 000E               1071                 MOVE.B  #14,D0
00001B02  4E4F                    1072                 TRAP    #15
00001B04  4E75                    1073                 RTS  
00001B06                          1074  
00001B06                          1075  PRINT_DEREF_ADDRESS
00001B06  1CFC 0000               1076                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B0A  43F9 00001C46           1077                 LEA      BUFFER, A1
00001B10  303C 000E               1078                 MOVE.W   #14,D0
00001B14  4E4F                    1079                 TRAP     #15
00001B16  4DF9 00001C46           1080                 LEA      BUFFER, A6
00001B1C  4242                    1081                 CLR         D2
00001B1E  143C 0010               1082                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B22  3212                    1083                 MOVE.W      (A2),D1        // PRINT INVALID HEX OPCODE        
00001B24  103C 000F               1084                 MOVE.B      #15,D0          
00001B28  4E4F                    1085                 TRAP        #15 
00001B2A  4E75                    1086                 RTS
00001B2C                          1087   
00001B2C                          1088                     
00001B2C                          1089  ****************************
00001B2C                          1090  
00001B2C                          1091                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001B2C                          1092                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001B2C                          1093                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001B2C                          1094  GETSIZE_ADD
00001B2C  4EB8 1932               1095              JSR     bits8to10
00001B30  B67C 0000               1096              CMP     #%000,D3
00001B34  6600 0010               1097              BNE     ADD_NOTBYTE
00001B38  4EB9 00001C16           1098              JSR     SIZEISBYTE
00001B3E  3C3C 0001               1099              MOVE    #1,D6
00001B42  4243                    1100              CLR     D3
00001B44  4E75                    1101              RTS
00001B46                          1102          
00001B46                          1103  ADD_NOTBYTE 
00001B46  B67C 0001               1104              CMP     #%001,D3
00001B4A  6600 0010               1105              BNE     ADD_NOTWORD
00001B4E  4EB9 00001C26           1106              JSR     SIZEISWORD
00001B54  3C3C 0001               1107              MOVE    #1,D6
00001B58  4243                    1108              CLR     D3
00001B5A  4E75                    1109              RTS
00001B5C                          1110              
00001B5C                          1111  ADD_NOTWORD
00001B5C  B67C 0002               1112              CMP     #%010,D3
00001B60  6600 0010               1113              BNE     ADD_NOTLEFT
00001B64  4EB9 00001C36           1114              JSR     SIZEISLONG
00001B6A  3C3C 0001               1115              MOVE    #1,D6
00001B6E  4243                    1116              CLR     D3
00001B70  4E75                    1117              RTS
00001B72                          1118              
00001B72                          1119  ADD_NOTLEFT     ;check other direction
00001B72  B67C 0004               1120              CMP     #%100,D3
00001B76  6600 0010               1121              BNE     ADD_NOTRIGHTBYTE
00001B7A  4EB9 00001C16           1122              JSR     SIZEISBYTE
00001B80  3C3C 0002               1123              MOVE    #2,D6
00001B84  4243                    1124              CLR     D3
00001B86  4E75                    1125              RTS
00001B88                          1126              
00001B88                          1127  ADD_NOTRIGHTBYTE
00001B88  B67C 0005               1128              CMP     #%101,D3
00001B8C  6600 0010               1129              BNE     ADD_NOTRIGHTWORD
00001B90  4EB9 00001C26           1130              JSR     SIZEISWORD
00001B96  3C3C 0002               1131              MOVE    #2,D6
00001B9A  4243                    1132              CLR     D3
00001B9C  4E75                    1133              RTS
00001B9E                          1134  
00001B9E                          1135  ADD_NOTRIGHTWORD
00001B9E  B67C 0006               1136              CMP     #%110,D3
00001BA2  6600 FE84               1137              BNE     INVALID_EA
00001BA6  4EB9 00001C36           1138              JSR     SIZEISLONG
00001BAC  3C3C 0002               1139              MOVE    #2,D6
00001BB0  4243                    1140              CLR     D3
00001BB2  4E75                    1141              RTS 
00001BB4                          1142                               
00001BB4                          1143                       
00001BB4                          1144                       
00001BB4                          1145  *****************************                  
00001BB4                          1146  GETSIZE_ADDI
00001BB4  4EB8 1932               1147          JSR     bits8to10
00001BB8  B67C 0000               1148          CMP     #%000,D3
00001BBC  6600 000C               1149          BNE     ADDI_NOTBYTE
00001BC0  4EB9 00001C16           1150          JSR     SIZEISBYTE
00001BC6  4243                    1151          CLR     D3
00001BC8  4E75                    1152          RTS
00001BCA                          1153  
00001BCA                          1154  ADDI_NOTBYTE
00001BCA  B67C 0001               1155          CMP     #%001,D3
00001BCE  6600 000C               1156          BNE     ADDI_NOTWORD
00001BD2  4EB9 00001C26           1157          JSR     SIZEISWORD
00001BD8  4243                    1158          CLR     D3
00001BDA  4E75                    1159          RTS
00001BDC                          1160          
00001BDC                          1161  ADDI_NOTWORD
00001BDC  B67C 0002               1162          CMP     #%010,D3
00001BE0  6600 FE46               1163          BNE     INVALID_EA
00001BE4  4EB9 00001C36           1164          JSR     SIZEISLONG
00001BEA  4243                    1165          CLR     D3
00001BEC  4E75                    1166          RTS
00001BEE                          1167          
00001BEE                          1168                              
00001BEE                          1169                       
00001BEE                          1170  ********************************          
00001BEE                          1171                       
00001BEE                          1172                       
00001BEE                          1173  ********************************                     
00001BEE                          1174  GETSIZE_ADDA
00001BEE  4EB8 1932               1175          JSR     bits8to10
00001BF2  B67C 0003               1176          CMP     #%011,D3
00001BF6  6600 000C               1177          BNE     ADDA_NOTWORD
00001BFA  4EB9 00001C26           1178          JSR     SIZEISWORD
00001C00  4243                    1179          CLR     D3
00001C02  4E75                    1180          RTS
00001C04                          1181          
00001C04                          1182  
00001C04                          1183          
00001C04                          1184  ADDA_NOTWORD
00001C04  B67C 0007               1185          CMP     #%111,D3
00001C08  6600 FE1E               1186          BNE     INVALID_EA
00001C0C  4EB9 00001C36           1187          JSR     SIZEISLONG
00001C12  4243                    1188          CLR     D3
00001C14  4E75                    1189          RTS
00001C16                          1190  **********************************        
00001C16                          1191      
00001C16                          1192  SIZEISBYTE
00001C16  1CFC 002E               1193         MOVE.B   #'.',(A6)+
00001C1A  1CFC 0042               1194         MOVE.B   #'B',(A6)+
00001C1E  1CFC 0020               1195         MOVE.B   #' ',(A6)+
00001C22  4243                    1196         CLR      D3
00001C24  4E75                    1197         RTS
00001C26                          1198  
00001C26                          1199  SIZEISWORD    
00001C26  1CFC 002E               1200         MOVE.B   #'.',(A6)+
00001C2A  1CFC 0057               1201         MOVE.B   #'W',(A6)+
00001C2E  1CFC 0020               1202         MOVE.B   #' ',(A6)+
00001C32  4243                    1203         CLR      D3
00001C34  4E75                    1204         RTS
00001C36                          1205                  
00001C36                          1206  SIZEISLONG    
00001C36  1CFC 002E               1207         MOVE.B   #'.',(A6)+
00001C3A  1CFC 004C               1208         MOVE.B   #'L',(A6)+
00001C3E  1CFC 0020               1209         MOVE.B   #' ',(A6)+
00001C42                          1210  
00001C42  4243                    1211         CLR      D3
00001C44  4E75                    1212         RTS
00001C46                          1213                  
00001C46                          1214       
00001C46= 00000001                1215  BUFFER DC.L 1     
00001C4A                          1216      INCLUDE 'helpers.x68'
00001C4A  1019                    1217  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001C4C  4EB9 00001C64           1218                          JSR     sub_breakDownAs     *breaks down ASCII code
00001C52  D280                    1219                          ADD.L   D0,D1               *load that char into D1
00001C54  0C11 0000               1220                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001C58  6700 0006               1221                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001C5C  E989                    1222                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001C5E  60EA                    1223                          BRA     sub_AsToHeLoop      *loops through again
00001C60                          1224                          
00001C60  2E01                    1225  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001C62  4E75                    1226                          RTS
00001C64  B03C 0030               1227  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001C68  6D00 002A               1228                          BLT     as_ERROR                        
00001C6C                          1229                          
00001C6C  B03C 0039               1230                          CMP.B    #$39,D0            *is it an A-F letter?
00001C70  6E00 000C               1231                          BGT     as_LETTER
00001C74                          1232                          
00001C74  6000 0002               1233                          BRA     as_NUMBER
00001C78                          1234                                                 
00001C78  0400 0030               1235  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001C7C  4E75                    1236                          RTS
00001C7E                          1237                          
00001C7E  B03C 0041               1238  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001C82  6D00 0010               1239                          BLT     as_ERROR
00001C86                          1240                          
00001C86  B03C 0046               1241                          CMP.B     #$46, D0
00001C8A  6E00 0008               1242                          BGT     as_ERROR
00001C8E                          1243                          
00001C8E  0400 0037               1244                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001C92  4E75                    1245                          RTS
00001C94                          1246                          
00001C94  43F9 65727200           1247  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001C9A  103C 000D               1248                          MOVE.B  #13,D0
00001C9E  4E4F                    1249                          TRAP    #15  
00001CA0                          1250  sub_StartReadingData    
00001CA0  0801 0000               1251                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001CA4  6600 0006               1252                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001CA8                          1253                          
00001CA8  7E00                    1254                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001CAA  4E75                    1255  srdFinish               RTS
00001CAC                          1256  
00001CAC  43F8 1166               1257  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CB0  103C 000E               1258                          MOVE.B  #14,D0
00001CB4  4E4F                    1259                          TRAP    #15
00001CB6                          1260                          
00001CB6  7E01                    1261                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CB8  60F0                    1262                          BRA     srdFinish
00001CBA                          1263  sub_EndReadingData  
00001CBA  0801 0000               1264                          BTST    #0,D1               *checks if LSB is 1, 
00001CBE  6600 0018               1265                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001CC2                          1266                          
00001CC2  B5CB                    1267                          CMP.L   A3,A2               *end address must be greater than start address
00001CC4  6E00 0004               1268                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001CC8                          1269  
00001CC8  4E75                    1270  erdFinish               RTS
00001CCA                          1271  
00001CCA  43F8 118D               1272  erdFailAddrOrder        LEA     addr_order_check,A1
00001CCE  103C 000E               1273                          MOVE.B  #14,D0
00001CD2  4E4F                    1274                          TRAP    #15
00001CD4                          1275                          
00001CD4  7E01                    1276                          MOVE.L  #1,D7
00001CD6  60F0                    1277                          BRA     erdFinish
00001CD8                          1278  
00001CD8  43F8 1166               1279  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CDC  103C 000E               1280                          MOVE.B  #14,D0
00001CE0  4E4F                    1281                          TRAP    #15
00001CE2                          1282                          
00001CE2  7E01                    1283                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CE4  60E2                    1284                          BRA     erdFinish
00001CE6                          1285                          
00001CE6                          1286  
00001CE6                          1287  
00001CE6                          1288  
00001CE6                          1289  
00001CE6                          1290  
00001CE6                          1291  
00001CE6                          1292  
00001CE6                          1293  
00001CE6                          1294  -------------------- end include --------------------
00001CE6                          1295      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     19E6
ABSOLUTE_LONG_BUFFER  1A16
ABSOLUTE_WORD_BUFFER  1A04
ADD                 148E
ADDA                1468
ADDA_BUFFER         1472
ADDA_DISP           124C
ADDA_NOTWORD        1C04
ADDI                1532
ADDI_BUFFER         15BA
ADDI_DES            1556
ADDI_DISP           1251
ADDI_NOTBYTE        1BCA
ADDI_NOTWORD        1BDC
ADDI_SRC            1548
ADDQ                16C0
ADDQ_BUFFER         16CA
ADDQ_DISP           1256
ADDRESS_BUFFER      19E0
ADDR_ODDBIT_MSG     1166
ADDR_ORDER_CHECK    118D
ADD_BUFFER          1498
ADD_DEST            1510
ADD_DIRECTION_REVERSED  14CA
ADD_DISP            1248
ADD_DONE            14E4
ADD_NOTBYTE         1B46
ADD_NOTLEFT         1B72
ADD_NOTRIGHTBYTE    1B88
ADD_NOTRIGHTWORD    1B9E
ADD_NOTWORD         1B5C
ADD_SRC             14EC
AND                 17A0
AND_BUFFER          17AA
AND_DISP            1271
ASL                 17DC
ASL_BUFFER          17E6
ASL_DISP            1280
ASR                 17C0
ASR_BUFFER          17CA
ASR_DISP            1284
AS_ERROR            1C94
AS_LETTER           1C7E
AS_NUMBER           1C78
ATHENDLOOP          1C60
BACKSLASHSIGH       12CE
BCC_DISP            1298
BGT_DISP            129C
BITS11TO13          1944
BITS11TO16          1966
BITS14TO16          1956
BITS1TO10           1976
BITS5TO7            190C
BITS5TO8            1920
BITS8TO10           1932
BLE_DISP            12A0
BUFFER              1C46
CLOSEPAREN          12D2
CLR_DISP            126D
CMP                 1760
CMP_BUFFER          176A
CODE0000            1350
CODE0001            1364
CODE0010            1368
CODE0011            136C
CODE0100            1370
CODE0101            13A4
CODE0110            13AA
CODE0111            13AE
CODE1000            13B4
CODE1001            13C6
CODE1010            13CC
CODE1011            13D0
CODE1100            13D6
CODE1101            13E8
CODE1110            1434
CODE1111            1464
COMMASIGN           12CC
COPY_OPCODE         1AC4
CR                  D
DIVU                1704
DIVU_BUFFER         170E
DIVU_DISP           1264
DOLLARSIGN          12C6
DONE                190A
ENDTEST_MSG         11E1
ERDFAILADDRODDB     1CD8
ERDFAILADDRORDER    1CCA
ERDFINISH           1CC8
EXIT                12EB
FINISHER            18DC
FIVE                18B0
FOUR                18A0
GETSIZE_ADD         1B2C
GETSIZE_ADDA        1BEE
GETSIZE_ADDI        1BB4
HEXATABLE           12A4
INPUT_BUFFER        12E0
INSERT_NUM          1860
INVALIDEA_DISP      1225
INVALID_DISP        1220
INVALID_EA          1A28
INVALID_OP          1A2C
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            1830
JMP_TABLE           12F0
JSR                 1A66
JSR_DISP            1290
LEA                 15D6
LEA_BUFFER          15F8
LEA_DEST            169C
LEA_DISP            1269
LEA_SRC             160A
LF                  A
LINEBREAK           121D
LINECOUNT           12DF
LOCATION_ENDDATA    12E6
LOCATION_END_MSG    1149
LOCATION_STARTDATA  12E2
LOCATION_START_MSG  112A
LSL                 17F8
LSL_BUFFER          1802
LSL_DISP            1278
LSR                 1814
LSR_BUFFER          181E
LSR_DISP            127C
MAIN_LOOP           108E
MINUSSIGN           12CA
MODE000             1988
MODE001             198E
MODE010             1996
MODE011             19A0
MODE100             19AA
MODE101             19B8
MODE110             19C2
MODE111             19CC
MOVEA_DISP          1236
MOVEM               1A8C
MOVEM_DISP          1242
MOVEM_W             1AAC
MOVEQ               16E0
MOVEQ_BUFFER        16EA
MOVEQ_DISP          123C
MOVE_DISP           1231
MULS                1780
MULS_BUFFER         178A
MULS_DISP           125F
NOP                 1A4A
NOP_DISP            122D
ONE                 1870
ONEPAREN            18FC
OPENPAREN           12D0
OR                  1724
OR_BUFFER           172E
OR_DISP             1275
PAUSE_MSG           11C7
PLUSSIGN            12C8
POSTINCR            18EA
POUNDSIGN           12C4
PRINT_ADDRESS       1ACA
PRINT_BUFFER        1AEA
PRINT_DEREF_ADDRESS  1B06
ROL_DISP            1288
ROR_DISP            128C
RTS                 1A58
RTS_DISP            1294
SEVEN               18D0
SIX                 18C0
SIZEISBYTE          1C16
SIZEISLONG          1C36
SIZEISWORD          1C26
SIZE_B              12D6
SIZE_L              12DC
SIZE_W              12D9
SPACE               12D4
SRDFAILADDRODDB     1CAC
SRDFINISH           1CAA
START               1000
SUB                 1740
SUB_ASTOHELOOP      1C4A
SUB_BREAKDOWNAS     1C64
SUB_BUFFER          174A
SUB_DISP            125B
SUB_ENDREADINGDATA  1CBA
SUB_STARTREADINGDATA  1CA0
TABLE_LENGTH        12EA
THREE               1890
TWO                 1880
WELCOME_MSG         10C6
