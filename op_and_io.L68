00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 10:03:21 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C8              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 0000112C             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012E2             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001CDE             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 0000121F             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001D34             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 0000114B             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012E2             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001CDE             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 0000121F             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001D4E             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012F2             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001CDA             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C  3612                      80                  MOVE.W  (A2), D3
0000109E                            81  
0000109E                            82                   * TEST OPCODES
0000109E                            83                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109E                            84                   ;MOVE.W  #$4E71,D3 * NOP
0000109E                            85                   ; MOVE.W  #$4E75,D3 * RTS
0000109E                            86                   ; MOVE.W  #$4EB0,D3 * JSR
0000109E                            87                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109E                            88                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109E                            89                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109E                            90                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109E                            91  
0000109E  363C 5201                 92                    MOVE.W    #$5201,D3    *ADDQ
000010A2                            93  
000010A2                            94                   ; MOVE.W     #$7E70, D3 *MOVEQ
000010A2                            95                   ; MOVE.W     #$80C0, D3 *DIVU
000010A2                            96                   ; MOVE.W     #$8000, D3 * OR
000010A2                            97                   ; MOVE.W        #$9000, D3 * SUB
000010A2                            98                   ; MOVE.W        #$B000, D3 * CMP
000010A2                            99                   ; MOVE.W        #$C1C0, D3 * MULS
000010A2                           100                   ; MOVE.W        #$C000, D3 * AND
000010A2                           101                   ; MOVE.W        #$E0F8, D3  *ASR
000010A2                           102                   ; MOVE.W        #$E1E2, D3  *ASL
000010A2                           103                   ; MOVE.W        #$E393, D3  *LSL
000010A2                           104                   ; MOVE.W        #$E2DC, D3  *LSR
000010A2                           105  
000010A2  4EB9 00001B24            106                   JSR    PRINT_ADDRESS
000010A8  544A                     107                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010AA  3A03                     108                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AC  183C 000C                109                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010B0  E86B                     110                   LSR.W   D4,D3       *Move the bits
000010B2  C6FC 0006                111                   MULU    #6,D3       *Form offset     
000010B6  4EB0 3000                112                   JSR     0(A0,D3)   *Jump indirect with index
000010BA  4EB9 00001B44            113                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010C0  B4CB                     114                   CMP     A3,A2
000010C2  6E00 0229                115                   BGT     EXIT
000010C6  60C6                     116                   BRA     MAIN_LOOP
000010C8                           117                   
000010C8                           118                                  
000010C8                           119      INCLUDE 'definitions.x68'
000010C8                           120  
000010C8  =0000000D                121  CR              EQU     $0D         carriage return
000010C8  =0000000A                122  LF              EQU     $0A         line feed
000010C8= 43 53 53 20 34 32 ...    123  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010EC= 42 79 20 54 65 61 ...    124                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
0000112C= 45 6E 74 65 72 20 ...    125  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
0000114B= 45 6E 74 65 72 20 ...    126  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001168= 41 64 64 72 65 73 ...    127  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
0000118F= 45 6E 64 69 6E 67 ...    128  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C9= 50 72 65 73 73 20 ...    129  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011E3= 52 65 61 63 68 65 ...    130  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011FE= 54 72 79 20 61 6E ...    131                      DC.B    'Try another location? (yes/no): ',0
0000121F= 0D 0A 00                 132  linebreak           DC.B    CR,LF,0
00001222                           133                      
00001222= 44 41 54 41 00           134  Invalid_disp        DC.B    'DATA',0
00001227= 57 52 4F 4E 47 45 ...    135  InvalidEA_disp      DC.B    'WRONGEA',0
0000122F                           136  
0000122F= 4E 4F 50 00              137  NOP_disp            DC.B    'NOP',0
00001233= 4D 4F 56 45 00           138  MOVE_disp           DC.B    'MOVE',0
00001238= 4D 4F 56 45 41 00        139  MOVEA_disp          DC.B    'MOVEA',0
0000123E= 4D 4F 56 45 51 00        140  MOVEQ_disp          DC.B    'MOVEQ',0
00001244= 4D 4F 56 45 4D 00        141  MOVEM_disp          DC.B    'MOVEM',0
0000124A= 41 44 44 00              142  ADD_disp            DC.B    'ADD',0
0000124E= 41 44 44 41 00           143  ADDA_disp           DC.B    'ADDA',0
00001253= 41 44 44 49 00           144  ADDI_disp           DC.B    'ADDI',0
00001258= 41 44 44 51 00           145  ADDQ_disp           DC.B    'ADDQ',0
0000125D= 53 55 42 00              146  SUB_disp            DC.B    'SUB',0
00001261= 4D 55 4C 53 00           147  MULS_disp           DC.B    'MULS',0
00001266= 44 49 56 55 00           148  DIVU_disp           DC.B    'DIVU',0
0000126B= 4C 45 41 00              149  LEA_disp            DC.B    'LEA',0
0000126F= 43 4C 52 00              150  CLR_disp            DC.B    'CLR',0
00001273= 41 4E 44 00              151  AND_disp            DC.B    'AND',0
00001277= 4F 52 00                 152  OR_disp             DC.B    'OR',0
0000127A= 4C 53 4C 00              153  LSL_disp            DC.B    'LSL',0
0000127E= 4C 53 52 00              154  LSR_disp            DC.B    'LSR',0
00001282= 41 53 4C 00              155  ASL_disp            DC.B    'ASL',0
00001286= 41 53 52 00              156  ASR_disp            DC.B    'ASR',0
0000128A= 52 4F 4C 00              157  ROL_disp            DC.B    'ROL',0
0000128E= 52 4F 52 00              158  ROR_disp            DC.B    'ROR',0
00001292= 4A 53 52 00              159  JSR_disp            DC.B    'JSR',0
00001296= 52 54 53 00              160  RTS_disp            DC.B    'RTS',0
0000129A= 42 43 43 00              161  BCC_disp            DC.B    'BCC',0
0000129E= 42 47 54 00              162  BGT_disp            DC.B    'BGT',0    
000012A2= 42 4C 45 00              163  BLE_disp            DC.b    'BLE',0
000012A6                           164  
000012A6                           165  
000012A6= 30 00                    166  hexaTable               DC.B    '0',0
000012A8= 31 00                    167                          DC.B    '1',0
000012AA= 32 00                    168                          DC.B    '2',0
000012AC= 33 00                    169                          DC.B    '3',0
000012AE= 34 00                    170                          DC.B    '4',0
000012B0= 35 00                    171                          DC.B    '5',0
000012B2= 36 00                    172                          DC.B    '6',0
000012B4= 37 00                    173                          DC.B    '7',0
000012B6= 38 00                    174                          DC.B    '8',0
000012B8= 39 00                    175                          DC.B    '9',0
000012BA= 41 00                    176                          DC.B    'A',0
000012BC= 42 00                    177                          DC.B    'B',0
000012BE= 43 00                    178                          DC.B    'C',0
000012C0= 44 00                    179                          DC.B    'D',0
000012C2= 45 00                    180                          DC.B    'E',0
000012C4= 46 00                    181                          DC.B    'F',0
000012C6= 23 00                    182  poundsign               DC.B    '#',0
000012C8= 24 00                    183  dollarsign              DC.B    '$',0
000012CA= 2B 00                    184  plussign                DC.B    '+',0
000012CC= 2D 00                    185  minussign               DC.B    '-',0
000012CE= 2C 00                    186  commasign               DC.B    ',',0
000012D0= 2F 00                    187  backslashsigh           DC.B    '/',0
000012D2= 28 00                    188  openparen               DC.B    '(',0
000012D4= 29 00                    189  closeparen              DC.B    ')',0
000012D6= 20 00                    190  space                   DC.B    ' ',0   
000012D8= 2E 42 00                 191  size_b                  DC.B    '.B',0
000012DB= 2E 57 00                 192  size_w                  DC.B    '.W',0        
000012DE= 2E 4C 00                 193  size_l                  DC.B    '.L',0
000012E1                           194  
000012E1                           195  linecount               DS.B    1       *storeage for lines on a screen
000012E2= 01                       196  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012E4                           197  location_startData      DS.L    1       *location on where to start reading data
000012E8                           198  location_endData        DS.L    1       *location on where to end reading data
000012EC                           199  table_length            DS.B    1       *Number of spaces in the table to print to console
000012ED                           200  
000012ED                           201  
000012ED                           202  -------------------- end include --------------------
000012ED                           203             
000012ED                           204  EXIT                 
000012EE  FFFF FFFF                205         SIMHALT   
000012F2                           206  
000012F2                           207  
000012F2                           208  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012F2  4EF9 00001352            209  jmp_table      JMP         code0000
000012F8                           210                  *ADDI
000012F8                           211  
000012F8  4EF9 00001366            212                 JMP         code0001
000012FE                           213  
000012FE  4EF9 0000136A            214                 JMP         code0010
00001304                           215  
00001304  4EF9 0000136E            216                 JMP         code0011
0000130A                           217  
0000130A  4EF9 00001372            218                 JMP         code0100
00001310                           219                             
00001310  4EF9 000013A6            220                 JMP         code0101
00001316                           221                 * ADDQ
00001316                           222                  
00001316                           223        
00001316  4EF9 000013AE            224                 JMP         code0110
0000131C                           225                 * BCC
0000131C                           226                 * BGT
0000131C                           227                 * BLE
0000131C                           228                 
0000131C  4EF9 000013B2            229                 JMP         code0111
00001322                           230                 * MOVEQ
00001322                           231  
00001322  4EF9 000013B8            232                 JMP         code1000
00001328                           233                 * DIVU
00001328                           234                 * OR
00001328                           235  
00001328  4EF9 000013CA            236                 JMP         code1001
0000132E                           237                  *SUB
0000132E  4EF9 000013D0            238                 JMP         code1010
00001334                           239                 
00001334  4EF9 000013D4            240                 JMP         code1011
0000133A                           241                 * CMP
0000133A                           242                 
0000133A  4EF9 000013DA            243                 JMP         code1100
00001340                           244                 * MULS
00001340                           245                 * AND
00001340                           246          
00001340  4EF9 000013EC            247                 JMP         code1101
00001346                           248                 *ADD
00001346                           249                 *ADDA
00001346  4EF9 00001438            250                 JMP         code1110
0000134C                           251                 * ASR
0000134C                           252                 * ASL
0000134C                           253                 * LSL
0000134C                           254                 * LSR
0000134C                           255                 * ROL
0000134C                           256                 * ROR
0000134C                           257  
0000134C  4EF9 00001468            258                 JMP         code1111
00001352                           259  
00001352                           260  
00001352                           261  code0000      
00001352  4EB9 0000197A            262                 JSR          bits5to8 // RETURNS INTO D3
00001358  B6BC 00000006            263                 CMP.L        #%0110, D3
0000135E  6600 0726                264                 BNE          INVALID_OP
00001362  6000 01D2                265                 BRA          ADDI  
00001366                           266  
00001366  4E72 2700                267  code0001       STOP        #$2700
0000136A                           268  
0000136A  4E72 2700                269  code0010       STOP        #$2700
0000136E                           270  
0000136E  4E72 2700                271  code0011       STOP        #$2700
00001372                           272  
00001372                           273  code0100       
00001372  4EB9 00001B1E            274                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
00001378                           275                  
00001378                           276                 *NOP
00001378  C47C 0FFF                277                 AND     #%0000111111111111,D2
0000137C  B4BC 00000E71            278                 CMP.L   #%000111001110001, D2
00001382  6700 0720                279                 BEQ     NOP
00001386                           280                 
00001386                           281                 *RTS
00001386  C47C 0FFF                282                 AND     #%0000111111111111,D2
0000138A  B4BC 00000E75            283                 CMP.L   #%0000111001110101, D2
00001390  6700 0720                284                 BEQ     RTS
00001394                           285  
00001394                           286                 *JSR
00001394  C47C 0FC0                287                 AND     #%0000111111000000,D2
00001398  B4BC 00000E80            288                 CMP.L   #%0000111010000000,D2
0000139E  6700 0720                289                 BEQ     JSR
000013A2                           290                 
000013A2                           291                 * MOVEM
000013A2                           292                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000013A2                           293                ** AND     #%0000111110000000,D2
000013A2                           294                 * DATA REGISTER
000013A2                           295                ** CMP.L   #%0000100010000000, D2
000013A2                           296                 ** JSR      MOVEM
000013A2                           297                 * ADDRESS REGISTER (DECREMENTED)
000013A2                           298                 ** CMP.L  #%0000110010000000, D2
000013A2                           299                 ** JSR    MOVEM
000013A2                           300                  
000013A2                           301                  ** TO DO: BRANCH IF INVALID OPCODE
000013A2                           302                  *LEA - if it's not the top codes, it's LEA
000013A2  6000 0236                303                  BRA     LEA
000013A6                           304  code0101      
000013A6                           305  
000013A6  4EB9 000016C4            306                  JSR   ADDQ
000013AC  4E75                     307                  RTS
000013AE                           308  
000013AE  4E72 2700                309  code0110        STOP        #$2700
000013B2                           310  
000013B2                           311  code0111       
000013B2  4EB9 0000173A            312                  JSR       MOVEQ
000013B8                           313  
000013B8                           314  code1000      
000013B8  4EB9 0000198C            315                  JSR        bits8to10
000013BE  B67C 0003                316                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013C2  6700 039A                317                  BEQ        DIVU
000013C6  6000 03B6                318                  BRA        OR       ** OTHERWISE OR
000013CA                           319                  
000013CA                           320  
000013CA                           321  code1001       
000013CA  4EB9 0000179A            322                 JSR         SUB
000013D0  4E72 2700                323  code1010       STOP        #$2700
000013D4                           324  
000013D4                           325  code1011       
000013D4  4EB9 000017BA            326                 JSR         CMP
000013DA                           327  
000013DA                           328  code1100      
000013DA  4EB9 0000198C            329                  JSR        bits8to10
000013E0  B67C 0007                330                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013E4  6700 03F4                331                  BEQ        MULS
000013E8  6000 0410                332                  BRA        AND       ** OTHERWISE AND
000013EC                           333  
000013EC                           334  code1101       
000013EC  4EB9 00001B1E            335                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013F2                           336                 *ADDA
000013F2  4EB9 0000198C            337                 JSR      bits8to10
000013F8  B67C 0003                338                 CMP      #%011, D3  ** WORD
000013FC  6700 006E                339                 BEQ      ADDA
00001400  B67C 0007                340                 CMP      #%111, D3   ** LONG
00001404  6700 0066                341                 BEQ      ADDA
00001408                           342                 
00001408                           343                 *ADD
00001408  B67C 0000                344                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
0000140C  6700 0084                345                 BEQ      ADD
00001410  B67C 0001                346                 CMP      #%001, D3   ** WORD TO DATA REGISTER
00001414  6700 007C                347                 BEQ      ADD
00001418  B67C 0002                348                 CMP      #%010, D3   ** LONG TO DATA REGISTER
0000141C  6700 0074                349                 BEQ      ADD
00001420  B67C 0004                350                 CMP      #%100, D3   ** BYTE TO EA
00001424  6700 006C                351                 BEQ      ADD
00001428  B67C 0005                352                 CMP      #%101, D3   ** WORD TO EA
0000142C  6700 0064                353                 BEQ      ADD
00001430  B67C 0006                354                 CMP      #%110, D3   ** LONG TO EA
00001434  6700 005C                355                 BEQ      ADD
00001438                           356                 
00001438                           357  
00001438                           358  code1110       
00001438                           359                  * ASR
00001438  4EB9 000019D0            360                  JSR     bits1to10
0000143E  B67C 0383                361                  CMP     #%1110000011,D3
00001442  6700 03D6                362                  BEQ     ASR
00001446                           363                  
00001446                           364                  * ASL
00001446  B67C 0387                365                  CMP     #%1110000111,D3
0000144A  6700 03EA                366                  BEQ     ASL
0000144E                           367                  
0000144E                           368                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
0000144E                           369                  * LSL
0000144E  4244                     370                  CLR     D4
00001450  2803                     371                  MOVE.L  D3,D4
00001452  C8BC 00A98671            372                  AND.L   #11110001,D4
00001458  B87C 01C7                373                  CMP     #%111000111,D4
0000145C  6700 03F4                374                  BEQ     LSL
00001460                           375                  
00001460                           376                  * LSR
00001460  B67C 038B                377                  CMP     #%1110001011,D3
00001464  6700 0408                378                  BEQ     LSR
00001468                           379                  
00001468                           380                  * ROL
00001468                           381                  
00001468                           382                  * ROR
00001468                           383  
00001468  4E72 2700                384  code1111       STOP        #$2700
0000146C                           385  
0000146C                           386  ADDA    
0000146C  4EB9 00001476            387                 JSR     ADDA_BUFFER
00001472  6000 06D0                388                 BRA     PRINT_BUFFER
00001476                           389                  
00001476                           390  ADDA_BUFFER
00001476  1CFC 0041                391                 MOVE.B   #'A',(A6)+
0000147A  1CFC 0044                392                 MOVE.B   #'D', (A6)+  
0000147E  1CFC 0044                393                 MOVE.B   #'D', (A6)+
00001482  1CFC 0041                394                 MOVE.B   #'A', (A6)+
00001486  4EB9 00001C82            395                 JSR      GETSIZE_ADDA
0000148C  1CFC 0020                396                 MOVE.B   #' ', (A6)+
00001490  4E75                     397                 RTS
00001492                           398                 
00001492                           399                 
00001492                           400                 
00001492                           401  *********************************************               
00001492                           402  ADD    
00001492  4EB9 0000149C            403                 JSR     ADD_BUFFER
00001498  6000 06AA                404                 BRA     PRINT_BUFFER
0000149C                           405                  
0000149C                           406  ADD_BUFFER
0000149C  1CFC 0041                407                 MOVE.B   #'A',(A6)+
000014A0  1CFC 0044                408                 MOVE.B   #'D', (A6)+  
000014A4  1CFC 0044                409                 MOVE.B   #'D', (A6)+
000014A8  4EB9 00001BC0            410                 JSR      GETSIZE_ADD
000014AE                           411                 
000014AE                           412                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014AE                           413                 
000014AE  BC7C 0001                414                 CMP      #1,D6
000014B2  6600 001A                415                 BNE      ADD_DIRECTION_REVERSED
000014B6  4EB9 000014F0            416                 JSR      ADD_SRC
000014BC  1CFC 002C                417                 MOVE.B   #',', (A6)+
000014C0  1CFC 0020                418                 MOVE.B   #' ', (A6)+
000014C4  4EB9 00001514            419                 JSR      ADD_DEST
000014CA  6000 001C                420                 BRA      ADD_DONE
000014CE                           421                 
000014CE                           422                 
000014CE                           423  ADD_DIRECTION_REVERSED
000014CE                           424  
000014CE  4246                     425                 CLR      D6
000014D0  4EB9 00001514            426                 JSR      ADD_DEST
000014D6  1CFC 002C                427                 MOVE.B   #',', (A6)+
000014DA  1CFC 0020                428                 MOVE.B   #' ', (A6)+
000014DE  4EB9 000014F0            429                 JSR      ADD_SRC
000014E4  6000 0002                430                 BRA      ADD_DONE              
000014E8                           431                 
000014E8                           432                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014E8                           433                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014E8                           434                 
000014E8                           435  ADD_DONE       
000014E8  4246                     436                 CLR      D6
000014EA  4EB9 00001B44            437                 JSR     PRINT_BUFFER
000014F0                           438  
000014F0                           439                  
000014F0                           440  
000014F0                           441  ***********************************************        
000014F0                           442  
000014F0                           443  
000014F0                           444  
000014F0                           445  ****************************************************************************************
000014F0                           446  ADD_SRC
000014F0                           447  
000014F0  4EB9 0000199E            448                  JSR    bits11to13
000014F6  3803                     449                  MOVE   D3,D4
000014F8  41F9 0000188A            450                  LEA     jmp_mode,A0    *Index into the table
000014FE  C6FC 0006                451                  MULU   #6,D3
00001502  4EB0 3000                452                  JSR    0(A0,D3)     
00001506  4EB9 000019B0            453                  JSR    bits14to16
0000150C  4EB9 000018BA            454                  JSR    insert_num
00001512  4E75                     455                  RTS
00001514                           456  
00001514                           457  
00001514                           458  
00001514                           459  
00001514                           460  
00001514                           461  ADD_DEST
00001514  363C 0000                462                  MOVE.W #%000,D3     ;Can only have a data register.
00001518  3803                     463                  MOVE   D3,D4
0000151A  41F9 0000188A            464                  LEA     jmp_mode,A0    *Index into the table
00001520  C6FC 0006                465                  MULU    #6,D3       *Form offset     
00001524  4EB0 3000                466                  JSR     0(A0,D3)   *Jump indirect with index
00001528                           467                  
00001528  4EB9 00001966            468                  JSR     bits5to7
0000152E  4EB9 000018BA            469                  JSR     insert_num
00001534  4E75                     470                  RTS
00001536                           471                          
00001536                           472  
00001536                           473  
00001536                           474  
00001536                           475  ADDI
00001536  4EB9 000015BE            476                  JSR     ADDI_BUFFER
0000153C  4EB9 0000154C            477                  JSR     ADDI_SRC
00001542  4EB9 0000155A            478                  JSR     ADDI_DES
00001548  6000 05FA                479                  BRA     PRINT_BUFFER
0000154C                           480                  
0000154C                           481  ADDI_SRC                        
0000154C  1CFC 0023                482                  MOVE.B  #'#', (A6)+
00001550  1CFC 002C                483                  MOVE.B  #',', (A6)+
00001554  1CFC 0020                484                  MOVE.B  #' ', (A6)+
00001558  4E75                     485                  RTS
0000155A                           486                    ** TODO: IMPLEMENT THIS IN EA
0000155A                           487                  ** Immediate field—Data immediately following the instruction.
0000155A                           488                  **If size = 00, the data is the low-order byte of the immediate word.
0000155A                           489                  **If size = 01, the data is the entire immediate word.
0000155A                           490                  **If size = 10, the data is the next two immediate words. 
0000155A                           491  ADDI_DES
0000155A                           492                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
0000155A                           493                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
0000155A  4EB9 0000199E            494                 JSR      bits11to13
00001560  B67C 0001                495                 CMP      #%001, D3 **AN
00001564  6700 051C                496                 BEQ      INVALID_EA
00001568  B67C 0005                497                 CMP      #%101, D3 **COMPLICATED
0000156C  6700 0514                498                 BEQ      INVALID_EA
00001570  B67C 0006                499                 CMP      #%110, D3 **COMPLICATED
00001574  6700 050C                500                 BEQ      INVALID_EA
00001578                           501                 
00001578  4EB9 000019C0            502                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000157E  B67C 003C                503                 CMP      #%111100,D3 // immediate data
00001582  6700 04FE                504                 BEQ      INVALID_EA
00001586  B67C 003A                505                 CMP      #%111010,D3 // complicated
0000158A  6700 04F6                506                 BEQ      INVALID_EA
0000158E  B67C 003B                507                 CMP      #%111011,D3 // complicated
00001592  6700 04EE                508                 BEQ      INVALID_EA
00001596                           509                 
00001596  4EB9 0000199E            510                 JSR      bits11to13 ** grab bits to jump with\
0000159C  3803                     511                 MOVE     D3,D4
0000159E  41F9 0000188A            512                 LEA     jmp_mode,A0    *Index into the table
000015A4  C6FC 0006                513                 MULU    #6,D3       *Form offset     
000015A8  4EB0 3000                514                 JSR     0(A0,D3)   *Jump indirect with index
000015AC                           515                 
000015AC  4243                     516                 CLR     D3
000015AE  4EB9 000019B0            517                 JSR     bits14to16
000015B4  4EB9 000018BA            518                 JSR     insert_num
000015BA  4244                     519                 CLR     D4
000015BC                           520                 
000015BC  4E75                     521                 RTS
000015BE                           522                 
000015BE                           523                             
000015BE                           524  ADDI_BUFFER
000015BE  1CFC 0041                525                 MOVE.B   #'A',(A6)+
000015C2  1CFC 0044                526                 MOVE.B   #'D', (A6)+  
000015C6  1CFC 0044                527                 MOVE.B   #'D', (A6)+
000015CA  1CFC 0049                528                 MOVE.B   #'I', (A6)+
000015CE                           529                 
000015CE  4EB9 00001C48            530                 JSR      GETSIZE_ADDI
000015D4                           531                 
000015D4                           532                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015D4                           533                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015D4  1CFC 0020                534                 MOVE.B   #' ', (A6)+
000015D8  4E75                     535                 RTS
000015DA                           536                              
000015DA                           537  LEA
000015DA  4EB9 0000198C            538                 JSR      bits8to10   // 1 1 1
000015E0  B47C 0007                539                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015E4  6600 04A0                540                 BNE      INVALID_OP
000015E8  4EB9 000015FC            541                 JSR      LEA_BUFFER
000015EE  4EB9 0000160E            542                 JSR      LEA_SRC
000015F4  4EB9 000016A0            543                 JSR      LEA_DEST
000015FA  4E75                     544                 RTS
000015FC                           545                 
000015FC                           546  LEA_BUFFER 
000015FC  1CFC 004C                547                 MOVE.B   #'L',(A6)+
00001600  1CFC 0045                548                 MOVE.B   #'E', (A6)+  
00001604  1CFC 0041                549                 MOVE.B   #'A', (A6)+
00001608  1CFC 0020                550                 MOVE.B   #' ', (A6)+
0000160C  4E75                     551                 RTS
0000160E                           552            
0000160E                           553  LEA_SRC
0000160E                           554              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
0000160E  4EB9 0000199E            555              JSR      bits11to13  // source mode - D3
00001614  B67C 0000                556              CMP      #%000, D3
00001618  6700 0468                557              BEQ      INVALID_EA
0000161C  B67C 0001                558              CMP      #%001, D3
00001620  6700 0460                559              BEQ      INVALID_EA
00001624  B67C 0003                560              CMP      #%011, D3
00001628  6700 0458                561              BEQ      INVALID_EA
0000162C  B67C 0004                562              CMP      #%100, D3
00001630  6700 0450                563              BEQ      INVALID_EA
00001634  B67C 0005                564              CMP      #%101, D3
00001638  6700 0448                565              BEQ      INVALID_EA
0000163C  B67C 0006                566              CMP      #%110, D3
00001640  6700 0440                567              BEQ      INVALID_EA
00001644                           568  
00001644                           569              
00001644                           570              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00001644  4EB9 000019B0            571              JSR      bits14to16 // source register - d4
0000164A  B67C 0004                572              CMP      #%100, D3
0000164E  6700 0432                573              BEQ      INVALID_EA
00001652  B67C 0002                574              CMP      #%010, D3
00001656  6700 042A                575              BEQ      INVALID_EA
0000165A  B67C 0003                576              CMP      #%011, D3
0000165E  6700 0422                577              BEQ      INVALID_EA
00001662                           578              
00001662                           579  
00001662  4EB9 000019C0            580               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001668  B67C 003C                581               CMP      #%111100,D3 // immediate data
0000166C  6700 0414                582               BEQ      INVALID_EA
00001670  B67C 003A                583               CMP      #%111010,D3 // complicated
00001674  6700 040C                584               BEQ      INVALID_EA
00001678  B67C 003B                585               CMP      #%111011,D3 // complicated
0000167C  6700 0404                586               BEQ      INVALID_EA
00001680                           587     
00001680  4EB9 0000199E            588               JSR      bits11to13 ** grab mode bits to jump with
00001686  3803                     589               MOVE    D3,D4
00001688                           590  
00001688  41F9 0000188A            591               LEA     jmp_mode,A0    *Index into the table
0000168E  C6FC 0006                592               MULU    #6,D3       *Form offset     
00001692  4EB0 3000                593               JSR     0(A0,D3)   *Jump indirect with index
00001696                           594   
00001696  1CFC 002C                595               MOVE.B     #',', (A6)+
0000169A  1CFC 0020                596               MOVE.B     #' ', (A6)+
0000169E                           597  
0000169E  4E75                     598               RTS
000016A0                           599               
000016A0                           600  LEA_DEST    
000016A0  4244                     601                  CLR     D4
000016A2  41F9 0000188A            602                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
000016A8  363C 0001                603                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
000016AC  3803                     604                  MOVE    D3,D4
000016AE  C6FC 0006                605                  MULU    #6,D3       *Form offset     
000016B2  4EB0 3000                606                  JSR     0(A0,D3)   *Jump indirect with index
000016B6                           607                  
000016B6  4EB9 00001966            608                  JSR     bits5to7
000016BC  4EB9 000018BA            609                  JSR     insert_num
000016C2                           610                  
000016C2  4E75                     611                  RTS
000016C4                           612  
000016C4                           613  
000016C4                           614  ADDQ
000016C4  4EB9 00001722            615                  JSR     ADDQ_BUFFER
000016CA  4EB9 000016E0            616                  JSR     ADDQ_SRC
000016D0  1CFC 002C                617                  MOVE.B  #',',(A6)+
000016D4  1CFC 0020                618                  MOVE.B  #' ',(A6)+
000016D8  4EB9 000016F8            619                  JSR     ADDQ_DEST
000016DE  4E75                     620                  RTS                 ;BRA     PRINT_BUFFER
000016E0                           621  
000016E0                           622  ADDQ_SRC
000016E0  4EB9 00001966            623                  JSR     bits5to7
000016E6  1CFC 0023                624                  MOVE.B  #'#',(A6)+
000016EA  183C 0000                625                  MOVE.B  #%000,D4
000016EE  4EB9 000018BA            626                  JSR     insert_num
000016F4  4244                     627                  CLR     D4
000016F6  4E75                     628                  RTS
000016F8                           629                  
000016F8                           630  ADDQ_DEST
000016F8  4EB9 0000199E            631                 JSR      bits11to13
000016FE  3803                     632                 MOVE     D3,D4
00001700  41F9 0000188A            633                 LEA     jmp_mode,A0    *Index into the table
00001706  C6FC 0006                634                 MULU    #6,D3       *Form offset     
0000170A  4EB0 3000                635                 JSR     0(A0,D3)   *Jump indirect with index
0000170E  4243                     636                 CLR     D3
00001710  4EB9 000019B0            637                 JSR     bits14to16
00001716  4EB9 000018BA            638                 JSR     insert_num
0000171C  4244                     639                 CLR     D4
0000171E  4243                     640                 CLR     D3
00001720  4E75                     641                 RTS
00001722                           642                 
00001722                           643  
00001722                           644  ADDQ_BUFFER
00001722  1CFC 0041                645                 MOVE.B   #'A',(A6)+
00001726  1CFC 0044                646                 MOVE.B   #'D', (A6)+  
0000172A  1CFC 0044                647                 MOVE.B   #'D', (A6)+
0000172E  1CFC 0051                648                 MOVE.B   #'Q', (A6)+
00001732  4EB9 00001B86            649                 JSR      GETSIZE_ADDQ
00001738                           650                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00001738                           651                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001738  4E75                     652                 RTS               
0000173A                           653  MOVEQ
0000173A  4EB9 00001744            654                  JSR     MOVEQ_BUFFER
00001740  6000 0402                655                  BRA     PRINT_BUFFER
00001744                           656  
00001744                           657  MOVEQ_BUFFER
00001744  1CFC 004D                658                 MOVE.B   #'M',(A6)+
00001748  1CFC 004F                659                 MOVE.B   #'O', (A6)+  
0000174C  1CFC 0056                660                 MOVE.B   #'V', (A6)+
00001750  1CFC 0045                661                 MOVE.B   #'E', (A6)+
00001754  1CFC 0051                662                 MOVE.B   #'Q', (A6)+
00001758  1CFC 0020                663                 MOVE.B   #' ', (A6)+
0000175C  4E75                     664                 RTS
0000175E                           665  
0000175E                           666  DIVU
0000175E  4EB9 00001768            667                  JSR     DIVU_BUFFER
00001764  6000 03DE                668                  BRA     PRINT_BUFFER
00001768                           669  
00001768                           670  DIVU_BUFFER
00001768  1CFC 0044                671                 MOVE.B   #'D',(A6)+
0000176C  1CFC 0049                672                 MOVE.B   #'I', (A6)+  
00001770  1CFC 0056                673                 MOVE.B   #'V', (A6)+
00001774  1CFC 0055                674                 MOVE.B   #'U', (A6)+
00001778  1CFC 0020                675                 MOVE.B   #' ', (A6)+
0000177C  4E75                     676                 RTS  
0000177E                           677  OR    
0000177E  4EB9 00001788            678                 JSR     OR_BUFFER
00001784  6000 03BE                679                 BRA     PRINT_BUFFER
00001788                           680                  
00001788                           681  OR_BUFFER
00001788  1CFC 004F                682                 MOVE.B   #'O',(A6)+
0000178C  1CFC 0052                683                 MOVE.B   #'R', (A6)+  
00001790  1CFC 002E                684                 MOVE.B   #'.', (A6)+
00001794                           685                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001794                           686                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001794                           687                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001794  1CFC 0020                688                 MOVE.B   #' ', (A6)+
00001798  4E75                     689                 RTS   
0000179A                           690  
0000179A                           691  SUB   
0000179A  4EB9 000017A4            692                 JSR     SUB_BUFFER
000017A0  6000 03A2                693                 BRA     PRINT_BUFFER               
000017A4                           694  
000017A4                           695  SUB_BUFFER
000017A4  1CFC 0053                696                 MOVE.B   #'S',(A6)+
000017A8  1CFC 0055                697                 MOVE.B   #'U', (A6)+  
000017AC  1CFC 0042                698                 MOVE.B   #'B', (A6)+
000017B0  1CFC 002E                699                 MOVE.B   #'.', (A6)+
000017B4                           700                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017B4                           701                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017B4                           702                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017B4  1CFC 0020                703                 MOVE.B   #' ', (A6)+
000017B8  4E75                     704                 RTS  
000017BA                           705  CMP   
000017BA  4EB9 000017C4            706                 JSR     CMP_BUFFER
000017C0  6000 0382                707                 BRA     PRINT_BUFFER
000017C4                           708                  
000017C4                           709  CMP_BUFFER
000017C4  1CFC 0043                710                 MOVE.B   #'C',(A6)+
000017C8  1CFC 004D                711                 MOVE.B   #'M', (A6)+  
000017CC  1CFC 0050                712                 MOVE.B   #'P', (A6)+
000017D0  1CFC 002E                713                 MOVE.B   #'.', (A6)+
000017D4                           714                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017D4                           715                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017D4                           716                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017D4  1CFC 0020                717                 MOVE.B   #' ', (A6)+
000017D8  4E75                     718                 RTS   
000017DA                           719                 
000017DA                           720  MULS
000017DA  4EB9 000017E4            721                  JSR     MULS_BUFFER
000017E0  6000 0362                722                  BRA     PRINT_BUFFER
000017E4                           723  
000017E4                           724  MULS_BUFFER
000017E4  1CFC 004D                725                 MOVE.B   #'M',(A6)+
000017E8  1CFC 0055                726                 MOVE.B   #'U', (A6)+  
000017EC  1CFC 004C                727                 MOVE.B   #'L', (A6)+
000017F0  1CFC 0053                728                 MOVE.B   #'S', (A6)+
000017F4  1CFC 0020                729                 MOVE.B   #' ', (A6)+
000017F8  4E75                     730                 RTS
000017FA                           731  
000017FA                           732  AND    
000017FA  4EB9 00001804            733                 JSR     AND_BUFFER
00001800  6000 0342                734                 BRA     PRINT_BUFFER
00001804                           735                  
00001804                           736  AND_BUFFER
00001804  1CFC 0041                737                 MOVE.B   #'A',(A6)+
00001808  1CFC 004E                738                 MOVE.B   #'N', (A6)+  
0000180C  1CFC 0044                739                 MOVE.B   #'D', (A6)+
00001810  1CFC 002E                740                 MOVE.B   #'.', (A6)+
00001814                           741                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001814                           742                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001814                           743                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001814  1CFC 0020                744                 MOVE.B   #' ', (A6)+
00001818  4E75                     745                 RTS    
0000181A                           746  
0000181A                           747  ASR     
0000181A  4EB9 00001824            748                  JSR     ASR_BUFFER
00001820  6000 0322                749                  BRA     PRINT_BUFFER
00001824                           750  
00001824                           751  ASR_BUFFER
00001824  1CFC 0041                752                 MOVE.B   #'A',(A6)+
00001828  1CFC 0053                753                 MOVE.B   #'S', (A6)+  
0000182C  1CFC 0052                754                 MOVE.B   #'R', (A6)+
00001830  1CFC 0020                755                 MOVE.B   #' ', (A6)+
00001834  4E75                     756                 RTS      
00001836                           757  
00001836                           758  ASL     
00001836  4EB9 00001840            759                  JSR     ASL_BUFFER
0000183C  6000 0306                760                  BRA     PRINT_BUFFER
00001840                           761  
00001840                           762  ASL_BUFFER
00001840  1CFC 0041                763                 MOVE.B   #'A',(A6)+
00001844  1CFC 0053                764                 MOVE.B   #'S', (A6)+  
00001848  1CFC 004C                765                 MOVE.B   #'L', (A6)+
0000184C  1CFC 0020                766                 MOVE.B   #' ', (A6)+
00001850  4E75                     767                 RTS     
00001852                           768  
00001852                           769  LSL     
00001852  4EB9 0000185C            770                  JSR     LSL_BUFFER
00001858  6000 02EA                771                  BRA     PRINT_BUFFER
0000185C                           772  
0000185C                           773  LSL_BUFFER
0000185C  1CFC 004C                774                 MOVE.B   #'L',(A6)+
00001860  1CFC 0053                775                 MOVE.B   #'S', (A6)+  
00001864  1CFC 004C                776                 MOVE.B   #'L', (A6)+
00001868  1CFC 0020                777                 MOVE.B   #' ', (A6)+
0000186C  4E75                     778                 RTS     
0000186E                           779  
0000186E                           780  LSR     
0000186E  4EB9 00001878            781                  JSR     LSR_BUFFER
00001874  6000 02CE                782                  BRA     PRINT_BUFFER
00001878                           783  
00001878                           784  LSR_BUFFER
00001878  1CFC 004C                785                 MOVE.B   #'L',(A6)+
0000187C  1CFC 0053                786                 MOVE.B   #'S', (A6)+  
00001880  1CFC 0052                787                 MOVE.B   #'R', (A6)+
00001884  1CFC 0020                788                 MOVE.B   #' ', (A6)+
00001888  4E75                     789                 RTS       
0000188A                           790                 
0000188A                           791  jmp_mode
0000188A  4EF9 000019E2            792                  JMP     MODE000  ** DN
00001890  4EF9 000019E8            793                  JMP     MODE001  ** AN
00001896  4EF9 000019F0            794                  JMP     MODE010  ** (AN)
0000189C  4EF9 000019FA            795                  JMP     MODE011  ** (AN)+   
000018A2  4EF9 00001A04            796                  JMP     MODE100  ** -(AN)
000018A8  4EF9 00001A12            797                  JMP     MODE101  **INVALID
000018AE  4EF9 00001A1C            798                  JMP     MODE110  **INVALID
000018B4  4EF9 00001A26            799                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000018BA                           800  
000018BA                           801                  
000018BA                           802  insert_num
000018BA                           803                  
000018BA                           804                  ;get number from D3
000018BA  B67C 0000                805                  CMP     #%000,D3       ;0
000018BE  6600 000A                806                  BNE     ONE         
000018C2  1CFC 0030                807                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000018C6  6000 006E                808                  BRA     FINISHER
000018CA                           809                  
000018CA  B67C 0001                810  ONE             CMP     #%001,D3       ;1
000018CE  6600 000A                811                  BNE     TWO 
000018D2  1CFC 0031                812                  MOVE.B  #'1',(A6)+
000018D6  6000 005E                813                  BRA     FINISHER
000018DA                           814  
000018DA                           815                  
000018DA  B67C 0002                816  TWO             CMP     #%010,D3        ;2
000018DE  6600 000A                817                  BNE     THREE
000018E2  1CFC 0032                818                  MOVE.B  #'2',(A6)+
000018E6  6000 004E                819                  BRA     FINISHER
000018EA                           820                  
000018EA  B67C 0003                821  THREE           CMP     #%011,D3        ;3
000018EE  6600 000A                822                  BNE     FOUR
000018F2  1CFC 0033                823                  MOVE.B  #'3',(A6)+
000018F6  6000 003E                824                  BRA     FINISHER
000018FA                           825                  
000018FA  B67C 0004                826  FOUR            CMP     #%100,D3        ;4
000018FE  6600 000A                827                  BNE     FIVE
00001902  1CFC 0034                828                  MOVE.B  #'4',(A6)+
00001906  6000 002E                829                  BRA     FINISHER
0000190A                           830                  
0000190A  B67C 0005                831  FIVE            CMP     #%101,D3        ;5
0000190E  6600 000A                832                  BNE     SIX
00001912  1CFC 0035                833                  MOVE.B  #'5',(A6)+
00001916  6000 001E                834                  BRA     FINISHER
0000191A                           835                  
0000191A  B67C 0006                836  SIX             CMP     #%110,D3        ;6
0000191E  6600 000A                837                  BNE     SEVEN
00001922  1CFC 0036                838                  MOVE.B  #'6',(A6)+
00001926  6000 000E                839                  BRA     FINISHER
0000192A                           840                  
0000192A  B67C 0007                841  SEVEN           CMP     #%111,D3        ;7
0000192E  1CFC 0037                842                  MOVE.B  #'7',(A6)+
00001932  6000 0002                843                  BRA     FINISHER
00001936                           844                  
00001936                           845  FINISHER                
00001936                           846                  
00001936                           847                  ;check D4, do we need to do stuff?
00001936  B87C 0002                848                  CMP     #%010,D4
0000193A  6600 0008                849                  BNE     POSTINCR
0000193E  1CFC 0029                850                  MOVE.B  #')',(A6)+
00001942  4E75                     851                  RTS
00001944                           852                  
00001944  B87C 0003                853  POSTINCR        CMP     #%011,D4
00001948  6600 000C                854                  BNE     ONEPAREN
0000194C  1CFC 0029                855                  MOVE.B  #')',(A6)+
00001950  1CFC 002B                856                  MOVE.B  #'+',(A6)+
00001954  4E75                     857                  RTS
00001956                           858                  
00001956  B87C 0004                859  ONEPAREN        CMP     #%100,D4
0000195A  6600 0008                860                  BNE     DONE
0000195E  1CFC 0029                861                  MOVE.B  #')',(A6)+                
00001962                           862  
00001962  4244                     863                  CLR     D4
00001964  4E75                     864  DONE            RTS
00001966                           865  
00001966                           866          
00001966                           867                 
00001966                           868  bits5to7
00001966  4243                     869                 CLR      D3
00001968  4EB9 00001B1E            870                 JSR      COPY_OPCODE  // opcode copied to D2
0000196E  C47C 0E00                871                 AND      #%0000111000000000, D2
00001972  E09A                     872                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001974  E29A                     873                 ROR.L    #1, D2
00001976  3602                     874                 MOVE.W   D2,D3 // moving isolated bits into d3
00001978  4E75                     875                 RTS
0000197A                           876                 
0000197A                           877  bits5to8
0000197A  4243                     878                 CLR      D3
0000197C  4EB9 00001B1E            879                 JSR      COPY_OPCODE  // opcode copied to D2
00001982  C47C 0F00                880                 AND      #%0000111100000000, D2
00001986  E09A                     881                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001988  3602                     882                 MOVE.W   D2,D3 // moving isolated bits into d3
0000198A  4E75                     883                 RTS
0000198C                           884                 
0000198C                           885  bits8to10
0000198C  4243                     886                 CLR      D3
0000198E  4EB9 00001B1E            887                 JSR      COPY_OPCODE  // opcode copied to D2
00001994  C47C 01C0                888                 AND      #%0000000111000000, D2
00001998  EC9A                     889                 ROR.L    #6, D2          // rotate bits so isolated at the end
0000199A  3602                     890                 MOVE.W   D2,D3 // moving isolated bits into d3
0000199C  4E75                     891                 RTS               
0000199E                           892             
0000199E                           893  bits11to13
0000199E  4243                     894                 CLR      D3
000019A0  4EB9 00001B1E            895                 JSR      COPY_OPCODE  // opcode copied to D2
000019A6  C47C 0038                896                 AND      #%0000000000111000, D2
000019AA  E69A                     897                 ROR.L    #3, D2          // rotate bits so isolated at the end
000019AC  3602                     898                 MOVE.W   D2,D3 // moving isolated bits into d3
000019AE  4E75                     899                 RTS
000019B0                           900             
000019B0                           901  bits14to16
000019B0  4243                     902                 CLR      D3
000019B2  4EB9 00001B1E            903                 JSR      COPY_OPCODE  // opcode copied to D2
000019B8  C47C 0007                904                 AND      #%0000000000000111, D2
000019BC  3602                     905                 MOVE.W   D2,D3 // moving isolated bits into d3
000019BE  4E75                     906                 RTS
000019C0                           907  bits11to16
000019C0  4243                     908                 CLR      D3
000019C2  4EB9 00001B1E            909                 JSR      COPY_OPCODE  // opcode copied to D2
000019C8  C47C 003F                910                 AND      #%0000000000111111, D2
000019CC  3602                     911                 MOVE.W   D2,D3 // moving isolated bits into d3
000019CE  4E75                     912                 RTS
000019D0                           913  bits1to10
000019D0  4243                     914                 CLR      D3
000019D2  4EB9 00001B1E            915                 JSR      COPY_OPCODE  // opcode copied to D2
000019D8  C47C FFC0                916                 AND      #%1111111111000000, D2
000019DC  EC9A                     917                 ROR.L    #6, D2
000019DE  3602                     918                 MOVE.W   D2,D3 // moving isolated bits into d3
000019E0  4E75                     919                 RTS
000019E2                           920  ** DN       
000019E2                           921  MODE000         
000019E2  1CFC 0044                922                  MOVE.B  #'D',(A6)+     
000019E6  4E75                     923                  RTS
000019E8                           924  
000019E8                           925  ** AN
000019E8                           926  MODE001         
000019E8  4EB9 00001A3A            927                  JSR ADDRESS_BUFFER  
000019EE  4E75                     928                  RTS      
000019F0                           929  
000019F0                           930   ** (AN)
000019F0                           931  MODE010         
000019F0  1CFC 0028                932                  MOVE.B  #'(', (A6)+
000019F4  1CFC 0041                933                  MOVE.B  #'A',(A6)+  
000019F8  4E75                     934                  RTS      
000019FA                           935  
000019FA                           936  ** (AN)+ 
000019FA                           937  MODE011         
000019FA  1CFC 0028                938                  MOVE.B  #'(', (A6)+
000019FE  1CFC 0041                939                  MOVE.B  #'A',(A6)+ 
00001A02  4E75                     940                  RTS       
00001A04                           941  
00001A04                           942   ** -(AN)
00001A04                           943  MODE100         
00001A04  1CFC 002D                944                  MOVE.B  #'-', (A6)+
00001A08  1CFC 0028                945                  MOVE.B  #'(', (A6)+
00001A0C  1CFC 0041                946                  MOVE.B  #'A',(A6)+
00001A10  4E75                     947                  RTS
00001A12                           948                  
00001A12                           949  **INVALID               
00001A12                           950  MODE101         
00001A12  1CFC 0028                951                  MOVE.B  #'(', (A6)+
00001A16  1CFC 0041                952                  MOVE.B  #'A',(A6)+ 
00001A1A  4E75                     953                  RTS
00001A1C                           954                  
00001A1C                           955  **INVALID
00001A1C                           956  MODE110         
00001A1C  1CFC 0028                957                  MOVE.B  #'(', (A6)+
00001A20  1CFC 0041                958                  MOVE.B  #'A',(A6)+
00001A24  4E75                     959                  RTS  
00001A26                           960  
00001A26                           961  ** ABSOLUTE AND IMMEDIATE            
00001A26                           962  MODE111         
00001A26                           963                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001A26  1CFC 0024                964                 MOVE.B   #'$', (A6)+  
00001A2A  4EB9 00001B60            965                 JSR      PRINT_DEREF_ADDRESS
00001A30  544A                     966                 ADD.W    #2, A2
00001A32  4EB9 00001B60            967                 JSR      PRINT_DEREF_ADDRESS
00001A38  4E75                     968                 RTS            
00001A3A                           969                                          
00001A3A                           970  ADDRESS_BUFFER
00001A3A  1CFC 0041                971                  MOVE.B  #'A',(A6)+ 
00001A3E  4E75                     972                  RTS
00001A40                           973                 
00001A40                           974  ABSOLUTE_BUFFER
00001A40  4243                     975                 CLR      D3
00001A42  3604                     976                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001A44  1CF8 0024                977                 MOVE.B   '$', (A6)+
00001A48  B67C 0000                978                 CMP.W    #%000, D3
00001A4C  6700 0010                979                 BEQ      ABSOLUTE_WORD_BUFFER
00001A50  4243                     980                 CLR      D3
00001A52  3604                     981                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001A54  B67C 0001                982                 CMP.W    #%001, D3
00001A58  6700 0016                983                 BEQ      ABSOLUTE_LONG_BUFFER
00001A5C  4E75                     984                 RTS
00001A5E                           985                 
00001A5E                           986  ABSOLUTE_WORD_BUFFER
00001A5E                           987                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A5E                           988                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A5E  1CFC 0046                989                         MOVE.B #'F', (A6)+ 
00001A62  1CFC 0046                990                         MOVE.B #'F', (A6)+ 
00001A66  1CFC 0046                991                         MOVE.B #'F', (A6)+ 
00001A6A  1CFC 0046                992                         MOVE.B #'F', (A6)+ 
00001A6E  4E75                     993                         RTS       
00001A70                           994                    
00001A70                           995  ABSOLUTE_LONG_BUFFER       
00001A70                           996                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A70                           997                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A70  1CFC 0047                998                         MOVE.B #'G', (A6)+ 
00001A74  1CFC 0047                999                         MOVE.B #'G', (A6)+ 
00001A78  1CFC 0047               1000                         MOVE.B #'G', (A6)+ 
00001A7C  1CFC 0047               1001                         MOVE.B #'G', (A6)+
00001A80  4E75                    1002                         RTS 
00001A82                          1003  
00001A82                          1004  INVALID_EA  
00001A82                          1005                  * TODO: IMPLEMENT
00001A82                          1006                  *** CLEAR OUT A6
00001A82                          1007                  ** PUT INVALID MESSAGE INTO A6
00001A82  6000 F869               1008                  BRA EXIT
00001A86                          1009  INVALID_OP  
00001A86                          1010                  ** TODO: IMPLEMENT
00001A86                          1011                 *** CLEAR OUT A6
00001A86                          1012                  ** PUT INVALID MESSAGE INTO A6
00001A86  1CFC 0044               1013                      MOVE.B #'D', (A6)+
00001A8A  1CFC 0041               1014                      MOVE.B #'A', (A6)+
00001A8E  1CFC 0054               1015                      MOVE.B #'T', (A6)+
00001A92  1CFC 0041               1016                      MOVE.B #'A', (A6)+ 
00001A96  1CFC 0020               1017                      MOVE.B #' ', (A6)+ 
00001A9A  4EB9 00001B60           1018                      JSR     PRINT_DEREF_ADDRESS
00001AA0  6000 F84B               1019                      BRA     EXIT
00001AA4                          1020            
00001AA4                          1021                  
00001AA4  43F8 122F               1022  NOP                 LEA     NOP_disp,A1          
00001AA8  103C 000E               1023                      MOVE.B  #14,D0
00001AAC  4E4F                    1024                      TRAP    #15
00001AAE  6000 F83D               1025                      BRA     EXIT
00001AB2                          1026                   
00001AB2                          1027  RTS      
00001AB2  43F8 1296               1028                      LEA     RTS_disp,A1          
00001AB6  103C 000E               1029                      MOVE.B  #14,D0
00001ABA  4E4F                    1030                      TRAP    #15 
00001ABC  6000 F82F               1031                      BRA     EXIT
00001AC0                          1032  JSR      
00001AC0  4DF9 00001CDA           1033                      LEA     BUFFER, A6
00001AC6  1CFC 004A               1034                      MOVE.B #'J', (A6)+
00001ACA  1CFC 0053               1035                      MOVE.B #'S', (A6)+
00001ACE  1CFC 0052               1036                      MOVE.B #'R', (A6)+
00001AD2  1CFC 0020               1037                      MOVE.B #' ', (A6)+
00001AD6  43F9 00001CDA           1038                      LEA     BUFFER, A1
00001ADC                          1039                      ** BITS 10 - 12 MODE       
00001ADC                          1040                      ** BITS 13 - 16 REGISTER
00001ADC  103C 000E               1041                      MOVE.B  #14,D0
00001AE0  4E4F                    1042                      TRAP    #15 
00001AE2  6000 F809               1043                      BRA     EXIT
00001AE6                          1044                    
00001AE6                          1045  MOVEM      
00001AE6                          1046                     
00001AE6                          1047                      ** SIZE SUBROUTINE
00001AE6                          1048                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001AE6  C47C 0040               1049                      AND #%0000000001000000,D2 
00001AEA                          1050                      * WORD
00001AEA  B4BC 00000040           1051                      CMP.L   #%0000000001000000,D2
00001AF0  4EB9 00001B06           1052                      JSR     MOVEM_W 
00001AF6                          1053                      *LONG
00001AF6  B4BC 00000040           1054                      CMP.L   #%0000000001000000,D2 
00001AFC                          1055                     ** JSR     MOVEM_L
00001AFC  103C 000E               1056                      MOVE.B  #14,D0
00001B00  4E4F                    1057                      TRAP    #15
00001B02  6000 F7E9               1058                      BRA     EXIT 
00001B06                          1059                      
00001B06                          1060  MOVEM_W 
00001B06  43F8 1244               1061                       LEA     MOVEM_disp,A1
00001B0A                          1062                      * PRINT MOVEM
00001B0A  103C 000E               1063                       MOVE.B  #14,D0
00001B0E  4E4F                    1064                       TRAP    #15
00001B10                          1065          
00001B10                          1066                      * PRINT WORD PORTION
00001B10  41F8 12DB               1067                       LEA     size_w, A0
00001B14  103C 000E               1068                       MOVE.B  #14,D0
00001B18  4E4F                    1069                       TRAP    #15 
00001B1A                          1070          
00001B1A  6000 F7D1               1071                       BRA     EXIT 
00001B1E                          1072       
00001B1E                          1073     
00001B1E                          1074  COPY_OPCODE 
00001B1E                          1075                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001B1E  4242                    1076                       CLR    D2  
00001B20  3405                    1077                       MOVE.W D5,D2 
00001B22  4E75                    1078                       RTS  
00001B24                          1079  
00001B24                          1080  PRINT_ADDRESS     
00001B24  4242                    1081                   CLR         D2
00001B26  143C 0010               1082                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B2A  220A                    1083                   MOVE.L      A2,D1        
00001B2C  103C 000F               1084                   MOVE.B      #15,D0          
00001B30  4E4F                    1085                   TRAP        #15            
00001B32  1CFC 0020               1086                   MOVE.B      #' ', (A6)+
00001B36  1CFC 0020               1087                   MOVE.B      #' ', (A6)+
00001B3A  1CFC 0020               1088                   MOVE.B      #' ', (A6)+
00001B3E  1CFC 0020               1089                   MOVE.B      #' ', (A6)+
00001B42  4E75                    1090                   RTS     
00001B44                          1091  PRINT_BUFFER    
00001B44  1CFC 0000               1092                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B48  43F9 00001CDA           1093                 LEA      BUFFER, A1
00001B4E  303C 000E               1094                 MOVE.W   #14,D0
00001B52  4E4F                    1095                 TRAP     #15
00001B54  43F8 121F               1096                 LEA     linebreak,A1            *appends line at the end of the user input
00001B58  103C 000E               1097                 MOVE.B  #14,D0
00001B5C  4E4F                    1098                 TRAP    #15
00001B5E  4E75                    1099                 RTS  
00001B60                          1100  
00001B60                          1101  PRINT_DEREF_ADDRESS
00001B60  1CFC 0000               1102                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B64  43F9 00001CDA           1103                 LEA      BUFFER, A1
00001B6A  303C 000E               1104                 MOVE.W   #14,D0
00001B6E  4E4F                    1105                 TRAP     #15
00001B70  4DF9 00001CDA           1106                 LEA      BUFFER, A6
00001B76  4242                    1107                 CLR         D2
00001B78  143C 0010               1108                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B7C  3212                    1109                 MOVE.W      (A2),D1        // PRINT INVALID HEX OPCODE        
00001B7E  103C 000F               1110                 MOVE.B      #15,D0          
00001B82  4E4F                    1111                 TRAP        #15 
00001B84  4E75                    1112                 RTS
00001B86                          1113   
00001B86                          1114                     
00001B86                          1115                     
00001B86                          1116                     
00001B86                          1117                     
00001B86                          1118                     
00001B86                          1119  ***************************
00001B86                          1120  
00001B86                          1121  GETSIZE_ADDQ
00001B86                          1122                   
00001B86                          1123                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001B86                          1124                 
00001B86  4EB8 198C               1125             JSR      bits8to10
00001B8A  B67C 0000               1126             CMP      #%000,D3
00001B8E  6600 000C               1127             BNE      ADDQ_NOTBYTE
00001B92  4EB9 00001CAA           1128             JSR      SIZEISBYTE
00001B98  4243                    1129             CLR      D3
00001B9A  4E75                    1130             RTS
00001B9C                          1131             
00001B9C                          1132  ADDQ_NOTBYTE
00001B9C  B67C 0001               1133             CMP      #%001,D3
00001BA0  6600 000C               1134             BNE      ADDQ_NOTWORD
00001BA4  4EB9 00001CBA           1135             JSR      SIZEISWORD
00001BAA  4243                    1136             CLR      D3
00001BAC  4E75                    1137             RTS
00001BAE                          1138             
00001BAE                          1139  ADDQ_NOTWORD
00001BAE  B67C 0002               1140             CMP      #%010,D3
00001BB2  6600 FECE               1141             BNE      INVALID_EA
00001BB6  4EB9 00001CCA           1142             JSR      SIZEISLONG
00001BBC  4243                    1143             CLR      D3
00001BBE  4E75                    1144             RTS
00001BC0                          1145                   
00001BC0                          1146                                   
00001BC0                          1147  ****************************
00001BC0                          1148  ****************************
00001BC0                          1149  
00001BC0                          1150                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001BC0                          1151                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001BC0                          1152                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001BC0                          1153  GETSIZE_ADD
00001BC0  4EB8 198C               1154              JSR     bits8to10
00001BC4  B67C 0000               1155              CMP     #%000,D3
00001BC8  6600 0010               1156              BNE     ADD_NOTBYTE
00001BCC  4EB9 00001CAA           1157              JSR     SIZEISBYTE
00001BD2  3C3C 0001               1158              MOVE    #1,D6
00001BD6  4243                    1159              CLR     D3
00001BD8  4E75                    1160              RTS
00001BDA                          1161          
00001BDA                          1162  ADD_NOTBYTE 
00001BDA  B67C 0001               1163              CMP     #%001,D3
00001BDE  6600 0010               1164              BNE     ADD_NOTWORD
00001BE2  4EB9 00001CBA           1165              JSR     SIZEISWORD
00001BE8  3C3C 0001               1166              MOVE    #1,D6
00001BEC  4243                    1167              CLR     D3
00001BEE  4E75                    1168              RTS
00001BF0                          1169              
00001BF0                          1170  ADD_NOTWORD
00001BF0  B67C 0002               1171              CMP     #%010,D3
00001BF4  6600 0010               1172              BNE     ADD_NOTLEFT
00001BF8  4EB9 00001CCA           1173              JSR     SIZEISLONG
00001BFE  3C3C 0001               1174              MOVE    #1,D6
00001C02  4243                    1175              CLR     D3
00001C04  4E75                    1176              RTS
00001C06                          1177              
00001C06                          1178  ADD_NOTLEFT     ;check other direction
00001C06  B67C 0004               1179              CMP     #%100,D3
00001C0A  6600 0010               1180              BNE     ADD_NOTRIGHTBYTE
00001C0E  4EB9 00001CAA           1181              JSR     SIZEISBYTE
00001C14  3C3C 0002               1182              MOVE    #2,D6
00001C18  4243                    1183              CLR     D3
00001C1A  4E75                    1184              RTS
00001C1C                          1185              
00001C1C                          1186  ADD_NOTRIGHTBYTE
00001C1C  B67C 0005               1187              CMP     #%101,D3
00001C20  6600 0010               1188              BNE     ADD_NOTRIGHTWORD
00001C24  4EB9 00001CBA           1189              JSR     SIZEISWORD
00001C2A  3C3C 0002               1190              MOVE    #2,D6
00001C2E  4243                    1191              CLR     D3
00001C30  4E75                    1192              RTS
00001C32                          1193  
00001C32                          1194  ADD_NOTRIGHTWORD
00001C32  B67C 0006               1195              CMP     #%110,D3
00001C36  6600 FE4A               1196              BNE     INVALID_EA
00001C3A  4EB9 00001CCA           1197              JSR     SIZEISLONG
00001C40  3C3C 0002               1198              MOVE    #2,D6
00001C44  4243                    1199              CLR     D3
00001C46  4E75                    1200              RTS 
00001C48                          1201                               
00001C48                          1202                       
00001C48                          1203                       
00001C48                          1204  *****************************                  
00001C48                          1205  GETSIZE_ADDI
00001C48  4EB8 198C               1206          JSR     bits8to10
00001C4C  B67C 0000               1207          CMP     #%000,D3
00001C50  6600 000C               1208          BNE     ADDI_NOTBYTE
00001C54  4EB9 00001CAA           1209          JSR     SIZEISBYTE
00001C5A  4243                    1210          CLR     D3
00001C5C  4E75                    1211          RTS
00001C5E                          1212  
00001C5E                          1213  ADDI_NOTBYTE
00001C5E  B67C 0001               1214          CMP     #%001,D3
00001C62  6600 000C               1215          BNE     ADDI_NOTWORD
00001C66  4EB9 00001CBA           1216          JSR     SIZEISWORD
00001C6C  4243                    1217          CLR     D3
00001C6E  4E75                    1218          RTS
00001C70                          1219          
00001C70                          1220  ADDI_NOTWORD
00001C70  B67C 0002               1221          CMP     #%010,D3
00001C74  6600 FE0C               1222          BNE     INVALID_EA
00001C78  4EB9 00001CCA           1223          JSR     SIZEISLONG
00001C7E  4243                    1224          CLR     D3
00001C80  4E75                    1225          RTS
00001C82                          1226          
00001C82                          1227                              
00001C82                          1228                       
00001C82                          1229  ********************************          
00001C82                          1230                       
00001C82                          1231                       
00001C82                          1232  ********************************                     
00001C82                          1233  GETSIZE_ADDA
00001C82  4EB8 198C               1234          JSR     bits8to10
00001C86  B67C 0003               1235          CMP     #%011,D3
00001C8A  6600 000C               1236          BNE     ADDA_NOTWORD
00001C8E  4EB9 00001CBA           1237          JSR     SIZEISWORD
00001C94  4243                    1238          CLR     D3
00001C96  4E75                    1239          RTS
00001C98                          1240          
00001C98                          1241  
00001C98                          1242          
00001C98                          1243  ADDA_NOTWORD
00001C98  B67C 0007               1244          CMP     #%111,D3
00001C9C  6600 FDE4               1245          BNE     INVALID_EA
00001CA0  4EB9 00001CCA           1246          JSR     SIZEISLONG
00001CA6  4243                    1247          CLR     D3
00001CA8  4E75                    1248          RTS
00001CAA                          1249  **********************************        
00001CAA                          1250      
00001CAA                          1251  SIZEISBYTE
00001CAA  1CFC 002E               1252         MOVE.B   #'.',(A6)+
00001CAE  1CFC 0042               1253         MOVE.B   #'B',(A6)+
00001CB2  1CFC 0020               1254         MOVE.B   #' ',(A6)+
00001CB6  4243                    1255         CLR      D3
00001CB8  4E75                    1256         RTS
00001CBA                          1257  
00001CBA                          1258  SIZEISWORD    
00001CBA  1CFC 002E               1259         MOVE.B   #'.',(A6)+
00001CBE  1CFC 0057               1260         MOVE.B   #'W',(A6)+
00001CC2  1CFC 0020               1261         MOVE.B   #' ',(A6)+
00001CC6  4243                    1262         CLR      D3
00001CC8  4E75                    1263         RTS
00001CCA                          1264                  
00001CCA                          1265  SIZEISLONG    
00001CCA  1CFC 002E               1266         MOVE.B   #'.',(A6)+
00001CCE  1CFC 004C               1267         MOVE.B   #'L',(A6)+
00001CD2  1CFC 0020               1268         MOVE.B   #' ',(A6)+
00001CD6                          1269  
00001CD6  4243                    1270         CLR      D3
00001CD8  4E75                    1271         RTS
00001CDA                          1272                  
00001CDA                          1273       
00001CDA= 00000001                1274  BUFFER DC.L 1     
00001CDE                          1275      INCLUDE 'helpers.x68'
00001CDE  1019                    1276  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001CE0  4EB9 00001CF8           1277                          JSR     sub_breakDownAs     *breaks down ASCII code
00001CE6  D280                    1278                          ADD.L   D0,D1               *load that char into D1
00001CE8  0C11 0000               1279                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001CEC  6700 0006               1280                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001CF0  E989                    1281                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001CF2  60EA                    1282                          BRA     sub_AsToHeLoop      *loops through again
00001CF4                          1283                          
00001CF4  2E01                    1284  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001CF6  4E75                    1285                          RTS
00001CF8  B03C 0030               1286  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001CFC  6D00 002A               1287                          BLT     as_ERROR                        
00001D00                          1288                          
00001D00  B03C 0039               1289                          CMP.B    #$39,D0            *is it an A-F letter?
00001D04  6E00 000C               1290                          BGT     as_LETTER
00001D08                          1291                          
00001D08  6000 0002               1292                          BRA     as_NUMBER
00001D0C                          1293                                                 
00001D0C  0400 0030               1294  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001D10  4E75                    1295                          RTS
00001D12                          1296                          
00001D12  B03C 0041               1297  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001D16  6D00 0010               1298                          BLT     as_ERROR
00001D1A                          1299                          
00001D1A  B03C 0046               1300                          CMP.B     #$46, D0
00001D1E  6E00 0008               1301                          BGT     as_ERROR
00001D22                          1302                          
00001D22  0400 0037               1303                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001D26  4E75                    1304                          RTS
00001D28                          1305                          
00001D28  43F9 65727200           1306  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001D2E  103C 000D               1307                          MOVE.B  #13,D0
00001D32  4E4F                    1308                          TRAP    #15  
00001D34                          1309  sub_StartReadingData    
00001D34  0801 0000               1310                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001D38  6600 0006               1311                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001D3C                          1312                          
00001D3C  7E00                    1313                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001D3E  4E75                    1314  srdFinish               RTS
00001D40                          1315  
00001D40  43F8 1168               1316  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D44  103C 000E               1317                          MOVE.B  #14,D0
00001D48  4E4F                    1318                          TRAP    #15
00001D4A                          1319                          
00001D4A  7E01                    1320                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D4C  60F0                    1321                          BRA     srdFinish
00001D4E                          1322  sub_EndReadingData  
00001D4E  0801 0000               1323                          BTST    #0,D1               *checks if LSB is 1, 
00001D52  6600 0018               1324                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001D56                          1325                          
00001D56  B5CB                    1326                          CMP.L   A3,A2               *end address must be greater than start address
00001D58  6E00 0004               1327                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001D5C                          1328  
00001D5C  4E75                    1329  erdFinish               RTS
00001D5E                          1330  
00001D5E  43F8 118F               1331  erdFailAddrOrder        LEA     addr_order_check,A1
00001D62  103C 000E               1332                          MOVE.B  #14,D0
00001D66  4E4F                    1333                          TRAP    #15
00001D68                          1334                          
00001D68  7E01                    1335                          MOVE.L  #1,D7
00001D6A  60F0                    1336                          BRA     erdFinish
00001D6C                          1337  
00001D6C  43F8 1168               1338  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D70  103C 000E               1339                          MOVE.B  #14,D0
00001D74  4E4F                    1340                          TRAP    #15
00001D76                          1341                          
00001D76  7E01                    1342                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D78  60E2                    1343                          BRA     erdFinish
00001D7A                          1344                          
00001D7A                          1345  
00001D7A                          1346  
00001D7A                          1347  
00001D7A                          1348  
00001D7A                          1349  
00001D7A                          1350  
00001D7A                          1351  
00001D7A                          1352  
00001D7A                          1353  -------------------- end include --------------------
00001D7A                          1354      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1A40
ABSOLUTE_LONG_BUFFER  1A70
ABSOLUTE_WORD_BUFFER  1A5E
ADD                 1492
ADDA                146C
ADDA_BUFFER         1476
ADDA_DISP           124E
ADDA_NOTWORD        1C98
ADDI                1536
ADDI_BUFFER         15BE
ADDI_DES            155A
ADDI_DISP           1253
ADDI_NOTBYTE        1C5E
ADDI_NOTWORD        1C70
ADDI_SRC            154C
ADDQ                16C4
ADDQ_BUFFER         1722
ADDQ_DEST           16F8
ADDQ_DISP           1258
ADDQ_NOTBYTE        1B9C
ADDQ_NOTWORD        1BAE
ADDQ_SRC            16E0
ADDRESS_BUFFER      1A3A
ADDR_ODDBIT_MSG     1168
ADDR_ORDER_CHECK    118F
ADD_BUFFER          149C
ADD_DEST            1514
ADD_DIRECTION_REVERSED  14CE
ADD_DISP            124A
ADD_DONE            14E8
ADD_NOTBYTE         1BDA
ADD_NOTLEFT         1C06
ADD_NOTRIGHTBYTE    1C1C
ADD_NOTRIGHTWORD    1C32
ADD_NOTWORD         1BF0
ADD_SRC             14F0
AND                 17FA
AND_BUFFER          1804
AND_DISP            1273
ASL                 1836
ASL_BUFFER          1840
ASL_DISP            1282
ASR                 181A
ASR_BUFFER          1824
ASR_DISP            1286
AS_ERROR            1D28
AS_LETTER           1D12
AS_NUMBER           1D0C
ATHENDLOOP          1CF4
BACKSLASHSIGH       12D0
BCC_DISP            129A
BGT_DISP            129E
BITS11TO13          199E
BITS11TO16          19C0
BITS14TO16          19B0
BITS1TO10           19D0
BITS5TO7            1966
BITS5TO8            197A
BITS8TO10           198C
BLE_DISP            12A2
BUFFER              1CDA
CLOSEPAREN          12D4
CLR_DISP            126F
CMP                 17BA
CMP_BUFFER          17C4
CODE0000            1352
CODE0001            1366
CODE0010            136A
CODE0011            136E
CODE0100            1372
CODE0101            13A6
CODE0110            13AE
CODE0111            13B2
CODE1000            13B8
CODE1001            13CA
CODE1010            13D0
CODE1011            13D4
CODE1100            13DA
CODE1101            13EC
CODE1110            1438
CODE1111            1468
COMMASIGN           12CE
COPY_OPCODE         1B1E
CR                  D
DIVU                175E
DIVU_BUFFER         1768
DIVU_DISP           1266
DOLLARSIGN          12C8
DONE                1964
ENDTEST_MSG         11E3
ERDFAILADDRODDB     1D6C
ERDFAILADDRORDER    1D5E
ERDFINISH           1D5C
EXIT                12ED
FINISHER            1936
FIVE                190A
FOUR                18FA
GETSIZE_ADD         1BC0
GETSIZE_ADDA        1C82
GETSIZE_ADDI        1C48
GETSIZE_ADDQ        1B86
HEXATABLE           12A6
INPUT_BUFFER        12E2
INSERT_NUM          18BA
INVALIDEA_DISP      1227
INVALID_DISP        1222
INVALID_EA          1A82
INVALID_OP          1A86
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            188A
JMP_TABLE           12F2
JSR                 1AC0
JSR_DISP            1292
LEA                 15DA
LEA_BUFFER          15FC
LEA_DEST            16A0
LEA_DISP            126B
LEA_SRC             160E
LF                  A
LINEBREAK           121F
LINECOUNT           12E1
LOCATION_ENDDATA    12E8
LOCATION_END_MSG    114B
LOCATION_STARTDATA  12E4
LOCATION_START_MSG  112C
LSL                 1852
LSL_BUFFER          185C
LSL_DISP            127A
LSR                 186E
LSR_BUFFER          1878
LSR_DISP            127E
MAIN_LOOP           108E
MINUSSIGN           12CC
MODE000             19E2
MODE001             19E8
MODE010             19F0
MODE011             19FA
MODE100             1A04
MODE101             1A12
MODE110             1A1C
MODE111             1A26
MOVEA_DISP          1238
MOVEM               1AE6
MOVEM_DISP          1244
MOVEM_W             1B06
MOVEQ               173A
MOVEQ_BUFFER        1744
MOVEQ_DISP          123E
MOVE_DISP           1233
MULS                17DA
MULS_BUFFER         17E4
MULS_DISP           1261
NOP                 1AA4
NOP_DISP            122F
ONE                 18CA
ONEPAREN            1956
OPENPAREN           12D2
OR                  177E
OR_BUFFER           1788
OR_DISP             1277
PAUSE_MSG           11C9
PLUSSIGN            12CA
POSTINCR            1944
POUNDSIGN           12C6
PRINT_ADDRESS       1B24
PRINT_BUFFER        1B44
PRINT_DEREF_ADDRESS  1B60
ROL_DISP            128A
ROR_DISP            128E
RTS                 1AB2
RTS_DISP            1296
SEVEN               192A
SIX                 191A
SIZEISBYTE          1CAA
SIZEISLONG          1CCA
SIZEISWORD          1CBA
SIZE_B              12D8
SIZE_L              12DE
SIZE_W              12DB
SPACE               12D6
SRDFAILADDRODDB     1D40
SRDFINISH           1D3E
START               1000
SUB                 179A
SUB_ASTOHELOOP      1CDE
SUB_BREAKDOWNAS     1CF8
SUB_BUFFER          17A4
SUB_DISP            125D
SUB_ENDREADINGDATA  1D4E
SUB_STARTREADINGDATA  1D34
TABLE_LENGTH        12EC
THREE               18EA
TWO                 18DA
WELCOME_MSG         10C8
