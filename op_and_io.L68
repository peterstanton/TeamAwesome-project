00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2017 12:25:09 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C2              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001126             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012DC             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001E6A             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 00001219             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001EC0             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001145             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012DC             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001E6A             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 00001219             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001EDA             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012EC             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001E66             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C                            80                   
0000109C                            81                   ;MOVE.W  (A2), D3
0000109C                            82  
0000109C                            83                   * TEST OPCODES
0000109C                            84                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109C                            85                   ;MOVE.W  #$4E71,D3 * NOP
0000109C                            86                   ; MOVE.W  #$4E75,D3 * RTS
0000109C                            87                   ; MOVE.W  #$4EB0,D3 * JSR
0000109C                            88                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109C                            89                   ;MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109C                            90                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109C                            91                   ;MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109C                            92                    ; MOVE.W    #$5613, D3    *ADDQ.B #$3, (A3)
0000109C                            93                   ; MOVE.W     #$7E70, D3 *MOVEQ
0000109C                            94                   ; MOVE.W     #$80C0, D3 *DIVU
0000109C                            95                   ; MOVE.W     #$86D9, D3 *DIVU (A1)+,D3                      
0000109C                            96                   ; MOVE.W     #$8000, D3 * OR
0000109C                            97                   ; MOVE.W        #$9000, D3 * SUB
0000109C                            98                   ; MOVE.W        #$B000, D3 * CMP
0000109C                            99                   ; MOVE.W        #$C1C0, D3 * MULS
0000109C                           100                   ; MOVE.W        #$C000, D3 * AND
0000109C                           101                   ; MOVE.W        #$E0F8, D3  *ASR
0000109C                           102                   ; MOVE.W        #$E1E2, D3  *ASL
0000109C                           103                   ; MOVE.W        #$E393, D3  *LSL
0000109C                           104                   ; MOVE.W        #$E2DC, D3  *LSR
0000109C  363C 8E62                105                     MOVE.W        #$8E62, D3  *OR.W        -(A2),D7
000010A0                           106                        
000010A0                           107  
000010A0  4EB9 00001C04            108                   JSR    PRINT_ADDRESS
000010A6  544A                     109                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010A8  3A03                     110                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AA  183C 000C                111                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010AE  E86B                     112                   LSR.W   D4,D3       *Move the bits
000010B0  C6FC 0006                113                   MULU    #6,D3       *Form offset     
000010B4  4EB0 3000                114                   JSR     0(A0,D3)   *Jump indirect with index
000010B8  4EB9 00001C24            115                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010BE                           116                   
000010BE                           117                   ;CMP     A3,A2
000010BE                           118                   ;BGT     EXIT
000010BE                           119                   ;BRA     MAIN_LOOP
000010BE                           120                   
000010BE  6000 0227                121                   BRA      EXIT
000010C2                           122                                  
000010C2                           123      INCLUDE 'definitions.x68'
000010C2                           124  
000010C2  =0000000D                125  CR              EQU     $0D         carriage return
000010C2  =0000000A                126  LF              EQU     $0A         line feed
000010C2= 43 53 53 20 34 32 ...    127  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010E6= 42 79 20 54 65 61 ...    128                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001126= 45 6E 74 65 72 20 ...    129  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001145= 45 6E 74 65 72 20 ...    130  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001162= 41 64 64 72 65 73 ...    131  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
00001189= 45 6E 64 69 6E 67 ...    132  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C3= 50 72 65 73 73 20 ...    133  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011DD= 52 65 61 63 68 65 ...    134  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011F8= 54 72 79 20 61 6E ...    135                      DC.B    'Try another location? (yes/no): ',0
00001219= 0D 0A 00                 136  linebreak           DC.B    CR,LF,0
0000121C                           137                      
0000121C= 44 41 54 41 00           138  Invalid_disp        DC.B    'DATA',0
00001221= 57 52 4F 4E 47 45 ...    139  InvalidEA_disp      DC.B    'WRONGEA',0
00001229                           140  
00001229= 4E 4F 50 00              141  NOP_disp            DC.B    'NOP',0
0000122D= 4D 4F 56 45 00           142  MOVE_disp           DC.B    'MOVE',0
00001232= 4D 4F 56 45 41 00        143  MOVEA_disp          DC.B    'MOVEA',0
00001238= 4D 4F 56 45 51 00        144  MOVEQ_disp          DC.B    'MOVEQ',0
0000123E= 4D 4F 56 45 4D 00        145  MOVEM_disp          DC.B    'MOVEM',0
00001244= 41 44 44 00              146  ADD_disp            DC.B    'ADD',0
00001248= 41 44 44 41 00           147  ADDA_disp           DC.B    'ADDA',0
0000124D= 41 44 44 49 00           148  ADDI_disp           DC.B    'ADDI',0
00001252= 41 44 44 51 00           149  ADDQ_disp           DC.B    'ADDQ',0
00001257= 53 55 42 00              150  SUB_disp            DC.B    'SUB',0
0000125B= 4D 55 4C 53 00           151  MULS_disp           DC.B    'MULS',0
00001260= 44 49 56 55 00           152  DIVU_disp           DC.B    'DIVU',0
00001265= 4C 45 41 00              153  LEA_disp            DC.B    'LEA',0
00001269= 43 4C 52 00              154  CLR_disp            DC.B    'CLR',0
0000126D= 41 4E 44 00              155  AND_disp            DC.B    'AND',0
00001271= 4F 52 00                 156  OR_disp             DC.B    'OR',0
00001274= 4C 53 4C 00              157  LSL_disp            DC.B    'LSL',0
00001278= 4C 53 52 00              158  LSR_disp            DC.B    'LSR',0
0000127C= 41 53 4C 00              159  ASL_disp            DC.B    'ASL',0
00001280= 41 53 52 00              160  ASR_disp            DC.B    'ASR',0
00001284= 52 4F 4C 00              161  ROL_disp            DC.B    'ROL',0
00001288= 52 4F 52 00              162  ROR_disp            DC.B    'ROR',0
0000128C= 4A 53 52 00              163  JSR_disp            DC.B    'JSR',0
00001290= 52 54 53 00              164  RTS_disp            DC.B    'RTS',0
00001294= 42 43 43 00              165  BCC_disp            DC.B    'BCC',0
00001298= 42 47 54 00              166  BGT_disp            DC.B    'BGT',0    
0000129C= 42 4C 45 00              167  BLE_disp            DC.b    'BLE',0
000012A0                           168  
000012A0                           169  
000012A0= 30 00                    170  hexaTable               DC.B    '0',0
000012A2= 31 00                    171                          DC.B    '1',0
000012A4= 32 00                    172                          DC.B    '2',0
000012A6= 33 00                    173                          DC.B    '3',0
000012A8= 34 00                    174                          DC.B    '4',0
000012AA= 35 00                    175                          DC.B    '5',0
000012AC= 36 00                    176                          DC.B    '6',0
000012AE= 37 00                    177                          DC.B    '7',0
000012B0= 38 00                    178                          DC.B    '8',0
000012B2= 39 00                    179                          DC.B    '9',0
000012B4= 41 00                    180                          DC.B    'A',0
000012B6= 42 00                    181                          DC.B    'B',0
000012B8= 43 00                    182                          DC.B    'C',0
000012BA= 44 00                    183                          DC.B    'D',0
000012BC= 45 00                    184                          DC.B    'E',0
000012BE= 46 00                    185                          DC.B    'F',0
000012C0= 23 00                    186  poundsign               DC.B    '#',0
000012C2= 24 00                    187  dollarsign              DC.B    '$',0
000012C4= 2B 00                    188  plussign                DC.B    '+',0
000012C6= 2D 00                    189  minussign               DC.B    '-',0
000012C8= 2C 00                    190  commasign               DC.B    ',',0
000012CA= 2F 00                    191  backslashsigh           DC.B    '/',0
000012CC= 28 00                    192  openparen               DC.B    '(',0
000012CE= 29 00                    193  closeparen              DC.B    ')',0
000012D0= 20 00                    194  space                   DC.B    ' ',0   
000012D2= 2E 42 00                 195  size_b                  DC.B    '.B',0
000012D5= 2E 57 00                 196  size_w                  DC.B    '.W',0        
000012D8= 2E 4C 00                 197  size_l                  DC.B    '.L',0
000012DB                           198  
000012DB                           199  linecount               DS.B    1       *storeage for lines on a screen
000012DC= 01                       200  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012DE                           201  location_startData      DS.L    1       *location on where to start reading data
000012E2                           202  location_endData        DS.L    1       *location on where to end reading data
000012E6                           203  table_length            DS.B    1       *Number of spaces in the table to print to console
000012E7                           204  
000012E7                           205  
000012E7                           206  -------------------- end include --------------------
000012E7                           207             
000012E7                           208  EXIT                 
000012E8  FFFF FFFF                209         SIMHALT   
000012EC                           210  
000012EC                           211  
000012EC                           212  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012EC  4EF9 0000134C            213  jmp_table      JMP         code0000
000012F2                           214                  *ADDI
000012F2                           215  
000012F2  4EF9 00001360            216                 JMP         code0001
000012F8                           217                 *MOVE
000012F8                           218                 *MOVEA
000012F8                           219  
000012F8  4EF9 00001366            220                 JMP         code0010
000012FE                           221  
000012FE  4EF9 00001366            222                 JMP         code0011
00001304                           223  
00001304  4EF9 00001366            224                 JMP         code0100
0000130A                           225                             
0000130A  4EF9 0000139A            226                 JMP         code0101
00001310                           227                 * ADDQ
00001310                           228                  
00001310                           229        
00001310  4EF9 0000139E            230                 JMP         code0110
00001316                           231                 * BCC
00001316                           232                 * BGT
00001316                           233                 * BLE
00001316                           234                 
00001316  4EF9 000013A2            235                 JMP         code0111
0000131C                           236                 * MOVEQ
0000131C                           237  
0000131C  4EF9 000013A6            238                 JMP         code1000
00001322                           239                 * DIVU
00001322                           240                 * OR
00001322                           241  
00001322  4EF9 000013B8            242                 JMP         code1001
00001328                           243                  *SUB
00001328  4EF9 000013BC            244                 JMP         code1010
0000132E                           245                 
0000132E  4EF9 000013C0            246                 JMP         code1011
00001334                           247                 * CMP
00001334                           248                 
00001334  4EF9 000013C4            249                 JMP         code1100
0000133A                           250                 * MULS
0000133A                           251                 * AND
0000133A                           252          
0000133A  4EF9 000013D6            253                 JMP         code1101
00001340                           254                 *ADD
00001340                           255                 *ADDA
00001340  4EF9 00001422            256                 JMP         code1110
00001346                           257                 * ASR
00001346                           258                 * ASL
00001346                           259                 * LSL
00001346                           260                 * LSR
00001346                           261                 * ROL
00001346                           262                 * ROR
00001346                           263  
00001346  4EF9 00001452            264                 JMP         code1111
0000134C                           265  
0000134C                           266  
0000134C                           267  code0000      
0000134C  4EB9 00001A5C            268                 JSR          bits5to8 // RETURNS INTO D3
00001352  B6BC 00000006            269                 CMP.L        #%0110, D3
00001358  6600 0810                270                 BNE          INVALID_OP
0000135C  6000 01B8                271                 BRA          ADDI  
00001360                           272  
00001360                           273  code0001      
00001360  4EB9 00001456            274                 JSR   MOVE_B
00001366                           275                 *MOVE.B
00001366                           276  
00001366                           277  code0010        
00001366                           278                  * MOVE.L
00001366                           279                  * MOVEA.L
00001366                           280  code0011        
00001366                           281                  *MOVEA.W
00001366                           282                  *MOVE.W
00001366                           283  
00001366                           284  code0100       
00001366  4EB9 00001BFE            285                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000136C                           286                  
0000136C                           287                 *NOP
0000136C  C47C 0FFF                288                 AND     #%0000111111111111,D2
00001370  B4BC 00000E71            289                 CMP.L   #%000111001110001, D2
00001376  6700 080C                290                 BEQ     NOP
0000137A                           291                 
0000137A                           292                 *RTS
0000137A  C47C 0FFF                293                 AND     #%0000111111111111,D2
0000137E  B4BC 00000E75            294                 CMP.L   #%0000111001110101, D2
00001384  6700 080C                295                 BEQ     RTS
00001388                           296  
00001388                           297                 *JSR
00001388  C47C 0FC0                298                 AND     #%0000111111000000,D2
0000138C  B4BC 00000E80            299                 CMP.L   #%0000111010000000,D2
00001392  6700 080C                300                 BEQ     JSR
00001396                           301                 
00001396                           302                 * MOVEM
00001396                           303                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001396                           304                ** AND     #%0000111110000000,D2
00001396                           305                 * DATA REGISTER
00001396                           306                ** CMP.L   #%0000100010000000, D2
00001396                           307                 ** JSR      MOVEM
00001396                           308                 * ADDRESS REGISTER (DECREMENTED)
00001396                           309                 ** CMP.L  #%0000110010000000, D2
00001396                           310                 ** JSR    MOVEM
00001396                           311                  
00001396                           312                  ** TO DO: BRANCH IF INVALID OPCODE
00001396                           313                  *LEA - if it's not the top codes, it's LEA
00001396  6000 0220                314                  BRA     LEA
0000139A                           315  code0101      
0000139A                           316  
0000139A  6000 0306                317                  BRA   ADDQ
0000139E                           318  
0000139E  6000 07CA                319  code0110        BRA       INVALID_OP
000013A2                           320  
000013A2                           321  code0111       
000013A2  6000 0374                322                  BRA      MOVEQ
000013A6                           323  
000013A6                           324  code1000      
000013A6  4EB9 00001A6E            325                  JSR        bits8to10
000013AC  B67C 0003                326                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013B0  6700 038A                327                  BEQ        DIVU
000013B4  6000 041A                328                  BRA        OR       ** OTHERWISE OR
000013B8                           329                  
000013B8                           330  
000013B8                           331  code1001       
000013B8  6000 04C2                332                 BRA        SUB
000013BC  6000 07AC                333  code1010       BRA       INVALID_OP
000013C0                           334  
000013C0                           335  code1011       
000013C0  6000 04DA                336                 BRA         CMP
000013C4                           337  
000013C4                           338  code1100      
000013C4  4EB9 00001A6E            339                  JSR        bits8to10
000013CA  B67C 0007                340                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013CE  6700 04EC                341                  BEQ        MULS
000013D2  6000 0508                342                  BRA        AND       ** OTHERWISE AND
000013D6                           343  
000013D6                           344  code1101       
000013D6  4EB9 00001BFE            345                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013DC                           346                 *ADDA
000013DC  4EB9 00001A6E            347                 JSR      bits8to10
000013E2  B67C 0003                348                 CMP      #%011, D3  ** WORD
000013E6  6700 0076                349                 BEQ      ADDA
000013EA  B67C 0007                350                 CMP      #%111, D3   ** LONG
000013EE  6700 006E                351                 BEQ      ADDA
000013F2                           352                 
000013F2                           353                 *ADD
000013F2  B67C 0000                354                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
000013F6  6700 008A                355                 BEQ      ADD
000013FA  B67C 0001                356                 CMP      #%001, D3   ** WORD TO DATA REGISTER
000013FE  6700 0082                357                 BEQ      ADD
00001402  B67C 0002                358                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001406  6700 007A                359                 BEQ      ADD
0000140A  B67C 0004                360                 CMP      #%100, D3   ** BYTE TO EA
0000140E  6700 0072                361                 BEQ      ADD
00001412  B67C 0005                362                 CMP      #%101, D3   ** WORD TO EA
00001416  6700 006A                363                 BEQ      ADD
0000141A  B67C 0006                364                 CMP      #%110, D3   ** LONG TO EA
0000141E  6700 0062                365                 BEQ      ADD
00001422                           366                 
00001422                           367  
00001422                           368  code1110       
00001422                           369                  * ASR
00001422  4EB9 00001AB2            370                  JSR     bits1to10
00001428  B67C 0383                371                  CMP     #%1110000011,D3
0000142C  6700 04CE                372                  BEQ     ASR
00001430                           373                  
00001430                           374                  * ASL
00001430  B67C 0387                375                  CMP     #%1110000111,D3
00001434  6700 04E2                376                  BEQ     ASL
00001438                           377                  
00001438                           378                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001438                           379                  * LSL
00001438  4244                     380                  CLR     D4
0000143A  2803                     381                  MOVE.L  D3,D4
0000143C  C8BC 00A98671            382                  AND.L   #11110001,D4
00001442  B87C 01C7                383                  CMP     #%111000111,D4
00001446  6700 04EC                384                  BEQ     LSL
0000144A                           385                  
0000144A                           386                  * LSR
0000144A  B67C 038B                387                  CMP     #%1110001011,D3
0000144E  6700 0500                388                  BEQ     LSR
00001452                           389                  
00001452                           390                  * ROL
00001452                           391                  
00001452                           392                  * ROR
00001452                           393  
00001452  6000 0716                394  code1111       BRA      INVALID_OP
00001456                           395  
00001456                           396  MOVE_B
00001456  4EB9 0000145C            397                 JSR     MOVEB_BUFFER
0000145C                           398  MOVEB_BUFFER
0000145C  4E71                     399                  NOP              
0000145E                           400  * ----------------------------------
0000145E                           401  
0000145E                           402  ADDA    
0000145E  4EB9 00001466            403                 JSR     ADDA_BUFFER
00001464  4E75                     404                 RTS
00001466                           405                  
00001466                           406  ADDA_BUFFER
00001466  1CFC 0041                407                 MOVE.B   #'A',(A6)+
0000146A  1CFC 0044                408                 MOVE.B   #'D', (A6)+  
0000146E  1CFC 0044                409                 MOVE.B   #'D', (A6)+
00001472  1CFC 0041                410                 MOVE.B   #'A', (A6)+
00001476  4EB9 00001E0E            411                 JSR      GETSIZE_ADDA
0000147C  1CFC 0020                412                 MOVE.B   #' ', (A6)+
00001480  4E75                     413                 RTS
00001482                           414                 
00001482                           415                 
00001482                           416                 
00001482                           417  *********************************************               
00001482                           418  ADD    
00001482  4EB9 0000148A            419                 JSR     ADD_BUFFER
00001488  4E75                     420                 RTS
0000148A                           421                  
0000148A                           422  ADD_BUFFER
0000148A  1CFC 0041                423                 MOVE.B   #'A',(A6)+
0000148E  1CFC 0044                424                 MOVE.B   #'D', (A6)+  
00001492  1CFC 0044                425                 MOVE.B   #'D', (A6)+
00001496  4EB9 00001D4C            426                 JSR      GETSIZE_ADD
0000149C                           427                 
0000149C                           428                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
0000149C  BC7C 0001                429                 CMP      #1,D6
000014A0  6600 0018                430                 BNE      ADD_DIRECTION_REVERSED
000014A4  4EB9 000014D0            431                 JSR      ADD_SRC
000014AA  1CFC 002C                432                 MOVE.B   #',', (A6)+
000014AE  1CFC 0020                433                 MOVE.B   #' ', (A6)+
000014B2  4EB9 000014F4            434                 JSR      ADD_DEST
000014B8  4E75                     435                 RTS
000014BA                           436                 
000014BA                           437                 
000014BA                           438  ADD_DIRECTION_REVERSED
000014BA  4246                     439                 CLR      D6
000014BC  4EB9 000014F4            440                 JSR      ADD_DEST
000014C2  1CFC 002C                441                 MOVE.B   #',', (A6)+
000014C6  1CFC 0020                442                 MOVE.B   #' ', (A6)+
000014CA  4EB9 000014D0            443                 JSR      ADD_SRC             
000014D0                           444                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014D0                           445                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014D0                           446                 
000014D0                           447  ***********************************************        
000014D0                           448  
000014D0                           449  
000014D0                           450  
000014D0                           451  ****************************************************************************************
000014D0                           452  ADD_SRC
000014D0                           453  
000014D0  4EB9 00001A80            454                  JSR    bits11to13
000014D6  3803                     455                  MOVE   D3,D4
000014D8  41F9 0000196C            456                  LEA     jmp_mode,A0    *Index into the table
000014DE  C6FC 0006                457                  MULU   #6,D3
000014E2  4EB0 3000                458                  JSR    0(A0,D3)     
000014E6  4EB9 00001A92            459                  JSR    bits14to16
000014EC  4EB9 0000199C            460                  JSR    insert_num
000014F2  4E75                     461                  RTS
000014F4                           462  
000014F4                           463  ADD_DEST
000014F4  363C 0000                464                  MOVE.W #%000,D3     ;Can only have a data register.
000014F8  3803                     465                  MOVE   D3,D4
000014FA  41F9 0000196C            466                  LEA     jmp_mode,A0    *Index into the table
00001500  C6FC 0006                467                  MULU    #6,D3       *Form offset     
00001504  4EB0 3000                468                  JSR     0(A0,D3)   *Jump indirect with index
00001508                           469                  
00001508  4EB9 00001A48            470                  JSR     bits5to7
0000150E  4EB9 0000199C            471                  JSR     insert_num
00001514  4E75                     472                  RTS
00001516                           473  
00001516                           474  ADDI
00001516  4EB9 0000159C            475                  JSR     ADDI_BUFFER
0000151C  4EB9 0000152A            476                  JSR     ADDI_SRC
00001522  4EB9 00001538            477                  JSR     ADDI_DES
00001528  4E75                     478                  RTS
0000152A                           479                  
0000152A                           480  ADDI_SRC                        
0000152A  1CFC 0023                481                  MOVE.B  #'#', (A6)+
0000152E  1CFC 002C                482                  MOVE.B  #',', (A6)+
00001532  1CFC 0020                483                  MOVE.B  #' ', (A6)+
00001536  4E75                     484                  RTS
00001538                           485                    ** TODO: IMPLEMENT THIS IN EA
00001538                           486                  ** Immediate field—Data immediately following the instruction.
00001538                           487                  **If size = 00, the data is the low-order byte of the immediate word.
00001538                           488                  **If size = 01, the data is the entire immediate word.
00001538                           489                  **If size = 10, the data is the next two immediate words. 
00001538                           490  ADDI_DES
00001538                           491                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001538                           492                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001538  4EB9 00001A80            493                 JSR      bits11to13
0000153E  B67C 0001                494                 CMP      #%001, D3 **AN
00001542  6700 0622                495                 BEQ      INVALID_EA
00001546  B67C 0005                496                 CMP      #%101, D3 **COMPLICATED
0000154A  6700 061A                497                 BEQ      INVALID_EA
0000154E  B67C 0006                498                 CMP      #%110, D3 **COMPLICATED
00001552  6700 0612                499                 BEQ      INVALID_EA
00001556                           500                 
00001556  4EB9 00001AA2            501                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000155C  B67C 003C                502                 CMP      #%111100,D3 // immediate data
00001560  6700 0604                503                 BEQ      INVALID_EA
00001564  B67C 003A                504                 CMP      #%111010,D3 // complicated
00001568  6700 05FC                505                 BEQ      INVALID_EA
0000156C  B67C 003B                506                 CMP      #%111011,D3 // complicated
00001570  6700 05F4                507                 BEQ      INVALID_EA
00001574                           508                 
00001574  4EB9 00001A80            509                 JSR      bits11to13 ** grab bits to jump with\
0000157A  3803                     510                 MOVE     D3,D4
0000157C  41F9 0000196C            511                 LEA     jmp_mode,A0    *Index into the table
00001582  C6FC 0006                512                 MULU    #6,D3       *Form offset     
00001586  4EB0 3000                513                 JSR     0(A0,D3)   *Jump indirect with index
0000158A                           514                 
0000158A  4243                     515                 CLR     D3
0000158C  4EB9 00001A92            516                 JSR     bits14to16
00001592  4EB9 0000199C            517                 JSR     insert_num
00001598  4244                     518                 CLR     D4
0000159A                           519                 
0000159A  4E75                     520                 RTS
0000159C                           521                 
0000159C                           522                             
0000159C                           523  ADDI_BUFFER
0000159C  1CFC 0041                524                 MOVE.B   #'A',(A6)+
000015A0  1CFC 0044                525                 MOVE.B   #'D', (A6)+  
000015A4  1CFC 0044                526                 MOVE.B   #'D', (A6)+
000015A8  1CFC 0049                527                 MOVE.B   #'I', (A6)+
000015AC                           528                 
000015AC  4EB9 00001DD4            529                 JSR      GETSIZE_ADDI
000015B2                           530                 
000015B2                           531                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015B2                           532                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015B2  1CFC 0020                533                 MOVE.B   #' ', (A6)+
000015B6  4E75                     534                 RTS
000015B8                           535                              
000015B8                           536  LEA
000015B8  4EB9 00001A6E            537                 JSR      bits8to10   // 1 1 1
000015BE  B47C 0007                538                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015C2  6600 05A6                539                 BNE      INVALID_OP
000015C6  4EB9 000015DA            540                 JSR      LEA_BUFFER
000015CC  4EB9 000015EC            541                 JSR      LEA_SRC
000015D2  4EB9 0000167E            542                 JSR      LEA_DEST
000015D8  4E75                     543                 RTS
000015DA                           544                 
000015DA                           545  LEA_BUFFER 
000015DA  1CFC 004C                546                 MOVE.B   #'L',(A6)+
000015DE  1CFC 0045                547                 MOVE.B   #'E', (A6)+  
000015E2  1CFC 0041                548                 MOVE.B   #'A', (A6)+
000015E6  1CFC 0020                549                 MOVE.B   #' ', (A6)+
000015EA  4E75                     550                 RTS
000015EC                           551            
000015EC                           552  LEA_SRC
000015EC                           553              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
000015EC  4EB9 00001A80            554              JSR      bits11to13  // source mode - D3
000015F2  B67C 0000                555              CMP      #%000, D3
000015F6  6700 056E                556              BEQ      INVALID_EA
000015FA  B67C 0001                557              CMP      #%001, D3
000015FE  6700 0566                558              BEQ      INVALID_EA
00001602  B67C 0003                559              CMP      #%011, D3
00001606  6700 055E                560              BEQ      INVALID_EA
0000160A  B67C 0004                561              CMP      #%100, D3
0000160E  6700 0556                562              BEQ      INVALID_EA
00001612  B67C 0005                563              CMP      #%101, D3
00001616  6700 054E                564              BEQ      INVALID_EA
0000161A  B67C 0006                565              CMP      #%110, D3
0000161E  6700 0546                566              BEQ      INVALID_EA
00001622                           567  
00001622                           568              
00001622                           569              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00001622  4EB9 00001A92            570              JSR      bits14to16 // source register - d4
00001628  B67C 0004                571              CMP      #%100, D3
0000162C  6700 0538                572              BEQ      INVALID_EA
00001630  B67C 0002                573              CMP      #%010, D3
00001634  6700 0530                574              BEQ      INVALID_EA
00001638  B67C 0003                575              CMP      #%011, D3
0000163C  6700 0528                576              BEQ      INVALID_EA
00001640                           577              
00001640                           578  
00001640  4EB9 00001AA2            579               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001646  B67C 003C                580               CMP      #%111100,D3 // immediate data
0000164A  6700 051A                581               BEQ      INVALID_EA
0000164E  B67C 003A                582               CMP      #%111010,D3 // complicated
00001652  6700 0512                583               BEQ      INVALID_EA
00001656  B67C 003B                584               CMP      #%111011,D3 // complicated
0000165A  6700 050A                585               BEQ      INVALID_EA
0000165E                           586     
0000165E  4EB9 00001A80            587               JSR      bits11to13 ** grab mode bits to jump with
00001664  3803                     588               MOVE    D3,D4
00001666                           589  
00001666  41F9 0000196C            590               LEA     jmp_mode,A0    *Index into the table
0000166C  C6FC 0006                591               MULU    #6,D3       *Form offset     
00001670  4EB0 3000                592               JSR     0(A0,D3)   *Jump indirect with index
00001674                           593   
00001674  1CFC 002C                594               MOVE.B     #',', (A6)+
00001678  1CFC 0020                595               MOVE.B     #' ', (A6)+
0000167C                           596  
0000167C  4E75                     597               RTS
0000167E                           598               
0000167E                           599  LEA_DEST    
0000167E  4244                     600                  CLR     D4
00001680  41F9 0000196C            601                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00001686  363C 0001                602                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
0000168A  3803                     603                  MOVE    D3,D4
0000168C  C6FC 0006                604                  MULU    #6,D3       *Form offset     
00001690  4EB0 3000                605                  JSR     0(A0,D3)   *Jump indirect with index
00001694                           606                  
00001694  4EB9 00001A48            607                  JSR     bits5to7
0000169A  4EB9 0000199C            608                  JSR     insert_num
000016A0                           609                  
000016A0  4E75                     610                  RTS
000016A2                           611  
000016A2                           612  
000016A2                           613  ADDQ
000016A2  4EB9 00001700            614                  JSR     ADDQ_BUFFER
000016A8  4EB9 000016BE            615                  JSR     ADDQ_SRC
000016AE  1CFC 002C                616                  MOVE.B  #',',(A6)+
000016B2  1CFC 0020                617                  MOVE.B  #' ',(A6)+
000016B6  4EB9 000016D6            618                  JSR     ADDQ_DEST
000016BC  4E75                     619                  RTS                 ;BRA     PRINT_BUFFER
000016BE                           620  
000016BE                           621  ADDQ_SRC
000016BE  4EB9 00001A48            622                  JSR     bits5to7
000016C4  1CFC 0023                623                  MOVE.B  #'#',(A6)+
000016C8  183C 0000                624                  MOVE.B  #%000,D4
000016CC  4EB9 0000199C            625                  JSR     insert_num
000016D2  4244                     626                  CLR     D4
000016D4  4E75                     627                  RTS
000016D6                           628                  
000016D6                           629  ADDQ_DEST
000016D6  4EB9 00001A80            630                 JSR      bits11to13
000016DC  3803                     631                 MOVE     D3,D4
000016DE  41F9 0000196C            632                 LEA     jmp_mode,A0    *Index into the table
000016E4  C6FC 0006                633                 MULU    #6,D3       *Form offset     
000016E8  4EB0 3000                634                 JSR     0(A0,D3)   *Jump indirect with index
000016EC  4243                     635                 CLR     D3
000016EE  4EB9 00001A92            636                 JSR     bits14to16
000016F4  4EB9 0000199C            637                 JSR     insert_num
000016FA  4244                     638                 CLR     D4
000016FC  4243                     639                 CLR     D3
000016FE  4E75                     640                 RTS
00001700                           641                 
00001700                           642  
00001700                           643  ADDQ_BUFFER
00001700  1CFC 0041                644                 MOVE.B   #'A',(A6)+
00001704  1CFC 0044                645                 MOVE.B   #'D', (A6)+  
00001708  1CFC 0044                646                 MOVE.B   #'D', (A6)+
0000170C  1CFC 0051                647                 MOVE.B   #'Q', (A6)+
00001710  4EB9 00001C8A            648                 JSR      GETSIZE_ADDQ
00001716                           649                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00001716                           650                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001716  4E75                     651                 RTS               
00001718                           652                 
00001718                           653  MOVEQ
00001718  4EB9 00001722            654                  JSR     MOVEQ_BUFFER
0000171E  6000 0504                655                  BRA     PRINT_BUFFER
00001722                           656  
00001722                           657  MOVEQ_BUFFER
00001722  1CFC 004D                658                 MOVE.B   #'M',(A6)+
00001726  1CFC 004F                659                 MOVE.B   #'O', (A6)+  
0000172A  1CFC 0056                660                 MOVE.B   #'V', (A6)+
0000172E  1CFC 0045                661                 MOVE.B   #'E', (A6)+
00001732  1CFC 0051                662                 MOVE.B   #'Q', (A6)+
00001736  1CFC 0020                663                 MOVE.B   #' ', (A6)+
0000173A  4E75                     664                 RTS
0000173C                           665  
0000173C                           666  
0000173C                           667  ****************************************
0000173C                           668  
0000173C                           669  DIVU
0000173C  4EB9 00001A6E            670                  JSR     bits8to10
00001742  B67C 0003                671                  CMP     #%011,D3
00001746  6600 041E                672                  BNE     INVALID_EA
0000174A  4243                     673                  CLR     D3
0000174C  4EB9 00001768            674                  JSR     DIVU_BUFFER
00001752  4EB9 0000177E            675                  JSR     DIVU_SRC
00001758  1CFC 002C                676                  MOVE.B  #',',(A6)+
0000175C  1CFC 0020                677                  MOVE.B  #' ',(A6)+
00001760  4EB9 000017A8            678                  JSR     DIVU_DEST
00001766  4E75                     679                  RTS                 ;BRA     PRINT_BUFFER
00001768                           680  
00001768                           681  DIVU_BUFFER
00001768  1CFC 0044                682                 MOVE.B   #'D',(A6)+
0000176C  1CFC 0049                683                 MOVE.B   #'I', (A6)+  
00001770  1CFC 0056                684                 MOVE.B   #'V', (A6)+
00001774  1CFC 0055                685                 MOVE.B   #'U', (A6)+
00001778  1CFC 0020                686                 MOVE.B   #' ', (A6)+
0000177C  4E75                     687                 RTS  
0000177E                           688                 
0000177E                           689                 
0000177E                           690  DIVU_SRC
0000177E  4EB9 00001A80            691                 JSR      bits11to13
00001784  3803                     692                 MOVE     D3,D4
00001786  41F9 0000196C            693                 LEA     jmp_mode,A0    *Index into the table
0000178C  C6FC 0006                694                 MULU    #6,D3       *Form offset     
00001790  4EB0 3000                695                 JSR     0(A0,D3)   *Jump indirect with index  
00001794  4243                     696                 CLR     D3
00001796  4EB9 00001A92            697                 JSR     bits14to16
0000179C  4EB9 0000199C            698                 JSR     insert_num
000017A2  4244                     699                 CLR     D4
000017A4  4243                     700                 CLR     D3
000017A6  4E75                     701                 RTS
000017A8                           702                 
000017A8                           703  DIVU_DEST
000017A8  363C 0000                704                 MOVE    #%000,D3     ;DIVU destination can only be a data register.
000017AC  3803                     705                 MOVE    D3,D4
000017AE  41F9 0000196C            706                 LEA     jmp_mode,A0    *Index into the table
000017B4  C6FC 0006                707                 MULU    #6,D3       *Form offset     
000017B8  4EB0 3000                708                 JSR     0(A0,D3)   *Jump indirect with index  
000017BC  4243                     709                 CLR     D3
000017BE  4EB9 00001A48            710                 JSR     bits5to7
000017C4  4EB9 0000199C            711                 JSR     insert_num
000017CA  4244                     712                 CLR     D4
000017CC  4243                     713                 CLR     D3
000017CE  4E75                     714                 RTS
000017D0                           715                 
000017D0                           716                 
000017D0                           717                 
000017D0                           718  *****************************************               
000017D0                           719                 
000017D0                           720  OR    
000017D0  4EB9 0000180E            721                 JSR     OR_BUFFER
000017D6                           722                 
000017D6                           723                             
000017D6                           724                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000017D6  BC7C 0001                725                 CMP      #1,D6
000017DA  6600 001A                726                 BNE      OR_DIRECTION_REVERSED
000017DE  4246                     727                 CLR      D6
000017E0  4EB9 00001822            728                 JSR      OR_SRC
000017E6  1CFC 002C                729                 MOVE.B   #',', (A6)+
000017EA  1CFC 0020                730                 MOVE.B   #' ', (A6)+
000017EE  4EB9 00001854            731                 JSR      OR_DEST
000017F4  4E75                     732                 RTS
000017F6                           733                 
000017F6                           734                 
000017F6                           735  OR_DIRECTION_REVERSED
000017F6  4246                     736                 CLR      D6
000017F8  4EB9 00001854            737                 JSR      OR_DEST
000017FE  1CFC 002C                738                 MOVE.B   #',', (A6)+
00001802  1CFC 0020                739                 MOVE.B   #' ', (A6)+
00001806  4EB9 00001822            740                 JSR      OR_SRC             
0000180C                           741                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000180C                           742                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA>                
0000180C                           743                 
0000180C                           744                 
0000180C  4E75                     745                 RTS                  ;BRA     PRINT_BUFFER
0000180E                           746                  
0000180E                           747  OR_BUFFER
0000180E  1CFC 004F                748                 MOVE.B   #'O',(A6)+
00001812  1CFC 0052                749                 MOVE.B   #'R', (A6)+
00001816  4EB9 00001CC4            750                 JSR      GETSIZE_OR  
0000181C                           751                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000181C                           752                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000181C  1CFC 0020                753                 MOVE.B   #' ', (A6)+
00001820  4E75                     754                 RTS   
00001822                           755                 
00001822                           756                 
00001822                           757                 
00001822                           758                 
00001822                           759  OR_SRC
00001822  4EB9 00001A80            760                 JSR      bits11to13
00001828  B67C 0001                761                 CMP      #%001,D3
0000182C  6700 0338                762                 BEQ      INVALID_EA
00001830  3803                     763                 MOVE     D3,D4
00001832  41F9 0000196C            764                 LEA     jmp_mode,A0    *Index into the table
00001838  C6FC 0006                765                 MULU    #6,D3       *Form offset     
0000183C  4EB0 3000                766                 JSR     0(A0,D3)   *Jump indirect with index  
00001840  4243                     767                 CLR     D3
00001842  4EB9 00001A92            768                 JSR     bits14to16
00001848  4EB9 0000199C            769                 JSR     insert_num
0000184E  4243                     770                 CLR     D3
00001850  4244                     771                 CLR     D4
00001852  4E75                     772                 RTS
00001854                           773  
00001854                           774  
00001854                           775  OR_DEST
00001854  163C 0000                776                 MOVE.B  #%000,D3
00001858  3803                     777                 MOVE    D3,D4
0000185A  41F9 0000196C            778                 LEA     jmp_mode,A0    *Index into the table
00001860  C6FC 0006                779                 MULU    #6,D3       *Form offset     
00001864  4EB0 3000                780                 JSR     0(A0,D3)   *Jump indirect with index  
00001868  4243                     781                 CLR     D3
0000186A  4EB9 00001A48            782                 JSR     bits5to7    
00001870  4EB9 0000199C            783                 JSR     insert_num
00001876  4243                     784                 CLR     D3
00001878  4244                     785                 CLR     D4
0000187A  4E75                     786                 RTS   
0000187C                           787  
0000187C                           788  
0000187C                           789  
0000187C                           790  
0000187C                           791  
0000187C                           792  ***********************************************
0000187C                           793  
0000187C                           794  SUB   
0000187C  4EB9 00001886            795                 JSR     SUB_BUFFER
00001882  6000 03A0                796                 BRA     PRINT_BUFFER               
00001886                           797  
00001886                           798  SUB_BUFFER
00001886  1CFC 0053                799                 MOVE.B   #'S',(A6)+
0000188A  1CFC 0055                800                 MOVE.B   #'U', (A6)+  
0000188E  1CFC 0042                801                 MOVE.B   #'B', (A6)+
00001892  1CFC 002E                802                 MOVE.B   #'.', (A6)+
00001896                           803                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001896                           804                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001896                           805                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001896  1CFC 0020                806                 MOVE.B   #' ', (A6)+
0000189A  4E75                     807                 RTS  
0000189C                           808  CMP   
0000189C  4EB9 000018A6            809                 JSR     CMP_BUFFER
000018A2  6000 0380                810                 BRA     PRINT_BUFFER
000018A6                           811                  
000018A6                           812  CMP_BUFFER
000018A6  1CFC 0043                813                 MOVE.B   #'C',(A6)+
000018AA  1CFC 004D                814                 MOVE.B   #'M', (A6)+  
000018AE  1CFC 0050                815                 MOVE.B   #'P', (A6)+
000018B2  1CFC 002E                816                 MOVE.B   #'.', (A6)+
000018B6                           817                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000018B6                           818                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000018B6                           819                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000018B6  1CFC 0020                820                 MOVE.B   #' ', (A6)+
000018BA  4E75                     821                 RTS   
000018BC                           822                 
000018BC                           823  MULS
000018BC  4EB9 000018C6            824                  JSR     MULS_BUFFER
000018C2  6000 0360                825                  BRA     PRINT_BUFFER
000018C6                           826  
000018C6                           827  MULS_BUFFER
000018C6  1CFC 004D                828                 MOVE.B   #'M',(A6)+
000018CA  1CFC 0055                829                 MOVE.B   #'U', (A6)+  
000018CE  1CFC 004C                830                 MOVE.B   #'L', (A6)+
000018D2  1CFC 0053                831                 MOVE.B   #'S', (A6)+
000018D6  1CFC 0020                832                 MOVE.B   #' ', (A6)+
000018DA  4E75                     833                 RTS
000018DC                           834  
000018DC                           835  AND    
000018DC  4EB9 000018E6            836                 JSR     AND_BUFFER
000018E2  6000 0340                837                 BRA     PRINT_BUFFER
000018E6                           838                  
000018E6                           839  AND_BUFFER
000018E6  1CFC 0041                840                 MOVE.B   #'A',(A6)+
000018EA  1CFC 004E                841                 MOVE.B   #'N', (A6)+  
000018EE  1CFC 0044                842                 MOVE.B   #'D', (A6)+
000018F2  1CFC 002E                843                 MOVE.B   #'.', (A6)+
000018F6                           844                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000018F6                           845                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000018F6                           846                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000018F6  1CFC 0020                847                 MOVE.B   #' ', (A6)+
000018FA  4E75                     848                 RTS    
000018FC                           849  
000018FC                           850  ASR     
000018FC  4EB9 00001906            851                  JSR     ASR_BUFFER
00001902  6000 0320                852                  BRA     PRINT_BUFFER
00001906                           853  
00001906                           854  ASR_BUFFER
00001906  1CFC 0041                855                 MOVE.B   #'A',(A6)+
0000190A  1CFC 0053                856                 MOVE.B   #'S', (A6)+  
0000190E  1CFC 0052                857                 MOVE.B   #'R', (A6)+
00001912  1CFC 0020                858                 MOVE.B   #' ', (A6)+
00001916  4E75                     859                 RTS      
00001918                           860  
00001918                           861  ASL     
00001918  4EB9 00001922            862                  JSR     ASL_BUFFER
0000191E  6000 0304                863                  BRA     PRINT_BUFFER
00001922                           864  
00001922                           865  ASL_BUFFER
00001922  1CFC 0041                866                 MOVE.B   #'A',(A6)+
00001926  1CFC 0053                867                 MOVE.B   #'S', (A6)+  
0000192A  1CFC 004C                868                 MOVE.B   #'L', (A6)+
0000192E  1CFC 0020                869                 MOVE.B   #' ', (A6)+
00001932  4E75                     870                 RTS     
00001934                           871  
00001934                           872  LSL     
00001934  4EB9 0000193E            873                  JSR     LSL_BUFFER
0000193A  6000 02E8                874                  BRA     PRINT_BUFFER
0000193E                           875  
0000193E                           876  LSL_BUFFER
0000193E  1CFC 004C                877                 MOVE.B   #'L',(A6)+
00001942  1CFC 0053                878                 MOVE.B   #'S', (A6)+  
00001946  1CFC 004C                879                 MOVE.B   #'L', (A6)+
0000194A  1CFC 0020                880                 MOVE.B   #' ', (A6)+
0000194E  4E75                     881                 RTS     
00001950                           882  
00001950                           883  LSR     
00001950  4EB9 0000195A            884                  JSR     LSR_BUFFER
00001956  6000 02CC                885                  BRA     PRINT_BUFFER
0000195A                           886  
0000195A                           887  LSR_BUFFER
0000195A  1CFC 004C                888                 MOVE.B   #'L',(A6)+
0000195E  1CFC 0053                889                 MOVE.B   #'S', (A6)+  
00001962  1CFC 0052                890                 MOVE.B   #'R', (A6)+
00001966  1CFC 0020                891                 MOVE.B   #' ', (A6)+
0000196A  4E75                     892                 RTS       
0000196C                           893                 
0000196C                           894  jmp_mode
0000196C  4EF9 00001AC4            895                  JMP     MODE000  ** DN
00001972  4EF9 00001ACA            896                  JMP     MODE001  ** AN
00001978  4EF9 00001AD2            897                  JMP     MODE010  ** (AN)
0000197E  4EF9 00001ADC            898                  JMP     MODE011  ** (AN)+   
00001984  4EF9 00001AE6            899                  JMP     MODE100  ** -(AN)
0000198A  4EF9 00001AF4            900                  JMP     MODE101  **INVALID
00001990  4EF9 00001AFE            901                  JMP     MODE110  **INVALID
00001996  4EF9 00001B08            902                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
0000199C                           903  
0000199C                           904                  
0000199C                           905  insert_num
0000199C                           906                  
0000199C                           907                  ;get number from D3
0000199C  B67C 0000                908                  CMP     #%000,D3       ;0
000019A0  6600 000A                909                  BNE     ONE         
000019A4  1CFC 0030                910                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000019A8  6000 006E                911                  BRA     FINISHER
000019AC                           912                  
000019AC  B67C 0001                913  ONE             CMP     #%001,D3       ;1
000019B0  6600 000A                914                  BNE     TWO 
000019B4  1CFC 0031                915                  MOVE.B  #'1',(A6)+
000019B8  6000 005E                916                  BRA     FINISHER
000019BC                           917  
000019BC                           918                  
000019BC  B67C 0002                919  TWO             CMP     #%010,D3        ;2
000019C0  6600 000A                920                  BNE     THREE
000019C4  1CFC 0032                921                  MOVE.B  #'2',(A6)+
000019C8  6000 004E                922                  BRA     FINISHER
000019CC                           923                  
000019CC  B67C 0003                924  THREE           CMP     #%011,D3        ;3
000019D0  6600 000A                925                  BNE     FOUR
000019D4  1CFC 0033                926                  MOVE.B  #'3',(A6)+
000019D8  6000 003E                927                  BRA     FINISHER
000019DC                           928                  
000019DC  B67C 0004                929  FOUR            CMP     #%100,D3        ;4
000019E0  6600 000A                930                  BNE     FIVE
000019E4  1CFC 0034                931                  MOVE.B  #'4',(A6)+
000019E8  6000 002E                932                  BRA     FINISHER
000019EC                           933                  
000019EC  B67C 0005                934  FIVE            CMP     #%101,D3        ;5
000019F0  6600 000A                935                  BNE     SIX
000019F4  1CFC 0035                936                  MOVE.B  #'5',(A6)+
000019F8  6000 001E                937                  BRA     FINISHER
000019FC                           938                  
000019FC  B67C 0006                939  SIX             CMP     #%110,D3        ;6
00001A00  6600 000A                940                  BNE     SEVEN
00001A04  1CFC 0036                941                  MOVE.B  #'6',(A6)+
00001A08  6000 000E                942                  BRA     FINISHER
00001A0C                           943                  
00001A0C  B67C 0007                944  SEVEN           CMP     #%111,D3        ;7
00001A10  1CFC 0037                945                  MOVE.B  #'7',(A6)+
00001A14  6000 0002                946                  BRA     FINISHER
00001A18                           947                  
00001A18                           948  FINISHER                
00001A18                           949                  
00001A18                           950                  ;check D4, do we need to do stuff?
00001A18  B87C 0002                951                  CMP     #%010,D4
00001A1C  6600 0008                952                  BNE     POSTINCR
00001A20  1CFC 0029                953                  MOVE.B  #')',(A6)+
00001A24  4E75                     954                  RTS
00001A26                           955                  
00001A26  B87C 0003                956  POSTINCR        CMP     #%011,D4
00001A2A  6600 000C                957                  BNE     ONEPAREN
00001A2E  1CFC 0029                958                  MOVE.B  #')',(A6)+
00001A32  1CFC 002B                959                  MOVE.B  #'+',(A6)+
00001A36  4E75                     960                  RTS
00001A38                           961                  
00001A38  B87C 0004                962  ONEPAREN        CMP     #%100,D4
00001A3C  6600 0008                963                  BNE     DONE
00001A40  1CFC 0029                964                  MOVE.B  #')',(A6)+                
00001A44                           965  
00001A44  4244                     966                  CLR     D4
00001A46  4E75                     967  DONE            RTS
00001A48                           968  
00001A48                           969          
00001A48                           970                 
00001A48                           971  bits5to7
00001A48  4243                     972                 CLR      D3
00001A4A  4EB9 00001BFE            973                 JSR      COPY_OPCODE  // opcode copied to D2
00001A50  C47C 0E00                974                 AND      #%0000111000000000, D2
00001A54  E09A                     975                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001A56  E29A                     976                 ROR.L    #1, D2
00001A58  3602                     977                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A5A  4E75                     978                 RTS
00001A5C                           979                 
00001A5C                           980  bits5to8
00001A5C  4243                     981                 CLR      D3
00001A5E  4EB9 00001BFE            982                 JSR      COPY_OPCODE  // opcode copied to D2
00001A64  C47C 0F00                983                 AND      #%0000111100000000, D2
00001A68  E09A                     984                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001A6A  3602                     985                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A6C  4E75                     986                 RTS
00001A6E                           987                 
00001A6E                           988  bits8to10
00001A6E  4243                     989                 CLR      D3
00001A70  4EB9 00001BFE            990                 JSR      COPY_OPCODE  // opcode copied to D2
00001A76  C47C 01C0                991                 AND      #%0000000111000000, D2
00001A7A  EC9A                     992                 ROR.L    #6, D2          // rotate bits so isolated at the end
00001A7C  3602                     993                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A7E  4E75                     994                 RTS               
00001A80                           995             
00001A80                           996  bits11to13
00001A80  4243                     997                 CLR      D3
00001A82  4EB9 00001BFE            998                 JSR      COPY_OPCODE  // opcode copied to D2
00001A88  C47C 0038                999                 AND      #%0000000000111000, D2
00001A8C  E69A                    1000                 ROR.L    #3, D2          // rotate bits so isolated at the end
00001A8E  3602                    1001                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A90  4E75                    1002                 RTS
00001A92                          1003             
00001A92                          1004  bits14to16
00001A92  4243                    1005                 CLR      D3
00001A94  4EB9 00001BFE           1006                 JSR      COPY_OPCODE  // opcode copied to D2
00001A9A  C47C 0007               1007                 AND      #%0000000000000111, D2
00001A9E  3602                    1008                 MOVE.W   D2,D3 // moving isolated bits into d3
00001AA0  4E75                    1009                 RTS
00001AA2                          1010  bits11to16
00001AA2  4243                    1011                 CLR      D3
00001AA4  4EB9 00001BFE           1012                 JSR      COPY_OPCODE  // opcode copied to D2
00001AAA  C47C 003F               1013                 AND      #%0000000000111111, D2
00001AAE  3602                    1014                 MOVE.W   D2,D3 // moving isolated bits into d3
00001AB0  4E75                    1015                 RTS
00001AB2                          1016  bits1to10
00001AB2  4243                    1017                 CLR      D3
00001AB4  4EB9 00001BFE           1018                 JSR      COPY_OPCODE  // opcode copied to D2
00001ABA  C47C FFC0               1019                 AND      #%1111111111000000, D2
00001ABE  EC9A                    1020                 ROR.L    #6, D2
00001AC0  3602                    1021                 MOVE.W   D2,D3 // moving isolated bits into d3
00001AC2  4E75                    1022                 RTS
00001AC4                          1023  ** DN       
00001AC4                          1024  MODE000         
00001AC4  1CFC 0044               1025                  MOVE.B  #'D',(A6)+     
00001AC8  4E75                    1026                  RTS
00001ACA                          1027  
00001ACA                          1028  ** AN
00001ACA                          1029  MODE001         
00001ACA  4EB9 00001B1E           1030                  JSR ADDRESS_BUFFER  
00001AD0  4E75                    1031                  RTS      
00001AD2                          1032  
00001AD2                          1033   ** (AN)
00001AD2                          1034  MODE010         
00001AD2  1CFC 0028               1035                  MOVE.B  #'(', (A6)+
00001AD6  1CFC 0041               1036                  MOVE.B  #'A',(A6)+  
00001ADA  4E75                    1037                  RTS      
00001ADC                          1038  
00001ADC                          1039  ** (AN)+ 
00001ADC                          1040  MODE011         
00001ADC  1CFC 0028               1041                  MOVE.B  #'(', (A6)+
00001AE0  1CFC 0041               1042                  MOVE.B  #'A',(A6)+ 
00001AE4  4E75                    1043                  RTS       
00001AE6                          1044  
00001AE6                          1045   ** -(AN)
00001AE6                          1046  MODE100         
00001AE6  1CFC 002D               1047                  MOVE.B  #'-', (A6)+
00001AEA  1CFC 0028               1048                  MOVE.B  #'(', (A6)+
00001AEE  1CFC 0041               1049                  MOVE.B  #'A',(A6)+
00001AF2  4E75                    1050                  RTS
00001AF4                          1051                  
00001AF4                          1052  **INVALID               
00001AF4                          1053  MODE101         
00001AF4  1CFC 0028               1054                  MOVE.B  #'(', (A6)+
00001AF8  1CFC 0041               1055                  MOVE.B  #'A',(A6)+ 
00001AFC  4E75                    1056                  RTS
00001AFE                          1057                  
00001AFE                          1058  **INVALID
00001AFE                          1059  MODE110         
00001AFE  1CFC 0028               1060                  MOVE.B  #'(', (A6)+
00001B02  1CFC 0041               1061                  MOVE.B  #'A',(A6)+
00001B06  4E75                    1062                  RTS  
00001B08                          1063  
00001B08                          1064  ** ABSOLUTE AND IMMEDIATE            
00001B08                          1065  MODE111         
00001B08                          1066                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001B08  1CFC 0024               1067                 MOVE.B   #'$', (A6)+  
00001B0C  4EB9 00001C40           1068                 JSR      PRINT_DEREF_ADDRESS
00001B12  544A                    1069                 ADD.W    #2, A2
00001B14  4EB9 00001C40           1070                 JSR      PRINT_DEREF_ADDRESS
00001B1A  544A                    1071                 ADD.W    #2, A2
00001B1C  4E75                    1072                 RTS            
00001B1E                          1073                                          
00001B1E                          1074  ADDRESS_BUFFER
00001B1E  1CFC 0041               1075                  MOVE.B  #'A',(A6)+ 
00001B22  4E75                    1076                  RTS
00001B24                          1077                 
00001B24                          1078  ABSOLUTE_BUFFER
00001B24  4243                    1079                 CLR      D3
00001B26  3604                    1080                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001B28  1CF8 0024               1081                 MOVE.B   '$', (A6)+
00001B2C  B67C 0000               1082                 CMP.W    #%000, D3
00001B30  6700 0010               1083                 BEQ      ABSOLUTE_WORD_BUFFER
00001B34  4243                    1084                 CLR      D3
00001B36  3604                    1085                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001B38  B67C 0001               1086                 CMP.W    #%001, D3
00001B3C  6700 0016               1087                 BEQ      ABSOLUTE_LONG_BUFFER
00001B40  4E75                    1088                 RTS
00001B42                          1089                 
00001B42                          1090  ABSOLUTE_WORD_BUFFER
00001B42                          1091                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001B42                          1092                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001B42  1CFC 0046               1093                         MOVE.B #'F', (A6)+ 
00001B46  1CFC 0046               1094                         MOVE.B #'F', (A6)+ 
00001B4A  1CFC 0046               1095                         MOVE.B #'F', (A6)+ 
00001B4E  1CFC 0046               1096                         MOVE.B #'F', (A6)+ 
00001B52  4E75                    1097                         RTS       
00001B54                          1098                    
00001B54                          1099  ABSOLUTE_LONG_BUFFER       
00001B54                          1100                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001B54                          1101                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001B54  1CFC 0047               1102                         MOVE.B #'G', (A6)+ 
00001B58  1CFC 0047               1103                         MOVE.B #'G', (A6)+ 
00001B5C  1CFC 0047               1104                         MOVE.B #'G', (A6)+ 
00001B60  1CFC 0047               1105                         MOVE.B #'G', (A6)+
00001B64  4E75                    1106                         RTS 
00001B66                          1107  
00001B66                          1108  INVALID_EA  
00001B66                          1109                  * TODO: IMPLEMENT
00001B66                          1110                  *** CLEAR OUT A6
00001B66                          1111                  ** PUT INVALID MESSAGE INTO A6
00001B66  6000 F77F               1112                  BRA EXIT
00001B6A                          1113  INVALID_OP  
00001B6A                          1114                  ** TODO: IMPLEMENT
00001B6A                          1115                 *** CLEAR OUT A6
00001B6A                          1116                  ** PUT INVALID MESSAGE INTO A6
00001B6A  1CFC 0044               1117                      MOVE.B #'D', (A6)+
00001B6E  1CFC 0041               1118                      MOVE.B #'A', (A6)+
00001B72  1CFC 0054               1119                      MOVE.B #'T', (A6)+
00001B76  1CFC 0041               1120                      MOVE.B #'A', (A6)+ 
00001B7A  1CFC 0020               1121                      MOVE.B #' ', (A6)+ 
00001B7E  4EB9 00001C40           1122                      JSR     PRINT_DEREF_ADDRESS
00001B84                          1123            
00001B84                          1124                  
00001B84  1CFC 004E               1125  NOP                 MOVE.B #'N', (A6)+
00001B88  1CFC 004F               1126                      MOVE.B #'O', (A6)+
00001B8C  1CFC 0050               1127                      MOVE.B #'P', (A6)+
00001B90  4E75                    1128                      RTS
00001B92                          1129  
00001B92                          1130                   
00001B92                          1131  RTS      
00001B92  43F8 1290               1132                      LEA     RTS_disp,A1          
00001B96  103C 000E               1133                      MOVE.B  #14,D0
00001B9A  4E4F                    1134                      TRAP    #15 
00001B9C  6000 F749               1135                      BRA     EXIT
00001BA0                          1136  JSR      
00001BA0  4DF9 00001E66           1137                      LEA     BUFFER, A6
00001BA6  1CFC 004A               1138                      MOVE.B #'J', (A6)+
00001BAA  1CFC 0053               1139                      MOVE.B #'S', (A6)+
00001BAE  1CFC 0052               1140                      MOVE.B #'R', (A6)+
00001BB2  1CFC 0020               1141                      MOVE.B #' ', (A6)+
00001BB6  43F9 00001E66           1142                      LEA     BUFFER, A1
00001BBC                          1143                      ** BITS 10 - 12 MODE       
00001BBC                          1144                      ** BITS 13 - 16 REGISTER
00001BBC  103C 000E               1145                      MOVE.B  #14,D0
00001BC0  4E4F                    1146                      TRAP    #15 
00001BC2  6000 F723               1147                      BRA     EXIT
00001BC6                          1148                    
00001BC6                          1149  MOVEM      
00001BC6                          1150                     
00001BC6                          1151                      ** SIZE SUBROUTINE
00001BC6                          1152                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001BC6  C47C 0040               1153                      AND #%0000000001000000,D2 
00001BCA                          1154                      * WORD
00001BCA  B4BC 00000040           1155                      CMP.L   #%0000000001000000,D2
00001BD0  4EB9 00001BE6           1156                      JSR     MOVEM_W 
00001BD6                          1157                      *LONG
00001BD6  B4BC 00000040           1158                      CMP.L   #%0000000001000000,D2 
00001BDC                          1159                     ** JSR     MOVEM_L
00001BDC  103C 000E               1160                      MOVE.B  #14,D0
00001BE0  4E4F                    1161                      TRAP    #15
00001BE2  6000 F703               1162                      BRA     EXIT 
00001BE6                          1163                      
00001BE6                          1164  MOVEM_W 
00001BE6  43F8 123E               1165                       LEA     MOVEM_disp,A1
00001BEA                          1166                      * PRINT MOVEM
00001BEA  103C 000E               1167                       MOVE.B  #14,D0
00001BEE  4E4F                    1168                       TRAP    #15
00001BF0                          1169          
00001BF0                          1170                      * PRINT WORD PORTION
00001BF0  41F8 12D5               1171                       LEA     size_w, A0
00001BF4  103C 000E               1172                       MOVE.B  #14,D0
00001BF8  4E4F                    1173                       TRAP    #15 
00001BFA                          1174          
00001BFA  6000 F6EB               1175                       BRA     EXIT 
00001BFE                          1176       
00001BFE                          1177     
00001BFE                          1178  COPY_OPCODE 
00001BFE                          1179                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001BFE  4242                    1180                       CLR    D2  
00001C00  3405                    1181                       MOVE.W D5,D2 
00001C02  4E75                    1182                       RTS  
00001C04                          1183  
00001C04                          1184  PRINT_ADDRESS     
00001C04  4242                    1185                   CLR         D2
00001C06  143C 0010               1186                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001C0A  220A                    1187                   MOVE.L      A2,D1        
00001C0C  103C 000F               1188                   MOVE.B      #15,D0          
00001C10  4E4F                    1189                   TRAP        #15            
00001C12  1CFC 0020               1190                   MOVE.B      #' ', (A6)+
00001C16  1CFC 0020               1191                   MOVE.B      #' ', (A6)+
00001C1A  1CFC 0020               1192                   MOVE.B      #' ', (A6)+
00001C1E  1CFC 0020               1193                   MOVE.B      #' ', (A6)+
00001C22  4E75                    1194                   RTS     
00001C24                          1195  PRINT_BUFFER    
00001C24  1CFC 0000               1196                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001C28  43F9 00001E66           1197                 LEA      BUFFER, A1
00001C2E  303C 000E               1198                 MOVE.W   #14,D0
00001C32  4E4F                    1199                 TRAP     #15
00001C34  43F8 1219               1200                 LEA     linebreak,A1            *appends line at the end of the user input
00001C38  103C 000E               1201                 MOVE.B  #14,D0
00001C3C  4E4F                    1202                 TRAP    #15
00001C3E  4E75                    1203                 RTS  
00001C40                          1204  
00001C40                          1205  PRINT_DEREF_ADDRESS
00001C40  1CFC 0000               1206                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001C44  43F9 00001E66           1207                 LEA      BUFFER, A1
00001C4A  303C 000E               1208                 MOVE.W   #14,D0
00001C4E  4E4F                    1209                 TRAP     #15
00001C50  4DF9 00001E66           1210                 LEA      BUFFER, A6
00001C56  4242                    1211                 CLR      D2
00001C58  0C52 0000               1212                 CMP      #0, (A2)
00001C5C  6700 0006               1213                 BEQ      PRINT_ZEROES
00001C60  6000 001A               1214                 BRA      PRINT_HEX
00001C64                          1215                 
00001C64                          1216  PRINT_ZEROES
00001C64  4DF9 00001E66           1217                LEA   BUFFER,A6
00001C6A  1CFC 0030               1218                MOVE.B #'0', (A6)+
00001C6E  1CFC 0030               1219                MOVE.B #'0', (A6)+
00001C72  1CFC 0030               1220                MOVE.B #'0', (A6)+
00001C76  1CFC 0030               1221                MOVE.B #'0', (A6)+
00001C7A  4E75                    1222                RTS
00001C7C                          1223  PRINT_HEX
00001C7C  143C 0010               1224                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001C80  3212                    1225                 MOVE.W      (A2),D1        // print the hex value in current address      
00001C82  103C 000F               1226                 MOVE.B      #15,D0          
00001C86  4E4F                    1227                 TRAP        #15 
00001C88  4E75                    1228                 RTS
00001C8A                          1229   ***************************
00001C8A                          1230  
00001C8A                          1231  GETSIZE_ADDQ
00001C8A                          1232                   
00001C8A                          1233                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001C8A                          1234                 
00001C8A  4EB8 1A6E               1235             JSR      bits8to10
00001C8E  B67C 0000               1236             CMP      #%000,D3
00001C92  6600 000C               1237             BNE      ADDQ_NOTBYTE
00001C96  4EB9 00001E36           1238             JSR      SIZEISBYTE
00001C9C  4243                    1239             CLR      D3
00001C9E  4E75                    1240             RTS
00001CA0                          1241             
00001CA0                          1242  ADDQ_NOTBYTE
00001CA0  B67C 0001               1243             CMP      #%001,D3
00001CA4  6600 000C               1244             BNE      ADDQ_NOTWORD
00001CA8  4EB9 00001E46           1245             JSR      SIZEISWORD
00001CAE  4243                    1246             CLR      D3
00001CB0  4E75                    1247             RTS
00001CB2                          1248             
00001CB2                          1249  ADDQ_NOTWORD
00001CB2  B67C 0002               1250             CMP      #%010,D3
00001CB6  6600 FEAE               1251             BNE      INVALID_EA
00001CBA  4EB9 00001E56           1252             JSR      SIZEISLONG
00001CC0  4243                    1253             CLR      D3
00001CC2  4E75                    1254             RTS
00001CC4                          1255                   
00001CC4                          1256                                   
00001CC4                          1257  ****************************
00001CC4                          1258  ****************************
00001CC4                          1259  GETSIZE_OR
00001CC4                          1260                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001CC4                          1261                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001CC4                          1262          
00001CC4  4EB8 1A6E               1263              JSR     bits8to10
00001CC8  B67C 0000               1264              CMP     #000,D3
00001CCC  6600 0010               1265              BNE     OR_NOTBYTE
00001CD0  4EB9 00001E36           1266              JSR     SIZEISBYTE
00001CD6  3C3C 0001               1267              MOVE    #1,D6
00001CDA  4243                    1268              CLR     D3
00001CDC  4E75                    1269              RTS
00001CDE                          1270              
00001CDE                          1271  OR_NOTBYTE 
00001CDE  B67C 0001               1272              CMP     #%001,D3
00001CE2  6600 0010               1273              BNE     OR_NOTWORD
00001CE6  4EB9 00001E46           1274              JSR     SIZEISWORD
00001CEC  3C3C 0001               1275              MOVE    #1,D6
00001CF0  4243                    1276              CLR     D3
00001CF2  4E75                    1277              RTS
00001CF4                          1278              
00001CF4                          1279  OR_NOTWORD
00001CF4  B67C 0002               1280              CMP     #%010,D3
00001CF8  6600 0010               1281              BNE     OR_NOTLEFT
00001CFC  4EB9 00001E56           1282              JSR     SIZEISLONG
00001D02  3C3C 0001               1283              MOVE    #1,D6
00001D06  4243                    1284              CLR     D3
00001D08  4E75                    1285              RTS
00001D0A                          1286              
00001D0A                          1287  OR_NOTLEFT     ;check other direction
00001D0A  B67C 0004               1288              CMP     #%100,D3
00001D0E  6600 0010               1289              BNE     OR_NOTRIGHTBYTE
00001D12  4EB9 00001E36           1290              JSR     SIZEISBYTE
00001D18  3C3C 0002               1291              MOVE    #2,D6
00001D1C  4243                    1292              CLR     D3
00001D1E  4E75                    1293              RTS
00001D20                          1294              
00001D20                          1295  OR_NOTRIGHTBYTE
00001D20  B67C 0005               1296              CMP     #%101,D3
00001D24  6600 0010               1297              BNE     OR_NOTRIGHTWORD
00001D28  4EB9 00001E46           1298              JSR     SIZEISWORD
00001D2E  3C3C 0002               1299              MOVE    #2,D6
00001D32  4243                    1300              CLR     D3
00001D34  4E75                    1301              RTS
00001D36                          1302  
00001D36                          1303  OR_NOTRIGHTWORD
00001D36  B67C 0006               1304              CMP     #%110,D3
00001D3A  6600 FE2A               1305              BNE     INVALID_EA
00001D3E  4EB9 00001E56           1306              JSR     SIZEISLONG
00001D44  3C3C 0002               1307              MOVE    #2,D6
00001D48  4243                    1308              CLR     D3
00001D4A  4E75                    1309              RTS 
00001D4C                          1310  
00001D4C                          1311              
00001D4C                          1312  
00001D4C                          1313                     
00001D4C                          1314  ****************************
00001D4C                          1315  
00001D4C                          1316                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001D4C                          1317                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001D4C                          1318  GETSIZE_ADD
00001D4C  4EB8 1A6E               1319              JSR     bits8to10
00001D50  B67C 0000               1320              CMP     #%000,D3
00001D54  6600 0010               1321              BNE     ADD_NOTBYTE
00001D58  4EB9 00001E36           1322              JSR     SIZEISBYTE
00001D5E  3C3C 0001               1323              MOVE    #1,D6
00001D62  4243                    1324              CLR     D3
00001D64  4E75                    1325              RTS
00001D66                          1326          
00001D66                          1327  ADD_NOTBYTE 
00001D66  B67C 0001               1328              CMP     #%001,D3
00001D6A  6600 0010               1329              BNE     ADD_NOTWORD
00001D6E  4EB9 00001E46           1330              JSR     SIZEISWORD
00001D74  3C3C 0001               1331              MOVE    #1,D6
00001D78  4243                    1332              CLR     D3
00001D7A  4E75                    1333              RTS
00001D7C                          1334              
00001D7C                          1335  ADD_NOTWORD
00001D7C  B67C 0002               1336              CMP     #%010,D3
00001D80  6600 0010               1337              BNE     ADD_NOTLEFT
00001D84  4EB9 00001E56           1338              JSR     SIZEISLONG
00001D8A  3C3C 0001               1339              MOVE    #1,D6
00001D8E  4243                    1340              CLR     D3
00001D90  4E75                    1341              RTS
00001D92                          1342              
00001D92                          1343  ADD_NOTLEFT     ;check other direction
00001D92  B67C 0004               1344              CMP     #%100,D3
00001D96  6600 0010               1345              BNE     ADD_NOTRIGHTBYTE
00001D9A  4EB9 00001E36           1346              JSR     SIZEISBYTE
00001DA0  3C3C 0002               1347              MOVE    #2,D6
00001DA4  4243                    1348              CLR     D3
00001DA6  4E75                    1349              RTS
00001DA8                          1350              
00001DA8                          1351  ADD_NOTRIGHTBYTE
00001DA8  B67C 0005               1352              CMP     #%101,D3
00001DAC  6600 0010               1353              BNE     ADD_NOTRIGHTWORD
00001DB0  4EB9 00001E46           1354              JSR     SIZEISWORD
00001DB6  3C3C 0002               1355              MOVE    #2,D6
00001DBA  4243                    1356              CLR     D3
00001DBC  4E75                    1357              RTS
00001DBE                          1358  
00001DBE                          1359  ADD_NOTRIGHTWORD
00001DBE  B67C 0006               1360              CMP     #%110,D3
00001DC2  6600 FDA2               1361              BNE     INVALID_EA
00001DC6  4EB9 00001E56           1362              JSR     SIZEISLONG
00001DCC  3C3C 0002               1363              MOVE    #2,D6
00001DD0  4243                    1364              CLR     D3
00001DD2  4E75                    1365              RTS 
00001DD4                          1366                               
00001DD4                          1367                       
00001DD4                          1368                       
00001DD4                          1369  *****************************                  
00001DD4                          1370  GETSIZE_ADDI
00001DD4  4EB8 1A6E               1371          JSR     bits8to10
00001DD8  B67C 0000               1372          CMP     #%000,D3
00001DDC  6600 000C               1373          BNE     ADDI_NOTBYTE
00001DE0  4EB9 00001E36           1374          JSR     SIZEISBYTE
00001DE6  4243                    1375          CLR     D3
00001DE8  4E75                    1376          RTS
00001DEA                          1377  
00001DEA                          1378  ADDI_NOTBYTE
00001DEA  B67C 0001               1379          CMP     #%001,D3
00001DEE  6600 000C               1380          BNE     ADDI_NOTWORD
00001DF2  4EB9 00001E46           1381          JSR     SIZEISWORD
00001DF8  4243                    1382          CLR     D3
00001DFA  4E75                    1383          RTS
00001DFC                          1384          
00001DFC                          1385  ADDI_NOTWORD
00001DFC  B67C 0002               1386          CMP     #%010,D3
00001E00  6600 FD64               1387          BNE     INVALID_EA
00001E04  4EB9 00001E56           1388          JSR     SIZEISLONG
00001E0A  4243                    1389          CLR     D3
00001E0C  4E75                    1390          RTS
00001E0E                          1391          
00001E0E                          1392                              
00001E0E                          1393                       
00001E0E                          1394  ********************************          
00001E0E                          1395                       
00001E0E                          1396                       
00001E0E                          1397  ********************************                     
00001E0E                          1398  GETSIZE_ADDA
00001E0E  4EB8 1A6E               1399          JSR     bits8to10
00001E12  B67C 0003               1400          CMP     #%011,D3
00001E16  6600 000C               1401          BNE     ADDA_NOTWORD
00001E1A  4EB9 00001E46           1402          JSR     SIZEISWORD
00001E20  4243                    1403          CLR     D3
00001E22  4E75                    1404          RTS
00001E24                          1405          
00001E24                          1406  
00001E24                          1407          
00001E24                          1408  ADDA_NOTWORD
00001E24  B67C 0007               1409          CMP     #%111,D3
00001E28  6600 FD3C               1410          BNE     INVALID_EA
00001E2C  4EB9 00001E56           1411          JSR     SIZEISLONG
00001E32  4243                    1412          CLR     D3
00001E34  4E75                    1413          RTS
00001E36                          1414  **********************************        
00001E36                          1415      
00001E36                          1416  SIZEISBYTE
00001E36  1CFC 002E               1417         MOVE.B   #'.',(A6)+
00001E3A  1CFC 0042               1418         MOVE.B   #'B',(A6)+
00001E3E  1CFC 0020               1419         MOVE.B   #' ',(A6)+
00001E42  4243                    1420         CLR      D3
00001E44  4E75                    1421         RTS
00001E46                          1422  
00001E46                          1423  SIZEISWORD    
00001E46  1CFC 002E               1424         MOVE.B   #'.',(A6)+
00001E4A  1CFC 0057               1425         MOVE.B   #'W',(A6)+
00001E4E  1CFC 0020               1426         MOVE.B   #' ',(A6)+
00001E52  4243                    1427         CLR      D3
00001E54  4E75                    1428         RTS
00001E56                          1429                  
00001E56                          1430  SIZEISLONG    
00001E56  1CFC 002E               1431         MOVE.B   #'.',(A6)+
00001E5A  1CFC 004C               1432         MOVE.B   #'L',(A6)+
00001E5E  1CFC 0020               1433         MOVE.B   #' ',(A6)+
00001E62                          1434  
00001E62  4243                    1435         CLR      D3
00001E64  4E75                    1436         RTS
00001E66                          1437                  
00001E66                          1438       
00001E66= 00000001                1439  BUFFER DC.L 1     
00001E6A                          1440      INCLUDE 'helpers.x68'
00001E6A  1019                    1441  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001E6C  4EB9 00001E84           1442                          JSR     sub_breakDownAs     *breaks down ASCII code
00001E72  D280                    1443                          ADD.L   D0,D1               *load that char into D1
00001E74  0C11 0000               1444                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001E78  6700 0006               1445                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001E7C  E989                    1446                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001E7E  60EA                    1447                          BRA     sub_AsToHeLoop      *loops through again
00001E80                          1448                          
00001E80  2E01                    1449  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001E82  4E75                    1450                          RTS
00001E84  B03C 0030               1451  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001E88  6D00 002A               1452                          BLT     as_ERROR                        
00001E8C                          1453                          
00001E8C  B03C 0039               1454                          CMP.B    #$39,D0            *is it an A-F letter?
00001E90  6E00 000C               1455                          BGT     as_LETTER
00001E94                          1456                          
00001E94  6000 0002               1457                          BRA     as_NUMBER
00001E98                          1458                                                 
00001E98  0400 0030               1459  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001E9C  4E75                    1460                          RTS
00001E9E                          1461                          
00001E9E  B03C 0041               1462  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001EA2  6D00 0010               1463                          BLT     as_ERROR
00001EA6                          1464                          
00001EA6  B03C 0046               1465                          CMP.B     #$46, D0
00001EAA  6E00 0008               1466                          BGT     as_ERROR
00001EAE                          1467                          
00001EAE  0400 0037               1468                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001EB2  4E75                    1469                          RTS
00001EB4                          1470                          
00001EB4  43F9 65727200           1471  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001EBA  103C 000D               1472                          MOVE.B  #13,D0
00001EBE  4E4F                    1473                          TRAP    #15  
00001EC0                          1474  sub_StartReadingData    
00001EC0  0801 0000               1475                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001EC4  6600 0006               1476                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001EC8                          1477                          
00001EC8  7E00                    1478                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001ECA  4E75                    1479  srdFinish               RTS
00001ECC                          1480  
00001ECC  43F8 1162               1481  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001ED0  103C 000E               1482                          MOVE.B  #14,D0
00001ED4  4E4F                    1483                          TRAP    #15
00001ED6                          1484                          
00001ED6  7E01                    1485                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001ED8  60F0                    1486                          BRA     srdFinish
00001EDA                          1487  sub_EndReadingData  
00001EDA  0801 0000               1488                          BTST    #0,D1               *checks if LSB is 1, 
00001EDE  6600 0018               1489                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001EE2                          1490                          
00001EE2  B5CB                    1491                          CMP.L   A3,A2               *end address must be greater than start address
00001EE4  6E00 0004               1492                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001EE8                          1493  
00001EE8  4E75                    1494  erdFinish               RTS
00001EEA                          1495  
00001EEA  43F8 1189               1496  erdFailAddrOrder        LEA     addr_order_check,A1
00001EEE  103C 000E               1497                          MOVE.B  #14,D0
00001EF2  4E4F                    1498                          TRAP    #15
00001EF4                          1499                          
00001EF4  7E01                    1500                          MOVE.L  #1,D7
00001EF6  60F0                    1501                          BRA     erdFinish
00001EF8                          1502  
00001EF8  43F8 1162               1503  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001EFC  103C 000E               1504                          MOVE.B  #14,D0
00001F00  4E4F                    1505                          TRAP    #15
00001F02                          1506                          
00001F02  7E01                    1507                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001F04  60E2                    1508                          BRA     erdFinish
00001F06                          1509                          
00001F06                          1510  
00001F06                          1511  
00001F06                          1512  
00001F06                          1513  
00001F06                          1514  
00001F06                          1515  
00001F06                          1516  
00001F06                          1517  
00001F06                          1518  -------------------- end include --------------------
00001F06                          1519      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1B24
ABSOLUTE_LONG_BUFFER  1B54
ABSOLUTE_WORD_BUFFER  1B42
ADD                 1482
ADDA                145E
ADDA_BUFFER         1466
ADDA_DISP           1248
ADDA_NOTWORD        1E24
ADDI                1516
ADDI_BUFFER         159C
ADDI_DES            1538
ADDI_DISP           124D
ADDI_NOTBYTE        1DEA
ADDI_NOTWORD        1DFC
ADDI_SRC            152A
ADDQ                16A2
ADDQ_BUFFER         1700
ADDQ_DEST           16D6
ADDQ_DISP           1252
ADDQ_NOTBYTE        1CA0
ADDQ_NOTWORD        1CB2
ADDQ_SRC            16BE
ADDRESS_BUFFER      1B1E
ADDR_ODDBIT_MSG     1162
ADDR_ORDER_CHECK    1189
ADD_BUFFER          148A
ADD_DEST            14F4
ADD_DIRECTION_REVERSED  14BA
ADD_DISP            1244
ADD_NOTBYTE         1D66
ADD_NOTLEFT         1D92
ADD_NOTRIGHTBYTE    1DA8
ADD_NOTRIGHTWORD    1DBE
ADD_NOTWORD         1D7C
ADD_SRC             14D0
AND                 18DC
AND_BUFFER          18E6
AND_DISP            126D
ASL                 1918
ASL_BUFFER          1922
ASL_DISP            127C
ASR                 18FC
ASR_BUFFER          1906
ASR_DISP            1280
AS_ERROR            1EB4
AS_LETTER           1E9E
AS_NUMBER           1E98
ATHENDLOOP          1E80
BACKSLASHSIGH       12CA
BCC_DISP            1294
BGT_DISP            1298
BITS11TO13          1A80
BITS11TO16          1AA2
BITS14TO16          1A92
BITS1TO10           1AB2
BITS5TO7            1A48
BITS5TO8            1A5C
BITS8TO10           1A6E
BLE_DISP            129C
BUFFER              1E66
CLOSEPAREN          12CE
CLR_DISP            1269
CMP                 189C
CMP_BUFFER          18A6
CODE0000            134C
CODE0001            1360
CODE0010            1366
CODE0011            1366
CODE0100            1366
CODE0101            139A
CODE0110            139E
CODE0111            13A2
CODE1000            13A6
CODE1001            13B8
CODE1010            13BC
CODE1011            13C0
CODE1100            13C4
CODE1101            13D6
CODE1110            1422
CODE1111            1452
COMMASIGN           12C8
COPY_OPCODE         1BFE
CR                  D
DIVU                173C
DIVU_BUFFER         1768
DIVU_DEST           17A8
DIVU_DISP           1260
DIVU_SRC            177E
DOLLARSIGN          12C2
DONE                1A46
ENDTEST_MSG         11DD
ERDFAILADDRODDB     1EF8
ERDFAILADDRORDER    1EEA
ERDFINISH           1EE8
EXIT                12E7
FINISHER            1A18
FIVE                19EC
FOUR                19DC
GETSIZE_ADD         1D4C
GETSIZE_ADDA        1E0E
GETSIZE_ADDI        1DD4
GETSIZE_ADDQ        1C8A
GETSIZE_OR          1CC4
HEXATABLE           12A0
INPUT_BUFFER        12DC
INSERT_NUM          199C
INVALIDEA_DISP      1221
INVALID_DISP        121C
INVALID_EA          1B66
INVALID_OP          1B6A
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            196C
JMP_TABLE           12EC
JSR                 1BA0
JSR_DISP            128C
LEA                 15B8
LEA_BUFFER          15DA
LEA_DEST            167E
LEA_DISP            1265
LEA_SRC             15EC
LF                  A
LINEBREAK           1219
LINECOUNT           12DB
LOCATION_ENDDATA    12E2
LOCATION_END_MSG    1145
LOCATION_STARTDATA  12DE
LOCATION_START_MSG  1126
LSL                 1934
LSL_BUFFER          193E
LSL_DISP            1274
LSR                 1950
LSR_BUFFER          195A
LSR_DISP            1278
MAIN_LOOP           108E
MINUSSIGN           12C6
MODE000             1AC4
MODE001             1ACA
MODE010             1AD2
MODE011             1ADC
MODE100             1AE6
MODE101             1AF4
MODE110             1AFE
MODE111             1B08
MOVEA_DISP          1232
MOVEB_BUFFER        145C
MOVEM               1BC6
MOVEM_DISP          123E
MOVEM_W             1BE6
MOVEQ               1718
MOVEQ_BUFFER        1722
MOVEQ_DISP          1238
MOVE_B              1456
MOVE_DISP           122D
MULS                18BC
MULS_BUFFER         18C6
MULS_DISP           125B
NOP                 1B84
NOP_DISP            1229
ONE                 19AC
ONEPAREN            1A38
OPENPAREN           12CC
OR                  17D0
OR_BUFFER           180E
OR_DEST             1854
OR_DIRECTION_REVERSED  17F6
OR_DISP             1271
OR_NOTBYTE          1CDE
OR_NOTLEFT          1D0A
OR_NOTRIGHTBYTE     1D20
OR_NOTRIGHTWORD     1D36
OR_NOTWORD          1CF4
OR_SRC              1822
PAUSE_MSG           11C3
PLUSSIGN            12C4
POSTINCR            1A26
POUNDSIGN           12C0
PRINT_ADDRESS       1C04
PRINT_BUFFER        1C24
PRINT_DEREF_ADDRESS  1C40
PRINT_HEX           1C7C
PRINT_ZEROES        1C64
ROL_DISP            1284
ROR_DISP            1288
RTS                 1B92
RTS_DISP            1290
SEVEN               1A0C
SIX                 19FC
SIZEISBYTE          1E36
SIZEISLONG          1E56
SIZEISWORD          1E46
SIZE_B              12D2
SIZE_L              12D8
SIZE_W              12D5
SPACE               12D0
SRDFAILADDRODDB     1ECC
SRDFINISH           1ECA
START               1000
SUB                 187C
SUB_ASTOHELOOP      1E6A
SUB_BREAKDOWNAS     1E84
SUB_BUFFER          1886
SUB_DISP            1257
SUB_ENDREADINGDATA  1EDA
SUB_STARTREADINGDATA  1EC0
TABLE_LENGTH        12E6
THREE               19CC
TWO                 19BC
WELCOME_MSG         10C2
