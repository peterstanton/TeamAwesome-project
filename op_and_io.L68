00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2017 1:30:05 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C2              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001126             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012DC             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001F76             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 00001219             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001FCC             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001145             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012DC             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001F76             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 00001219             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001FE6             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012EC             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001F72             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C                            80                   
0000109C                            81                   ;MOVE.W  (A2), D3
0000109C                            82  
0000109C                            83                   * TEST OPCODES
0000109C                            84                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109C                            85                   ;MOVE.W  #$4E71,D3 * NOP
0000109C                            86                   ; MOVE.W  #$4E75,D3 * RTS
0000109C                            87                   ; MOVE.W  #$4EB0,D3 * JSR
0000109C                            88                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109C                            89                   ;MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109C                            90                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109C                            91                   ;MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109C                            92                    ; MOVE.W    #$5613, D3    *ADDQ.B #$3, (A3)
0000109C                            93                   ; MOVE.W     #$7E70, D3 *MOVEQ
0000109C                            94                   ; MOVE.W     #$80C0, D3 *DIVU
0000109C                            95                   ; MOVE.W     #$86D9, D3 *DIVU (A1)+,D3                      
0000109C                            96                   ; MOVE.W     #$8000, D3 * OR
0000109C  363C 9000                 97                    MOVE.W        #$9000, D3 * SUB
000010A0                            98                   ; MOVE.W        #$B000, D3 * CMP
000010A0                            99                   ; MOVE.W        #$C1C0, D3 * MULS
000010A0                           100                   ; MOVE.W        #$C000, D3 * AND
000010A0                           101                   ; MOVE.W        #$E0F8, D3  *ASR
000010A0                           102                   ; MOVE.W        #$E1E2, D3  *ASL
000010A0                           103                   ; MOVE.W        #$E393, D3  *LSL
000010A0                           104                   ; MOVE.W        #$E2DC, D3  *LSR
000010A0                           105                    ; MOVE.W        #$8E62, D3  *OR.W        -(A2),D7
000010A0                           106                        
000010A0                           107  
000010A0  4EB9 00001C88            108                   JSR    PRINT_ADDRESS
000010A6  544A                     109                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010A8  3A03                     110                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AA  183C 000C                111                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010AE  E86B                     112                   LSR.W   D4,D3       *Move the bits
000010B0  C6FC 0006                113                   MULU    #6,D3       *Form offset     
000010B4  4EB0 3000                114                   JSR     0(A0,D3)   *Jump indirect with index
000010B8  4EB9 00001CA8            115                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010BE                           116                   
000010BE                           117                   ;CMP     A3,A2
000010BE                           118                   ;BGT     EXIT
000010BE                           119                   ;BRA     MAIN_LOOP
000010BE                           120                   
000010BE  6000 0227                121                   BRA      EXIT
000010C2                           122                                  
000010C2                           123      INCLUDE 'definitions.x68'
000010C2                           124  
000010C2  =0000000D                125  CR              EQU     $0D         carriage return
000010C2  =0000000A                126  LF              EQU     $0A         line feed
000010C2= 43 53 53 20 34 32 ...    127  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010E6= 42 79 20 54 65 61 ...    128                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001126= 45 6E 74 65 72 20 ...    129  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001145= 45 6E 74 65 72 20 ...    130  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001162= 41 64 64 72 65 73 ...    131  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
00001189= 45 6E 64 69 6E 67 ...    132  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C3= 50 72 65 73 73 20 ...    133  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011DD= 52 65 61 63 68 65 ...    134  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011F8= 54 72 79 20 61 6E ...    135                      DC.B    'Try another location? (yes/no): ',0
00001219= 0D 0A 00                 136  linebreak           DC.B    CR,LF,0
0000121C                           137                      
0000121C= 44 41 54 41 00           138  Invalid_disp        DC.B    'DATA',0
00001221= 57 52 4F 4E 47 45 ...    139  InvalidEA_disp      DC.B    'WRONGEA',0
00001229                           140  
00001229= 4E 4F 50 00              141  NOP_disp            DC.B    'NOP',0
0000122D= 4D 4F 56 45 00           142  MOVE_disp           DC.B    'MOVE',0
00001232= 4D 4F 56 45 41 00        143  MOVEA_disp          DC.B    'MOVEA',0
00001238= 4D 4F 56 45 51 00        144  MOVEQ_disp          DC.B    'MOVEQ',0
0000123E= 4D 4F 56 45 4D 00        145  MOVEM_disp          DC.B    'MOVEM',0
00001244= 41 44 44 00              146  ADD_disp            DC.B    'ADD',0
00001248= 41 44 44 41 00           147  ADDA_disp           DC.B    'ADDA',0
0000124D= 41 44 44 49 00           148  ADDI_disp           DC.B    'ADDI',0
00001252= 41 44 44 51 00           149  ADDQ_disp           DC.B    'ADDQ',0
00001257= 53 55 42 00              150  SUB_disp            DC.B    'SUB',0
0000125B= 4D 55 4C 53 00           151  MULS_disp           DC.B    'MULS',0
00001260= 44 49 56 55 00           152  DIVU_disp           DC.B    'DIVU',0
00001265= 4C 45 41 00              153  LEA_disp            DC.B    'LEA',0
00001269= 43 4C 52 00              154  CLR_disp            DC.B    'CLR',0
0000126D= 41 4E 44 00              155  AND_disp            DC.B    'AND',0
00001271= 4F 52 00                 156  OR_disp             DC.B    'OR',0
00001274= 4C 53 4C 00              157  LSL_disp            DC.B    'LSL',0
00001278= 4C 53 52 00              158  LSR_disp            DC.B    'LSR',0
0000127C= 41 53 4C 00              159  ASL_disp            DC.B    'ASL',0
00001280= 41 53 52 00              160  ASR_disp            DC.B    'ASR',0
00001284= 52 4F 4C 00              161  ROL_disp            DC.B    'ROL',0
00001288= 52 4F 52 00              162  ROR_disp            DC.B    'ROR',0
0000128C= 4A 53 52 00              163  JSR_disp            DC.B    'JSR',0
00001290= 52 54 53 00              164  RTS_disp            DC.B    'RTS',0
00001294= 42 43 43 00              165  BCC_disp            DC.B    'BCC',0
00001298= 42 47 54 00              166  BGT_disp            DC.B    'BGT',0    
0000129C= 42 4C 45 00              167  BLE_disp            DC.b    'BLE',0
000012A0                           168  
000012A0                           169  
000012A0= 30 00                    170  hexaTable               DC.B    '0',0
000012A2= 31 00                    171                          DC.B    '1',0
000012A4= 32 00                    172                          DC.B    '2',0
000012A6= 33 00                    173                          DC.B    '3',0
000012A8= 34 00                    174                          DC.B    '4',0
000012AA= 35 00                    175                          DC.B    '5',0
000012AC= 36 00                    176                          DC.B    '6',0
000012AE= 37 00                    177                          DC.B    '7',0
000012B0= 38 00                    178                          DC.B    '8',0
000012B2= 39 00                    179                          DC.B    '9',0
000012B4= 41 00                    180                          DC.B    'A',0
000012B6= 42 00                    181                          DC.B    'B',0
000012B8= 43 00                    182                          DC.B    'C',0
000012BA= 44 00                    183                          DC.B    'D',0
000012BC= 45 00                    184                          DC.B    'E',0
000012BE= 46 00                    185                          DC.B    'F',0
000012C0= 23 00                    186  poundsign               DC.B    '#',0
000012C2= 24 00                    187  dollarsign              DC.B    '$',0
000012C4= 2B 00                    188  plussign                DC.B    '+',0
000012C6= 2D 00                    189  minussign               DC.B    '-',0
000012C8= 2C 00                    190  commasign               DC.B    ',',0
000012CA= 2F 00                    191  backslashsigh           DC.B    '/',0
000012CC= 28 00                    192  openparen               DC.B    '(',0
000012CE= 29 00                    193  closeparen              DC.B    ')',0
000012D0= 20 00                    194  space                   DC.B    ' ',0   
000012D2= 2E 42 00                 195  size_b                  DC.B    '.B',0
000012D5= 2E 57 00                 196  size_w                  DC.B    '.W',0        
000012D8= 2E 4C 00                 197  size_l                  DC.B    '.L',0
000012DB                           198  
000012DB                           199  linecount               DS.B    1       *storeage for lines on a screen
000012DC= 01                       200  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012DE                           201  location_startData      DS.L    1       *location on where to start reading data
000012E2                           202  location_endData        DS.L    1       *location on where to end reading data
000012E6                           203  table_length            DS.B    1       *Number of spaces in the table to print to console
000012E7                           204  
000012E7                           205  
000012E7                           206  -------------------- end include --------------------
000012E7                           207             
000012E7                           208  EXIT                 
000012E8  FFFF FFFF                209         SIMHALT   
000012EC                           210  
000012EC                           211  
000012EC                           212  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012EC  4EF9 0000134C            213  jmp_table      JMP         code0000
000012F2                           214                  *ADDI
000012F2                           215  
000012F2  4EF9 00001360            216                 JMP         code0001
000012F8                           217                 *MOVE
000012F8                           218                 *MOVEA
000012F8                           219  
000012F8  4EF9 00001366            220                 JMP         code0010
000012FE                           221  
000012FE  4EF9 00001366            222                 JMP         code0011
00001304                           223  
00001304  4EF9 00001366            224                 JMP         code0100
0000130A                           225                             
0000130A  4EF9 0000139A            226                 JMP         code0101
00001310                           227                 * ADDQ
00001310                           228                  
00001310                           229        
00001310  4EF9 0000139E            230                 JMP         code0110
00001316                           231                 * BCC
00001316                           232                 * BGT
00001316                           233                 * BLE
00001316                           234                 
00001316  4EF9 000013A2            235                 JMP         code0111
0000131C                           236                 * MOVEQ
0000131C                           237  
0000131C  4EF9 000013A6            238                 JMP         code1000
00001322                           239                 * DIVU
00001322                           240                 * OR
00001322                           241  
00001322  4EF9 000013B8            242                 JMP         code1001
00001328                           243                  *SUB
00001328  4EF9 000013BC            244                 JMP         code1010
0000132E                           245                 
0000132E  4EF9 000013C0            246                 JMP         code1011
00001334                           247                 * CMP
00001334                           248                 
00001334  4EF9 000013C4            249                 JMP         code1100
0000133A                           250                 * MULS
0000133A                           251                 * AND
0000133A                           252          
0000133A  4EF9 000013D6            253                 JMP         code1101
00001340                           254                 *ADD
00001340                           255                 *ADDA
00001340  4EF9 00001422            256                 JMP         code1110
00001346                           257                 * ASR
00001346                           258                 * ASL
00001346                           259                 * LSL
00001346                           260                 * LSR
00001346                           261                 * ROL
00001346                           262                 * ROR
00001346                           263  
00001346  4EF9 00001452            264                 JMP         code1111
0000134C                           265  
0000134C                           266  
0000134C                           267  code0000      
0000134C  4EB9 00001AE0            268                 JSR          bits5to8 // RETURNS INTO D3
00001352  B6BC 00000006            269                 CMP.L        #%0110, D3
00001358  6600 0894                270                 BNE          INVALID_OP
0000135C  6000 01B8                271                 BRA          ADDI  
00001360                           272  
00001360                           273  code0001      
00001360  4EB9 00001456            274                 JSR   MOVE_B
00001366                           275                 *MOVE.B
00001366                           276  
00001366                           277  code0010        
00001366                           278                  * MOVE.L
00001366                           279                  * MOVEA.L
00001366                           280  code0011        
00001366                           281                  *MOVEA.W
00001366                           282                  *MOVE.W
00001366                           283  
00001366                           284  code0100       
00001366  4EB9 00001C82            285                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000136C                           286                  
0000136C                           287                 *NOP
0000136C  C47C 0FFF                288                 AND     #%0000111111111111,D2
00001370  B4BC 00000E71            289                 CMP.L   #%000111001110001, D2
00001376  6700 0890                290                 BEQ     NOP
0000137A                           291                 
0000137A                           292                 *RTS
0000137A  C47C 0FFF                293                 AND     #%0000111111111111,D2
0000137E  B4BC 00000E75            294                 CMP.L   #%0000111001110101, D2
00001384  6700 0890                295                 BEQ     RTS
00001388                           296  
00001388                           297                 *JSR
00001388  C47C 0FC0                298                 AND     #%0000111111000000,D2
0000138C  B4BC 00000E80            299                 CMP.L   #%0000111010000000,D2
00001392  6700 0890                300                 BEQ     JSR
00001396                           301                 
00001396                           302                 * MOVEM
00001396                           303                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001396                           304                ** AND     #%0000111110000000,D2
00001396                           305                 * DATA REGISTER
00001396                           306                ** CMP.L   #%0000100010000000, D2
00001396                           307                 ** JSR      MOVEM
00001396                           308                 * ADDRESS REGISTER (DECREMENTED)
00001396                           309                 ** CMP.L  #%0000110010000000, D2
00001396                           310                 ** JSR    MOVEM
00001396                           311                  
00001396                           312                  ** TO DO: BRANCH IF INVALID OPCODE
00001396                           313                  *LEA - if it's not the top codes, it's LEA
00001396  6000 0220                314                  BRA     LEA
0000139A                           315  code0101      
0000139A                           316  
0000139A  6000 0306                317                  BRA   ADDQ
0000139E                           318  
0000139E  6000 084E                319  code0110        BRA       INVALID_OP
000013A2                           320  
000013A2                           321  code0111       
000013A2  6000 0374                322                  BRA      MOVEQ
000013A6                           323  
000013A6                           324  code1000      
000013A6  4EB9 00001AF2            325                  JSR        bits8to10
000013AC  B67C 0003                326                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013B0  6700 038A                327                  BEQ        DIVU
000013B4  6000 041A                328                  BRA        OR       ** OTHERWISE OR
000013B8                           329                  
000013B8                           330  
000013B8                           331  code1001       
000013B8  6000 04C2                332                 BRA        SUB
000013BC  6000 0830                333  code1010       BRA       INVALID_OP
000013C0                           334  
000013C0                           335  code1011       
000013C0  6000 055E                336                 BRA         CMP
000013C4                           337  
000013C4                           338  code1100      
000013C4  4EB9 00001AF2            339                  JSR        bits8to10
000013CA  B67C 0007                340                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013CE  6700 0570                341                  BEQ        MULS
000013D2  6000 058C                342                  BRA        AND       ** OTHERWISE AND
000013D6                           343  
000013D6                           344  code1101       
000013D6  4EB9 00001C82            345                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013DC                           346                 *ADDA
000013DC  4EB9 00001AF2            347                 JSR      bits8to10
000013E2  B67C 0003                348                 CMP      #%011, D3  ** WORD
000013E6  6700 0076                349                 BEQ      ADDA
000013EA  B67C 0007                350                 CMP      #%111, D3   ** LONG
000013EE  6700 006E                351                 BEQ      ADDA
000013F2                           352                 
000013F2                           353                 *ADD
000013F2  B67C 0000                354                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
000013F6  6700 008A                355                 BEQ      ADD
000013FA  B67C 0001                356                 CMP      #%001, D3   ** WORD TO DATA REGISTER
000013FE  6700 0082                357                 BEQ      ADD
00001402  B67C 0002                358                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001406  6700 007A                359                 BEQ      ADD
0000140A  B67C 0004                360                 CMP      #%100, D3   ** BYTE TO EA
0000140E  6700 0072                361                 BEQ      ADD
00001412  B67C 0005                362                 CMP      #%101, D3   ** WORD TO EA
00001416  6700 006A                363                 BEQ      ADD
0000141A  B67C 0006                364                 CMP      #%110, D3   ** LONG TO EA
0000141E  6700 0062                365                 BEQ      ADD
00001422                           366                 
00001422                           367  
00001422                           368  code1110       
00001422                           369                  * ASR
00001422  4EB9 00001B36            370                  JSR     bits1to10
00001428  B67C 0383                371                  CMP     #%1110000011,D3
0000142C  6700 0552                372                  BEQ     ASR
00001430                           373                  
00001430                           374                  * ASL
00001430  B67C 0387                375                  CMP     #%1110000111,D3
00001434  6700 0566                376                  BEQ     ASL
00001438                           377                  
00001438                           378                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001438                           379                  * LSL
00001438  4244                     380                  CLR     D4
0000143A  2803                     381                  MOVE.L  D3,D4
0000143C  C8BC 00A98671            382                  AND.L   #11110001,D4
00001442  B87C 01C7                383                  CMP     #%111000111,D4
00001446  6700 0570                384                  BEQ     LSL
0000144A                           385                  
0000144A                           386                  * LSR
0000144A  B67C 038B                387                  CMP     #%1110001011,D3
0000144E  6700 0584                388                  BEQ     LSR
00001452                           389                  
00001452                           390                  * ROL
00001452                           391                  
00001452                           392                  * ROR
00001452                           393  
00001452  6000 079A                394  code1111       BRA      INVALID_OP
00001456                           395  
00001456                           396  MOVE_B
00001456  4EB9 0000145C            397                 JSR     MOVEB_BUFFER
0000145C                           398  MOVEB_BUFFER
0000145C  4E71                     399                  NOP              
0000145E                           400  * ----------------------------------
0000145E                           401  
0000145E                           402  ADDA    
0000145E  4EB9 00001466            403                 JSR     ADDA_BUFFER
00001464  4E75                     404                 RTS
00001466                           405                  
00001466                           406  ADDA_BUFFER
00001466  1CFC 0041                407                 MOVE.B   #'A',(A6)+
0000146A  1CFC 0044                408                 MOVE.B   #'D', (A6)+  
0000146E  1CFC 0044                409                 MOVE.B   #'D', (A6)+
00001472  1CFC 0041                410                 MOVE.B   #'A', (A6)+
00001476  4EB9 00001F1A            411                 JSR      GETSIZE_ADDA
0000147C  1CFC 0020                412                 MOVE.B   #' ', (A6)+
00001480  4E75                     413                 RTS
00001482                           414                 
00001482                           415                 
00001482                           416                 
00001482                           417  *********************************************               
00001482                           418  ADD    
00001482  4EB9 0000148A            419                 JSR     ADD_BUFFER
00001488  4E75                     420                 RTS
0000148A                           421                  
0000148A                           422  ADD_BUFFER
0000148A  1CFC 0041                423                 MOVE.B   #'A',(A6)+
0000148E  1CFC 0044                424                 MOVE.B   #'D', (A6)+  
00001492  1CFC 0044                425                 MOVE.B   #'D', (A6)+
00001496  4EB9 00001E58            426                 JSR      GETSIZE_ADD
0000149C                           427                 
0000149C                           428                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
0000149C  BC7C 0001                429                 CMP      #1,D6
000014A0  6600 0018                430                 BNE      ADD_DIRECTION_REVERSED
000014A4  4EB9 000014D0            431                 JSR      ADD_SRC
000014AA  1CFC 002C                432                 MOVE.B   #',', (A6)+
000014AE  1CFC 0020                433                 MOVE.B   #' ', (A6)+
000014B2  4EB9 000014F4            434                 JSR      ADD_DEST
000014B8  4E75                     435                 RTS
000014BA                           436                 
000014BA                           437                 
000014BA                           438  ADD_DIRECTION_REVERSED
000014BA  4246                     439                 CLR      D6
000014BC  4EB9 000014F4            440                 JSR      ADD_DEST
000014C2  1CFC 002C                441                 MOVE.B   #',', (A6)+
000014C6  1CFC 0020                442                 MOVE.B   #' ', (A6)+
000014CA  4EB9 000014D0            443                 JSR      ADD_SRC             
000014D0                           444                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014D0                           445                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014D0                           446                 
000014D0                           447  ***********************************************        
000014D0                           448  
000014D0                           449  
000014D0                           450  
000014D0                           451  ****************************************************************************************
000014D0                           452  ADD_SRC
000014D0                           453  
000014D0  4EB9 00001B04            454                  JSR    bits11to13
000014D6  3803                     455                  MOVE   D3,D4
000014D8  41F9 000019F0            456                  LEA     jmp_mode,A0    *Index into the table
000014DE  C6FC 0006                457                  MULU   #6,D3
000014E2  4EB0 3000                458                  JSR    0(A0,D3)     
000014E6  4EB9 00001B16            459                  JSR    bits14to16
000014EC  4EB9 00001A20            460                  JSR    insert_num
000014F2  4E75                     461                  RTS
000014F4                           462  
000014F4                           463  ADD_DEST
000014F4  363C 0000                464                  MOVE.W #%000,D3     ;Can only have a data register.
000014F8  3803                     465                  MOVE   D3,D4
000014FA  41F9 000019F0            466                  LEA     jmp_mode,A0    *Index into the table
00001500  C6FC 0006                467                  MULU    #6,D3       *Form offset     
00001504  4EB0 3000                468                  JSR     0(A0,D3)   *Jump indirect with index
00001508                           469                  
00001508  4EB9 00001ACC            470                  JSR     bits5to7
0000150E  4EB9 00001A20            471                  JSR     insert_num
00001514  4E75                     472                  RTS
00001516                           473  
00001516                           474  ADDI
00001516  4EB9 0000159C            475                  JSR     ADDI_BUFFER
0000151C  4EB9 0000152A            476                  JSR     ADDI_SRC
00001522  4EB9 00001538            477                  JSR     ADDI_DES
00001528  4E75                     478                  RTS
0000152A                           479                  
0000152A                           480  ADDI_SRC                        
0000152A  1CFC 0023                481                  MOVE.B  #'#', (A6)+
0000152E  1CFC 002C                482                  MOVE.B  #',', (A6)+
00001532  1CFC 0020                483                  MOVE.B  #' ', (A6)+
00001536  4E75                     484                  RTS
00001538                           485                    ** TODO: IMPLEMENT THIS IN EA
00001538                           486                  ** Immediate field—Data immediately following the instruction.
00001538                           487                  **If size = 00, the data is the low-order byte of the immediate word.
00001538                           488                  **If size = 01, the data is the entire immediate word.
00001538                           489                  **If size = 10, the data is the next two immediate words. 
00001538                           490  ADDI_DES
00001538                           491                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001538                           492                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001538  4EB9 00001B04            493                 JSR      bits11to13
0000153E  B67C 0001                494                 CMP      #%001, D3 **AN
00001542  6700 06A6                495                 BEQ      INVALID_EA
00001546  B67C 0005                496                 CMP      #%101, D3 **COMPLICATED
0000154A  6700 069E                497                 BEQ      INVALID_EA
0000154E  B67C 0006                498                 CMP      #%110, D3 **COMPLICATED
00001552  6700 0696                499                 BEQ      INVALID_EA
00001556                           500                 
00001556  4EB9 00001B26            501                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000155C  B67C 003C                502                 CMP      #%111100,D3 // immediate data
00001560  6700 0688                503                 BEQ      INVALID_EA
00001564  B67C 003A                504                 CMP      #%111010,D3 // complicated
00001568  6700 0680                505                 BEQ      INVALID_EA
0000156C  B67C 003B                506                 CMP      #%111011,D3 // complicated
00001570  6700 0678                507                 BEQ      INVALID_EA
00001574                           508                 
00001574  4EB9 00001B04            509                 JSR      bits11to13 ** grab bits to jump with\
0000157A  3803                     510                 MOVE     D3,D4
0000157C  41F9 000019F0            511                 LEA     jmp_mode,A0    *Index into the table
00001582  C6FC 0006                512                 MULU    #6,D3       *Form offset     
00001586  4EB0 3000                513                 JSR     0(A0,D3)   *Jump indirect with index
0000158A                           514                 
0000158A  4243                     515                 CLR     D3
0000158C  4EB9 00001B16            516                 JSR     bits14to16
00001592  4EB9 00001A20            517                 JSR     insert_num
00001598  4244                     518                 CLR     D4
0000159A                           519                 
0000159A  4E75                     520                 RTS
0000159C                           521                 
0000159C                           522                             
0000159C                           523  ADDI_BUFFER
0000159C  1CFC 0041                524                 MOVE.B   #'A',(A6)+
000015A0  1CFC 0044                525                 MOVE.B   #'D', (A6)+  
000015A4  1CFC 0044                526                 MOVE.B   #'D', (A6)+
000015A8  1CFC 0049                527                 MOVE.B   #'I', (A6)+
000015AC                           528                 
000015AC  4EB9 00001EE0            529                 JSR      GETSIZE_ADDI
000015B2                           530                 
000015B2                           531                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015B2                           532                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015B2  1CFC 0020                533                 MOVE.B   #' ', (A6)+
000015B6  4E75                     534                 RTS
000015B8                           535                              
000015B8                           536  LEA
000015B8  4EB9 00001AF2            537                 JSR      bits8to10   // 1 1 1
000015BE  B47C 0007                538                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015C2  6600 062A                539                 BNE      INVALID_OP
000015C6  4EB9 000015DA            540                 JSR      LEA_BUFFER
000015CC  4EB9 000015EC            541                 JSR      LEA_SRC
000015D2  4EB9 0000167E            542                 JSR      LEA_DEST
000015D8  4E75                     543                 RTS
000015DA                           544                 
000015DA                           545  LEA_BUFFER 
000015DA  1CFC 004C                546                 MOVE.B   #'L',(A6)+
000015DE  1CFC 0045                547                 MOVE.B   #'E', (A6)+  
000015E2  1CFC 0041                548                 MOVE.B   #'A', (A6)+
000015E6  1CFC 0020                549                 MOVE.B   #' ', (A6)+
000015EA  4E75                     550                 RTS
000015EC                           551            
000015EC                           552  LEA_SRC
000015EC                           553              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
000015EC  4EB9 00001B04            554              JSR      bits11to13  // source mode - D3
000015F2  B67C 0000                555              CMP      #%000, D3
000015F6  6700 05F2                556              BEQ      INVALID_EA
000015FA  B67C 0001                557              CMP      #%001, D3
000015FE  6700 05EA                558              BEQ      INVALID_EA
00001602  B67C 0003                559              CMP      #%011, D3
00001606  6700 05E2                560              BEQ      INVALID_EA
0000160A  B67C 0004                561              CMP      #%100, D3
0000160E  6700 05DA                562              BEQ      INVALID_EA
00001612  B67C 0005                563              CMP      #%101, D3
00001616  6700 05D2                564              BEQ      INVALID_EA
0000161A  B67C 0006                565              CMP      #%110, D3
0000161E  6700 05CA                566              BEQ      INVALID_EA
00001622                           567  
00001622                           568              
00001622                           569              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00001622  4EB9 00001B16            570              JSR      bits14to16 // source register - d4
00001628  B67C 0004                571              CMP      #%100, D3
0000162C  6700 05BC                572              BEQ      INVALID_EA
00001630  B67C 0002                573              CMP      #%010, D3
00001634  6700 05B4                574              BEQ      INVALID_EA
00001638  B67C 0003                575              CMP      #%011, D3
0000163C  6700 05AC                576              BEQ      INVALID_EA
00001640                           577              
00001640                           578  
00001640  4EB9 00001B26            579               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001646  B67C 003C                580               CMP      #%111100,D3 // immediate data
0000164A  6700 059E                581               BEQ      INVALID_EA
0000164E  B67C 003A                582               CMP      #%111010,D3 // complicated
00001652  6700 0596                583               BEQ      INVALID_EA
00001656  B67C 003B                584               CMP      #%111011,D3 // complicated
0000165A  6700 058E                585               BEQ      INVALID_EA
0000165E                           586     
0000165E  4EB9 00001B04            587               JSR      bits11to13 ** grab mode bits to jump with
00001664  3803                     588               MOVE    D3,D4
00001666                           589  
00001666  41F9 000019F0            590               LEA     jmp_mode,A0    *Index into the table
0000166C  C6FC 0006                591               MULU    #6,D3       *Form offset     
00001670  4EB0 3000                592               JSR     0(A0,D3)   *Jump indirect with index
00001674                           593   
00001674  1CFC 002C                594               MOVE.B     #',', (A6)+
00001678  1CFC 0020                595               MOVE.B     #' ', (A6)+
0000167C                           596  
0000167C  4E75                     597               RTS
0000167E                           598               
0000167E                           599  LEA_DEST    
0000167E  4244                     600                  CLR     D4
00001680  41F9 000019F0            601                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00001686  363C 0001                602                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
0000168A  3803                     603                  MOVE    D3,D4
0000168C  C6FC 0006                604                  MULU    #6,D3       *Form offset     
00001690  4EB0 3000                605                  JSR     0(A0,D3)   *Jump indirect with index
00001694                           606                  
00001694  4EB9 00001ACC            607                  JSR     bits5to7
0000169A  4EB9 00001A20            608                  JSR     insert_num
000016A0                           609                  
000016A0  4E75                     610                  RTS
000016A2                           611  
000016A2                           612  *************************************************
000016A2                           613  
000016A2                           614  ADDQ
000016A2  4EB9 00001700            615                  JSR     ADDQ_BUFFER
000016A8  4EB9 000016BE            616                  JSR     ADDQ_SRC
000016AE  1CFC 002C                617                  MOVE.B  #',',(A6)+
000016B2  1CFC 0020                618                  MOVE.B  #' ',(A6)+
000016B6  4EB9 000016D6            619                  JSR     ADDQ_DEST
000016BC  4E75                     620                  RTS                 ;BRA     PRINT_BUFFER
000016BE                           621  
000016BE                           622  ADDQ_SRC
000016BE  4EB9 00001ACC            623                  JSR     bits5to7
000016C4  1CFC 0023                624                  MOVE.B  #'#',(A6)+
000016C8  183C 0000                625                  MOVE.B  #%000,D4
000016CC  4EB9 00001A20            626                  JSR     insert_num
000016D2  4244                     627                  CLR     D4
000016D4  4E75                     628                  RTS
000016D6                           629                  
000016D6                           630  ADDQ_DEST
000016D6  4EB9 00001B04            631                 JSR      bits11to13
000016DC  3803                     632                 MOVE     D3,D4
000016DE  41F9 000019F0            633                 LEA     jmp_mode,A0    *Index into the table
000016E4  C6FC 0006                634                 MULU    #6,D3       *Form offset     
000016E8  4EB0 3000                635                 JSR     0(A0,D3)   *Jump indirect with index
000016EC  4243                     636                 CLR     D3
000016EE  4EB9 00001B16            637                 JSR     bits14to16
000016F4  4EB9 00001A20            638                 JSR     insert_num
000016FA  4244                     639                 CLR     D4
000016FC  4243                     640                 CLR     D3
000016FE  4E75                     641                 RTS
00001700                           642                 
00001700                           643  
00001700                           644  ADDQ_BUFFER
00001700  1CFC 0041                645                 MOVE.B   #'A',(A6)+
00001704  1CFC 0044                646                 MOVE.B   #'D', (A6)+  
00001708  1CFC 0044                647                 MOVE.B   #'D', (A6)+
0000170C  1CFC 0051                648                 MOVE.B   #'Q', (A6)+
00001710  4EB9 00001D0E            649                 JSR      GETSIZE_ADDQ
00001716                           650                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00001716                           651                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001716  4E75                     652                 RTS               
00001718                           653  
00001718                           654  
00001718                           655  ****************************************               
00001718                           656  MOVEQ
00001718  4EB9 00001722            657                  JSR     MOVEQ_BUFFER
0000171E  6000 0588                658                  BRA     PRINT_BUFFER
00001722                           659  
00001722                           660  MOVEQ_BUFFER
00001722  1CFC 004D                661                 MOVE.B   #'M',(A6)+
00001726  1CFC 004F                662                 MOVE.B   #'O', (A6)+  
0000172A  1CFC 0056                663                 MOVE.B   #'V', (A6)+
0000172E  1CFC 0045                664                 MOVE.B   #'E', (A6)+
00001732  1CFC 0051                665                 MOVE.B   #'Q', (A6)+
00001736  1CFC 0020                666                 MOVE.B   #' ', (A6)+
0000173A  4E75                     667                 RTS
0000173C                           668  
0000173C                           669  
0000173C                           670  ****************************************
0000173C                           671  
0000173C                           672  DIVU
0000173C  4EB9 00001AF2            673                  JSR     bits8to10
00001742  B67C 0003                674                  CMP     #%011,D3
00001746  6600 04A2                675                  BNE     INVALID_EA
0000174A  4243                     676                  CLR     D3
0000174C  4EB9 00001768            677                  JSR     DIVU_BUFFER
00001752  4EB9 0000177E            678                  JSR     DIVU_SRC
00001758  1CFC 002C                679                  MOVE.B  #',',(A6)+
0000175C  1CFC 0020                680                  MOVE.B  #' ',(A6)+
00001760  4EB9 000017A8            681                  JSR     DIVU_DEST
00001766  4E75                     682                  RTS                 ;BRA     PRINT_BUFFER
00001768                           683  
00001768                           684  DIVU_BUFFER
00001768  1CFC 0044                685                 MOVE.B   #'D',(A6)+
0000176C  1CFC 0049                686                 MOVE.B   #'I', (A6)+  
00001770  1CFC 0056                687                 MOVE.B   #'V', (A6)+
00001774  1CFC 0055                688                 MOVE.B   #'U', (A6)+
00001778  1CFC 0020                689                 MOVE.B   #' ', (A6)+
0000177C  4E75                     690                 RTS  
0000177E                           691                 
0000177E                           692                 
0000177E                           693  DIVU_SRC
0000177E  4EB9 00001B04            694                 JSR      bits11to13
00001784  3803                     695                 MOVE     D3,D4
00001786  41F9 000019F0            696                 LEA     jmp_mode,A0    *Index into the table
0000178C  C6FC 0006                697                 MULU    #6,D3       *Form offset     
00001790  4EB0 3000                698                 JSR     0(A0,D3)   *Jump indirect with index  
00001794  4243                     699                 CLR     D3
00001796  4EB9 00001B16            700                 JSR     bits14to16
0000179C  4EB9 00001A20            701                 JSR     insert_num
000017A2  4244                     702                 CLR     D4
000017A4  4243                     703                 CLR     D3
000017A6  4E75                     704                 RTS
000017A8                           705                 
000017A8                           706  DIVU_DEST
000017A8  363C 0000                707                 MOVE    #%000,D3     ;DIVU destination can only be a data register.
000017AC  3803                     708                 MOVE    D3,D4
000017AE  41F9 000019F0            709                 LEA     jmp_mode,A0    *Index into the table
000017B4  C6FC 0006                710                 MULU    #6,D3       *Form offset     
000017B8  4EB0 3000                711                 JSR     0(A0,D3)   *Jump indirect with index  
000017BC  4243                     712                 CLR     D3
000017BE  4EB9 00001ACC            713                 JSR     bits5to7
000017C4  4EB9 00001A20            714                 JSR     insert_num
000017CA  4244                     715                 CLR     D4
000017CC  4243                     716                 CLR     D3
000017CE  4E75                     717                 RTS
000017D0                           718                 
000017D0                           719                 
000017D0                           720                 
000017D0                           721  *****************************************               
000017D0                           722                 
000017D0                           723  OR    
000017D0  4EB9 0000180E            724                 JSR     OR_BUFFER
000017D6                           725                 
000017D6                           726                             
000017D6                           727                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000017D6  BC7C 0001                728                 CMP      #1,D6
000017DA  6600 001A                729                 BNE      OR_DIRECTION_REVERSED
000017DE  4246                     730                 CLR      D6
000017E0  4EB9 00001822            731                 JSR      OR_SRC
000017E6  1CFC 002C                732                 MOVE.B   #',', (A6)+
000017EA  1CFC 0020                733                 MOVE.B   #' ', (A6)+
000017EE  4EB9 00001854            734                 JSR      OR_DEST
000017F4  4E75                     735                 RTS
000017F6                           736                 
000017F6                           737                 
000017F6                           738  OR_DIRECTION_REVERSED
000017F6  4246                     739                 CLR      D6
000017F8  4EB9 00001854            740                 JSR      OR_DEST
000017FE  1CFC 002C                741                 MOVE.B   #',', (A6)+
00001802  1CFC 0020                742                 MOVE.B   #' ', (A6)+
00001806  4EB9 00001822            743                 JSR      OR_SRC             
0000180C                           744                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000180C                           745                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA>                
0000180C                           746                 
0000180C                           747                 
0000180C  4E75                     748                 RTS                  ;BRA     PRINT_BUFFER
0000180E                           749                  
0000180E                           750  OR_BUFFER
0000180E  1CFC 004F                751                 MOVE.B   #'O',(A6)+
00001812  1CFC 0052                752                 MOVE.B   #'R', (A6)+
00001816  4EB9 00001DD0            753                 JSR      GETSIZE_OR  
0000181C                           754                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000181C                           755                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000181C  1CFC 0020                756                 MOVE.B   #' ', (A6)+
00001820  4E75                     757                 RTS   
00001822                           758                 
00001822                           759                 
00001822                           760                 
00001822                           761                 
00001822                           762  OR_SRC
00001822  4EB9 00001B04            763                 JSR      bits11to13
00001828  B67C 0001                764                 CMP      #%001,D3
0000182C  6700 03BC                765                 BEQ      INVALID_EA
00001830  3803                     766                 MOVE     D3,D4
00001832  41F9 000019F0            767                 LEA     jmp_mode,A0    *Index into the table
00001838  C6FC 0006                768                 MULU    #6,D3       *Form offset     
0000183C  4EB0 3000                769                 JSR     0(A0,D3)   *Jump indirect with index  
00001840  4243                     770                 CLR     D3
00001842  4EB9 00001B16            771                 JSR     bits14to16
00001848  4EB9 00001A20            772                 JSR     insert_num
0000184E  4243                     773                 CLR     D3
00001850  4244                     774                 CLR     D4
00001852  4E75                     775                 RTS
00001854                           776  
00001854                           777  
00001854                           778  OR_DEST
00001854  163C 0000                779                 MOVE.B  #%000,D3
00001858  3803                     780                 MOVE    D3,D4
0000185A  41F9 000019F0            781                 LEA     jmp_mode,A0    *Index into the table
00001860  C6FC 0006                782                 MULU    #6,D3       *Form offset     
00001864  4EB0 3000                783                 JSR     0(A0,D3)   *Jump indirect with index  
00001868  4243                     784                 CLR     D3
0000186A  4EB9 00001ACC            785                 JSR     bits5to7    
00001870  4EB9 00001A20            786                 JSR     insert_num
00001876  4243                     787                 CLR     D3
00001878  4244                     788                 CLR     D4
0000187A  4E75                     789                 RTS   
0000187C                           790  
0000187C                           791  
0000187C                           792  
0000187C                           793  
0000187C                           794  
0000187C                           795  ***********************************************
0000187C                           796  
0000187C                           797  SUB   
0000187C  4EB9 000018B6            798                 JSR     SUB_BUFFER
00001882                           799                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
00001882  BC7C 0001                800                 CMP      #1,D6
00001886  6600 001A                801                 BNE      SUB_DIRECTION_REVERSED
0000188A  4246                     802                 CLR      D6
0000188C  4EB9 000018CE            803                 JSR      SUB_SRC
00001892  1CFC 002C                804                 MOVE.B   #',', (A6)+
00001896  1CFC 0020                805                 MOVE.B   #' ', (A6)+
0000189A  4EB9 000018F8            806                 JSR      SUB_DEST
000018A0  4E75                     807                 RTS
000018A2                           808                 
000018A2                           809                 
000018A2                           810  SUB_DIRECTION_REVERSED
000018A2  4246                     811                 CLR      D6
000018A4  4EB8 1854                812                 JSR      OR_DEST
000018A8  1CFC 002C                813                 MOVE.B   #',', (A6)+
000018AC  1CFC 0020                814                 MOVE.B   #' ', (A6)+
000018B0  4EB8 1822                815                 JSR      OR_SRC             
000018B4                           816                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000018B4                           817                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA>                
000018B4                           818                 
000018B4                           819                 
000018B4  4E75                     820                 RTS                  ;BRA     PRINT_BUFFER
000018B6                           821                 
000018B6                           822  SUB_BUFFER
000018B6  1CFC 0053                823                 MOVE.B   #'S',(A6)+
000018BA  1CFC 0055                824                 MOVE.B   #'U', (A6)+  
000018BE  1CFC 0042                825                 MOVE.B   #'B', (A6)+
000018C2  4EB9 00001D48            826                 JSR      GETSIZE_SUB
000018C8                           827                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000018C8                           828                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000018C8  1CFC 0020                829                 MOVE.B   #' ', (A6)+
000018CC  4E75                     830                 RTS  
000018CE                           831                 
000018CE                           832                 
000018CE                           833                 
000018CE                           834  SUB_SRC
000018CE  4EB9 00001B04            835                 JSR      bits11to13
000018D4  3803                     836                 MOVE     D3,D4
000018D6  41F9 000019F0            837                 LEA     jmp_mode,A0    *Index into the table
000018DC  C6FC 0006                838                 MULU    #6,D3       *Form offset     
000018E0  4EB0 3000                839                 JSR     0(A0,D3)   *Jump indirect with index  
000018E4  4243                     840                 CLR     D3
000018E6  4EB9 00001B16            841                 JSR     bits14to16
000018EC  4EB9 00001A20            842                 JSR     insert_num
000018F2  4243                     843                 CLR     D3
000018F4  4244                     844                 CLR     D4
000018F6  4E75                     845                 RTS
000018F8                           846  
000018F8                           847  
000018F8                           848  SUB_DEST
000018F8  163C 0000                849                 MOVE.B  #%000,D3
000018FC  3803                     850                 MOVE    D3,D4
000018FE  41F9 000019F0            851                 LEA     jmp_mode,A0    *Index into the table
00001904  C6FC 0006                852                 MULU    #6,D3       *Form offset     
00001908  4EB0 3000                853                 JSR     0(A0,D3)   *Jump indirect with index  
0000190C  4243                     854                 CLR     D3
0000190E  4EB9 00001ACC            855                 JSR     bits5to7    
00001914  4EB9 00001A20            856                 JSR     insert_num
0000191A  4243                     857                 CLR     D3
0000191C  4244                     858                 CLR     D4
0000191E  4E75                     859                 RTS   
00001920                           860  
00001920                           861  
00001920                           862  
00001920                           863                 
00001920                           864                 
00001920                           865  ************************************************               
00001920                           866                 
00001920                           867                 
00001920                           868                 
00001920                           869                 
00001920                           870                 
00001920                           871  CMP   
00001920  4EB9 0000192A            872                 JSR     CMP_BUFFER
00001926  6000 0380                873                 BRA     PRINT_BUFFER
0000192A                           874                  
0000192A                           875  CMP_BUFFER
0000192A  1CFC 0043                876                 MOVE.B   #'C',(A6)+
0000192E  1CFC 004D                877                 MOVE.B   #'M', (A6)+  
00001932  1CFC 0050                878                 MOVE.B   #'P', (A6)+
00001936  1CFC 002E                879                 MOVE.B   #'.', (A6)+
0000193A                           880                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000193A                           881                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000193A                           882                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000193A  1CFC 0020                883                 MOVE.B   #' ', (A6)+
0000193E  4E75                     884                 RTS   
00001940                           885                 
00001940                           886  MULS
00001940  4EB9 0000194A            887                  JSR     MULS_BUFFER
00001946  6000 0360                888                  BRA     PRINT_BUFFER
0000194A                           889  
0000194A                           890  MULS_BUFFER
0000194A  1CFC 004D                891                 MOVE.B   #'M',(A6)+
0000194E  1CFC 0055                892                 MOVE.B   #'U', (A6)+  
00001952  1CFC 004C                893                 MOVE.B   #'L', (A6)+
00001956  1CFC 0053                894                 MOVE.B   #'S', (A6)+
0000195A  1CFC 0020                895                 MOVE.B   #' ', (A6)+
0000195E  4E75                     896                 RTS
00001960                           897  
00001960                           898  AND    
00001960  4EB9 0000196A            899                 JSR     AND_BUFFER
00001966  6000 0340                900                 BRA     PRINT_BUFFER
0000196A                           901                  
0000196A                           902  AND_BUFFER
0000196A  1CFC 0041                903                 MOVE.B   #'A',(A6)+
0000196E  1CFC 004E                904                 MOVE.B   #'N', (A6)+  
00001972  1CFC 0044                905                 MOVE.B   #'D', (A6)+
00001976  1CFC 002E                906                 MOVE.B   #'.', (A6)+
0000197A                           907                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000197A                           908                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000197A                           909                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000197A  1CFC 0020                910                 MOVE.B   #' ', (A6)+
0000197E  4E75                     911                 RTS    
00001980                           912  
00001980                           913  ASR     
00001980  4EB9 0000198A            914                  JSR     ASR_BUFFER
00001986  6000 0320                915                  BRA     PRINT_BUFFER
0000198A                           916  
0000198A                           917  ASR_BUFFER
0000198A  1CFC 0041                918                 MOVE.B   #'A',(A6)+
0000198E  1CFC 0053                919                 MOVE.B   #'S', (A6)+  
00001992  1CFC 0052                920                 MOVE.B   #'R', (A6)+
00001996  1CFC 0020                921                 MOVE.B   #' ', (A6)+
0000199A  4E75                     922                 RTS      
0000199C                           923  
0000199C                           924  ASL     
0000199C  4EB9 000019A6            925                  JSR     ASL_BUFFER
000019A2  6000 0304                926                  BRA     PRINT_BUFFER
000019A6                           927  
000019A6                           928  ASL_BUFFER
000019A6  1CFC 0041                929                 MOVE.B   #'A',(A6)+
000019AA  1CFC 0053                930                 MOVE.B   #'S', (A6)+  
000019AE  1CFC 004C                931                 MOVE.B   #'L', (A6)+
000019B2  1CFC 0020                932                 MOVE.B   #' ', (A6)+
000019B6  4E75                     933                 RTS     
000019B8                           934  
000019B8                           935  LSL     
000019B8  4EB9 000019C2            936                  JSR     LSL_BUFFER
000019BE  6000 02E8                937                  BRA     PRINT_BUFFER
000019C2                           938  
000019C2                           939  LSL_BUFFER
000019C2  1CFC 004C                940                 MOVE.B   #'L',(A6)+
000019C6  1CFC 0053                941                 MOVE.B   #'S', (A6)+  
000019CA  1CFC 004C                942                 MOVE.B   #'L', (A6)+
000019CE  1CFC 0020                943                 MOVE.B   #' ', (A6)+
000019D2  4E75                     944                 RTS     
000019D4                           945  
000019D4                           946  LSR     
000019D4  4EB9 000019DE            947                  JSR     LSR_BUFFER
000019DA  6000 02CC                948                  BRA     PRINT_BUFFER
000019DE                           949  
000019DE                           950  LSR_BUFFER
000019DE  1CFC 004C                951                 MOVE.B   #'L',(A6)+
000019E2  1CFC 0053                952                 MOVE.B   #'S', (A6)+  
000019E6  1CFC 0052                953                 MOVE.B   #'R', (A6)+
000019EA  1CFC 0020                954                 MOVE.B   #' ', (A6)+
000019EE  4E75                     955                 RTS       
000019F0                           956                 
000019F0                           957  jmp_mode
000019F0  4EF9 00001B48            958                  JMP     MODE000  ** DN
000019F6  4EF9 00001B4E            959                  JMP     MODE001  ** AN
000019FC  4EF9 00001B56            960                  JMP     MODE010  ** (AN)
00001A02  4EF9 00001B60            961                  JMP     MODE011  ** (AN)+   
00001A08  4EF9 00001B6A            962                  JMP     MODE100  ** -(AN)
00001A0E  4EF9 00001B78            963                  JMP     MODE101  **INVALID
00001A14  4EF9 00001B82            964                  JMP     MODE110  **INVALID
00001A1A  4EF9 00001B8C            965                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00001A20                           966  
00001A20                           967                  
00001A20                           968  insert_num
00001A20                           969                  
00001A20                           970                  ;get number from D3
00001A20  B67C 0000                971                  CMP     #%000,D3       ;0
00001A24  6600 000A                972                  BNE     ONE         
00001A28  1CFC 0030                973                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
00001A2C  6000 006E                974                  BRA     FINISHER
00001A30                           975                  
00001A30  B67C 0001                976  ONE             CMP     #%001,D3       ;1
00001A34  6600 000A                977                  BNE     TWO 
00001A38  1CFC 0031                978                  MOVE.B  #'1',(A6)+
00001A3C  6000 005E                979                  BRA     FINISHER
00001A40                           980  
00001A40                           981                  
00001A40  B67C 0002                982  TWO             CMP     #%010,D3        ;2
00001A44  6600 000A                983                  BNE     THREE
00001A48  1CFC 0032                984                  MOVE.B  #'2',(A6)+
00001A4C  6000 004E                985                  BRA     FINISHER
00001A50                           986                  
00001A50  B67C 0003                987  THREE           CMP     #%011,D3        ;3
00001A54  6600 000A                988                  BNE     FOUR
00001A58  1CFC 0033                989                  MOVE.B  #'3',(A6)+
00001A5C  6000 003E                990                  BRA     FINISHER
00001A60                           991                  
00001A60  B67C 0004                992  FOUR            CMP     #%100,D3        ;4
00001A64  6600 000A                993                  BNE     FIVE
00001A68  1CFC 0034                994                  MOVE.B  #'4',(A6)+
00001A6C  6000 002E                995                  BRA     FINISHER
00001A70                           996                  
00001A70  B67C 0005                997  FIVE            CMP     #%101,D3        ;5
00001A74  6600 000A                998                  BNE     SIX
00001A78  1CFC 0035                999                  MOVE.B  #'5',(A6)+
00001A7C  6000 001E               1000                  BRA     FINISHER
00001A80                          1001                  
00001A80  B67C 0006               1002  SIX             CMP     #%110,D3        ;6
00001A84  6600 000A               1003                  BNE     SEVEN
00001A88  1CFC 0036               1004                  MOVE.B  #'6',(A6)+
00001A8C  6000 000E               1005                  BRA     FINISHER
00001A90                          1006                  
00001A90  B67C 0007               1007  SEVEN           CMP     #%111,D3        ;7
00001A94  1CFC 0037               1008                  MOVE.B  #'7',(A6)+
00001A98  6000 0002               1009                  BRA     FINISHER
00001A9C                          1010                  
00001A9C                          1011  FINISHER                
00001A9C                          1012                  
00001A9C                          1013                  ;check D4, do we need to do stuff?
00001A9C  B87C 0002               1014                  CMP     #%010,D4
00001AA0  6600 0008               1015                  BNE     POSTINCR
00001AA4  1CFC 0029               1016                  MOVE.B  #')',(A6)+
00001AA8  4E75                    1017                  RTS
00001AAA                          1018                  
00001AAA  B87C 0003               1019  POSTINCR        CMP     #%011,D4
00001AAE  6600 000C               1020                  BNE     ONEPAREN
00001AB2  1CFC 0029               1021                  MOVE.B  #')',(A6)+
00001AB6  1CFC 002B               1022                  MOVE.B  #'+',(A6)+
00001ABA  4E75                    1023                  RTS
00001ABC                          1024                  
00001ABC  B87C 0004               1025  ONEPAREN        CMP     #%100,D4
00001AC0  6600 0008               1026                  BNE     DONE
00001AC4  1CFC 0029               1027                  MOVE.B  #')',(A6)+                
00001AC8                          1028  
00001AC8  4244                    1029                  CLR     D4
00001ACA  4E75                    1030  DONE            RTS
00001ACC                          1031  
00001ACC                          1032          
00001ACC                          1033                 
00001ACC                          1034  bits5to7
00001ACC  4243                    1035                 CLR      D3
00001ACE  4EB9 00001C82           1036                 JSR      COPY_OPCODE  // opcode copied to D2
00001AD4  C47C 0E00               1037                 AND      #%0000111000000000, D2
00001AD8  E09A                    1038                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001ADA  E29A                    1039                 ROR.L    #1, D2
00001ADC  3602                    1040                 MOVE.W   D2,D3 // moving isolated bits into d3
00001ADE  4E75                    1041                 RTS
00001AE0                          1042                 
00001AE0                          1043  bits5to8
00001AE0  4243                    1044                 CLR      D3
00001AE2  4EB9 00001C82           1045                 JSR      COPY_OPCODE  // opcode copied to D2
00001AE8  C47C 0F00               1046                 AND      #%0000111100000000, D2
00001AEC  E09A                    1047                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001AEE  3602                    1048                 MOVE.W   D2,D3 // moving isolated bits into d3
00001AF0  4E75                    1049                 RTS
00001AF2                          1050                 
00001AF2                          1051  bits8to10
00001AF2  4243                    1052                 CLR      D3
00001AF4  4EB9 00001C82           1053                 JSR      COPY_OPCODE  // opcode copied to D2
00001AFA  C47C 01C0               1054                 AND      #%0000000111000000, D2
00001AFE  EC9A                    1055                 ROR.L    #6, D2          // rotate bits so isolated at the end
00001B00  3602                    1056                 MOVE.W   D2,D3 // moving isolated bits into d3
00001B02  4E75                    1057                 RTS               
00001B04                          1058             
00001B04                          1059  bits11to13
00001B04  4243                    1060                 CLR      D3
00001B06  4EB9 00001C82           1061                 JSR      COPY_OPCODE  // opcode copied to D2
00001B0C  C47C 0038               1062                 AND      #%0000000000111000, D2
00001B10  E69A                    1063                 ROR.L    #3, D2          // rotate bits so isolated at the end
00001B12  3602                    1064                 MOVE.W   D2,D3 // moving isolated bits into d3
00001B14  4E75                    1065                 RTS
00001B16                          1066             
00001B16                          1067  bits14to16
00001B16  4243                    1068                 CLR      D3
00001B18  4EB9 00001C82           1069                 JSR      COPY_OPCODE  // opcode copied to D2
00001B1E  C47C 0007               1070                 AND      #%0000000000000111, D2
00001B22  3602                    1071                 MOVE.W   D2,D3 // moving isolated bits into d3
00001B24  4E75                    1072                 RTS
00001B26                          1073  bits11to16
00001B26  4243                    1074                 CLR      D3
00001B28  4EB9 00001C82           1075                 JSR      COPY_OPCODE  // opcode copied to D2
00001B2E  C47C 003F               1076                 AND      #%0000000000111111, D2
00001B32  3602                    1077                 MOVE.W   D2,D3 // moving isolated bits into d3
00001B34  4E75                    1078                 RTS
00001B36                          1079  bits1to10
00001B36  4243                    1080                 CLR      D3
00001B38  4EB9 00001C82           1081                 JSR      COPY_OPCODE  // opcode copied to D2
00001B3E  C47C FFC0               1082                 AND      #%1111111111000000, D2
00001B42  EC9A                    1083                 ROR.L    #6, D2
00001B44  3602                    1084                 MOVE.W   D2,D3 // moving isolated bits into d3
00001B46  4E75                    1085                 RTS
00001B48                          1086  ** DN       
00001B48                          1087  MODE000         
00001B48  1CFC 0044               1088                  MOVE.B  #'D',(A6)+     
00001B4C  4E75                    1089                  RTS
00001B4E                          1090  
00001B4E                          1091  ** AN
00001B4E                          1092  MODE001         
00001B4E  4EB9 00001BA2           1093                  JSR ADDRESS_BUFFER  
00001B54  4E75                    1094                  RTS      
00001B56                          1095  
00001B56                          1096   ** (AN)
00001B56                          1097  MODE010         
00001B56  1CFC 0028               1098                  MOVE.B  #'(', (A6)+
00001B5A  1CFC 0041               1099                  MOVE.B  #'A',(A6)+  
00001B5E  4E75                    1100                  RTS      
00001B60                          1101  
00001B60                          1102  ** (AN)+ 
00001B60                          1103  MODE011         
00001B60  1CFC 0028               1104                  MOVE.B  #'(', (A6)+
00001B64  1CFC 0041               1105                  MOVE.B  #'A',(A6)+ 
00001B68  4E75                    1106                  RTS       
00001B6A                          1107  
00001B6A                          1108   ** -(AN)
00001B6A                          1109  MODE100         
00001B6A  1CFC 002D               1110                  MOVE.B  #'-', (A6)+
00001B6E  1CFC 0028               1111                  MOVE.B  #'(', (A6)+
00001B72  1CFC 0041               1112                  MOVE.B  #'A',(A6)+
00001B76  4E75                    1113                  RTS
00001B78                          1114                  
00001B78                          1115  **INVALID               
00001B78                          1116  MODE101         
00001B78  1CFC 0028               1117                  MOVE.B  #'(', (A6)+
00001B7C  1CFC 0041               1118                  MOVE.B  #'A',(A6)+ 
00001B80  4E75                    1119                  RTS
00001B82                          1120                  
00001B82                          1121  **INVALID
00001B82                          1122  MODE110         
00001B82  1CFC 0028               1123                  MOVE.B  #'(', (A6)+
00001B86  1CFC 0041               1124                  MOVE.B  #'A',(A6)+
00001B8A  4E75                    1125                  RTS  
00001B8C                          1126  
00001B8C                          1127  ** ABSOLUTE AND IMMEDIATE            
00001B8C                          1128  MODE111         
00001B8C                          1129                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001B8C  1CFC 0024               1130                 MOVE.B   #'$', (A6)+  
00001B90  4EB9 00001CC4           1131                 JSR      PRINT_DEREF_ADDRESS
00001B96  544A                    1132                 ADD.W    #2, A2
00001B98  4EB9 00001CC4           1133                 JSR      PRINT_DEREF_ADDRESS
00001B9E  544A                    1134                 ADD.W    #2, A2
00001BA0  4E75                    1135                 RTS            
00001BA2                          1136                                          
00001BA2                          1137  ADDRESS_BUFFER
00001BA2  1CFC 0041               1138                  MOVE.B  #'A',(A6)+ 
00001BA6  4E75                    1139                  RTS
00001BA8                          1140                 
00001BA8                          1141  ABSOLUTE_BUFFER
00001BA8  4243                    1142                 CLR      D3
00001BAA  3604                    1143                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001BAC  1CF8 0024               1144                 MOVE.B   '$', (A6)+
00001BB0  B67C 0000               1145                 CMP.W    #%000, D3
00001BB4  6700 0010               1146                 BEQ      ABSOLUTE_WORD_BUFFER
00001BB8  4243                    1147                 CLR      D3
00001BBA  3604                    1148                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001BBC  B67C 0001               1149                 CMP.W    #%001, D3
00001BC0  6700 0016               1150                 BEQ      ABSOLUTE_LONG_BUFFER
00001BC4  4E75                    1151                 RTS
00001BC6                          1152                 
00001BC6                          1153  ABSOLUTE_WORD_BUFFER
00001BC6                          1154                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001BC6                          1155                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001BC6  1CFC 0046               1156                         MOVE.B #'F', (A6)+ 
00001BCA  1CFC 0046               1157                         MOVE.B #'F', (A6)+ 
00001BCE  1CFC 0046               1158                         MOVE.B #'F', (A6)+ 
00001BD2  1CFC 0046               1159                         MOVE.B #'F', (A6)+ 
00001BD6  4E75                    1160                         RTS       
00001BD8                          1161                    
00001BD8                          1162  ABSOLUTE_LONG_BUFFER       
00001BD8                          1163                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001BD8                          1164                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001BD8  1CFC 0047               1165                         MOVE.B #'G', (A6)+ 
00001BDC  1CFC 0047               1166                         MOVE.B #'G', (A6)+ 
00001BE0  1CFC 0047               1167                         MOVE.B #'G', (A6)+ 
00001BE4  1CFC 0047               1168                         MOVE.B #'G', (A6)+
00001BE8  4E75                    1169                         RTS 
00001BEA                          1170  
00001BEA                          1171  INVALID_EA  
00001BEA                          1172                  * TODO: IMPLEMENT
00001BEA                          1173                  *** CLEAR OUT A6
00001BEA                          1174                  ** PUT INVALID MESSAGE INTO A6
00001BEA  6000 F6FB               1175                  BRA EXIT
00001BEE                          1176  INVALID_OP  
00001BEE                          1177                  ** TODO: IMPLEMENT
00001BEE                          1178                 *** CLEAR OUT A6
00001BEE                          1179                  ** PUT INVALID MESSAGE INTO A6
00001BEE  1CFC 0044               1180                      MOVE.B #'D', (A6)+
00001BF2  1CFC 0041               1181                      MOVE.B #'A', (A6)+
00001BF6  1CFC 0054               1182                      MOVE.B #'T', (A6)+
00001BFA  1CFC 0041               1183                      MOVE.B #'A', (A6)+ 
00001BFE  1CFC 0020               1184                      MOVE.B #' ', (A6)+ 
00001C02  4EB9 00001CC4           1185                      JSR     PRINT_DEREF_ADDRESS
00001C08                          1186            
00001C08                          1187                  
00001C08  1CFC 004E               1188  NOP                 MOVE.B #'N', (A6)+
00001C0C  1CFC 004F               1189                      MOVE.B #'O', (A6)+
00001C10  1CFC 0050               1190                      MOVE.B #'P', (A6)+
00001C14  4E75                    1191                      RTS
00001C16                          1192  
00001C16                          1193                   
00001C16                          1194  RTS      
00001C16  43F8 1290               1195                      LEA     RTS_disp,A1          
00001C1A  103C 000E               1196                      MOVE.B  #14,D0
00001C1E  4E4F                    1197                      TRAP    #15 
00001C20  6000 F6C5               1198                      BRA     EXIT
00001C24                          1199  JSR      
00001C24  4DF9 00001F72           1200                      LEA     BUFFER, A6
00001C2A  1CFC 004A               1201                      MOVE.B #'J', (A6)+
00001C2E  1CFC 0053               1202                      MOVE.B #'S', (A6)+
00001C32  1CFC 0052               1203                      MOVE.B #'R', (A6)+
00001C36  1CFC 0020               1204                      MOVE.B #' ', (A6)+
00001C3A  43F9 00001F72           1205                      LEA     BUFFER, A1
00001C40                          1206                      ** BITS 10 - 12 MODE       
00001C40                          1207                      ** BITS 13 - 16 REGISTER
00001C40  103C 000E               1208                      MOVE.B  #14,D0
00001C44  4E4F                    1209                      TRAP    #15 
00001C46  6000 F69F               1210                      BRA     EXIT
00001C4A                          1211                    
00001C4A                          1212  MOVEM      
00001C4A                          1213                     
00001C4A                          1214                      ** SIZE SUBROUTINE
00001C4A                          1215                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001C4A  C47C 0040               1216                      AND #%0000000001000000,D2 
00001C4E                          1217                      * WORD
00001C4E  B4BC 00000040           1218                      CMP.L   #%0000000001000000,D2
00001C54  4EB9 00001C6A           1219                      JSR     MOVEM_W 
00001C5A                          1220                      *LONG
00001C5A  B4BC 00000040           1221                      CMP.L   #%0000000001000000,D2 
00001C60                          1222                     ** JSR     MOVEM_L
00001C60  103C 000E               1223                      MOVE.B  #14,D0
00001C64  4E4F                    1224                      TRAP    #15
00001C66  6000 F67F               1225                      BRA     EXIT 
00001C6A                          1226                      
00001C6A                          1227  MOVEM_W 
00001C6A  43F8 123E               1228                       LEA     MOVEM_disp,A1
00001C6E                          1229                      * PRINT MOVEM
00001C6E  103C 000E               1230                       MOVE.B  #14,D0
00001C72  4E4F                    1231                       TRAP    #15
00001C74                          1232          
00001C74                          1233                      * PRINT WORD PORTION
00001C74  41F8 12D5               1234                       LEA     size_w, A0
00001C78  103C 000E               1235                       MOVE.B  #14,D0
00001C7C  4E4F                    1236                       TRAP    #15 
00001C7E                          1237          
00001C7E  6000 F667               1238                       BRA     EXIT 
00001C82                          1239       
00001C82                          1240     
00001C82                          1241  COPY_OPCODE 
00001C82                          1242                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001C82  4242                    1243                       CLR    D2  
00001C84  3405                    1244                       MOVE.W D5,D2 
00001C86  4E75                    1245                       RTS  
00001C88                          1246  
00001C88                          1247  PRINT_ADDRESS     
00001C88  4242                    1248                   CLR         D2
00001C8A  143C 0010               1249                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001C8E  220A                    1250                   MOVE.L      A2,D1        
00001C90  103C 000F               1251                   MOVE.B      #15,D0          
00001C94  4E4F                    1252                   TRAP        #15            
00001C96  1CFC 0020               1253                   MOVE.B      #' ', (A6)+
00001C9A  1CFC 0020               1254                   MOVE.B      #' ', (A6)+
00001C9E  1CFC 0020               1255                   MOVE.B      #' ', (A6)+
00001CA2  1CFC 0020               1256                   MOVE.B      #' ', (A6)+
00001CA6  4E75                    1257                   RTS     
00001CA8                          1258  PRINT_BUFFER    
00001CA8  1CFC 0000               1259                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001CAC  43F9 00001F72           1260                 LEA      BUFFER, A1
00001CB2  303C 000E               1261                 MOVE.W   #14,D0
00001CB6  4E4F                    1262                 TRAP     #15
00001CB8  43F8 1219               1263                 LEA     linebreak,A1            *appends line at the end of the user input
00001CBC  103C 000E               1264                 MOVE.B  #14,D0
00001CC0  4E4F                    1265                 TRAP    #15
00001CC2  4E75                    1266                 RTS  
00001CC4                          1267  
00001CC4                          1268  PRINT_DEREF_ADDRESS
00001CC4  1CFC 0000               1269                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001CC8  43F9 00001F72           1270                 LEA      BUFFER, A1
00001CCE  303C 000E               1271                 MOVE.W   #14,D0
00001CD2  4E4F                    1272                 TRAP     #15
00001CD4  4DF9 00001F72           1273                 LEA      BUFFER, A6
00001CDA  4242                    1274                 CLR      D2
00001CDC  0C52 0000               1275                 CMP      #0, (A2)
00001CE0  6700 0006               1276                 BEQ      PRINT_ZEROES
00001CE4  6000 001A               1277                 BRA      PRINT_HEX
00001CE8                          1278                 
00001CE8                          1279  PRINT_ZEROES
00001CE8  4DF9 00001F72           1280                LEA   BUFFER,A6
00001CEE  1CFC 0030               1281                MOVE.B #'0', (A6)+
00001CF2  1CFC 0030               1282                MOVE.B #'0', (A6)+
00001CF6  1CFC 0030               1283                MOVE.B #'0', (A6)+
00001CFA  1CFC 0030               1284                MOVE.B #'0', (A6)+
00001CFE  4E75                    1285                RTS
00001D00                          1286  PRINT_HEX
00001D00  143C 0010               1287                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001D04  3212                    1288                 MOVE.W      (A2),D1        // print the hex value in current address      
00001D06  103C 000F               1289                 MOVE.B      #15,D0          
00001D0A  4E4F                    1290                 TRAP        #15 
00001D0C  4E75                    1291                 RTS
00001D0E                          1292   ***************************
00001D0E                          1293  
00001D0E                          1294  GETSIZE_ADDQ
00001D0E                          1295                   
00001D0E                          1296                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001D0E                          1297                 
00001D0E  4EB8 1AF2               1298             JSR      bits8to10
00001D12  B67C 0000               1299             CMP      #%000,D3
00001D16  6600 000C               1300             BNE      ADDQ_NOTBYTE
00001D1A  4EB9 00001F42           1301             JSR      SIZEISBYTE
00001D20  4243                    1302             CLR      D3
00001D22  4E75                    1303             RTS
00001D24                          1304             
00001D24                          1305  ADDQ_NOTBYTE
00001D24  B67C 0001               1306             CMP      #%001,D3
00001D28  6600 000C               1307             BNE      ADDQ_NOTWORD
00001D2C  4EB9 00001F52           1308             JSR      SIZEISWORD
00001D32  4243                    1309             CLR      D3
00001D34  4E75                    1310             RTS
00001D36                          1311             
00001D36                          1312  ADDQ_NOTWORD
00001D36  B67C 0002               1313             CMP      #%010,D3
00001D3A  6600 FEAE               1314             BNE      INVALID_EA
00001D3E  4EB9 00001F62           1315             JSR      SIZEISLONG
00001D44  4243                    1316             CLR      D3
00001D46  4E75                    1317             RTS
00001D48                          1318                   
00001D48                          1319                                   
00001D48                          1320  ****************************
00001D48                          1321  
00001D48                          1322  
00001D48                          1323  GETSIZE_SUB
00001D48                          1324                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001D48                          1325                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001D48                          1326                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001D48  4EB8 1AF2               1327              JSR     bits8to10
00001D4C  B67C 0000               1328              CMP     #000,D3
00001D50  6600 0010               1329              BNE     SUB_NOTBYTE
00001D54  4EB9 00001F42           1330              JSR     SIZEISBYTE
00001D5A  3C3C 0001               1331              MOVE    #1,D6
00001D5E  4243                    1332              CLR     D3
00001D60  4E75                    1333              RTS
00001D62                          1334              
00001D62                          1335  SUB_NOTBYTE 
00001D62  B67C 0001               1336              CMP     #%001,D3
00001D66  6600 0010               1337              BNE     SUB_NOTWORD
00001D6A  4EB9 00001F52           1338              JSR     SIZEISWORD
00001D70  3C3C 0001               1339              MOVE    #1,D6
00001D74  4243                    1340              CLR     D3
00001D76  4E75                    1341              RTS
00001D78                          1342              
00001D78                          1343  SUB_NOTWORD
00001D78  B67C 0002               1344              CMP     #%010,D3
00001D7C  6600 0010               1345              BNE     SUB_NOTLEFT
00001D80  4EB9 00001F62           1346              JSR     SIZEISLONG
00001D86  3C3C 0001               1347              MOVE    #1,D6
00001D8A  4243                    1348              CLR     D3
00001D8C  4E75                    1349              RTS
00001D8E                          1350              
00001D8E                          1351  SUB_NOTLEFT     ;check other direction
00001D8E  B67C 0004               1352              CMP     #%100,D3
00001D92  6600 0010               1353              BNE     SUB_NOTRIGHTBYTE
00001D96  4EB9 00001F42           1354              JSR     SIZEISBYTE
00001D9C  3C3C 0002               1355              MOVE    #2,D6
00001DA0  4243                    1356              CLR     D3
00001DA2  4E75                    1357              RTS
00001DA4                          1358              
00001DA4                          1359  SUB_NOTRIGHTBYTE
00001DA4  B67C 0005               1360              CMP     #%101,D3
00001DA8  6600 0010               1361              BNE     SUB_NOTRIGHTWORD
00001DAC  4EB9 00001F52           1362              JSR     SIZEISWORD
00001DB2  3C3C 0002               1363              MOVE    #2,D6
00001DB6  4243                    1364              CLR     D3
00001DB8  4E75                    1365              RTS
00001DBA                          1366  
00001DBA                          1367  SUB_NOTRIGHTWORD
00001DBA  B67C 0006               1368              CMP     #%110,D3
00001DBE  6600 FE2A               1369              BNE     INVALID_EA
00001DC2  4EB9 00001F62           1370              JSR     SIZEISLONG
00001DC8  3C3C 0002               1371              MOVE    #2,D6
00001DCC  4243                    1372              CLR     D3
00001DCE  4E75                    1373              RTS 
00001DD0                          1374  
00001DD0                          1375  
00001DD0                          1376  
00001DD0                          1377  
00001DD0                          1378  
00001DD0                          1379  
00001DD0                          1380  ****************************
00001DD0                          1381  GETSIZE_OR
00001DD0                          1382                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001DD0                          1383                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001DD0                          1384          
00001DD0  4EB8 1AF2               1385              JSR     bits8to10
00001DD4  B67C 0000               1386              CMP     #000,D3
00001DD8  6600 0010               1387              BNE     OR_NOTBYTE
00001DDC  4EB9 00001F42           1388              JSR     SIZEISBYTE
00001DE2  3C3C 0001               1389              MOVE    #1,D6
00001DE6  4243                    1390              CLR     D3
00001DE8  4E75                    1391              RTS
00001DEA                          1392              
00001DEA                          1393  OR_NOTBYTE 
00001DEA  B67C 0001               1394              CMP     #%001,D3
00001DEE  6600 0010               1395              BNE     OR_NOTWORD
00001DF2  4EB9 00001F52           1396              JSR     SIZEISWORD
00001DF8  3C3C 0001               1397              MOVE    #1,D6
00001DFC  4243                    1398              CLR     D3
00001DFE  4E75                    1399              RTS
00001E00                          1400              
00001E00                          1401  OR_NOTWORD
00001E00  B67C 0002               1402              CMP     #%010,D3
00001E04  6600 0010               1403              BNE     OR_NOTLEFT
00001E08  4EB9 00001F62           1404              JSR     SIZEISLONG
00001E0E  3C3C 0001               1405              MOVE    #1,D6
00001E12  4243                    1406              CLR     D3
00001E14  4E75                    1407              RTS
00001E16                          1408              
00001E16                          1409  OR_NOTLEFT     ;check other direction
00001E16  B67C 0004               1410              CMP     #%100,D3
00001E1A  6600 0010               1411              BNE     OR_NOTRIGHTBYTE
00001E1E  4EB9 00001F42           1412              JSR     SIZEISBYTE
00001E24  3C3C 0002               1413              MOVE    #2,D6
00001E28  4243                    1414              CLR     D3
00001E2A  4E75                    1415              RTS
00001E2C                          1416              
00001E2C                          1417  OR_NOTRIGHTBYTE
00001E2C  B67C 0005               1418              CMP     #%101,D3
00001E30  6600 0010               1419              BNE     OR_NOTRIGHTWORD
00001E34  4EB9 00001F52           1420              JSR     SIZEISWORD
00001E3A  3C3C 0002               1421              MOVE    #2,D6
00001E3E  4243                    1422              CLR     D3
00001E40  4E75                    1423              RTS
00001E42                          1424  
00001E42                          1425  OR_NOTRIGHTWORD
00001E42  B67C 0006               1426              CMP     #%110,D3
00001E46  6600 FDA2               1427              BNE     INVALID_EA
00001E4A  4EB9 00001F62           1428              JSR     SIZEISLONG
00001E50  3C3C 0002               1429              MOVE    #2,D6
00001E54  4243                    1430              CLR     D3
00001E56  4E75                    1431              RTS 
00001E58                          1432  
00001E58                          1433              
00001E58                          1434  
00001E58                          1435                     
00001E58                          1436  ****************************
00001E58                          1437  
00001E58                          1438                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001E58                          1439                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001E58                          1440  GETSIZE_ADD
00001E58  4EB8 1AF2               1441              JSR     bits8to10
00001E5C  B67C 0000               1442              CMP     #%000,D3
00001E60  6600 0010               1443              BNE     ADD_NOTBYTE
00001E64  4EB9 00001F42           1444              JSR     SIZEISBYTE
00001E6A  3C3C 0001               1445              MOVE    #1,D6
00001E6E  4243                    1446              CLR     D3
00001E70  4E75                    1447              RTS
00001E72                          1448          
00001E72                          1449  ADD_NOTBYTE 
00001E72  B67C 0001               1450              CMP     #%001,D3
00001E76  6600 0010               1451              BNE     ADD_NOTWORD
00001E7A  4EB9 00001F52           1452              JSR     SIZEISWORD
00001E80  3C3C 0001               1453              MOVE    #1,D6
00001E84  4243                    1454              CLR     D3
00001E86  4E75                    1455              RTS
00001E88                          1456              
00001E88                          1457  ADD_NOTWORD
00001E88  B67C 0002               1458              CMP     #%010,D3
00001E8C  6600 0010               1459              BNE     ADD_NOTLEFT
00001E90  4EB9 00001F62           1460              JSR     SIZEISLONG
00001E96  3C3C 0001               1461              MOVE    #1,D6
00001E9A  4243                    1462              CLR     D3
00001E9C  4E75                    1463              RTS
00001E9E                          1464              
00001E9E                          1465  ADD_NOTLEFT     ;check other direction
00001E9E  B67C 0004               1466              CMP     #%100,D3
00001EA2  6600 0010               1467              BNE     ADD_NOTRIGHTBYTE
00001EA6  4EB9 00001F42           1468              JSR     SIZEISBYTE
00001EAC  3C3C 0002               1469              MOVE    #2,D6
00001EB0  4243                    1470              CLR     D3
00001EB2  4E75                    1471              RTS
00001EB4                          1472              
00001EB4                          1473  ADD_NOTRIGHTBYTE
00001EB4  B67C 0005               1474              CMP     #%101,D3
00001EB8  6600 0010               1475              BNE     ADD_NOTRIGHTWORD
00001EBC  4EB9 00001F52           1476              JSR     SIZEISWORD
00001EC2  3C3C 0002               1477              MOVE    #2,D6
00001EC6  4243                    1478              CLR     D3
00001EC8  4E75                    1479              RTS
00001ECA                          1480  
00001ECA                          1481  ADD_NOTRIGHTWORD
00001ECA  B67C 0006               1482              CMP     #%110,D3
00001ECE  6600 FD1A               1483              BNE     INVALID_EA
00001ED2  4EB9 00001F62           1484              JSR     SIZEISLONG
00001ED8  3C3C 0002               1485              MOVE    #2,D6
00001EDC  4243                    1486              CLR     D3
00001EDE  4E75                    1487              RTS 
00001EE0                          1488                               
00001EE0                          1489                       
00001EE0                          1490                       
00001EE0                          1491  *****************************                  
00001EE0                          1492  GETSIZE_ADDI
00001EE0  4EB8 1AF2               1493          JSR     bits8to10
00001EE4  B67C 0000               1494          CMP     #%000,D3
00001EE8  6600 000C               1495          BNE     ADDI_NOTBYTE
00001EEC  4EB9 00001F42           1496          JSR     SIZEISBYTE
00001EF2  4243                    1497          CLR     D3
00001EF4  4E75                    1498          RTS
00001EF6                          1499  
00001EF6                          1500  ADDI_NOTBYTE
00001EF6  B67C 0001               1501          CMP     #%001,D3
00001EFA  6600 000C               1502          BNE     ADDI_NOTWORD
00001EFE  4EB9 00001F52           1503          JSR     SIZEISWORD
00001F04  4243                    1504          CLR     D3
00001F06  4E75                    1505          RTS
00001F08                          1506          
00001F08                          1507  ADDI_NOTWORD
00001F08  B67C 0002               1508          CMP     #%010,D3
00001F0C  6600 FCDC               1509          BNE     INVALID_EA
00001F10  4EB9 00001F62           1510          JSR     SIZEISLONG
00001F16  4243                    1511          CLR     D3
00001F18  4E75                    1512          RTS
00001F1A                          1513          
00001F1A                          1514                              
00001F1A                          1515                       
00001F1A                          1516  ********************************          
00001F1A                          1517                       
00001F1A                          1518                       
00001F1A                          1519  ********************************                     
00001F1A                          1520  GETSIZE_ADDA
00001F1A  4EB8 1AF2               1521          JSR     bits8to10
00001F1E  B67C 0003               1522          CMP     #%011,D3
00001F22  6600 000C               1523          BNE     ADDA_NOTWORD
00001F26  4EB9 00001F52           1524          JSR     SIZEISWORD
00001F2C  4243                    1525          CLR     D3
00001F2E  4E75                    1526          RTS
00001F30                          1527          
00001F30                          1528  
00001F30                          1529          
00001F30                          1530  ADDA_NOTWORD
00001F30  B67C 0007               1531          CMP     #%111,D3
00001F34  6600 FCB4               1532          BNE     INVALID_EA
00001F38  4EB9 00001F62           1533          JSR     SIZEISLONG
00001F3E  4243                    1534          CLR     D3
00001F40  4E75                    1535          RTS
00001F42                          1536  **********************************        
00001F42                          1537      
00001F42                          1538  SIZEISBYTE
00001F42  1CFC 002E               1539         MOVE.B   #'.',(A6)+
00001F46  1CFC 0042               1540         MOVE.B   #'B',(A6)+
00001F4A  1CFC 0020               1541         MOVE.B   #' ',(A6)+
00001F4E  4243                    1542         CLR      D3
00001F50  4E75                    1543         RTS
00001F52                          1544  
00001F52                          1545  SIZEISWORD    
00001F52  1CFC 002E               1546         MOVE.B   #'.',(A6)+
00001F56  1CFC 0057               1547         MOVE.B   #'W',(A6)+
00001F5A  1CFC 0020               1548         MOVE.B   #' ',(A6)+
00001F5E  4243                    1549         CLR      D3
00001F60  4E75                    1550         RTS
00001F62                          1551                  
00001F62                          1552  SIZEISLONG    
00001F62  1CFC 002E               1553         MOVE.B   #'.',(A6)+
00001F66  1CFC 004C               1554         MOVE.B   #'L',(A6)+
00001F6A  1CFC 0020               1555         MOVE.B   #' ',(A6)+
00001F6E                          1556  
00001F6E  4243                    1557         CLR      D3
00001F70  4E75                    1558         RTS
00001F72                          1559                  
00001F72                          1560       
00001F72= 00000001                1561  BUFFER DC.L 1     
00001F76                          1562      INCLUDE 'helpers.x68'
00001F76  1019                    1563  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001F78  4EB9 00001F90           1564                          JSR     sub_breakDownAs     *breaks down ASCII code
00001F7E  D280                    1565                          ADD.L   D0,D1               *load that char into D1
00001F80  0C11 0000               1566                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001F84  6700 0006               1567                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001F88  E989                    1568                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001F8A  60EA                    1569                          BRA     sub_AsToHeLoop      *loops through again
00001F8C                          1570                          
00001F8C  2E01                    1571  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001F8E  4E75                    1572                          RTS
00001F90  B03C 0030               1573  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001F94  6D00 002A               1574                          BLT     as_ERROR                        
00001F98                          1575                          
00001F98  B03C 0039               1576                          CMP.B    #$39,D0            *is it an A-F letter?
00001F9C  6E00 000C               1577                          BGT     as_LETTER
00001FA0                          1578                          
00001FA0  6000 0002               1579                          BRA     as_NUMBER
00001FA4                          1580                                                 
00001FA4  0400 0030               1581  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001FA8  4E75                    1582                          RTS
00001FAA                          1583                          
00001FAA  B03C 0041               1584  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001FAE  6D00 0010               1585                          BLT     as_ERROR
00001FB2                          1586                          
00001FB2  B03C 0046               1587                          CMP.B     #$46, D0
00001FB6  6E00 0008               1588                          BGT     as_ERROR
00001FBA                          1589                          
00001FBA  0400 0037               1590                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001FBE  4E75                    1591                          RTS
00001FC0                          1592                          
00001FC0  43F9 65727200           1593  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001FC6  103C 000D               1594                          MOVE.B  #13,D0
00001FCA  4E4F                    1595                          TRAP    #15  
00001FCC                          1596  sub_StartReadingData    
00001FCC  0801 0000               1597                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001FD0  6600 0006               1598                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001FD4                          1599                          
00001FD4  7E00                    1600                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001FD6  4E75                    1601  srdFinish               RTS
00001FD8                          1602  
00001FD8  43F8 1162               1603  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001FDC  103C 000E               1604                          MOVE.B  #14,D0
00001FE0  4E4F                    1605                          TRAP    #15
00001FE2                          1606                          
00001FE2  7E01                    1607                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001FE4  60F0                    1608                          BRA     srdFinish
00001FE6                          1609  sub_EndReadingData  
00001FE6  0801 0000               1610                          BTST    #0,D1               *checks if LSB is 1, 
00001FEA  6600 0018               1611                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001FEE                          1612                          
00001FEE  B5CB                    1613                          CMP.L   A3,A2               *end address must be greater than start address
00001FF0  6E00 0004               1614                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001FF4                          1615  
00001FF4  4E75                    1616  erdFinish               RTS
00001FF6                          1617  
00001FF6  43F8 1189               1618  erdFailAddrOrder        LEA     addr_order_check,A1
00001FFA  103C 000E               1619                          MOVE.B  #14,D0
00001FFE  4E4F                    1620                          TRAP    #15
00002000                          1621                          
00002000  7E01                    1622                          MOVE.L  #1,D7
00002002  60F0                    1623                          BRA     erdFinish
00002004                          1624  
00002004  43F8 1162               1625  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00002008  103C 000E               1626                          MOVE.B  #14,D0
0000200C  4E4F                    1627                          TRAP    #15
0000200E                          1628                          
0000200E  7E01                    1629                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00002010  60E2                    1630                          BRA     erdFinish
00002012                          1631                          
00002012                          1632  
00002012                          1633  
00002012                          1634  
00002012                          1635  
00002012                          1636  
00002012                          1637  
00002012                          1638  
00002012                          1639  
00002012                          1640  -------------------- end include --------------------
00002012                          1641      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1BA8
ABSOLUTE_LONG_BUFFER  1BD8
ABSOLUTE_WORD_BUFFER  1BC6
ADD                 1482
ADDA                145E
ADDA_BUFFER         1466
ADDA_DISP           1248
ADDA_NOTWORD        1F30
ADDI                1516
ADDI_BUFFER         159C
ADDI_DES            1538
ADDI_DISP           124D
ADDI_NOTBYTE        1EF6
ADDI_NOTWORD        1F08
ADDI_SRC            152A
ADDQ                16A2
ADDQ_BUFFER         1700
ADDQ_DEST           16D6
ADDQ_DISP           1252
ADDQ_NOTBYTE        1D24
ADDQ_NOTWORD        1D36
ADDQ_SRC            16BE
ADDRESS_BUFFER      1BA2
ADDR_ODDBIT_MSG     1162
ADDR_ORDER_CHECK    1189
ADD_BUFFER          148A
ADD_DEST            14F4
ADD_DIRECTION_REVERSED  14BA
ADD_DISP            1244
ADD_NOTBYTE         1E72
ADD_NOTLEFT         1E9E
ADD_NOTRIGHTBYTE    1EB4
ADD_NOTRIGHTWORD    1ECA
ADD_NOTWORD         1E88
ADD_SRC             14D0
AND                 1960
AND_BUFFER          196A
AND_DISP            126D
ASL                 199C
ASL_BUFFER          19A6
ASL_DISP            127C
ASR                 1980
ASR_BUFFER          198A
ASR_DISP            1280
AS_ERROR            1FC0
AS_LETTER           1FAA
AS_NUMBER           1FA4
ATHENDLOOP          1F8C
BACKSLASHSIGH       12CA
BCC_DISP            1294
BGT_DISP            1298
BITS11TO13          1B04
BITS11TO16          1B26
BITS14TO16          1B16
BITS1TO10           1B36
BITS5TO7            1ACC
BITS5TO8            1AE0
BITS8TO10           1AF2
BLE_DISP            129C
BUFFER              1F72
CLOSEPAREN          12CE
CLR_DISP            1269
CMP                 1920
CMP_BUFFER          192A
CODE0000            134C
CODE0001            1360
CODE0010            1366
CODE0011            1366
CODE0100            1366
CODE0101            139A
CODE0110            139E
CODE0111            13A2
CODE1000            13A6
CODE1001            13B8
CODE1010            13BC
CODE1011            13C0
CODE1100            13C4
CODE1101            13D6
CODE1110            1422
CODE1111            1452
COMMASIGN           12C8
COPY_OPCODE         1C82
CR                  D
DIVU                173C
DIVU_BUFFER         1768
DIVU_DEST           17A8
DIVU_DISP           1260
DIVU_SRC            177E
DOLLARSIGN          12C2
DONE                1ACA
ENDTEST_MSG         11DD
ERDFAILADDRODDB     2004
ERDFAILADDRORDER    1FF6
ERDFINISH           1FF4
EXIT                12E7
FINISHER            1A9C
FIVE                1A70
FOUR                1A60
GETSIZE_ADD         1E58
GETSIZE_ADDA        1F1A
GETSIZE_ADDI        1EE0
GETSIZE_ADDQ        1D0E
GETSIZE_OR          1DD0
GETSIZE_SUB         1D48
HEXATABLE           12A0
INPUT_BUFFER        12DC
INSERT_NUM          1A20
INVALIDEA_DISP      1221
INVALID_DISP        121C
INVALID_EA          1BEA
INVALID_OP          1BEE
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            19F0
JMP_TABLE           12EC
JSR                 1C24
JSR_DISP            128C
LEA                 15B8
LEA_BUFFER          15DA
LEA_DEST            167E
LEA_DISP            1265
LEA_SRC             15EC
LF                  A
LINEBREAK           1219
LINECOUNT           12DB
LOCATION_ENDDATA    12E2
LOCATION_END_MSG    1145
LOCATION_STARTDATA  12DE
LOCATION_START_MSG  1126
LSL                 19B8
LSL_BUFFER          19C2
LSL_DISP            1274
LSR                 19D4
LSR_BUFFER          19DE
LSR_DISP            1278
MAIN_LOOP           108E
MINUSSIGN           12C6
MODE000             1B48
MODE001             1B4E
MODE010             1B56
MODE011             1B60
MODE100             1B6A
MODE101             1B78
MODE110             1B82
MODE111             1B8C
MOVEA_DISP          1232
MOVEB_BUFFER        145C
MOVEM               1C4A
MOVEM_DISP          123E
MOVEM_W             1C6A
MOVEQ               1718
MOVEQ_BUFFER        1722
MOVEQ_DISP          1238
MOVE_B              1456
MOVE_DISP           122D
MULS                1940
MULS_BUFFER         194A
MULS_DISP           125B
NOP                 1C08
NOP_DISP            1229
ONE                 1A30
ONEPAREN            1ABC
OPENPAREN           12CC
OR                  17D0
OR_BUFFER           180E
OR_DEST             1854
OR_DIRECTION_REVERSED  17F6
OR_DISP             1271
OR_NOTBYTE          1DEA
OR_NOTLEFT          1E16
OR_NOTRIGHTBYTE     1E2C
OR_NOTRIGHTWORD     1E42
OR_NOTWORD          1E00
OR_SRC              1822
PAUSE_MSG           11C3
PLUSSIGN            12C4
POSTINCR            1AAA
POUNDSIGN           12C0
PRINT_ADDRESS       1C88
PRINT_BUFFER        1CA8
PRINT_DEREF_ADDRESS  1CC4
PRINT_HEX           1D00
PRINT_ZEROES        1CE8
ROL_DISP            1284
ROR_DISP            1288
RTS                 1C16
RTS_DISP            1290
SEVEN               1A90
SIX                 1A80
SIZEISBYTE          1F42
SIZEISLONG          1F62
SIZEISWORD          1F52
SIZE_B              12D2
SIZE_L              12D8
SIZE_W              12D5
SPACE               12D0
SRDFAILADDRODDB     1FD8
SRDFINISH           1FD6
START               1000
SUB                 187C
SUB_ASTOHELOOP      1F76
SUB_BREAKDOWNAS     1F90
SUB_BUFFER          18B6
SUB_DEST            18F8
SUB_DIRECTION_REVERSED  18A2
SUB_DISP            1257
SUB_ENDREADINGDATA  1FE6
SUB_NOTBYTE         1D62
SUB_NOTLEFT         1D8E
SUB_NOTRIGHTBYTE    1DA4
SUB_NOTRIGHTWORD    1DBA
SUB_NOTWORD         1D78
SUB_SRC             18CE
SUB_STARTREADINGDATA  1FCC
TABLE_LENGTH        12E6
THREE               1A50
TWO                 1A40
WELCOME_MSG         10C2
