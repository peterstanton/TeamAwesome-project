00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2017 11:29:21 AM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C2              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001126             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012DC             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001D52             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 00001219             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001DA8             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001145             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012DC             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001D52             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 00001219             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001DC2             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012EC             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001D4E             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C                            80                   
0000109C                            81                   ;MOVE.W  (A2), D3
0000109C                            82  
0000109C                            83                   * TEST OPCODES
0000109C                            84                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109C                            85                   ;MOVE.W  #$4E71,D3 * NOP
0000109C                            86                   ; MOVE.W  #$4E75,D3 * RTS
0000109C                            87                   ; MOVE.W  #$4EB0,D3 * JSR
0000109C                            88                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109C                            89                   ;MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109C                            90                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109C                            91                   ;MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109C                            92                    ; MOVE.W    #$5613, D3    *ADDQ.B #$3, (A3)
0000109C                            93                   ; MOVE.W     #$7E70, D3 *MOVEQ
0000109C  363C 80C0                 94                    MOVE.W     #$80C0, D3 *DIVU
000010A0                            95                   ; MOVE.W     #$8000, D3 * OR
000010A0                            96                   ; MOVE.W        #$9000, D3 * SUB
000010A0                            97                   ; MOVE.W        #$B000, D3 * CMP
000010A0                            98                   ; MOVE.W        #$C1C0, D3 * MULS
000010A0                            99                   ; MOVE.W        #$C000, D3 * AND
000010A0                           100                   ; MOVE.W        #$E0F8, D3  *ASR
000010A0                           101                   ; MOVE.W        #$E1E2, D3  *ASL
000010A0                           102                   ; MOVE.W        #$E393, D3  *LSL
000010A0                           103                   ; MOVE.W        #$E2DC, D3  *LSR
000010A0                           104  
000010A0  4EB9 00001B74            105                   JSR    PRINT_ADDRESS
000010A6  544A                     106                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010A8  3A03                     107                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AA  183C 000C                108                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010AE  E86B                     109                   LSR.W   D4,D3       *Move the bits
000010B0  C6FC 0006                110                   MULU    #6,D3       *Form offset     
000010B4  4EB0 3000                111                   JSR     0(A0,D3)   *Jump indirect with index
000010B8  4EB9 00001B94            112                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010BE                           113                   
000010BE                           114                   ;CMP     A3,A2
000010BE                           115                   ;BGT     EXIT
000010BE                           116                   ;BRA     MAIN_LOOP
000010BE                           117                   
000010BE  6000 0227                118                   BRA      EXIT
000010C2                           119                                  
000010C2                           120      INCLUDE 'definitions.x68'
000010C2                           121  
000010C2  =0000000D                122  CR              EQU     $0D         carriage return
000010C2  =0000000A                123  LF              EQU     $0A         line feed
000010C2= 43 53 53 20 34 32 ...    124  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010E6= 42 79 20 54 65 61 ...    125                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001126= 45 6E 74 65 72 20 ...    126  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001145= 45 6E 74 65 72 20 ...    127  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001162= 41 64 64 72 65 73 ...    128  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
00001189= 45 6E 64 69 6E 67 ...    129  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C3= 50 72 65 73 73 20 ...    130  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011DD= 52 65 61 63 68 65 ...    131  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011F8= 54 72 79 20 61 6E ...    132                      DC.B    'Try another location? (yes/no): ',0
00001219= 0D 0A 00                 133  linebreak           DC.B    CR,LF,0
0000121C                           134                      
0000121C= 44 41 54 41 00           135  Invalid_disp        DC.B    'DATA',0
00001221= 57 52 4F 4E 47 45 ...    136  InvalidEA_disp      DC.B    'WRONGEA',0
00001229                           137  
00001229= 4E 4F 50 00              138  NOP_disp            DC.B    'NOP',0
0000122D= 4D 4F 56 45 00           139  MOVE_disp           DC.B    'MOVE',0
00001232= 4D 4F 56 45 41 00        140  MOVEA_disp          DC.B    'MOVEA',0
00001238= 4D 4F 56 45 51 00        141  MOVEQ_disp          DC.B    'MOVEQ',0
0000123E= 4D 4F 56 45 4D 00        142  MOVEM_disp          DC.B    'MOVEM',0
00001244= 41 44 44 00              143  ADD_disp            DC.B    'ADD',0
00001248= 41 44 44 41 00           144  ADDA_disp           DC.B    'ADDA',0
0000124D= 41 44 44 49 00           145  ADDI_disp           DC.B    'ADDI',0
00001252= 41 44 44 51 00           146  ADDQ_disp           DC.B    'ADDQ',0
00001257= 53 55 42 00              147  SUB_disp            DC.B    'SUB',0
0000125B= 4D 55 4C 53 00           148  MULS_disp           DC.B    'MULS',0
00001260= 44 49 56 55 00           149  DIVU_disp           DC.B    'DIVU',0
00001265= 4C 45 41 00              150  LEA_disp            DC.B    'LEA',0
00001269= 43 4C 52 00              151  CLR_disp            DC.B    'CLR',0
0000126D= 41 4E 44 00              152  AND_disp            DC.B    'AND',0
00001271= 4F 52 00                 153  OR_disp             DC.B    'OR',0
00001274= 4C 53 4C 00              154  LSL_disp            DC.B    'LSL',0
00001278= 4C 53 52 00              155  LSR_disp            DC.B    'LSR',0
0000127C= 41 53 4C 00              156  ASL_disp            DC.B    'ASL',0
00001280= 41 53 52 00              157  ASR_disp            DC.B    'ASR',0
00001284= 52 4F 4C 00              158  ROL_disp            DC.B    'ROL',0
00001288= 52 4F 52 00              159  ROR_disp            DC.B    'ROR',0
0000128C= 4A 53 52 00              160  JSR_disp            DC.B    'JSR',0
00001290= 52 54 53 00              161  RTS_disp            DC.B    'RTS',0
00001294= 42 43 43 00              162  BCC_disp            DC.B    'BCC',0
00001298= 42 47 54 00              163  BGT_disp            DC.B    'BGT',0    
0000129C= 42 4C 45 00              164  BLE_disp            DC.b    'BLE',0
000012A0                           165  
000012A0                           166  
000012A0= 30 00                    167  hexaTable               DC.B    '0',0
000012A2= 31 00                    168                          DC.B    '1',0
000012A4= 32 00                    169                          DC.B    '2',0
000012A6= 33 00                    170                          DC.B    '3',0
000012A8= 34 00                    171                          DC.B    '4',0
000012AA= 35 00                    172                          DC.B    '5',0
000012AC= 36 00                    173                          DC.B    '6',0
000012AE= 37 00                    174                          DC.B    '7',0
000012B0= 38 00                    175                          DC.B    '8',0
000012B2= 39 00                    176                          DC.B    '9',0
000012B4= 41 00                    177                          DC.B    'A',0
000012B6= 42 00                    178                          DC.B    'B',0
000012B8= 43 00                    179                          DC.B    'C',0
000012BA= 44 00                    180                          DC.B    'D',0
000012BC= 45 00                    181                          DC.B    'E',0
000012BE= 46 00                    182                          DC.B    'F',0
000012C0= 23 00                    183  poundsign               DC.B    '#',0
000012C2= 24 00                    184  dollarsign              DC.B    '$',0
000012C4= 2B 00                    185  plussign                DC.B    '+',0
000012C6= 2D 00                    186  minussign               DC.B    '-',0
000012C8= 2C 00                    187  commasign               DC.B    ',',0
000012CA= 2F 00                    188  backslashsigh           DC.B    '/',0
000012CC= 28 00                    189  openparen               DC.B    '(',0
000012CE= 29 00                    190  closeparen              DC.B    ')',0
000012D0= 20 00                    191  space                   DC.B    ' ',0   
000012D2= 2E 42 00                 192  size_b                  DC.B    '.B',0
000012D5= 2E 57 00                 193  size_w                  DC.B    '.W',0        
000012D8= 2E 4C 00                 194  size_l                  DC.B    '.L',0
000012DB                           195  
000012DB                           196  linecount               DS.B    1       *storeage for lines on a screen
000012DC= 01                       197  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012DE                           198  location_startData      DS.L    1       *location on where to start reading data
000012E2                           199  location_endData        DS.L    1       *location on where to end reading data
000012E6                           200  table_length            DS.B    1       *Number of spaces in the table to print to console
000012E7                           201  
000012E7                           202  
000012E7                           203  -------------------- end include --------------------
000012E7                           204             
000012E7                           205  EXIT                 
000012E8  FFFF FFFF                206         SIMHALT   
000012EC                           207  
000012EC                           208  
000012EC                           209  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012EC  4EF9 0000134C            210  jmp_table      JMP         code0000
000012F2                           211                  *ADDI
000012F2                           212  
000012F2  4EF9 00001360            213                 JMP         code0001
000012F8                           214                 *MOVE
000012F8                           215                 *MOVEA
000012F8                           216  
000012F8  4EF9 00001366            217                 JMP         code0010
000012FE                           218  
000012FE  4EF9 00001366            219                 JMP         code0011
00001304                           220  
00001304  4EF9 00001366            221                 JMP         code0100
0000130A                           222                             
0000130A  4EF9 0000139A            223                 JMP         code0101
00001310                           224                 * ADDQ
00001310                           225                  
00001310                           226        
00001310  4EF9 0000139E            227                 JMP         code0110
00001316                           228                 * BCC
00001316                           229                 * BGT
00001316                           230                 * BLE
00001316                           231                 
00001316  4EF9 000013A2            232                 JMP         code0111
0000131C                           233                 * MOVEQ
0000131C                           234  
0000131C  4EF9 000013A6            235                 JMP         code1000
00001322                           236                 * DIVU
00001322                           237                 * OR
00001322                           238  
00001322  4EF9 000013B8            239                 JMP         code1001
00001328                           240                  *SUB
00001328  4EF9 000013BC            241                 JMP         code1010
0000132E                           242                 
0000132E  4EF9 000013C0            243                 JMP         code1011
00001334                           244                 * CMP
00001334                           245                 
00001334  4EF9 000013C4            246                 JMP         code1100
0000133A                           247                 * MULS
0000133A                           248                 * AND
0000133A                           249          
0000133A  4EF9 000013D6            250                 JMP         code1101
00001340                           251                 *ADD
00001340                           252                 *ADDA
00001340  4EF9 00001422            253                 JMP         code1110
00001346                           254                 * ASR
00001346                           255                 * ASL
00001346                           256                 * LSL
00001346                           257                 * LSR
00001346                           258                 * ROL
00001346                           259                 * ROR
00001346                           260  
00001346  4EF9 00001452            261                 JMP         code1111
0000134C                           262  
0000134C                           263  
0000134C                           264  code0000      
0000134C  4EB9 000019CC            265                 JSR          bits5to8 // RETURNS INTO D3
00001352  B6BC 00000006            266                 CMP.L        #%0110, D3
00001358  6600 0780                267                 BNE          INVALID_OP
0000135C  6000 01B8                268                 BRA          ADDI  
00001360                           269  
00001360                           270  code0001      
00001360  4EB9 00001456            271                 JSR   MOVE_B
00001366                           272                 *MOVE.B
00001366                           273  
00001366                           274  code0010        
00001366                           275                  * MOVE.L
00001366                           276                  * MOVEA.L
00001366                           277  code0011        
00001366                           278                  *MOVEA.W
00001366                           279                  *MOVE.W
00001366                           280  
00001366                           281  code0100       
00001366  4EB9 00001B6E            282                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000136C                           283                  
0000136C                           284                 *NOP
0000136C  C47C 0FFF                285                 AND     #%0000111111111111,D2
00001370  B4BC 00000E71            286                 CMP.L   #%000111001110001, D2
00001376  6700 077C                287                 BEQ     NOP
0000137A                           288                 
0000137A                           289                 *RTS
0000137A  C47C 0FFF                290                 AND     #%0000111111111111,D2
0000137E  B4BC 00000E75            291                 CMP.L   #%0000111001110101, D2
00001384  6700 077C                292                 BEQ     RTS
00001388                           293  
00001388                           294                 *JSR
00001388  C47C 0FC0                295                 AND     #%0000111111000000,D2
0000138C  B4BC 00000E80            296                 CMP.L   #%0000111010000000,D2
00001392  6700 077C                297                 BEQ     JSR
00001396                           298                 
00001396                           299                 * MOVEM
00001396                           300                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001396                           301                ** AND     #%0000111110000000,D2
00001396                           302                 * DATA REGISTER
00001396                           303                ** CMP.L   #%0000100010000000, D2
00001396                           304                 ** JSR      MOVEM
00001396                           305                 * ADDRESS REGISTER (DECREMENTED)
00001396                           306                 ** CMP.L  #%0000110010000000, D2
00001396                           307                 ** JSR    MOVEM
00001396                           308                  
00001396                           309                  ** TO DO: BRANCH IF INVALID OPCODE
00001396                           310                  *LEA - if it's not the top codes, it's LEA
00001396  6000 0220                311                  BRA     LEA
0000139A                           312  code0101      
0000139A                           313  
0000139A  6000 0306                314                  BRA   ADDQ
0000139E                           315  
0000139E  6000 073A                316  code0110        BRA       INVALID_OP
000013A2                           317  
000013A2                           318  code0111       
000013A2  6000 0374                319                  BRA      MOVEQ
000013A6                           320  
000013A6                           321  code1000      
000013A6  4EB9 000019DE            322                  JSR        bits8to10
000013AC  B67C 0003                323                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013B0  6700 038A                324                  BEQ        DIVU
000013B4  6000 041A                325                  BRA        OR       ** OTHERWISE OR
000013B8                           326                  
000013B8                           327  
000013B8                           328  code1001       
000013B8  6000 0432                329                 BRA        SUB
000013BC  6000 071C                330  code1010       BRA       INVALID_OP
000013C0                           331  
000013C0                           332  code1011       
000013C0  6000 044A                333                 BRA         CMP
000013C4                           334  
000013C4                           335  code1100      
000013C4  4EB9 000019DE            336                  JSR        bits8to10
000013CA  B67C 0007                337                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013CE  6700 045C                338                  BEQ        MULS
000013D2  6000 0478                339                  BRA        AND       ** OTHERWISE AND
000013D6                           340  
000013D6                           341  code1101       
000013D6  4EB9 00001B6E            342                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013DC                           343                 *ADDA
000013DC  4EB9 000019DE            344                 JSR      bits8to10
000013E2  B67C 0003                345                 CMP      #%011, D3  ** WORD
000013E6  6700 0076                346                 BEQ      ADDA
000013EA  B67C 0007                347                 CMP      #%111, D3   ** LONG
000013EE  6700 006E                348                 BEQ      ADDA
000013F2                           349                 
000013F2                           350                 *ADD
000013F2  B67C 0000                351                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
000013F6  6700 008A                352                 BEQ      ADD
000013FA  B67C 0001                353                 CMP      #%001, D3   ** WORD TO DATA REGISTER
000013FE  6700 0082                354                 BEQ      ADD
00001402  B67C 0002                355                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001406  6700 007A                356                 BEQ      ADD
0000140A  B67C 0004                357                 CMP      #%100, D3   ** BYTE TO EA
0000140E  6700 0072                358                 BEQ      ADD
00001412  B67C 0005                359                 CMP      #%101, D3   ** WORD TO EA
00001416  6700 006A                360                 BEQ      ADD
0000141A  B67C 0006                361                 CMP      #%110, D3   ** LONG TO EA
0000141E  6700 0062                362                 BEQ      ADD
00001422                           363                 
00001422                           364  
00001422                           365  code1110       
00001422                           366                  * ASR
00001422  4EB9 00001A22            367                  JSR     bits1to10
00001428  B67C 0383                368                  CMP     #%1110000011,D3
0000142C  6700 043E                369                  BEQ     ASR
00001430                           370                  
00001430                           371                  * ASL
00001430  B67C 0387                372                  CMP     #%1110000111,D3
00001434  6700 0452                373                  BEQ     ASL
00001438                           374                  
00001438                           375                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001438                           376                  * LSL
00001438  4244                     377                  CLR     D4
0000143A  2803                     378                  MOVE.L  D3,D4
0000143C  C8BC 00A98671            379                  AND.L   #11110001,D4
00001442  B87C 01C7                380                  CMP     #%111000111,D4
00001446  6700 045C                381                  BEQ     LSL
0000144A                           382                  
0000144A                           383                  * LSR
0000144A  B67C 038B                384                  CMP     #%1110001011,D3
0000144E  6700 0470                385                  BEQ     LSR
00001452                           386                  
00001452                           387                  * ROL
00001452                           388                  
00001452                           389                  * ROR
00001452                           390  
00001452  6000 0686                391  code1111       BRA      INVALID_OP
00001456                           392  
00001456                           393  MOVE_B
00001456  4EB9 0000145C            394                 JSR     MOVEB_BUFFER
0000145C                           395  MOVEB_BUFFER
0000145C  4E71                     396                  NOP              
0000145E                           397  * ----------------------------------
0000145E                           398  
0000145E                           399  ADDA    
0000145E  4EB9 00001466            400                 JSR     ADDA_BUFFER
00001464  4E75                     401                 RTS
00001466                           402                  
00001466                           403  ADDA_BUFFER
00001466  1CFC 0041                404                 MOVE.B   #'A',(A6)+
0000146A  1CFC 0044                405                 MOVE.B   #'D', (A6)+  
0000146E  1CFC 0044                406                 MOVE.B   #'D', (A6)+
00001472  1CFC 0041                407                 MOVE.B   #'A', (A6)+
00001476  4EB9 00001CF6            408                 JSR      GETSIZE_ADDA
0000147C  1CFC 0020                409                 MOVE.B   #' ', (A6)+
00001480  4E75                     410                 RTS
00001482                           411                 
00001482                           412                 
00001482                           413                 
00001482                           414  *********************************************               
00001482                           415  ADD    
00001482  4EB9 0000148A            416                 JSR     ADD_BUFFER
00001488  4E75                     417                 RTS
0000148A                           418                  
0000148A                           419  ADD_BUFFER
0000148A  1CFC 0041                420                 MOVE.B   #'A',(A6)+
0000148E  1CFC 0044                421                 MOVE.B   #'D', (A6)+  
00001492  1CFC 0044                422                 MOVE.B   #'D', (A6)+
00001496  4EB9 00001C34            423                 JSR      GETSIZE_ADD
0000149C                           424                 
0000149C                           425                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
0000149C  BC7C 0001                426                 CMP      #1,D6
000014A0  6600 0018                427                 BNE      ADD_DIRECTION_REVERSED
000014A4  4EB9 000014D0            428                 JSR      ADD_SRC
000014AA  1CFC 002C                429                 MOVE.B   #',', (A6)+
000014AE  1CFC 0020                430                 MOVE.B   #' ', (A6)+
000014B2  4EB9 000014F4            431                 JSR      ADD_DEST
000014B8  4E75                     432                 RTS
000014BA                           433                 
000014BA                           434                 
000014BA                           435  ADD_DIRECTION_REVERSED
000014BA  4246                     436                 CLR      D6
000014BC  4EB9 000014F4            437                 JSR      ADD_DEST
000014C2  1CFC 002C                438                 MOVE.B   #',', (A6)+
000014C6  1CFC 0020                439                 MOVE.B   #' ', (A6)+
000014CA  4EB9 000014D0            440                 JSR      ADD_SRC             
000014D0                           441                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014D0                           442                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014D0                           443                 
000014D0                           444  ***********************************************        
000014D0                           445  
000014D0                           446  
000014D0                           447  
000014D0                           448  ****************************************************************************************
000014D0                           449  ADD_SRC
000014D0                           450  
000014D0  4EB9 000019F0            451                  JSR    bits11to13
000014D6  3803                     452                  MOVE   D3,D4
000014D8  41F9 000018DC            453                  LEA     jmp_mode,A0    *Index into the table
000014DE  C6FC 0006                454                  MULU   #6,D3
000014E2  4EB0 3000                455                  JSR    0(A0,D3)     
000014E6  4EB9 00001A02            456                  JSR    bits14to16
000014EC  4EB9 0000190C            457                  JSR    insert_num
000014F2  4E75                     458                  RTS
000014F4                           459  
000014F4                           460  ADD_DEST
000014F4  363C 0000                461                  MOVE.W #%000,D3     ;Can only have a data register.
000014F8  3803                     462                  MOVE   D3,D4
000014FA  41F9 000018DC            463                  LEA     jmp_mode,A0    *Index into the table
00001500  C6FC 0006                464                  MULU    #6,D3       *Form offset     
00001504  4EB0 3000                465                  JSR     0(A0,D3)   *Jump indirect with index
00001508                           466                  
00001508  4EB9 000019B8            467                  JSR     bits5to7
0000150E  4EB9 0000190C            468                  JSR     insert_num
00001514  4E75                     469                  RTS
00001516                           470  
00001516                           471  ADDI
00001516  4EB9 0000159C            472                  JSR     ADDI_BUFFER
0000151C  4EB9 0000152A            473                  JSR     ADDI_SRC
00001522  4EB9 00001538            474                  JSR     ADDI_DES
00001528  4E75                     475                  RTS
0000152A                           476                  
0000152A                           477  ADDI_SRC                        
0000152A  1CFC 0023                478                  MOVE.B  #'#', (A6)+
0000152E  1CFC 002C                479                  MOVE.B  #',', (A6)+
00001532  1CFC 0020                480                  MOVE.B  #' ', (A6)+
00001536  4E75                     481                  RTS
00001538                           482                    ** TODO: IMPLEMENT THIS IN EA
00001538                           483                  ** Immediate field—Data immediately following the instruction.
00001538                           484                  **If size = 00, the data is the low-order byte of the immediate word.
00001538                           485                  **If size = 01, the data is the entire immediate word.
00001538                           486                  **If size = 10, the data is the next two immediate words. 
00001538                           487  ADDI_DES
00001538                           488                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001538                           489                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001538  4EB9 000019F0            490                 JSR      bits11to13
0000153E  B67C 0001                491                 CMP      #%001, D3 **AN
00001542  6700 0592                492                 BEQ      INVALID_EA
00001546  B67C 0005                493                 CMP      #%101, D3 **COMPLICATED
0000154A  6700 058A                494                 BEQ      INVALID_EA
0000154E  B67C 0006                495                 CMP      #%110, D3 **COMPLICATED
00001552  6700 0582                496                 BEQ      INVALID_EA
00001556                           497                 
00001556  4EB9 00001A12            498                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000155C  B67C 003C                499                 CMP      #%111100,D3 // immediate data
00001560  6700 0574                500                 BEQ      INVALID_EA
00001564  B67C 003A                501                 CMP      #%111010,D3 // complicated
00001568  6700 056C                502                 BEQ      INVALID_EA
0000156C  B67C 003B                503                 CMP      #%111011,D3 // complicated
00001570  6700 0564                504                 BEQ      INVALID_EA
00001574                           505                 
00001574  4EB9 000019F0            506                 JSR      bits11to13 ** grab bits to jump with\
0000157A  3803                     507                 MOVE     D3,D4
0000157C  41F9 000018DC            508                 LEA     jmp_mode,A0    *Index into the table
00001582  C6FC 0006                509                 MULU    #6,D3       *Form offset     
00001586  4EB0 3000                510                 JSR     0(A0,D3)   *Jump indirect with index
0000158A                           511                 
0000158A  4243                     512                 CLR     D3
0000158C  4EB9 00001A02            513                 JSR     bits14to16
00001592  4EB9 0000190C            514                 JSR     insert_num
00001598  4244                     515                 CLR     D4
0000159A                           516                 
0000159A  4E75                     517                 RTS
0000159C                           518                 
0000159C                           519                             
0000159C                           520  ADDI_BUFFER
0000159C  1CFC 0041                521                 MOVE.B   #'A',(A6)+
000015A0  1CFC 0044                522                 MOVE.B   #'D', (A6)+  
000015A4  1CFC 0044                523                 MOVE.B   #'D', (A6)+
000015A8  1CFC 0049                524                 MOVE.B   #'I', (A6)+
000015AC                           525                 
000015AC  4EB9 00001CBC            526                 JSR      GETSIZE_ADDI
000015B2                           527                 
000015B2                           528                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015B2                           529                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015B2  1CFC 0020                530                 MOVE.B   #' ', (A6)+
000015B6  4E75                     531                 RTS
000015B8                           532                              
000015B8                           533  LEA
000015B8  4EB9 000019DE            534                 JSR      bits8to10   // 1 1 1
000015BE  B47C 0007                535                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015C2  6600 0516                536                 BNE      INVALID_OP
000015C6  4EB9 000015DA            537                 JSR      LEA_BUFFER
000015CC  4EB9 000015EC            538                 JSR      LEA_SRC
000015D2  4EB9 0000167E            539                 JSR      LEA_DEST
000015D8  4E75                     540                 RTS
000015DA                           541                 
000015DA                           542  LEA_BUFFER 
000015DA  1CFC 004C                543                 MOVE.B   #'L',(A6)+
000015DE  1CFC 0045                544                 MOVE.B   #'E', (A6)+  
000015E2  1CFC 0041                545                 MOVE.B   #'A', (A6)+
000015E6  1CFC 0020                546                 MOVE.B   #' ', (A6)+
000015EA  4E75                     547                 RTS
000015EC                           548            
000015EC                           549  LEA_SRC
000015EC                           550              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
000015EC  4EB9 000019F0            551              JSR      bits11to13  // source mode - D3
000015F2  B67C 0000                552              CMP      #%000, D3
000015F6  6700 04DE                553              BEQ      INVALID_EA
000015FA  B67C 0001                554              CMP      #%001, D3
000015FE  6700 04D6                555              BEQ      INVALID_EA
00001602  B67C 0003                556              CMP      #%011, D3
00001606  6700 04CE                557              BEQ      INVALID_EA
0000160A  B67C 0004                558              CMP      #%100, D3
0000160E  6700 04C6                559              BEQ      INVALID_EA
00001612  B67C 0005                560              CMP      #%101, D3
00001616  6700 04BE                561              BEQ      INVALID_EA
0000161A  B67C 0006                562              CMP      #%110, D3
0000161E  6700 04B6                563              BEQ      INVALID_EA
00001622                           564  
00001622                           565              
00001622                           566              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00001622  4EB9 00001A02            567              JSR      bits14to16 // source register - d4
00001628  B67C 0004                568              CMP      #%100, D3
0000162C  6700 04A8                569              BEQ      INVALID_EA
00001630  B67C 0002                570              CMP      #%010, D3
00001634  6700 04A0                571              BEQ      INVALID_EA
00001638  B67C 0003                572              CMP      #%011, D3
0000163C  6700 0498                573              BEQ      INVALID_EA
00001640                           574              
00001640                           575  
00001640  4EB9 00001A12            576               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001646  B67C 003C                577               CMP      #%111100,D3 // immediate data
0000164A  6700 048A                578               BEQ      INVALID_EA
0000164E  B67C 003A                579               CMP      #%111010,D3 // complicated
00001652  6700 0482                580               BEQ      INVALID_EA
00001656  B67C 003B                581               CMP      #%111011,D3 // complicated
0000165A  6700 047A                582               BEQ      INVALID_EA
0000165E                           583     
0000165E  4EB9 000019F0            584               JSR      bits11to13 ** grab mode bits to jump with
00001664  3803                     585               MOVE    D3,D4
00001666                           586  
00001666  41F9 000018DC            587               LEA     jmp_mode,A0    *Index into the table
0000166C  C6FC 0006                588               MULU    #6,D3       *Form offset     
00001670  4EB0 3000                589               JSR     0(A0,D3)   *Jump indirect with index
00001674                           590   
00001674  1CFC 002C                591               MOVE.B     #',', (A6)+
00001678  1CFC 0020                592               MOVE.B     #' ', (A6)+
0000167C                           593  
0000167C  4E75                     594               RTS
0000167E                           595               
0000167E                           596  LEA_DEST    
0000167E  4244                     597                  CLR     D4
00001680  41F9 000018DC            598                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00001686  363C 0001                599                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
0000168A  3803                     600                  MOVE    D3,D4
0000168C  C6FC 0006                601                  MULU    #6,D3       *Form offset     
00001690  4EB0 3000                602                  JSR     0(A0,D3)   *Jump indirect with index
00001694                           603                  
00001694  4EB9 000019B8            604                  JSR     bits5to7
0000169A  4EB9 0000190C            605                  JSR     insert_num
000016A0                           606                  
000016A0  4E75                     607                  RTS
000016A2                           608  
000016A2                           609  
000016A2                           610  ADDQ
000016A2  4EB9 00001700            611                  JSR     ADDQ_BUFFER
000016A8  4EB9 000016BE            612                  JSR     ADDQ_SRC
000016AE  1CFC 002C                613                  MOVE.B  #',',(A6)+
000016B2  1CFC 0020                614                  MOVE.B  #' ',(A6)+
000016B6  4EB9 000016D6            615                  JSR     ADDQ_DEST
000016BC  4E75                     616                  RTS                 ;BRA     PRINT_BUFFER
000016BE                           617  
000016BE                           618  ADDQ_SRC
000016BE  4EB9 000019B8            619                  JSR     bits5to7
000016C4  1CFC 0023                620                  MOVE.B  #'#',(A6)+
000016C8  183C 0000                621                  MOVE.B  #%000,D4
000016CC  4EB9 0000190C            622                  JSR     insert_num
000016D2  4244                     623                  CLR     D4
000016D4  4E75                     624                  RTS
000016D6                           625                  
000016D6                           626  ADDQ_DEST
000016D6  4EB9 000019F0            627                 JSR      bits11to13
000016DC  3803                     628                 MOVE     D3,D4
000016DE  41F9 000018DC            629                 LEA     jmp_mode,A0    *Index into the table
000016E4  C6FC 0006                630                 MULU    #6,D3       *Form offset     
000016E8  4EB0 3000                631                 JSR     0(A0,D3)   *Jump indirect with index
000016EC  4243                     632                 CLR     D3
000016EE  4EB9 00001A02            633                 JSR     bits14to16
000016F4  4EB9 0000190C            634                 JSR     insert_num
000016FA  4244                     635                 CLR     D4
000016FC  4243                     636                 CLR     D3
000016FE  4E75                     637                 RTS
00001700                           638                 
00001700                           639  
00001700                           640  ADDQ_BUFFER
00001700  1CFC 0041                641                 MOVE.B   #'A',(A6)+
00001704  1CFC 0044                642                 MOVE.B   #'D', (A6)+  
00001708  1CFC 0044                643                 MOVE.B   #'D', (A6)+
0000170C  1CFC 0051                644                 MOVE.B   #'Q', (A6)+
00001710  4EB9 00001BFA            645                 JSR      GETSIZE_ADDQ
00001716                           646                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00001716                           647                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001716  4E75                     648                 RTS               
00001718                           649                 
00001718                           650  MOVEQ
00001718  4EB9 00001722            651                  JSR     MOVEQ_BUFFER
0000171E  6000 0474                652                  BRA     PRINT_BUFFER
00001722                           653  
00001722                           654  MOVEQ_BUFFER
00001722  1CFC 004D                655                 MOVE.B   #'M',(A6)+
00001726  1CFC 004F                656                 MOVE.B   #'O', (A6)+  
0000172A  1CFC 0056                657                 MOVE.B   #'V', (A6)+
0000172E  1CFC 0045                658                 MOVE.B   #'E', (A6)+
00001732  1CFC 0051                659                 MOVE.B   #'Q', (A6)+
00001736  1CFC 0020                660                 MOVE.B   #' ', (A6)+
0000173A  4E75                     661                 RTS
0000173C                           662  
0000173C                           663  
0000173C                           664  ****************************************
0000173C                           665  
0000173C                           666  DIVU
0000173C  4EB9 000019DE            667                  JSR     bits8to10
00001742  B67C 0003                668                  CMP     #%011,D3
00001746  6600 038E                669                  BNE     INVALID_EA
0000174A  4243                     670                  CLR     D3
0000174C  4EB9 00001768            671                  JSR     DIVU_BUFFER
00001752  4EB9 0000177E            672                  JSR     DIVU_SRC
00001758  1CFC 002C                673                  MOVE.B  #',',(A6)+
0000175C  1CFC 0020                674                  MOVE.B  #' ',(A6)+
00001760  4EB9 000017A8            675                  JSR     DIVU_DEST
00001766  4E75                     676                  RTS                 ;BRA     PRINT_BUFFER
00001768                           677  
00001768                           678  DIVU_BUFFER
00001768  1CFC 0044                679                 MOVE.B   #'D',(A6)+
0000176C  1CFC 0049                680                 MOVE.B   #'I', (A6)+  
00001770  1CFC 0056                681                 MOVE.B   #'V', (A6)+
00001774  1CFC 0055                682                 MOVE.B   #'U', (A6)+
00001778  1CFC 0020                683                 MOVE.B   #' ', (A6)+
0000177C  4E75                     684                 RTS  
0000177E                           685                 
0000177E                           686                 
0000177E                           687  DIVU_SRC
0000177E  4EB9 000019F0            688                 JSR      bits11to13
00001784  3803                     689                 MOVE     D3,D4
00001786  41F9 000018DC            690                 LEA     jmp_mode,A0    *Index into the table
0000178C  C6FC 0006                691                 MULU    #6,D3       *Form offset     
00001790  4EB0 3000                692                 JSR     0(A0,D3)   *Jump indirect with index  
00001794  4243                     693                 CLR     D3
00001796  4EB9 00001A02            694                 JSR     bits14to16
0000179C  4EB9 0000190C            695                 JSR     insert_num
000017A2  4244                     696                 CLR     D4
000017A4  4243                     697                 CLR     D3
000017A6  4E75                     698                 RTS
000017A8                           699                 
000017A8                           700  DIVU_DEST
000017A8  363C 0000                701                 MOVE    #%000,D3     ;DIVU destination can only be a data register.
000017AC  3803                     702                 MOVE    D3,D4
000017AE  41F9 000018DC            703                 LEA     jmp_mode,A0    *Index into the table
000017B4  C6FC 0006                704                 MULU    #6,D3       *Form offset     
000017B8  4EB0 3000                705                 JSR     0(A0,D3)   *Jump indirect with index  
000017BC  4243                     706                 CLR     D3
000017BE  4EB9 000019B8            707                 JSR     bits5to7
000017C4  4EB9 0000190C            708                 JSR     insert_num
000017CA  4244                     709                 CLR     D4
000017CC  4243                     710                 CLR     D3
000017CE  4E75                     711                 RTS
000017D0                           712                 
000017D0                           713                 
000017D0                           714                 
000017D0                           715  *****************************************               
000017D0                           716                 
000017D0                           717  OR    
000017D0  4EB9 000017DA            718                 JSR     OR_BUFFER
000017D6  6000 03BC                719                 BRA     PRINT_BUFFER
000017DA                           720                  
000017DA                           721  OR_BUFFER
000017DA  1CFC 004F                722                 MOVE.B   #'O',(A6)+
000017DE  1CFC 0052                723                 MOVE.B   #'R', (A6)+  
000017E2  1CFC 002E                724                 MOVE.B   #'.', (A6)+
000017E6                           725                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017E6                           726                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017E6                           727                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017E6  1CFC 0020                728                 MOVE.B   #' ', (A6)+
000017EA  4E75                     729                 RTS   
000017EC                           730  
000017EC                           731  SUB   
000017EC  4EB9 000017F6            732                 JSR     SUB_BUFFER
000017F2  6000 03A0                733                 BRA     PRINT_BUFFER               
000017F6                           734  
000017F6                           735  SUB_BUFFER
000017F6  1CFC 0053                736                 MOVE.B   #'S',(A6)+
000017FA  1CFC 0055                737                 MOVE.B   #'U', (A6)+  
000017FE  1CFC 0042                738                 MOVE.B   #'B', (A6)+
00001802  1CFC 002E                739                 MOVE.B   #'.', (A6)+
00001806                           740                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001806                           741                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001806                           742                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001806  1CFC 0020                743                 MOVE.B   #' ', (A6)+
0000180A  4E75                     744                 RTS  
0000180C                           745  CMP   
0000180C  4EB9 00001816            746                 JSR     CMP_BUFFER
00001812  6000 0380                747                 BRA     PRINT_BUFFER
00001816                           748                  
00001816                           749  CMP_BUFFER
00001816  1CFC 0043                750                 MOVE.B   #'C',(A6)+
0000181A  1CFC 004D                751                 MOVE.B   #'M', (A6)+  
0000181E  1CFC 0050                752                 MOVE.B   #'P', (A6)+
00001822  1CFC 002E                753                 MOVE.B   #'.', (A6)+
00001826                           754                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001826                           755                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001826                           756                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001826  1CFC 0020                757                 MOVE.B   #' ', (A6)+
0000182A  4E75                     758                 RTS   
0000182C                           759                 
0000182C                           760  MULS
0000182C  4EB9 00001836            761                  JSR     MULS_BUFFER
00001832  6000 0360                762                  BRA     PRINT_BUFFER
00001836                           763  
00001836                           764  MULS_BUFFER
00001836  1CFC 004D                765                 MOVE.B   #'M',(A6)+
0000183A  1CFC 0055                766                 MOVE.B   #'U', (A6)+  
0000183E  1CFC 004C                767                 MOVE.B   #'L', (A6)+
00001842  1CFC 0053                768                 MOVE.B   #'S', (A6)+
00001846  1CFC 0020                769                 MOVE.B   #' ', (A6)+
0000184A  4E75                     770                 RTS
0000184C                           771  
0000184C                           772  AND    
0000184C  4EB9 00001856            773                 JSR     AND_BUFFER
00001852  6000 0340                774                 BRA     PRINT_BUFFER
00001856                           775                  
00001856                           776  AND_BUFFER
00001856  1CFC 0041                777                 MOVE.B   #'A',(A6)+
0000185A  1CFC 004E                778                 MOVE.B   #'N', (A6)+  
0000185E  1CFC 0044                779                 MOVE.B   #'D', (A6)+
00001862  1CFC 002E                780                 MOVE.B   #'.', (A6)+
00001866                           781                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001866                           782                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001866                           783                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001866  1CFC 0020                784                 MOVE.B   #' ', (A6)+
0000186A  4E75                     785                 RTS    
0000186C                           786  
0000186C                           787  ASR     
0000186C  4EB9 00001876            788                  JSR     ASR_BUFFER
00001872  6000 0320                789                  BRA     PRINT_BUFFER
00001876                           790  
00001876                           791  ASR_BUFFER
00001876  1CFC 0041                792                 MOVE.B   #'A',(A6)+
0000187A  1CFC 0053                793                 MOVE.B   #'S', (A6)+  
0000187E  1CFC 0052                794                 MOVE.B   #'R', (A6)+
00001882  1CFC 0020                795                 MOVE.B   #' ', (A6)+
00001886  4E75                     796                 RTS      
00001888                           797  
00001888                           798  ASL     
00001888  4EB9 00001892            799                  JSR     ASL_BUFFER
0000188E  6000 0304                800                  BRA     PRINT_BUFFER
00001892                           801  
00001892                           802  ASL_BUFFER
00001892  1CFC 0041                803                 MOVE.B   #'A',(A6)+
00001896  1CFC 0053                804                 MOVE.B   #'S', (A6)+  
0000189A  1CFC 004C                805                 MOVE.B   #'L', (A6)+
0000189E  1CFC 0020                806                 MOVE.B   #' ', (A6)+
000018A2  4E75                     807                 RTS     
000018A4                           808  
000018A4                           809  LSL     
000018A4  4EB9 000018AE            810                  JSR     LSL_BUFFER
000018AA  6000 02E8                811                  BRA     PRINT_BUFFER
000018AE                           812  
000018AE                           813  LSL_BUFFER
000018AE  1CFC 004C                814                 MOVE.B   #'L',(A6)+
000018B2  1CFC 0053                815                 MOVE.B   #'S', (A6)+  
000018B6  1CFC 004C                816                 MOVE.B   #'L', (A6)+
000018BA  1CFC 0020                817                 MOVE.B   #' ', (A6)+
000018BE  4E75                     818                 RTS     
000018C0                           819  
000018C0                           820  LSR     
000018C0  4EB9 000018CA            821                  JSR     LSR_BUFFER
000018C6  6000 02CC                822                  BRA     PRINT_BUFFER
000018CA                           823  
000018CA                           824  LSR_BUFFER
000018CA  1CFC 004C                825                 MOVE.B   #'L',(A6)+
000018CE  1CFC 0053                826                 MOVE.B   #'S', (A6)+  
000018D2  1CFC 0052                827                 MOVE.B   #'R', (A6)+
000018D6  1CFC 0020                828                 MOVE.B   #' ', (A6)+
000018DA  4E75                     829                 RTS       
000018DC                           830                 
000018DC                           831  jmp_mode
000018DC  4EF9 00001A34            832                  JMP     MODE000  ** DN
000018E2  4EF9 00001A3A            833                  JMP     MODE001  ** AN
000018E8  4EF9 00001A42            834                  JMP     MODE010  ** (AN)
000018EE  4EF9 00001A4C            835                  JMP     MODE011  ** (AN)+   
000018F4  4EF9 00001A56            836                  JMP     MODE100  ** -(AN)
000018FA  4EF9 00001A64            837                  JMP     MODE101  **INVALID
00001900  4EF9 00001A6E            838                  JMP     MODE110  **INVALID
00001906  4EF9 00001A78            839                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
0000190C                           840  
0000190C                           841                  
0000190C                           842  insert_num
0000190C                           843                  
0000190C                           844                  ;get number from D3
0000190C  B67C 0000                845                  CMP     #%000,D3       ;0
00001910  6600 000A                846                  BNE     ONE         
00001914  1CFC 0030                847                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
00001918  6000 006E                848                  BRA     FINISHER
0000191C                           849                  
0000191C  B67C 0001                850  ONE             CMP     #%001,D3       ;1
00001920  6600 000A                851                  BNE     TWO 
00001924  1CFC 0031                852                  MOVE.B  #'1',(A6)+
00001928  6000 005E                853                  BRA     FINISHER
0000192C                           854  
0000192C                           855                  
0000192C  B67C 0002                856  TWO             CMP     #%010,D3        ;2
00001930  6600 000A                857                  BNE     THREE
00001934  1CFC 0032                858                  MOVE.B  #'2',(A6)+
00001938  6000 004E                859                  BRA     FINISHER
0000193C                           860                  
0000193C  B67C 0003                861  THREE           CMP     #%011,D3        ;3
00001940  6600 000A                862                  BNE     FOUR
00001944  1CFC 0033                863                  MOVE.B  #'3',(A6)+
00001948  6000 003E                864                  BRA     FINISHER
0000194C                           865                  
0000194C  B67C 0004                866  FOUR            CMP     #%100,D3        ;4
00001950  6600 000A                867                  BNE     FIVE
00001954  1CFC 0034                868                  MOVE.B  #'4',(A6)+
00001958  6000 002E                869                  BRA     FINISHER
0000195C                           870                  
0000195C  B67C 0005                871  FIVE            CMP     #%101,D3        ;5
00001960  6600 000A                872                  BNE     SIX
00001964  1CFC 0035                873                  MOVE.B  #'5',(A6)+
00001968  6000 001E                874                  BRA     FINISHER
0000196C                           875                  
0000196C  B67C 0006                876  SIX             CMP     #%110,D3        ;6
00001970  6600 000A                877                  BNE     SEVEN
00001974  1CFC 0036                878                  MOVE.B  #'6',(A6)+
00001978  6000 000E                879                  BRA     FINISHER
0000197C                           880                  
0000197C  B67C 0007                881  SEVEN           CMP     #%111,D3        ;7
00001980  1CFC 0037                882                  MOVE.B  #'7',(A6)+
00001984  6000 0002                883                  BRA     FINISHER
00001988                           884                  
00001988                           885  FINISHER                
00001988                           886                  
00001988                           887                  ;check D4, do we need to do stuff?
00001988  B87C 0002                888                  CMP     #%010,D4
0000198C  6600 0008                889                  BNE     POSTINCR
00001990  1CFC 0029                890                  MOVE.B  #')',(A6)+
00001994  4E75                     891                  RTS
00001996                           892                  
00001996  B87C 0003                893  POSTINCR        CMP     #%011,D4
0000199A  6600 000C                894                  BNE     ONEPAREN
0000199E  1CFC 0029                895                  MOVE.B  #')',(A6)+
000019A2  1CFC 002B                896                  MOVE.B  #'+',(A6)+
000019A6  4E75                     897                  RTS
000019A8                           898                  
000019A8  B87C 0004                899  ONEPAREN        CMP     #%100,D4
000019AC  6600 0008                900                  BNE     DONE
000019B0  1CFC 0029                901                  MOVE.B  #')',(A6)+                
000019B4                           902  
000019B4  4244                     903                  CLR     D4
000019B6  4E75                     904  DONE            RTS
000019B8                           905  
000019B8                           906          
000019B8                           907                 
000019B8                           908  bits5to7
000019B8  4243                     909                 CLR      D3
000019BA  4EB9 00001B6E            910                 JSR      COPY_OPCODE  // opcode copied to D2
000019C0  C47C 0E00                911                 AND      #%0000111000000000, D2
000019C4  E09A                     912                 ROR.L    #8, D2          // rotate bits so isolated at the end
000019C6  E29A                     913                 ROR.L    #1, D2
000019C8  3602                     914                 MOVE.W   D2,D3 // moving isolated bits into d3
000019CA  4E75                     915                 RTS
000019CC                           916                 
000019CC                           917  bits5to8
000019CC  4243                     918                 CLR      D3
000019CE  4EB9 00001B6E            919                 JSR      COPY_OPCODE  // opcode copied to D2
000019D4  C47C 0F00                920                 AND      #%0000111100000000, D2
000019D8  E09A                     921                 ROR.L    #8, D2          // rotate bits so isolated at the end
000019DA  3602                     922                 MOVE.W   D2,D3 // moving isolated bits into d3
000019DC  4E75                     923                 RTS
000019DE                           924                 
000019DE                           925  bits8to10
000019DE  4243                     926                 CLR      D3
000019E0  4EB9 00001B6E            927                 JSR      COPY_OPCODE  // opcode copied to D2
000019E6  C47C 01C0                928                 AND      #%0000000111000000, D2
000019EA  EC9A                     929                 ROR.L    #6, D2          // rotate bits so isolated at the end
000019EC  3602                     930                 MOVE.W   D2,D3 // moving isolated bits into d3
000019EE  4E75                     931                 RTS               
000019F0                           932             
000019F0                           933  bits11to13
000019F0  4243                     934                 CLR      D3
000019F2  4EB9 00001B6E            935                 JSR      COPY_OPCODE  // opcode copied to D2
000019F8  C47C 0038                936                 AND      #%0000000000111000, D2
000019FC  E69A                     937                 ROR.L    #3, D2          // rotate bits so isolated at the end
000019FE  3602                     938                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A00  4E75                     939                 RTS
00001A02                           940             
00001A02                           941  bits14to16
00001A02  4243                     942                 CLR      D3
00001A04  4EB9 00001B6E            943                 JSR      COPY_OPCODE  // opcode copied to D2
00001A0A  C47C 0007                944                 AND      #%0000000000000111, D2
00001A0E  3602                     945                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A10  4E75                     946                 RTS
00001A12                           947  bits11to16
00001A12  4243                     948                 CLR      D3
00001A14  4EB9 00001B6E            949                 JSR      COPY_OPCODE  // opcode copied to D2
00001A1A  C47C 003F                950                 AND      #%0000000000111111, D2
00001A1E  3602                     951                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A20  4E75                     952                 RTS
00001A22                           953  bits1to10
00001A22  4243                     954                 CLR      D3
00001A24  4EB9 00001B6E            955                 JSR      COPY_OPCODE  // opcode copied to D2
00001A2A  C47C FFC0                956                 AND      #%1111111111000000, D2
00001A2E  EC9A                     957                 ROR.L    #6, D2
00001A30  3602                     958                 MOVE.W   D2,D3 // moving isolated bits into d3
00001A32  4E75                     959                 RTS
00001A34                           960  ** DN       
00001A34                           961  MODE000         
00001A34  1CFC 0044                962                  MOVE.B  #'D',(A6)+     
00001A38  4E75                     963                  RTS
00001A3A                           964  
00001A3A                           965  ** AN
00001A3A                           966  MODE001         
00001A3A  4EB9 00001A8E            967                  JSR ADDRESS_BUFFER  
00001A40  4E75                     968                  RTS      
00001A42                           969  
00001A42                           970   ** (AN)
00001A42                           971  MODE010         
00001A42  1CFC 0028                972                  MOVE.B  #'(', (A6)+
00001A46  1CFC 0041                973                  MOVE.B  #'A',(A6)+  
00001A4A  4E75                     974                  RTS      
00001A4C                           975  
00001A4C                           976  ** (AN)+ 
00001A4C                           977  MODE011         
00001A4C  1CFC 0028                978                  MOVE.B  #'(', (A6)+
00001A50  1CFC 0041                979                  MOVE.B  #'A',(A6)+ 
00001A54  4E75                     980                  RTS       
00001A56                           981  
00001A56                           982   ** -(AN)
00001A56                           983  MODE100         
00001A56  1CFC 002D                984                  MOVE.B  #'-', (A6)+
00001A5A  1CFC 0028                985                  MOVE.B  #'(', (A6)+
00001A5E  1CFC 0041                986                  MOVE.B  #'A',(A6)+
00001A62  4E75                     987                  RTS
00001A64                           988                  
00001A64                           989  **INVALID               
00001A64                           990  MODE101         
00001A64  1CFC 0028                991                  MOVE.B  #'(', (A6)+
00001A68  1CFC 0041                992                  MOVE.B  #'A',(A6)+ 
00001A6C  4E75                     993                  RTS
00001A6E                           994                  
00001A6E                           995  **INVALID
00001A6E                           996  MODE110         
00001A6E  1CFC 0028                997                  MOVE.B  #'(', (A6)+
00001A72  1CFC 0041                998                  MOVE.B  #'A',(A6)+
00001A76  4E75                     999                  RTS  
00001A78                          1000  
00001A78                          1001  ** ABSOLUTE AND IMMEDIATE            
00001A78                          1002  MODE111         
00001A78                          1003                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001A78  1CFC 0024               1004                 MOVE.B   #'$', (A6)+  
00001A7C  4EB9 00001BB0           1005                 JSR      PRINT_DEREF_ADDRESS
00001A82  544A                    1006                 ADD.W    #2, A2
00001A84  4EB9 00001BB0           1007                 JSR      PRINT_DEREF_ADDRESS
00001A8A  544A                    1008                 ADD.W    #2, A2
00001A8C  4E75                    1009                 RTS            
00001A8E                          1010                                          
00001A8E                          1011  ADDRESS_BUFFER
00001A8E  1CFC 0041               1012                  MOVE.B  #'A',(A6)+ 
00001A92  4E75                    1013                  RTS
00001A94                          1014                 
00001A94                          1015  ABSOLUTE_BUFFER
00001A94  4243                    1016                 CLR      D3
00001A96  3604                    1017                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001A98  1CF8 0024               1018                 MOVE.B   '$', (A6)+
00001A9C  B67C 0000               1019                 CMP.W    #%000, D3
00001AA0  6700 0010               1020                 BEQ      ABSOLUTE_WORD_BUFFER
00001AA4  4243                    1021                 CLR      D3
00001AA6  3604                    1022                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001AA8  B67C 0001               1023                 CMP.W    #%001, D3
00001AAC  6700 0016               1024                 BEQ      ABSOLUTE_LONG_BUFFER
00001AB0  4E75                    1025                 RTS
00001AB2                          1026                 
00001AB2                          1027  ABSOLUTE_WORD_BUFFER
00001AB2                          1028                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001AB2                          1029                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001AB2  1CFC 0046               1030                         MOVE.B #'F', (A6)+ 
00001AB6  1CFC 0046               1031                         MOVE.B #'F', (A6)+ 
00001ABA  1CFC 0046               1032                         MOVE.B #'F', (A6)+ 
00001ABE  1CFC 0046               1033                         MOVE.B #'F', (A6)+ 
00001AC2  4E75                    1034                         RTS       
00001AC4                          1035                    
00001AC4                          1036  ABSOLUTE_LONG_BUFFER       
00001AC4                          1037                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001AC4                          1038                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001AC4  1CFC 0047               1039                         MOVE.B #'G', (A6)+ 
00001AC8  1CFC 0047               1040                         MOVE.B #'G', (A6)+ 
00001ACC  1CFC 0047               1041                         MOVE.B #'G', (A6)+ 
00001AD0  1CFC 0047               1042                         MOVE.B #'G', (A6)+
00001AD4  4E75                    1043                         RTS 
00001AD6                          1044  
00001AD6                          1045  INVALID_EA  
00001AD6                          1046                  * TODO: IMPLEMENT
00001AD6                          1047                  *** CLEAR OUT A6
00001AD6                          1048                  ** PUT INVALID MESSAGE INTO A6
00001AD6  6000 F80F               1049                  BRA EXIT
00001ADA                          1050  INVALID_OP  
00001ADA                          1051                  ** TODO: IMPLEMENT
00001ADA                          1052                 *** CLEAR OUT A6
00001ADA                          1053                  ** PUT INVALID MESSAGE INTO A6
00001ADA  1CFC 0044               1054                      MOVE.B #'D', (A6)+
00001ADE  1CFC 0041               1055                      MOVE.B #'A', (A6)+
00001AE2  1CFC 0054               1056                      MOVE.B #'T', (A6)+
00001AE6  1CFC 0041               1057                      MOVE.B #'A', (A6)+ 
00001AEA  1CFC 0020               1058                      MOVE.B #' ', (A6)+ 
00001AEE  4EB9 00001BB0           1059                      JSR     PRINT_DEREF_ADDRESS
00001AF4                          1060            
00001AF4                          1061                  
00001AF4  1CFC 004E               1062  NOP                 MOVE.B #'N', (A6)+
00001AF8  1CFC 004F               1063                      MOVE.B #'O', (A6)+
00001AFC  1CFC 0050               1064                      MOVE.B #'P', (A6)+
00001B00  4E75                    1065                      RTS
00001B02                          1066  
00001B02                          1067                   
00001B02                          1068  RTS      
00001B02  43F8 1290               1069                      LEA     RTS_disp,A1          
00001B06  103C 000E               1070                      MOVE.B  #14,D0
00001B0A  4E4F                    1071                      TRAP    #15 
00001B0C  6000 F7D9               1072                      BRA     EXIT
00001B10                          1073  JSR      
00001B10  4DF9 00001D4E           1074                      LEA     BUFFER, A6
00001B16  1CFC 004A               1075                      MOVE.B #'J', (A6)+
00001B1A  1CFC 0053               1076                      MOVE.B #'S', (A6)+
00001B1E  1CFC 0052               1077                      MOVE.B #'R', (A6)+
00001B22  1CFC 0020               1078                      MOVE.B #' ', (A6)+
00001B26  43F9 00001D4E           1079                      LEA     BUFFER, A1
00001B2C                          1080                      ** BITS 10 - 12 MODE       
00001B2C                          1081                      ** BITS 13 - 16 REGISTER
00001B2C  103C 000E               1082                      MOVE.B  #14,D0
00001B30  4E4F                    1083                      TRAP    #15 
00001B32  6000 F7B3               1084                      BRA     EXIT
00001B36                          1085                    
00001B36                          1086  MOVEM      
00001B36                          1087                     
00001B36                          1088                      ** SIZE SUBROUTINE
00001B36                          1089                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001B36  C47C 0040               1090                      AND #%0000000001000000,D2 
00001B3A                          1091                      * WORD
00001B3A  B4BC 00000040           1092                      CMP.L   #%0000000001000000,D2
00001B40  4EB9 00001B56           1093                      JSR     MOVEM_W 
00001B46                          1094                      *LONG
00001B46  B4BC 00000040           1095                      CMP.L   #%0000000001000000,D2 
00001B4C                          1096                     ** JSR     MOVEM_L
00001B4C  103C 000E               1097                      MOVE.B  #14,D0
00001B50  4E4F                    1098                      TRAP    #15
00001B52  6000 F793               1099                      BRA     EXIT 
00001B56                          1100                      
00001B56                          1101  MOVEM_W 
00001B56  43F8 123E               1102                       LEA     MOVEM_disp,A1
00001B5A                          1103                      * PRINT MOVEM
00001B5A  103C 000E               1104                       MOVE.B  #14,D0
00001B5E  4E4F                    1105                       TRAP    #15
00001B60                          1106          
00001B60                          1107                      * PRINT WORD PORTION
00001B60  41F8 12D5               1108                       LEA     size_w, A0
00001B64  103C 000E               1109                       MOVE.B  #14,D0
00001B68  4E4F                    1110                       TRAP    #15 
00001B6A                          1111          
00001B6A  6000 F77B               1112                       BRA     EXIT 
00001B6E                          1113       
00001B6E                          1114     
00001B6E                          1115  COPY_OPCODE 
00001B6E                          1116                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001B6E  4242                    1117                       CLR    D2  
00001B70  3405                    1118                       MOVE.W D5,D2 
00001B72  4E75                    1119                       RTS  
00001B74                          1120  
00001B74                          1121  PRINT_ADDRESS     
00001B74  4242                    1122                   CLR         D2
00001B76  143C 0010               1123                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B7A  220A                    1124                   MOVE.L      A2,D1        
00001B7C  103C 000F               1125                   MOVE.B      #15,D0          
00001B80  4E4F                    1126                   TRAP        #15            
00001B82  1CFC 0020               1127                   MOVE.B      #' ', (A6)+
00001B86  1CFC 0020               1128                   MOVE.B      #' ', (A6)+
00001B8A  1CFC 0020               1129                   MOVE.B      #' ', (A6)+
00001B8E  1CFC 0020               1130                   MOVE.B      #' ', (A6)+
00001B92  4E75                    1131                   RTS     
00001B94                          1132  PRINT_BUFFER    
00001B94  1CFC 0000               1133                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B98  43F9 00001D4E           1134                 LEA      BUFFER, A1
00001B9E  303C 000E               1135                 MOVE.W   #14,D0
00001BA2  4E4F                    1136                 TRAP     #15
00001BA4  43F8 1219               1137                 LEA     linebreak,A1            *appends line at the end of the user input
00001BA8  103C 000E               1138                 MOVE.B  #14,D0
00001BAC  4E4F                    1139                 TRAP    #15
00001BAE  4E75                    1140                 RTS  
00001BB0                          1141  
00001BB0                          1142  PRINT_DEREF_ADDRESS
00001BB0  1CFC 0000               1143                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001BB4  43F9 00001D4E           1144                 LEA      BUFFER, A1
00001BBA  303C 000E               1145                 MOVE.W   #14,D0
00001BBE  4E4F                    1146                 TRAP     #15
00001BC0  4DF9 00001D4E           1147                 LEA      BUFFER, A6
00001BC6  4242                    1148                 CLR      D2
00001BC8  0C52 0000               1149                 CMP      #0, (A2)
00001BCC  6700 0006               1150                 BEQ      PRINT_ZEROES
00001BD0  6000 001A               1151                 BRA      PRINT_HEX
00001BD4                          1152                 
00001BD4                          1153  PRINT_ZEROES
00001BD4  4DF9 00001D4E           1154                LEA   BUFFER,A6
00001BDA  1CFC 0030               1155                MOVE.B #'0', (A6)+
00001BDE  1CFC 0030               1156                MOVE.B #'0', (A6)+
00001BE2  1CFC 0030               1157                MOVE.B #'0', (A6)+
00001BE6  1CFC 0030               1158                MOVE.B #'0', (A6)+
00001BEA  4E75                    1159                RTS
00001BEC                          1160  PRINT_HEX
00001BEC  143C 0010               1161                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001BF0  3212                    1162                 MOVE.W      (A2),D1        // print the hex value in current address      
00001BF2  103C 000F               1163                 MOVE.B      #15,D0          
00001BF6  4E4F                    1164                 TRAP        #15 
00001BF8  4E75                    1165                 RTS
00001BFA                          1166   ***************************
00001BFA                          1167  
00001BFA                          1168  GETSIZE_ADDQ
00001BFA                          1169                   
00001BFA                          1170                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001BFA                          1171                 
00001BFA  4EB8 19DE               1172             JSR      bits8to10
00001BFE  B67C 0000               1173             CMP      #%000,D3
00001C02  6600 000C               1174             BNE      ADDQ_NOTBYTE
00001C06  4EB9 00001D1E           1175             JSR      SIZEISBYTE
00001C0C  4243                    1176             CLR      D3
00001C0E  4E75                    1177             RTS
00001C10                          1178             
00001C10                          1179  ADDQ_NOTBYTE
00001C10  B67C 0001               1180             CMP      #%001,D3
00001C14  6600 000C               1181             BNE      ADDQ_NOTWORD
00001C18  4EB9 00001D2E           1182             JSR      SIZEISWORD
00001C1E  4243                    1183             CLR      D3
00001C20  4E75                    1184             RTS
00001C22                          1185             
00001C22                          1186  ADDQ_NOTWORD
00001C22  B67C 0002               1187             CMP      #%010,D3
00001C26  6600 FEAE               1188             BNE      INVALID_EA
00001C2A  4EB9 00001D3E           1189             JSR      SIZEISLONG
00001C30  4243                    1190             CLR      D3
00001C32  4E75                    1191             RTS
00001C34                          1192                   
00001C34                          1193                                   
00001C34                          1194  ****************************
00001C34                          1195  ****************************
00001C34                          1196                     
00001C34                          1197  ****************************
00001C34                          1198  
00001C34                          1199                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001C34                          1200                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001C34                          1201  GETSIZE_ADD
00001C34  4EB8 19DE               1202              JSR     bits8to10
00001C38  B67C 0000               1203              CMP     #%000,D3
00001C3C  6600 0010               1204              BNE     ADD_NOTBYTE
00001C40  4EB9 00001D1E           1205              JSR     SIZEISBYTE
00001C46  3C3C 0001               1206              MOVE    #1,D6
00001C4A  4243                    1207              CLR     D3
00001C4C  4E75                    1208              RTS
00001C4E                          1209          
00001C4E                          1210  ADD_NOTBYTE 
00001C4E  B67C 0001               1211              CMP     #%001,D3
00001C52  6600 0010               1212              BNE     ADD_NOTWORD
00001C56  4EB9 00001D2E           1213              JSR     SIZEISWORD
00001C5C  3C3C 0001               1214              MOVE    #1,D6
00001C60  4243                    1215              CLR     D3
00001C62  4E75                    1216              RTS
00001C64                          1217              
00001C64                          1218  ADD_NOTWORD
00001C64  B67C 0002               1219              CMP     #%010,D3
00001C68  6600 0010               1220              BNE     ADD_NOTLEFT
00001C6C  4EB9 00001D3E           1221              JSR     SIZEISLONG
00001C72  3C3C 0001               1222              MOVE    #1,D6
00001C76  4243                    1223              CLR     D3
00001C78  4E75                    1224              RTS
00001C7A                          1225              
00001C7A                          1226  ADD_NOTLEFT     ;check other direction
00001C7A  B67C 0004               1227              CMP     #%100,D3
00001C7E  6600 0010               1228              BNE     ADD_NOTRIGHTBYTE
00001C82  4EB9 00001D1E           1229              JSR     SIZEISBYTE
00001C88  3C3C 0002               1230              MOVE    #2,D6
00001C8C  4243                    1231              CLR     D3
00001C8E  4E75                    1232              RTS
00001C90                          1233              
00001C90                          1234  ADD_NOTRIGHTBYTE
00001C90  B67C 0005               1235              CMP     #%101,D3
00001C94  6600 0010               1236              BNE     ADD_NOTRIGHTWORD
00001C98  4EB9 00001D2E           1237              JSR     SIZEISWORD
00001C9E  3C3C 0002               1238              MOVE    #2,D6
00001CA2  4243                    1239              CLR     D3
00001CA4  4E75                    1240              RTS
00001CA6                          1241  
00001CA6                          1242  ADD_NOTRIGHTWORD
00001CA6  B67C 0006               1243              CMP     #%110,D3
00001CAA  6600 FE2A               1244              BNE     INVALID_EA
00001CAE  4EB9 00001D3E           1245              JSR     SIZEISLONG
00001CB4  3C3C 0002               1246              MOVE    #2,D6
00001CB8  4243                    1247              CLR     D3
00001CBA  4E75                    1248              RTS 
00001CBC                          1249                               
00001CBC                          1250                       
00001CBC                          1251                       
00001CBC                          1252  *****************************                  
00001CBC                          1253  GETSIZE_ADDI
00001CBC  4EB8 19DE               1254          JSR     bits8to10
00001CC0  B67C 0000               1255          CMP     #%000,D3
00001CC4  6600 000C               1256          BNE     ADDI_NOTBYTE
00001CC8  4EB9 00001D1E           1257          JSR     SIZEISBYTE
00001CCE  4243                    1258          CLR     D3
00001CD0  4E75                    1259          RTS
00001CD2                          1260  
00001CD2                          1261  ADDI_NOTBYTE
00001CD2  B67C 0001               1262          CMP     #%001,D3
00001CD6  6600 000C               1263          BNE     ADDI_NOTWORD
00001CDA  4EB9 00001D2E           1264          JSR     SIZEISWORD
00001CE0  4243                    1265          CLR     D3
00001CE2  4E75                    1266          RTS
00001CE4                          1267          
00001CE4                          1268  ADDI_NOTWORD
00001CE4  B67C 0002               1269          CMP     #%010,D3
00001CE8  6600 FDEC               1270          BNE     INVALID_EA
00001CEC  4EB9 00001D3E           1271          JSR     SIZEISLONG
00001CF2  4243                    1272          CLR     D3
00001CF4  4E75                    1273          RTS
00001CF6                          1274          
00001CF6                          1275                              
00001CF6                          1276                       
00001CF6                          1277  ********************************          
00001CF6                          1278                       
00001CF6                          1279                       
00001CF6                          1280  ********************************                     
00001CF6                          1281  GETSIZE_ADDA
00001CF6  4EB8 19DE               1282          JSR     bits8to10
00001CFA  B67C 0003               1283          CMP     #%011,D3
00001CFE  6600 000C               1284          BNE     ADDA_NOTWORD
00001D02  4EB9 00001D2E           1285          JSR     SIZEISWORD
00001D08  4243                    1286          CLR     D3
00001D0A  4E75                    1287          RTS
00001D0C                          1288          
00001D0C                          1289  
00001D0C                          1290          
00001D0C                          1291  ADDA_NOTWORD
00001D0C  B67C 0007               1292          CMP     #%111,D3
00001D10  6600 FDC4               1293          BNE     INVALID_EA
00001D14  4EB9 00001D3E           1294          JSR     SIZEISLONG
00001D1A  4243                    1295          CLR     D3
00001D1C  4E75                    1296          RTS
00001D1E                          1297  **********************************        
00001D1E                          1298      
00001D1E                          1299  SIZEISBYTE
00001D1E  1CFC 002E               1300         MOVE.B   #'.',(A6)+
00001D22  1CFC 0042               1301         MOVE.B   #'B',(A6)+
00001D26  1CFC 0020               1302         MOVE.B   #' ',(A6)+
00001D2A  4243                    1303         CLR      D3
00001D2C  4E75                    1304         RTS
00001D2E                          1305  
00001D2E                          1306  SIZEISWORD    
00001D2E  1CFC 002E               1307         MOVE.B   #'.',(A6)+
00001D32  1CFC 0057               1308         MOVE.B   #'W',(A6)+
00001D36  1CFC 0020               1309         MOVE.B   #' ',(A6)+
00001D3A  4243                    1310         CLR      D3
00001D3C  4E75                    1311         RTS
00001D3E                          1312                  
00001D3E                          1313  SIZEISLONG    
00001D3E  1CFC 002E               1314         MOVE.B   #'.',(A6)+
00001D42  1CFC 004C               1315         MOVE.B   #'L',(A6)+
00001D46  1CFC 0020               1316         MOVE.B   #' ',(A6)+
00001D4A                          1317  
00001D4A  4243                    1318         CLR      D3
00001D4C  4E75                    1319         RTS
00001D4E                          1320                  
00001D4E                          1321       
00001D4E= 00000001                1322  BUFFER DC.L 1     
00001D52                          1323      INCLUDE 'helpers.x68'
00001D52  1019                    1324  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001D54  4EB9 00001D6C           1325                          JSR     sub_breakDownAs     *breaks down ASCII code
00001D5A  D280                    1326                          ADD.L   D0,D1               *load that char into D1
00001D5C  0C11 0000               1327                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001D60  6700 0006               1328                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001D64  E989                    1329                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001D66  60EA                    1330                          BRA     sub_AsToHeLoop      *loops through again
00001D68                          1331                          
00001D68  2E01                    1332  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001D6A  4E75                    1333                          RTS
00001D6C  B03C 0030               1334  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001D70  6D00 002A               1335                          BLT     as_ERROR                        
00001D74                          1336                          
00001D74  B03C 0039               1337                          CMP.B    #$39,D0            *is it an A-F letter?
00001D78  6E00 000C               1338                          BGT     as_LETTER
00001D7C                          1339                          
00001D7C  6000 0002               1340                          BRA     as_NUMBER
00001D80                          1341                                                 
00001D80  0400 0030               1342  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001D84  4E75                    1343                          RTS
00001D86                          1344                          
00001D86  B03C 0041               1345  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001D8A  6D00 0010               1346                          BLT     as_ERROR
00001D8E                          1347                          
00001D8E  B03C 0046               1348                          CMP.B     #$46, D0
00001D92  6E00 0008               1349                          BGT     as_ERROR
00001D96                          1350                          
00001D96  0400 0037               1351                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001D9A  4E75                    1352                          RTS
00001D9C                          1353                          
00001D9C  43F9 65727200           1354  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001DA2  103C 000D               1355                          MOVE.B  #13,D0
00001DA6  4E4F                    1356                          TRAP    #15  
00001DA8                          1357  sub_StartReadingData    
00001DA8  0801 0000               1358                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001DAC  6600 0006               1359                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001DB0                          1360                          
00001DB0  7E00                    1361                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001DB2  4E75                    1362  srdFinish               RTS
00001DB4                          1363  
00001DB4  43F8 1162               1364  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001DB8  103C 000E               1365                          MOVE.B  #14,D0
00001DBC  4E4F                    1366                          TRAP    #15
00001DBE                          1367                          
00001DBE  7E01                    1368                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001DC0  60F0                    1369                          BRA     srdFinish
00001DC2                          1370  sub_EndReadingData  
00001DC2  0801 0000               1371                          BTST    #0,D1               *checks if LSB is 1, 
00001DC6  6600 0018               1372                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001DCA                          1373                          
00001DCA  B5CB                    1374                          CMP.L   A3,A2               *end address must be greater than start address
00001DCC  6E00 0004               1375                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001DD0                          1376  
00001DD0  4E75                    1377  erdFinish               RTS
00001DD2                          1378  
00001DD2  43F8 1189               1379  erdFailAddrOrder        LEA     addr_order_check,A1
00001DD6  103C 000E               1380                          MOVE.B  #14,D0
00001DDA  4E4F                    1381                          TRAP    #15
00001DDC                          1382                          
00001DDC  7E01                    1383                          MOVE.L  #1,D7
00001DDE  60F0                    1384                          BRA     erdFinish
00001DE0                          1385  
00001DE0  43F8 1162               1386  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001DE4  103C 000E               1387                          MOVE.B  #14,D0
00001DE8  4E4F                    1388                          TRAP    #15
00001DEA                          1389                          
00001DEA  7E01                    1390                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001DEC  60E2                    1391                          BRA     erdFinish
00001DEE                          1392                          
00001DEE                          1393  
00001DEE                          1394  
00001DEE                          1395  
00001DEE                          1396  
00001DEE                          1397  
00001DEE                          1398  
00001DEE                          1399  
00001DEE                          1400  
00001DEE                          1401  -------------------- end include --------------------
00001DEE                          1402      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1A94
ABSOLUTE_LONG_BUFFER  1AC4
ABSOLUTE_WORD_BUFFER  1AB2
ADD                 1482
ADDA                145E
ADDA_BUFFER         1466
ADDA_DISP           1248
ADDA_NOTWORD        1D0C
ADDI                1516
ADDI_BUFFER         159C
ADDI_DES            1538
ADDI_DISP           124D
ADDI_NOTBYTE        1CD2
ADDI_NOTWORD        1CE4
ADDI_SRC            152A
ADDQ                16A2
ADDQ_BUFFER         1700
ADDQ_DEST           16D6
ADDQ_DISP           1252
ADDQ_NOTBYTE        1C10
ADDQ_NOTWORD        1C22
ADDQ_SRC            16BE
ADDRESS_BUFFER      1A8E
ADDR_ODDBIT_MSG     1162
ADDR_ORDER_CHECK    1189
ADD_BUFFER          148A
ADD_DEST            14F4
ADD_DIRECTION_REVERSED  14BA
ADD_DISP            1244
ADD_NOTBYTE         1C4E
ADD_NOTLEFT         1C7A
ADD_NOTRIGHTBYTE    1C90
ADD_NOTRIGHTWORD    1CA6
ADD_NOTWORD         1C64
ADD_SRC             14D0
AND                 184C
AND_BUFFER          1856
AND_DISP            126D
ASL                 1888
ASL_BUFFER          1892
ASL_DISP            127C
ASR                 186C
ASR_BUFFER          1876
ASR_DISP            1280
AS_ERROR            1D9C
AS_LETTER           1D86
AS_NUMBER           1D80
ATHENDLOOP          1D68
BACKSLASHSIGH       12CA
BCC_DISP            1294
BGT_DISP            1298
BITS11TO13          19F0
BITS11TO16          1A12
BITS14TO16          1A02
BITS1TO10           1A22
BITS5TO7            19B8
BITS5TO8            19CC
BITS8TO10           19DE
BLE_DISP            129C
BUFFER              1D4E
CLOSEPAREN          12CE
CLR_DISP            1269
CMP                 180C
CMP_BUFFER          1816
CODE0000            134C
CODE0001            1360
CODE0010            1366
CODE0011            1366
CODE0100            1366
CODE0101            139A
CODE0110            139E
CODE0111            13A2
CODE1000            13A6
CODE1001            13B8
CODE1010            13BC
CODE1011            13C0
CODE1100            13C4
CODE1101            13D6
CODE1110            1422
CODE1111            1452
COMMASIGN           12C8
COPY_OPCODE         1B6E
CR                  D
DIVU                173C
DIVU_BUFFER         1768
DIVU_DEST           17A8
DIVU_DISP           1260
DIVU_SRC            177E
DOLLARSIGN          12C2
DONE                19B6
ENDTEST_MSG         11DD
ERDFAILADDRODDB     1DE0
ERDFAILADDRORDER    1DD2
ERDFINISH           1DD0
EXIT                12E7
FINISHER            1988
FIVE                195C
FOUR                194C
GETSIZE_ADD         1C34
GETSIZE_ADDA        1CF6
GETSIZE_ADDI        1CBC
GETSIZE_ADDQ        1BFA
HEXATABLE           12A0
INPUT_BUFFER        12DC
INSERT_NUM          190C
INVALIDEA_DISP      1221
INVALID_DISP        121C
INVALID_EA          1AD6
INVALID_OP          1ADA
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            18DC
JMP_TABLE           12EC
JSR                 1B10
JSR_DISP            128C
LEA                 15B8
LEA_BUFFER          15DA
LEA_DEST            167E
LEA_DISP            1265
LEA_SRC             15EC
LF                  A
LINEBREAK           1219
LINECOUNT           12DB
LOCATION_ENDDATA    12E2
LOCATION_END_MSG    1145
LOCATION_STARTDATA  12DE
LOCATION_START_MSG  1126
LSL                 18A4
LSL_BUFFER          18AE
LSL_DISP            1274
LSR                 18C0
LSR_BUFFER          18CA
LSR_DISP            1278
MAIN_LOOP           108E
MINUSSIGN           12C6
MODE000             1A34
MODE001             1A3A
MODE010             1A42
MODE011             1A4C
MODE100             1A56
MODE101             1A64
MODE110             1A6E
MODE111             1A78
MOVEA_DISP          1232
MOVEB_BUFFER        145C
MOVEM               1B36
MOVEM_DISP          123E
MOVEM_W             1B56
MOVEQ               1718
MOVEQ_BUFFER        1722
MOVEQ_DISP          1238
MOVE_B              1456
MOVE_DISP           122D
MULS                182C
MULS_BUFFER         1836
MULS_DISP           125B
NOP                 1AF4
NOP_DISP            1229
ONE                 191C
ONEPAREN            19A8
OPENPAREN           12CC
OR                  17D0
OR_BUFFER           17DA
OR_DISP             1271
PAUSE_MSG           11C3
PLUSSIGN            12C4
POSTINCR            1996
POUNDSIGN           12C0
PRINT_ADDRESS       1B74
PRINT_BUFFER        1B94
PRINT_DEREF_ADDRESS  1BB0
PRINT_HEX           1BEC
PRINT_ZEROES        1BD4
ROL_DISP            1284
ROR_DISP            1288
RTS                 1B02
RTS_DISP            1290
SEVEN               197C
SIX                 196C
SIZEISBYTE          1D1E
SIZEISLONG          1D3E
SIZEISWORD          1D2E
SIZE_B              12D2
SIZE_L              12D8
SIZE_W              12D5
SPACE               12D0
SRDFAILADDRODDB     1DB4
SRDFINISH           1DB2
START               1000
SUB                 17EC
SUB_ASTOHELOOP      1D52
SUB_BREAKDOWNAS     1D6C
SUB_BUFFER          17F6
SUB_DISP            1257
SUB_ENDREADINGDATA  1DC2
SUB_STARTREADINGDATA  1DA8
TABLE_LENGTH        12E6
THREE               193C
TWO                 192C
WELCOME_MSG         10C2
