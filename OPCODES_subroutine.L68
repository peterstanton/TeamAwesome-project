00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 10:23:04 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D4 - MODE
00000000                             3  *** D5 - CURRENT OPCODE
00000000                             4  *** D6 - 
00000000                             5  ***
00000000                             6  
00000000                             7  
00006000                             8  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       9                     ADDQ.B  #$1,D1      
00006002                            10                   
00006002  41F9 0000624E             11                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 00006BCE             12                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      13                   CLR.L   D3              *Zero it
00006010                            14                   * TEST OPCODES
00006010                            15                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006010                            16                   ; MOVE.W  #$4E71,D3 * NOP
00006010                            17                   ; MOVE.W  #$4E75,D3 * RTS
00006010                            18                   ; MOVE.W  #$4EB0,D3 * JSR
00006010                            19                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006010                            20                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
00006010                            21                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
00006010                            22                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006010  363C DC1B                 23                   MOVE.W  #$DC1B, D3  * ADD.B (A3)+,D6
00006014                            24                    ; MOVE.W  #$D9A5, D3  * ADD.L D4,-(A5)
00006014                            25                     ; MOVE.W  #$D579, D3  * ADD.W D2,$FF0FF0FF
00006014                            26                   ; MOVE.W    #$5201,D3    *ADDQ
00006014                            27  
00006014                            28                   ; MOVE.W     #$7E70, D3 *MOVEQ
00006014                            29                   ; MOVE.W     #$80C0, D3 *DIVU
00006014                            30                   ; MOVE.W     #$8000, D3 * OR
00006014                            31                   ; MOVE.W        #$9000, D3 * SUB
00006014                            32                   ; MOVE.W        #$B000, D3 * CMP
00006014                            33                   ; MOVE.W        #$C1C0, D3 * MULS
00006014                            34                   ; MOVE.W        #$C000, D3 * AND
00006014                            35                   ; MOVE.W        #$E0F8, D3  *ASR
00006014                            36                   ; MOVE.W        #$E1E2, D3  *ASL
00006014                            37                   ;MOVE.W        #$E393, D3  *LSL
00006014                            38                   ;MOVE.W        #$E2DC, D3  *LSR
00006014                            39  
00006014                            40                   
00006014  3A03                      41                   MOVE.W  D3,D5
00006016  183C 000C                 42                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601A                            43  
0000601A                            44             
0000601A  E86B                      45                   LSR.W   D4,D3       *Move the bits
0000601C  C6FC 0006                 46                   MULU    #6,D3       *Form offset     
00006020  4EB0 3000                 47                   JSR     0(A0,D3)   *Jump indirect with index
00006024                            48                  
00006024                            49      INCLUDE 'definitions.x68'
00006024                            50  
00006024  =0000000D                 51  CR              EQU     $0D         carriage return
00006024  =0000000A                 52  LF              EQU     $0A         line feed
00006024= 43 53 53 20 34 32 ...     53  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
00006048= 42 79 20 54 65 61 ...     54                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00006088= 45 6E 74 65 72 20 ...     55  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060A7= 45 6E 74 65 72 20 ...     56  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C4= 41 64 64 72 65 73 ...     57  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EB= 45 6E 64 69 6E 67 ...     58  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006125= 50 72 65 73 73 20 ...     59  pause_msg           DC.B    'Press enter to continue!',CR,LF
0000613F= 52 65 61 63 68 65 ...     60  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615A= 54 72 79 20 61 6E ...     61                      DC.B    'Try another location? (yes/no): ',0
0000617B= 0D 0A 00                  62  linebreak           DC.B    CR,LF,0
0000617E                            63                      
0000617E= 44 41 54 41 00            64  Invalid_disp        DC.B    'DATA',0
00006183= 57 52 4F 4E 47 45 ...     65  InvalidEA_disp      DC.B    'WRONGEA',0
0000618B                            66  
0000618B= 4E 4F 50 00               67  NOP_disp            DC.B    'NOP',0
0000618F= 4D 4F 56 45 00            68  MOVE_disp           DC.B    'MOVE',0
00006194= 4D 4F 56 45 41 00         69  MOVEA_disp          DC.B    'MOVEA',0
0000619A= 4D 4F 56 45 51 00         70  MOVEQ_disp          DC.B    'MOVEQ',0
000061A0= 4D 4F 56 45 4D 00         71  MOVEM_disp          DC.B    'MOVEM',0
000061A6= 41 44 44 00               72  ADD_disp            DC.B    'ADD',0
000061AA= 41 44 44 41 00            73  ADDA_disp           DC.B    'ADDA',0
000061AF= 41 44 44 49 00            74  ADDI_disp           DC.B    'ADDI',0
000061B4= 41 44 44 51 00            75  ADDQ_disp           DC.B    'ADDQ',0
000061B9= 53 55 42 00               76  SUB_disp            DC.B    'SUB',0
000061BD= 4D 55 4C 53 00            77  MULS_disp           DC.B    'MULS',0
000061C2= 44 49 56 55 00            78  DIVU_disp           DC.B    'DIVU',0
000061C7= 4C 45 41 00               79  LEA_disp            DC.B    'LEA',0
000061CB= 43 4C 52 00               80  CLR_disp            DC.B    'CLR',0
000061CF= 41 4E 44 00               81  AND_disp            DC.B    'AND',0
000061D3= 4F 52 00                  82  OR_disp             DC.B    'OR',0
000061D6= 4C 53 4C 00               83  LSL_disp            DC.B    'LSL',0
000061DA= 4C 53 52 00               84  LSR_disp            DC.B    'LSR',0
000061DE= 41 53 4C 00               85  ASL_disp            DC.B    'ASL',0
000061E2= 41 53 52 00               86  ASR_disp            DC.B    'ASR',0
000061E6= 52 4F 4C 00               87  ROL_disp            DC.B    'ROL',0
000061EA= 52 4F 52 00               88  ROR_disp            DC.B    'ROR',0
000061EE= 4A 53 52 00               89  JSR_disp            DC.B    'JSR',0
000061F2= 52 54 53 00               90  RTS_disp            DC.B    'RTS',0
000061F6= 42 43 43 00               91  BCC_disp            DC.B    'BCC',0
000061FA= 42 47 54 00               92  BGT_disp            DC.B    'BGT',0    
000061FE= 42 4C 45 00               93  BLE_disp            DC.b    'BLE',0
00006202                            94  
00006202                            95  
00006202= 30 00                     96  hexaTable               DC.B    '0',0
00006204= 31 00                     97                          DC.B    '1',0
00006206= 32 00                     98                          DC.B    '2',0
00006208= 33 00                     99                          DC.B    '3',0
0000620A= 34 00                    100                          DC.B    '4',0
0000620C= 35 00                    101                          DC.B    '5',0
0000620E= 36 00                    102                          DC.B    '6',0
00006210= 37 00                    103                          DC.B    '7',0
00006212= 38 00                    104                          DC.B    '8',0
00006214= 39 00                    105                          DC.B    '9',0
00006216= 41 00                    106                          DC.B    'A',0
00006218= 42 00                    107                          DC.B    'B',0
0000621A= 43 00                    108                          DC.B    'C',0
0000621C= 44 00                    109                          DC.B    'D',0
0000621E= 45 00                    110                          DC.B    'E',0
00006220= 46 00                    111                          DC.B    'F',0
00006222= 23 00                    112  poundsign               DC.B    '#',0
00006224= 24 00                    113  dollarsign              DC.B    '$',0
00006226= 2B 00                    114  plussign                DC.B    '+',0
00006228= 2D 00                    115  minussign               DC.B    '-',0
0000622A= 2C 00                    116  commasign               DC.B    ',',0
0000622C= 2F 00                    117  backslashsigh           DC.B    '/',0
0000622E= 28 00                    118  openparen               DC.B    '(',0
00006230= 29 00                    119  closeparen              DC.B    ')',0
00006232= 20 00                    120  space                   DC.B    ' ',0   
00006234= 2E 42 00                 121  size_b                  DC.B    '.B',0
00006237= 2E 57 00                 122  size_w                  DC.B    '.W',0        
0000623A= 2E 4C 00                 123  size_l                  DC.B    '.L',0
0000623D                           124  
0000623D                           125  linecount               DS.B    1       *storeage for lines on a screen
0000623E= 01                       126  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006240                           127  location_startData      DS.L    1       *location on where to start reading data
00006244                           128  location_endData        DS.L    1       *location on where to end reading data
00006248                           129  table_length            DS.B    1       *Number of spaces in the table to print to console
00006249                           130  
00006249                           131  
00006249                           132  -------------------- end include --------------------
00006249                           133             
00006249                           134  EXIT                 
0000624A  FFFF FFFF                135         SIMHALT   
0000624E                           136  
0000624E                           137  
0000624E                           138  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
0000624E  4EF9 000062AE            139  jmp_table      JMP         code0000
00006254                           140                  *ADDI
00006254                           141  
00006254  4EF9 000062C2            142                 JMP         code0001
0000625A                           143  
0000625A  4EF9 000062C6            144                 JMP         code0010
00006260                           145  
00006260  4EF9 000062CA            146                 JMP         code0011
00006266                           147  
00006266  4EF9 000062CE            148                 JMP         code0100
0000626C                           149                             
0000626C  4EF9 00006302            150                 JMP         code0101
00006272                           151                 * ADDQ
00006272                           152                  
00006272                           153        
00006272  4EF9 00006308            154                 JMP         code0110
00006278                           155                 * BCC
00006278                           156                 * BGT
00006278                           157                 * BLE
00006278                           158                 
00006278  4EF9 0000630C            159                 JMP         code0111
0000627E                           160                 * MOVEQ
0000627E                           161  
0000627E  4EF9 00006312            162                 JMP         code1000
00006284                           163                 * DIVU
00006284                           164                 * OR
00006284                           165  
00006284  4EF9 00006324            166                 JMP         code1001
0000628A                           167                  *SUB
0000628A  4EF9 0000632A            168                 JMP         code1010
00006290                           169                 
00006290  4EF9 0000632E            170                 JMP         code1011
00006296                           171                 * CMP
00006296                           172                 
00006296  4EF9 00006334            173                 JMP         code1100
0000629C                           174                 * MULS
0000629C                           175                 * AND
0000629C                           176          
0000629C  4EF9 00006346            177                 JMP         code1101
000062A2                           178                 *ADD
000062A2                           179                 *ADDA
000062A2  4EF9 00006392            180                 JMP         code1110
000062A8                           181                 * ASR
000062A8                           182                 * ASL
000062A8                           183                 * LSL
000062A8                           184                 * LSR
000062A8                           185                 * ROL
000062A8                           186                 * ROR
000062A8                           187  
000062A8  4EF9 000063C2            188                 JMP         code1111
000062AE                           189  
000062AE                           190  
000062AE                           191  code0000      
000062AE  4EB9 000068E2            192                 JSR          bits5to8 // RETURNS INTO D3
000062B4  B6BC 00000006            193                 CMP.L        #%0110, D3
000062BA  6600 073A                194                 BNE          INVALID_OP
000062BE  6000 01CE                195                 BRA          ADDI  
000062C2                           196  
000062C2  4E72 2700                197  code0001       STOP        #$2700
000062C6                           198  
000062C6  4E72 2700                199  code0010       STOP        #$2700
000062CA                           200  
000062CA  4E72 2700                201  code0011       STOP        #$2700
000062CE                           202  
000062CE                           203  code0100       
000062CE  4EB9 00006A74            204                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D4                           205                  
000062D4                           206                 *NOP
000062D4  C47C 0FFF                207                 AND     #%0000111111111111,D2
000062D8  B4BC 00000E71            208                 CMP.L   #%000111001110001, D2
000062DE  6700 071A                209                 BEQ     NOP
000062E2                           210                 
000062E2                           211                 *RTS
000062E2  C47C 0FFF                212                 AND     #%0000111111111111,D2
000062E6  B4BC 00000E75            213                 CMP.L   #%0000111001110101, D2
000062EC  6700 071A                214                 BEQ     RTS
000062F0                           215  
000062F0                           216                 *JSR
000062F0  C47C 0FC0                217                 AND     #%0000111111000000,D2
000062F4  B4BC 00000E80            218                 CMP.L   #%0000111010000000,D2
000062FA  6700 071A                219                 BEQ     JSR
000062FE                           220                 
000062FE                           221                 * MOVEM
000062FE                           222                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000062FE                           223                ** AND     #%0000111110000000,D2
000062FE                           224                 * DATA REGISTER
000062FE                           225                ** CMP.L   #%0000100010000000, D2
000062FE                           226                 ** JSR      MOVEM
000062FE                           227                 * ADDRESS REGISTER (DECREMENTED)
000062FE                           228                 ** CMP.L  #%0000110010000000, D2
000062FE                           229                 ** JSR    MOVEM
000062FE                           230                  
000062FE                           231                  ** TO DO: BRANCH IF INVALID OPCODE
000062FE                           232                  *LEA - if it's not the top codes, it's LEA
000062FE  6000 0232                233                  BRA     LEA
00006302                           234  code0101      
00006302                           235  
00006302  4EB9 0000662C            236                  JSR   ADDQ
00006308                           237  
00006308  4E72 2700                238  code0110        STOP        #$2700
0000630C                           239  
0000630C                           240  code0111       
0000630C  4EB9 000066A2            241                  JSR       MOVEQ
00006312                           242  
00006312                           243  code1000      
00006312  4EB9 000068F4            244                  JSR        bits8to10
00006318  B67C 0003                245                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
0000631C  6700 03A8                246                  BEQ        DIVU
00006320  6000 03C4                247                  BRA        OR       ** OTHERWISE OR
00006324                           248                  
00006324                           249  
00006324                           250  code1001       
00006324  4EB9 00006702            251                 JSR         SUB
0000632A  4E72 2700                252  code1010       STOP        #$2700
0000632E                           253  
0000632E                           254  code1011       
0000632E  4EB9 00006722            255                 JSR         CMP
00006334                           256  
00006334                           257  code1100      
00006334  4EB9 000068F4            258                  JSR        bits8to10
0000633A  B67C 0007                259                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
0000633E  6700 0402                260                  BEQ        MULS
00006342  6000 041E                261                  BRA        AND       ** OTHERWISE AND
00006346                           262  
00006346                           263  code1101       
00006346  4EB9 00006A74            264                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000634C                           265                 *ADDA
0000634C  4EB9 000068F4            266                 JSR      bits8to10
00006352  B67C 0003                267                 CMP      #%011, D3  ** WORD
00006356  6700 006E                268                 BEQ      ADDA
0000635A  B67C 0007                269                 CMP      #%111, D3   ** LONG
0000635E  6700 0066                270                 BEQ      ADDA
00006362                           271                 
00006362                           272                 *ADD
00006362  B67C 0000                273                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00006366  6700 0084                274                 BEQ      ADD
0000636A  B67C 0001                275                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000636E  6700 007C                276                 BEQ      ADD
00006372  B67C 0002                277                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00006376  6700 0074                278                 BEQ      ADD
0000637A  B67C 0004                279                 CMP      #%100, D3   ** BYTE TO EA
0000637E  6700 006C                280                 BEQ      ADD
00006382  B67C 0005                281                 CMP      #%101, D3   ** WORD TO EA
00006386  6700 0064                282                 BEQ      ADD
0000638A  B67C 0006                283                 CMP      #%110, D3   ** LONG TO EA
0000638E  6700 005C                284                 BEQ      ADD
00006392                           285                 
00006392                           286  
00006392                           287  code1110       
00006392                           288                  * ASR
00006392  4EB9 00006938            289                  JSR     bits1to10
00006398  B67C 0383                290                  CMP     #%1110000011,D3
0000639C  6700 03E4                291                  BEQ     ASR
000063A0                           292                  
000063A0                           293                  * ASL
000063A0  B67C 0387                294                  CMP     #%1110000111,D3
000063A4  6700 03F8                295                  BEQ     ASL
000063A8                           296                  
000063A8                           297                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
000063A8                           298                  * LSL
000063A8  4244                     299                  CLR     D4
000063AA  2803                     300                  MOVE.L  D3,D4
000063AC  C8BC 00A98671            301                  AND.L   #11110001,D4
000063B2  B87C 01C7                302                  CMP     #%111000111,D4
000063B6  6700 0402                303                  BEQ     LSL
000063BA                           304                  
000063BA                           305                  * LSR
000063BA  B67C 038B                306                  CMP     #%1110001011,D3
000063BE  6700 0416                307                  BEQ     LSR
000063C2                           308                  
000063C2                           309                  * ROL
000063C2                           310                  
000063C2                           311                  * ROR
000063C2                           312  
000063C2  4E72 2700                313  code1111       STOP        #$2700
000063C6                           314  
000063C6                           315  ADDA    
000063C6  4EB9 000063D0            316                 JSR     ADDA_BUFFER
000063CC  6000 0610                317                 BRA     PRINT_BUFFER
000063D0                           318                  
000063D0                           319  ADDA_BUFFER
000063D0  1CFC 0041                320                 MOVE.B   #'A',(A6)+
000063D4  1CFC 0044                321                 MOVE.B   #'D', (A6)+  
000063D8  1CFC 0044                322                 MOVE.B   #'D', (A6)+
000063DC  1CFC 0041                323                 MOVE.B   #'A', (A6)+
000063E0  4EB9 00006B76            324                 JSR      GETSIZE_ADDA
000063E6  1CFC 0020                325                 MOVE.B   #' ', (A6)+
000063EA  4E75                     326                 RTS
000063EC                           327                 
000063EC                           328                 
000063EC                           329                 
000063EC                           330  *********************************************               
000063EC                           331  ADD    
000063EC  4EB9 0000642C            332                 JSR     ADD_BUFFER
000063F2                           333                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000063F2                           334  
000063F2  BC7C 0001                335                 CMP      #1,D6
000063F6  6600 001A                336                 BNE      ADD_DIRECTION_REVERSED
000063FA  4EB9 00006448            337                 JSR      ADD_SRC
00006400  1CFC 002C                338                 MOVE.B   #',', (A6)+
00006404  1CFC 0020                339                 MOVE.B   #' ', (A6)+
00006408  4EB9 0000646C            340                 JSR      ADD_DEST
0000640E  6000 0030                341                 BRA      ADD_DONE
00006412                           342                 
00006412                           343                 
00006412                           344  ADD_DIRECTION_REVERSED
00006412                           345  
00006412  4246                     346                 CLR      D6
00006414  4EB9 0000646C            347                 JSR      ADD_DEST
0000641A  1CFC 002C                348                 MOVE.B   #',', (A6)+
0000641E  1CFC 0020                349                 MOVE.B   #' ', (A6)+
00006422  4EB9 00006448            350                 JSR      ADD_SRC
00006428  6000 0016                351                 BRA      ADD_DONE              
0000642C                           352                 
0000642C                           353                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000642C                           354                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000642C                           355  
0000642C                           356                  
0000642C                           357  ADD_BUFFER
0000642C  1CFC 0041                358                 MOVE.B   #'A',(A6)+
00006430  1CFC 0044                359                 MOVE.B   #'D', (A6)+  
00006434  1CFC 0044                360                 MOVE.B   #'D', (A6)+
00006438  4EB9 00006AB4            361                 JSR      GETSIZE_ADD
0000643E  4E75                     362                 RTS
00006440                           363                 
00006440                           364  
00006440                           365                 
00006440                           366  ADD_DONE       
00006440  4246                     367                 CLR      D6
00006442  4EB9 000069DE            368                 JSR     PRINT_BUFFER
00006448                           369  
00006448                           370                  
00006448                           371  
00006448                           372  ADD_SRC
00006448                           373  
00006448  4EB9 00006906            374                  JSR    bits11to13
0000644E  3803                     375                  MOVE   D3,D4
00006450  41F9 000067F2            376                  LEA     jmp_mode,A0    *Index into the table
00006456  C6FC 0006                377                  MULU   #6,D3
0000645A  4EB0 3000                378                  JSR    0(A0,D3)     
0000645E  4EB9 00006918            379                  JSR    bits14to16
00006464  4EB9 00006822            380                  JSR    insert_num
0000646A  4E75                     381                  RTS
0000646C                           382  
0000646C                           383  
0000646C                           384  
0000646C                           385  
0000646C                           386  
0000646C                           387  ADD_DEST
0000646C  363C 0000                388                  MOVE.W #%000,D3     ;Can only have a data register.
00006470  3803                     389                  MOVE   D3,D4
00006472  41F9 000067F2            390                  LEA     jmp_mode,A0    *Index into the table
00006478  C6FC 0006                391                  MULU    #6,D3       *Form offset     
0000647C  4EB0 3000                392                  JSR     0(A0,D3)   *Jump indirect with index
00006480                           393                  
00006480  4EB9 000068CE            394                  JSR     bits5to7
00006486  4EB9 00006822            395                  JSR     insert_num
0000648C  4E75                     396                  RTS
0000648E                           397                          
0000648E                           398  ***********************************************************************************************
0000648E                           399  
0000648E                           400  
0000648E                           401  ADDI
0000648E  4EB9 00006516            402                  JSR     ADDI_BUFFER
00006494  4EB9 000064A4            403                  JSR     ADDI_SRC
0000649A  4EB9 000064B2            404                  JSR     ADDI_DES
000064A0  6000 053C                405                  BRA     PRINT_BUFFER
000064A4                           406                  
000064A4                           407  ADDI_SRC                        
000064A4  1CFC 0023                408                  MOVE.B  #'#', (A6)+
000064A8  1CFC 002C                409                  MOVE.B  #',', (A6)+
000064AC  1CFC 0020                410                  MOVE.B  #' ', (A6)+
000064B0  4E75                     411                  RTS
000064B2                           412                    ** TODO: IMPLEMENT THIS IN EA
000064B2                           413                  ** Immediate field—Data immediately following the instruction.
000064B2                           414                  **If size = 00, the data is the low-order byte of the immediate word.
000064B2                           415                  **If size = 01, the data is the entire immediate word.
000064B2                           416                  **If size = 10, the data is the next two immediate words. 
000064B2                           417  ADDI_DES
000064B2                           418                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
000064B2                           419                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
000064B2  4EB9 00006906            420                 JSR      bits11to13
000064B8  B67C 0001                421                 CMP      #%001, D3 **AN
000064BC  6700 0534                422                 BEQ      INVALID_EA
000064C0  B67C 0005                423                 CMP      #%101, D3 **COMPLICATED
000064C4  6700 052C                424                 BEQ      INVALID_EA
000064C8  B67C 0006                425                 CMP      #%110, D3 **COMPLICATED
000064CC  6700 0524                426                 BEQ      INVALID_EA
000064D0                           427                 
000064D0  4EB9 00006928            428                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000064D6  B67C 003C                429                 CMP      #%111100,D3 // immediate data
000064DA  6700 0516                430                 BEQ      INVALID_EA
000064DE  B67C 003A                431                 CMP      #%111010,D3 // complicated
000064E2  6700 050E                432                 BEQ      INVALID_EA
000064E6  B67C 003B                433                 CMP      #%111011,D3 // complicated
000064EA  6700 0506                434                 BEQ      INVALID_EA
000064EE                           435                 
000064EE  4EB9 00006906            436                 JSR      bits11to13 ** grab bits to jump with\
000064F4  3803                     437                 MOVE     D3,D4
000064F6  41F9 000067F2            438                 LEA     jmp_mode,A0    *Index into the table
000064FC  C6FC 0006                439                 MULU    #6,D3       *Form offset     
00006500  4EB0 3000                440                 JSR     0(A0,D3)   *Jump indirect with index
00006504                           441                 
00006504  4243                     442                 CLR     D3
00006506  4EB9 00006918            443                 JSR     bits14to16
0000650C  4EB9 00006822            444                 JSR     insert_num
00006512  4244                     445                 CLR     D4
00006514                           446                 
00006514  4E75                     447                 RTS
00006516                           448                 
00006516                           449                             
00006516                           450  ADDI_BUFFER
00006516  1CFC 0041                451                 MOVE.B   #'A',(A6)+
0000651A  1CFC 0044                452                 MOVE.B   #'D', (A6)+  
0000651E  1CFC 0044                453                 MOVE.B   #'D', (A6)+
00006522  1CFC 0049                454                 MOVE.B   #'I', (A6)+
00006526                           455                 
00006526  4EB9 00006B3C            456                 JSR      GETSIZE_ADDI
0000652C                           457                 
0000652C                           458                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
0000652C                           459                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000652C  1CFC 0020                460                 MOVE.B   #' ', (A6)+
00006530  4E75                     461                 RTS
00006532                           462                              
00006532                           463  LEA
00006532  4EB9 000068F4            464                 JSR      bits8to10   // 1 1 1
00006538  B47C 0007                465                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
0000653C  6600 04B8                466                 BNE      INVALID_OP
00006540  4EB9 00006556            467                 JSR      LEA_BUFFER
00006546  4EB9 00006568            468                 JSR      LEA_SRC
0000654C  4EB9 00006608            469                 JSR      LEA_DEST
00006552  6000 048A                470                 BRA      PRINT_BUFFER
00006556                           471                 
00006556                           472  LEA_BUFFER 
00006556  1CFC 004C                473                 MOVE.B   #'L',(A6)+
0000655A  1CFC 0045                474                 MOVE.B   #'E', (A6)+  
0000655E  1CFC 0041                475                 MOVE.B   #'A', (A6)+
00006562  1CFC 0020                476                 MOVE.B   #' ', (A6)+
00006566  4E75                     477                 RTS
00006568                           478            
00006568                           479  LEA_SRC
00006568                           480              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00006568  4EB9 00006906            481              JSR      bits11to13  // source mode - D3
0000656E  B67C 0000                482              CMP      #%000, D3
00006572  6700 047E                483              BEQ      INVALID_EA
00006576  B67C 0001                484              CMP      #%001, D3
0000657A  6700 0476                485              BEQ      INVALID_EA
0000657E  B67C 0003                486              CMP      #%011, D3
00006582  6700 046E                487              BEQ      INVALID_EA
00006586  B67C 0004                488              CMP      #%100, D3
0000658A  6700 0466                489              BEQ      INVALID_EA
0000658E  B67C 0005                490              CMP      #%101, D3
00006592  6700 045E                491              BEQ      INVALID_EA
00006596  B67C 0006                492              CMP      #%110, D3
0000659A  6700 0456                493              BEQ      INVALID_EA
0000659E                           494  
0000659E                           495              
0000659E                           496              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
0000659E  4EB9 00006918            497              JSR      bits14to16 // source register - d4
000065A4  B67C 0004                498              CMP      #%100, D3
000065A8  6700 0448                499              BEQ      INVALID_EA
000065AC  B67C 0002                500              CMP      #%010, D3
000065B0  6700 0440                501              BEQ      INVALID_EA
000065B4  B67C 0003                502              CMP      #%011, D3
000065B8  6700 0438                503              BEQ      INVALID_EA
000065BC                           504              
000065BC                           505  
000065BC  4EB9 00006928            506               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000065C2  B67C 003C                507               CMP      #%111100,D3 // immediate data
000065C6  6700 042A                508               BEQ      INVALID_EA
000065CA  B67C 003A                509               CMP      #%111010,D3 // complicated
000065CE  6700 0422                510               BEQ      INVALID_EA
000065D2  B67C 003B                511               CMP      #%111011,D3 // complicated
000065D6  6700 041A                512               BEQ      INVALID_EA
000065DA                           513     
000065DA  4EB9 00006906            514               JSR      bits11to13 ** grab mode bits to jump with
000065E0  3803                     515               MOVE    D3,D4
000065E2                           516  
000065E2  41F9 000067F2            517               LEA     jmp_mode,A0    *Index into the table
000065E8  C6FC 0006                518               MULU    #6,D3       *Form offset     
000065EC  4EB0 3000                519               JSR     0(A0,D3)   *Jump indirect with index
000065F0                           520               
000065F0                           521  
000065F0  4243                     522               CLR     D3
000065F2  4EB9 00006918            523               JSR     bits14to16
000065F8  4EB9 00006822            524               JSR     insert_num
000065FE                           525               
000065FE  1CFC 002C                526               MOVE.B     #',', (A6)+
00006602  1CFC 0020                527               MOVE.B     #' ', (A6)+
00006606                           528  
00006606  4E75                     529               RTS
00006608                           530               
00006608                           531  LEA_DEST    
00006608  4244                     532                  CLR     D4
0000660A  41F9 000067F2            533                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00006610  363C 0001                534                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
00006614  3803                     535                  MOVE    D3,D4
00006616  C6FC 0006                536                  MULU    #6,D3       *Form offset     
0000661A  4EB0 3000                537                  JSR     0(A0,D3)   *Jump indirect with index
0000661E                           538                  
0000661E  4EB9 000068CE            539                  JSR     bits5to7
00006624  4EB9 00006822            540                  JSR     insert_num
0000662A                           541                  
0000662A  4E75                     542                  RTS
0000662C                           543  
0000662C                           544  
0000662C                           545  ADDQ
0000662C  4EB9 0000668A            546                  JSR     ADDQ_BUFFER
00006632  4EB9 00006648            547                  JSR     ADDQ_SRC
00006638  1CFC 002C                548                  MOVE.B  #',',(A6)+
0000663C  1CFC 0020                549                  MOVE.B  #' ',(A6)+
00006640  4EB9 00006660            550                  JSR     ADDQ_DEST
00006646  4E75                     551                  RTS                 ;BRA     PRINT_BUFFER
00006648                           552  
00006648                           553  ADDQ_SRC
00006648  4EB9 000068CE            554                  JSR     bits5to7
0000664E  1CFC 0023                555                  MOVE.B  #'#',(A6)+
00006652  183C 0000                556                  MOVE.B  #%000,D4
00006656  4EB9 00006822            557                  JSR     insert_num
0000665C  4244                     558                  CLR     D4
0000665E  4E75                     559                  RTS
00006660                           560                  
00006660                           561  ADDQ_DEST
00006660  4EB9 00006906            562                 JSR      bits11to13
00006666  3803                     563                 MOVE     D3,D4
00006668  41F9 000067F2            564                 LEA     jmp_mode,A0    *Index into the table
0000666E  C6FC 0006                565                 MULU    #6,D3       *Form offset     
00006672  4EB0 3000                566                 JSR     0(A0,D3)   *Jump indirect with index
00006676  4243                     567                 CLR     D3
00006678  4EB9 00006918            568                 JSR     bits14to16
0000667E  4EB9 00006822            569                 JSR     insert_num
00006684  4244                     570                 CLR     D4
00006686  4243                     571                 CLR     D3
00006688  4E75                     572                 RTS
0000668A                           573                 
0000668A                           574  
0000668A                           575  ADDQ_BUFFER
0000668A  1CFC 0041                576                 MOVE.B   #'A',(A6)+
0000668E  1CFC 0044                577                 MOVE.B   #'D', (A6)+  
00006692  1CFC 0044                578                 MOVE.B   #'D', (A6)+
00006696  1CFC 0051                579                 MOVE.B   #'Q', (A6)+
0000669A  4EB9 00006A7A            580                 JSR      GETSIZE_ADDQ
000066A0                           581                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
000066A0                           582                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000066A0  4E75                     583                 RTS               
000066A2                           584                 
000066A2                           585  MOVEQ
000066A2  4EB9 000066AC            586                  JSR     MOVEQ_BUFFER
000066A8  6000 0334                587                  BRA     PRINT_BUFFER
000066AC                           588  
000066AC                           589  MOVEQ_BUFFER
000066AC  1CFC 004D                590                 MOVE.B   #'M',(A6)+
000066B0  1CFC 004F                591                 MOVE.B   #'O', (A6)+  
000066B4  1CFC 0056                592                 MOVE.B   #'V', (A6)+
000066B8  1CFC 0045                593                 MOVE.B   #'E', (A6)+
000066BC  1CFC 0051                594                 MOVE.B   #'Q', (A6)+
000066C0  1CFC 0020                595                 MOVE.B   #' ', (A6)+
000066C4  4E75                     596                 RTS
000066C6                           597  
000066C6                           598  DIVU
000066C6  4EB9 000066D0            599                  JSR     DIVU_BUFFER
000066CC  6000 0310                600                  BRA     PRINT_BUFFER
000066D0                           601  
000066D0                           602  DIVU_BUFFER
000066D0  1CFC 0044                603                 MOVE.B   #'D',(A6)+
000066D4  1CFC 0049                604                 MOVE.B   #'I', (A6)+  
000066D8  1CFC 0056                605                 MOVE.B   #'V', (A6)+
000066DC  1CFC 0055                606                 MOVE.B   #'U', (A6)+
000066E0  1CFC 0020                607                 MOVE.B   #' ', (A6)+
000066E4  4E75                     608                 RTS  
000066E6                           609  OR    
000066E6  4EB9 000066F0            610                 JSR     OR_BUFFER
000066EC  6000 02F0                611                 BRA     PRINT_BUFFER
000066F0                           612                  
000066F0                           613  OR_BUFFER
000066F0  1CFC 004F                614                 MOVE.B   #'O',(A6)+
000066F4  1CFC 0052                615                 MOVE.B   #'R', (A6)+  
000066F8  1CFC 002E                616                 MOVE.B   #'.', (A6)+
000066FC                           617                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066FC                           618                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066FC                           619                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066FC  1CFC 0020                620                 MOVE.B   #' ', (A6)+
00006700  4E75                     621                 RTS   
00006702                           622  
00006702                           623  SUB   
00006702  4EB9 0000670C            624                 JSR     SUB_BUFFER
00006708  6000 02D4                625                 BRA     PRINT_BUFFER               
0000670C                           626  
0000670C                           627  SUB_BUFFER
0000670C  1CFC 0053                628                 MOVE.B   #'S',(A6)+
00006710  1CFC 0055                629                 MOVE.B   #'U', (A6)+  
00006714  1CFC 0042                630                 MOVE.B   #'B', (A6)+
00006718  1CFC 002E                631                 MOVE.B   #'.', (A6)+
0000671C                           632                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000671C                           633                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000671C                           634                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000671C  1CFC 0020                635                 MOVE.B   #' ', (A6)+
00006720  4E75                     636                 RTS  
00006722                           637  CMP   
00006722  4EB9 0000672C            638                 JSR     CMP_BUFFER
00006728  6000 02B4                639                 BRA     PRINT_BUFFER
0000672C                           640                  
0000672C                           641  CMP_BUFFER
0000672C  1CFC 0043                642                 MOVE.B   #'C',(A6)+
00006730  1CFC 004D                643                 MOVE.B   #'M', (A6)+  
00006734  1CFC 0050                644                 MOVE.B   #'P', (A6)+
00006738  1CFC 002E                645                 MOVE.B   #'.', (A6)+
0000673C                           646                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000673C                           647                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000673C                           648                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000673C  1CFC 0020                649                 MOVE.B   #' ', (A6)+
00006740  4E75                     650                 RTS   
00006742                           651                 
00006742                           652  MULS
00006742  4EB9 0000674C            653                  JSR     MULS_BUFFER
00006748  6000 0294                654                  BRA     PRINT_BUFFER
0000674C                           655  
0000674C                           656  MULS_BUFFER
0000674C  1CFC 004D                657                 MOVE.B   #'M',(A6)+
00006750  1CFC 0055                658                 MOVE.B   #'U', (A6)+  
00006754  1CFC 004C                659                 MOVE.B   #'L', (A6)+
00006758  1CFC 0053                660                 MOVE.B   #'S', (A6)+
0000675C  1CFC 0020                661                 MOVE.B   #' ', (A6)+
00006760  4E75                     662                 RTS
00006762                           663  
00006762                           664  AND    
00006762  4EB9 0000676C            665                 JSR     AND_BUFFER
00006768  6000 0274                666                 BRA     PRINT_BUFFER
0000676C                           667                  
0000676C                           668  AND_BUFFER
0000676C  1CFC 0041                669                 MOVE.B   #'A',(A6)+
00006770  1CFC 004E                670                 MOVE.B   #'N', (A6)+  
00006774  1CFC 0044                671                 MOVE.B   #'D', (A6)+
00006778  1CFC 002E                672                 MOVE.B   #'.', (A6)+
0000677C                           673                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000677C                           674                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000677C                           675                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000677C  1CFC 0020                676                 MOVE.B   #' ', (A6)+
00006780  4E75                     677                 RTS    
00006782                           678  
00006782                           679  ASR     
00006782  4EB9 0000678C            680                  JSR     ASR_BUFFER
00006788  6000 0254                681                  BRA     PRINT_BUFFER
0000678C                           682  
0000678C                           683  ASR_BUFFER
0000678C  1CFC 0041                684                 MOVE.B   #'A',(A6)+
00006790  1CFC 0053                685                 MOVE.B   #'S', (A6)+  
00006794  1CFC 0052                686                 MOVE.B   #'R', (A6)+
00006798  1CFC 0020                687                 MOVE.B   #' ', (A6)+
0000679C  4E75                     688                 RTS      
0000679E                           689  
0000679E                           690  ASL     
0000679E  4EB9 000067A8            691                  JSR     ASL_BUFFER
000067A4  6000 0238                692                  BRA     PRINT_BUFFER
000067A8                           693  
000067A8                           694  ASL_BUFFER
000067A8  1CFC 0041                695                 MOVE.B   #'A',(A6)+
000067AC  1CFC 0053                696                 MOVE.B   #'S', (A6)+  
000067B0  1CFC 004C                697                 MOVE.B   #'L', (A6)+
000067B4  1CFC 0020                698                 MOVE.B   #' ', (A6)+
000067B8  4E75                     699                 RTS     
000067BA                           700  
000067BA                           701  LSL     
000067BA  4EB9 000067C4            702                  JSR     LSL_BUFFER
000067C0  6000 021C                703                  BRA     PRINT_BUFFER
000067C4                           704  
000067C4                           705  LSL_BUFFER
000067C4  1CFC 004C                706                 MOVE.B   #'L',(A6)+
000067C8  1CFC 0053                707                 MOVE.B   #'S', (A6)+  
000067CC  1CFC 004C                708                 MOVE.B   #'L', (A6)+
000067D0  1CFC 0020                709                 MOVE.B   #' ', (A6)+
000067D4  4E75                     710                 RTS     
000067D6                           711  
000067D6                           712  LSR     
000067D6  4EB9 000067E0            713                  JSR     LSR_BUFFER
000067DC  6000 0200                714                  BRA     PRINT_BUFFER
000067E0                           715  
000067E0                           716  LSR_BUFFER
000067E0  1CFC 004C                717                 MOVE.B   #'L',(A6)+
000067E4  1CFC 0053                718                 MOVE.B   #'S', (A6)+  
000067E8  1CFC 0052                719                 MOVE.B   #'R', (A6)+
000067EC  1CFC 0020                720                 MOVE.B   #' ', (A6)+
000067F0  4E75                     721                 RTS       
000067F2                           722                 
000067F2                           723  jmp_mode
000067F2  4EF9 0000694A            724                  JMP     MODE000  ** DN
000067F8  4EF9 00006950            725                  JMP     MODE001  ** AN
000067FE  4EF9 00006958            726                  JMP     MODE010  ** (AN)
00006804  4EF9 00006962            727                  JMP     MODE011  ** (AN)+   
0000680A  4EF9 0000696C            728                  JMP     MODE100  ** -(AN)
00006810  4EF9 0000697A            729                  JMP     MODE101  **INVALID
00006816  4EF9 00006984            730                  JMP     MODE110  **INVALID
0000681C  4EF9 0000698E            731                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00006822                           732  
00006822                           733                  
00006822                           734  insert_num
00006822                           735                  
00006822                           736                  ;get number from D3
00006822  B67C 0000                737                  CMP     #%000,D3       ;0
00006826  6600 000A                738                  BNE     ONE         
0000682A  1CFC 0030                739                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
0000682E  6000 006E                740                  BRA     FINISHER
00006832                           741                  
00006832  B67C 0001                742  ONE             CMP     #%001,D3       ;1
00006836  6600 000A                743                  BNE     TWO 
0000683A  1CFC 0031                744                  MOVE.B  #'1',(A6)+
0000683E  6000 005E                745                  BRA     FINISHER
00006842                           746  
00006842                           747                  
00006842  B67C 0002                748  TWO             CMP     #%010,D3        ;2
00006846  6600 000A                749                  BNE     THREE
0000684A  1CFC 0032                750                  MOVE.B  #'2',(A6)+
0000684E  6000 004E                751                  BRA     FINISHER
00006852                           752                  
00006852  B67C 0003                753  THREE           CMP     #%011,D3        ;3
00006856  6600 000A                754                  BNE     FOUR
0000685A  1CFC 0033                755                  MOVE.B  #'3',(A6)+
0000685E  6000 003E                756                  BRA     FINISHER
00006862                           757                  
00006862  B67C 0004                758  FOUR            CMP     #%100,D3        ;4
00006866  6600 000A                759                  BNE     FIVE
0000686A  1CFC 0034                760                  MOVE.B  #'4',(A6)+
0000686E  6000 002E                761                  BRA     FINISHER
00006872                           762                  
00006872  B67C 0005                763  FIVE            CMP     #%101,D3        ;5
00006876  6600 000A                764                  BNE     SIX
0000687A  1CFC 0035                765                  MOVE.B  #'5',(A6)+
0000687E  6000 001E                766                  BRA     FINISHER
00006882                           767                  
00006882  B67C 0006                768  SIX             CMP     #%110,D3        ;6
00006886  6600 000A                769                  BNE     SEVEN
0000688A  1CFC 0036                770                  MOVE.B  #'6',(A6)+
0000688E  6000 000E                771                  BRA     FINISHER
00006892                           772                  
00006892  B67C 0007                773  SEVEN           CMP     #%111,D3        ;7
00006896  1CFC 0037                774                  MOVE.B  #'7',(A6)+
0000689A  6000 0002                775                  BRA     FINISHER
0000689E                           776                  
0000689E                           777  FINISHER                
0000689E                           778                  
0000689E                           779                  ;check D4, do we need to do stuff?
0000689E  B87C 0002                780                  CMP     #%010,D4
000068A2  6600 0008                781                  BNE     POSTINCR
000068A6  1CFC 0029                782                  MOVE.B  #')',(A6)+
000068AA  4E75                     783                  RTS
000068AC                           784                  
000068AC  B87C 0003                785  POSTINCR        CMP     #%011,D4
000068B0  6600 000C                786                  BNE     ONEPAREN
000068B4  1CFC 0029                787                  MOVE.B  #')',(A6)+
000068B8  1CFC 002B                788                  MOVE.B  #'+',(A6)+
000068BC  4E75                     789                  RTS
000068BE                           790                  
000068BE  B87C 0004                791  ONEPAREN        CMP     #%100,D4
000068C2  6600 0008                792                  BNE     DONE
000068C6  1CFC 0029                793                  MOVE.B  #')',(A6)+                
000068CA                           794  
000068CA  4244                     795                  CLR     D4
000068CC  4E75                     796  DONE            RTS
000068CE                           797  
000068CE                           798          
000068CE                           799                 
000068CE                           800  bits5to7
000068CE  4243                     801                 CLR      D3
000068D0  4EB9 00006A74            802                 JSR      COPY_OPCODE  // opcode copied to D2
000068D6  C47C 0E00                803                 AND      #%0000111000000000, D2
000068DA  E09A                     804                 ROR.L    #8, D2          // rotate bits so isolated at the end
000068DC  E29A                     805                 ROR.L    #1, D2
000068DE  3602                     806                 MOVE.W   D2,D3 // moving isolated bits into d3
000068E0  4E75                     807                 RTS
000068E2                           808                 
000068E2                           809  bits5to8
000068E2  4243                     810                 CLR      D3
000068E4  4EB9 00006A74            811                 JSR      COPY_OPCODE  // opcode copied to D2
000068EA  C47C 0F00                812                 AND      #%0000111100000000, D2
000068EE  E09A                     813                 ROR.L    #8, D2          // rotate bits so isolated at the end
000068F0  3602                     814                 MOVE.W   D2,D3 // moving isolated bits into d3
000068F2  4E75                     815                 RTS
000068F4                           816                 
000068F4                           817  bits8to10
000068F4  4243                     818                 CLR      D3
000068F6  4EB9 00006A74            819                 JSR      COPY_OPCODE  // opcode copied to D2
000068FC  C47C 01C0                820                 AND      #%0000000111000000, D2
00006900  EC9A                     821                 ROR.L    #6, D2          // rotate bits so isolated at the end
00006902  3602                     822                 MOVE.W   D2,D3 // moving isolated bits into d3
00006904  4E75                     823                 RTS               
00006906                           824             
00006906                           825  bits11to13
00006906  4243                     826                 CLR      D3
00006908  4EB9 00006A74            827                 JSR      COPY_OPCODE  // opcode copied to D2
0000690E  C47C 0038                828                 AND      #%0000000000111000, D2
00006912  E69A                     829                 ROR.L    #3, D2          // rotate bits so isolated at the end
00006914  3602                     830                 MOVE.W   D2,D3 // moving isolated bits into d3
00006916  4E75                     831                 RTS
00006918                           832             
00006918                           833  bits14to16
00006918  4243                     834                 CLR      D3
0000691A  4EB9 00006A74            835                 JSR      COPY_OPCODE  // opcode copied to D2
00006920  C47C 0007                836                 AND      #%0000000000000111, D2
00006924  3602                     837                 MOVE.W   D2,D3 // moving isolated bits into d3
00006926  4E75                     838                 RTS
00006928                           839  bits11to16
00006928  4243                     840                 CLR      D3
0000692A  4EB9 00006A74            841                 JSR      COPY_OPCODE  // opcode copied to D2
00006930  C47C 003F                842                 AND      #%0000000000111111, D2
00006934  3602                     843                 MOVE.W   D2,D3 // moving isolated bits into d3
00006936  4E75                     844                 RTS
00006938                           845  bits1to10
00006938  4243                     846                 CLR      D3
0000693A  4EB9 00006A74            847                 JSR      COPY_OPCODE  // opcode copied to D2
00006940  C47C FFC0                848                 AND      #%1111111111000000, D2
00006944  EC9A                     849                 ROR.L    #6, D2
00006946  3602                     850                 MOVE.W   D2,D3 // moving isolated bits into d3
00006948  4E75                     851                 RTS
0000694A                           852  ** DN       
0000694A                           853  MODE000         
0000694A  1CFC 0044                854                  MOVE.B  #'D',(A6)+     
0000694E  4E75                     855                  RTS
00006950                           856  
00006950                           857  ** AN
00006950                           858  MODE001         
00006950  4EB9 00006996            859                  JSR ADDRESS_BUFFER  
00006956  4E75                     860                  RTS      
00006958                           861  
00006958                           862   ** (AN)
00006958                           863  MODE010         
00006958  1CFC 0028                864                  MOVE.B  #'(', (A6)+
0000695C  1CFC 0041                865                  MOVE.B  #'A',(A6)+  
00006960  4E75                     866                  RTS      
00006962                           867  
00006962                           868  ** (AN)+ 
00006962                           869  MODE011         
00006962  1CFC 0028                870                  MOVE.B  #'(', (A6)+
00006966  1CFC 0041                871                  MOVE.B  #'A',(A6)+ 
0000696A  4E75                     872                  RTS       
0000696C                           873  
0000696C                           874   ** -(AN)
0000696C                           875  MODE100         
0000696C  1CFC 002D                876                  MOVE.B  #'-', (A6)+
00006970  1CFC 0028                877                  MOVE.B  #'(', (A6)+
00006974  1CFC 0041                878                  MOVE.B  #'A',(A6)+
00006978  4E75                     879                  RTS
0000697A                           880                  
0000697A                           881  **INVALID               
0000697A                           882  MODE101         
0000697A  1CFC 0028                883                  MOVE.B  #'(', (A6)+
0000697E  1CFC 0041                884                  MOVE.B  #'A',(A6)+ 
00006982  4E75                     885                  RTS
00006984                           886                  
00006984                           887  **INVALID
00006984                           888  MODE110         
00006984  1CFC 0028                889                  MOVE.B  #'(', (A6)+
00006988  1CFC 0041                890                  MOVE.B  #'A',(A6)+
0000698C  4E75                     891                  RTS  
0000698E                           892  
0000698E                           893  ** ABSOLUTE AND IMMEDIATE            
0000698E                           894  MODE111         
0000698E                           895                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
0000698E  4EB9 0000699C            896                 JSR ABSOLUTE_BUFFER  
00006994  4E75                     897                 RTS            
00006996                           898                                          
00006996                           899  ADDRESS_BUFFER
00006996  1CFC 0041                900                  MOVE.B  #'A',(A6)+ 
0000699A  4E75                     901                  RTS
0000699C                           902                 
0000699C                           903  ABSOLUTE_BUFFER
0000699C  4243                     904                 CLR      D3
0000699E  3604                     905                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000069A0  1CF8 0024                906                 MOVE.B   '$', (A6)+
000069A4  B67C 0000                907                 CMP.W    #%000, D3
000069A8  6700 0010                908                 BEQ      ABSOLUTE_WORD_BUFFER
000069AC  4243                     909                 CLR      D3
000069AE  3604                     910                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
000069B0  B67C 0001                911                 CMP.W    #%001, D3
000069B4  6700 0016                912                 BEQ      ABSOLUTE_LONG_BUFFER
000069B8  4E75                     913                 RTS
000069BA                           914                 
000069BA                           915  ABSOLUTE_WORD_BUFFER
000069BA                           916                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
000069BA                           917                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
000069BA  1CFC 0046                918                         MOVE.B #'F', (A6)+ 
000069BE  1CFC 0046                919                         MOVE.B #'F', (A6)+ 
000069C2  1CFC 0046                920                         MOVE.B #'F', (A6)+ 
000069C6  1CFC 0046                921                         MOVE.B #'F', (A6)+ 
000069CA  4E75                     922                         RTS       
000069CC                           923                    
000069CC                           924  ABSOLUTE_LONG_BUFFER       
000069CC                           925                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
000069CC                           926                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
000069CC  1CFC 0047                927                         MOVE.B #'G', (A6)+ 
000069D0  1CFC 0047                928                         MOVE.B #'G', (A6)+ 
000069D4  1CFC 0047                929                         MOVE.B #'G', (A6)+ 
000069D8  1CFC 0047                930                         MOVE.B #'G', (A6)+
000069DC  4E75                     931                         RTS 
000069DE                           932                                                      
000069DE                           933  
000069DE                           934  PRINT_BUFFER    
000069DE  1CFC 0000                935                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
000069E2  43F9 00006BCE            936                 LEA      BUFFER, A1
000069E8  303C 000E                937                 MOVE.W   #14,D0
000069EC  4E4F                     938                 TRAP     #15
000069EE  6000 F859                939                 BRA EXIT
000069F2                           940                 
000069F2                           941                 
000069F2                           942  
000069F2                           943  INVALID_EA  
000069F2                           944                  * TODO: IMPLEMENT
000069F2                           945                  *** CLEAR OUT A6
000069F2                           946                  ** PUT INVALID MESSAGE INTO A6
000069F2  6000 F855                947                  BRA EXIT
000069F6                           948  INVALID_OP  
000069F6                           949                  ** TODO: IMPLEMENT
000069F6                           950                 *** CLEAR OUT A6
000069F6                           951                  ** PUT INVALID MESSAGE INTO A6
000069F6  6000 F851                952                  BRA EXIT             
000069FA                           953                  
000069FA  43F8 618B                954  NOP                 LEA     NOP_disp,A1          
000069FE  103C 000E                955                      MOVE.B  #14,D0
00006A02  4E4F                     956                      TRAP    #15
00006A04  6000 F843                957                      BRA     EXIT
00006A08                           958                   
00006A08                           959  RTS      
00006A08  43F8 61F2                960                      LEA     RTS_disp,A1          
00006A0C  103C 000E                961                      MOVE.B  #14,D0
00006A10  4E4F                     962                      TRAP    #15 
00006A12  6000 F835                963                      BRA     EXIT
00006A16                           964  JSR      
00006A16  4DF9 00006BCE            965                      LEA     BUFFER, A6
00006A1C  1CFC 004A                966                      MOVE.B #'J', (A6)+
00006A20  1CFC 0053                967                      MOVE.B #'S', (A6)+
00006A24  1CFC 0052                968                      MOVE.B #'R', (A6)+
00006A28  1CFC 0020                969                      MOVE.B #' ', (A6)+
00006A2C  43F9 00006BCE            970                      LEA     BUFFER, A1
00006A32                           971                      ** BITS 10 - 12 MODE       
00006A32                           972                      ** BITS 13 - 16 REGISTER
00006A32  103C 000E                973                      MOVE.B  #14,D0
00006A36  4E4F                     974                      TRAP    #15 
00006A38  6000 F80F                975                      BRA     EXIT
00006A3C                           976                    
00006A3C                           977  MOVEM      
00006A3C                           978                     
00006A3C                           979                      ** SIZE SUBROUTINE
00006A3C                           980                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00006A3C  C47C 0040                981                      AND #%0000000001000000,D2 
00006A40                           982                      * WORD
00006A40  B4BC 00000040            983                      CMP.L   #%0000000001000000,D2
00006A46  4EB9 00006A5C            984                      JSR     MOVEM_W 
00006A4C                           985                      *LONG
00006A4C  B4BC 00000040            986                      CMP.L   #%0000000001000000,D2 
00006A52                           987                     ** JSR     MOVEM_L
00006A52  103C 000E                988                      MOVE.B  #14,D0
00006A56  4E4F                     989                      TRAP    #15
00006A58  6000 F7EF                990                      BRA     EXIT 
00006A5C                           991                      
00006A5C                           992  MOVEM_W 
00006A5C  43F8 61A0                993                       LEA     MOVEM_disp,A1
00006A60                           994                      * PRINT MOVEM
00006A60  103C 000E                995                       MOVE.B  #14,D0
00006A64  4E4F                     996                       TRAP    #15
00006A66                           997          
00006A66                           998                      * PRINT WORD PORTION
00006A66  41F8 6237                999                       LEA     size_w, A0
00006A6A  103C 000E               1000                       MOVE.B  #14,D0
00006A6E  4E4F                    1001                       TRAP    #15 
00006A70                          1002          
00006A70  6000 F7D7               1003                       BRA     EXIT 
00006A74                          1004       
00006A74                          1005     
00006A74                          1006  COPY_OPCODE 
00006A74                          1007                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00006A74  4242                    1008                       CLR    D2  
00006A76  3405                    1009                       MOVE.W D5,D2 
00006A78  4E75                    1010                       RTS  
00006A7A                          1011                       
00006A7A                          1012                       
00006A7A                          1013                       
00006A7A                          1014                       
00006A7A                          1015                       
00006A7A                          1016  ***************************
00006A7A                          1017  
00006A7A                          1018  GETSIZE_ADDQ
00006A7A                          1019                   
00006A7A                          1020                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006A7A                          1021                 
00006A7A  4EB8 68F4               1022             JSR      bits8to10
00006A7E  B67C 0000               1023             CMP      #%000,D3
00006A82  6600 000C               1024             BNE      ADDQ_NOTBYTE
00006A86  4EB9 00006B9E           1025             JSR      SIZEISBYTE
00006A8C  4243                    1026             CLR      D3
00006A8E  4E75                    1027             RTS
00006A90                          1028             
00006A90                          1029  ADDQ_NOTBYTE
00006A90  B67C 0001               1030             CMP      #%001,D3
00006A94  6600 000C               1031             BNE      ADDQ_NOTWORD
00006A98  4EB9 00006BAE           1032             JSR      SIZEISWORD
00006A9E  4243                    1033             CLR      D3
00006AA0  4E75                    1034             RTS
00006AA2                          1035             
00006AA2                          1036  ADDQ_NOTWORD
00006AA2  B67C 0002               1037             CMP      #%010,D3
00006AA6  6600 FF4A               1038             BNE      INVALID_EA
00006AAA  4EB9 00006BBE           1039             JSR      SIZEISLONG
00006AB0  4243                    1040             CLR      D3
00006AB2  4E75                    1041             RTS
00006AB4                          1042                   
00006AB4                          1043                                   
00006AB4                          1044  ****************************
00006AB4                          1045  ****************************
00006AB4                          1046  
00006AB4                          1047                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006AB4                          1048                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006AB4                          1049                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006AB4                          1050  GETSIZE_ADD
00006AB4  4EB8 68F4               1051              JSR     bits8to10
00006AB8  B67C 0000               1052              CMP     #%000,D3
00006ABC  6600 0010               1053              BNE     ADD_NOTBYTE
00006AC0  4EB9 00006B9E           1054              JSR     SIZEISBYTE
00006AC6  3C3C 0001               1055              MOVE    #1,D6
00006ACA  4243                    1056              CLR     D3
00006ACC  4E75                    1057              RTS
00006ACE                          1058          
00006ACE                          1059  ADD_NOTBYTE 
00006ACE  B67C 0001               1060              CMP     #%001,D3
00006AD2  6600 0010               1061              BNE     ADD_NOTWORD
00006AD6  4EB9 00006BAE           1062              JSR     SIZEISWORD
00006ADC  3C3C 0001               1063              MOVE    #1,D6
00006AE0  4243                    1064              CLR     D3
00006AE2  4E75                    1065              RTS
00006AE4                          1066              
00006AE4                          1067  ADD_NOTWORD
00006AE4  B67C 0002               1068              CMP     #%010,D3
00006AE8  6600 0010               1069              BNE     ADD_NOTLEFT
00006AEC  4EB9 00006BBE           1070              JSR     SIZEISLONG
00006AF2  3C3C 0001               1071              MOVE    #1,D6
00006AF6  4243                    1072              CLR     D3
00006AF8  4E75                    1073              RTS
00006AFA                          1074              
00006AFA                          1075  ADD_NOTLEFT     ;check other direction
00006AFA  B67C 0004               1076              CMP     #%100,D3
00006AFE  6600 0010               1077              BNE     ADD_NOTRIGHTBYTE
00006B02  4EB9 00006B9E           1078              JSR     SIZEISBYTE
00006B08  3C3C 0002               1079              MOVE    #2,D6
00006B0C  4243                    1080              CLR     D3
00006B0E  4E75                    1081              RTS
00006B10                          1082              
00006B10                          1083  ADD_NOTRIGHTBYTE
00006B10  B67C 0005               1084              CMP     #%101,D3
00006B14  6600 0010               1085              BNE     ADD_NOTRIGHTWORD
00006B18  4EB9 00006BAE           1086              JSR     SIZEISWORD
00006B1E  3C3C 0002               1087              MOVE    #2,D6
00006B22  4243                    1088              CLR     D3
00006B24  4E75                    1089              RTS
00006B26                          1090  
00006B26                          1091  ADD_NOTRIGHTWORD
00006B26  B67C 0006               1092              CMP     #%110,D3
00006B2A  6600 FEC6               1093              BNE     INVALID_EA
00006B2E  4EB9 00006BBE           1094              JSR     SIZEISLONG
00006B34  3C3C 0002               1095              MOVE    #2,D6
00006B38  4243                    1096              CLR     D3
00006B3A  4E75                    1097              RTS 
00006B3C                          1098                               
00006B3C                          1099                       
00006B3C                          1100                       
00006B3C                          1101  *****************************                  
00006B3C                          1102  GETSIZE_ADDI
00006B3C  4EB8 68F4               1103          JSR     bits8to10
00006B40  B67C 0000               1104          CMP     #%000,D3
00006B44  6600 000C               1105          BNE     ADDI_NOTBYTE
00006B48  4EB9 00006B9E           1106          JSR     SIZEISBYTE
00006B4E  4243                    1107          CLR     D3
00006B50  4E75                    1108          RTS
00006B52                          1109  
00006B52                          1110  ADDI_NOTBYTE
00006B52  B67C 0001               1111          CMP     #%001,D3
00006B56  6600 000C               1112          BNE     ADDI_NOTWORD
00006B5A  4EB9 00006BAE           1113          JSR     SIZEISWORD
00006B60  4243                    1114          CLR     D3
00006B62  4E75                    1115          RTS
00006B64                          1116          
00006B64                          1117  ADDI_NOTWORD
00006B64  B67C 0002               1118          CMP     #%010,D3
00006B68  6600 FE88               1119          BNE     INVALID_EA
00006B6C  4EB9 00006BBE           1120          JSR     SIZEISLONG
00006B72  4243                    1121          CLR     D3
00006B74  4E75                    1122          RTS
00006B76                          1123          
00006B76                          1124                              
00006B76                          1125                       
00006B76                          1126  ********************************          
00006B76                          1127                       
00006B76                          1128                       
00006B76                          1129  ********************************                     
00006B76                          1130  GETSIZE_ADDA
00006B76  4EB8 68F4               1131          JSR     bits8to10
00006B7A  B67C 0003               1132          CMP     #%011,D3
00006B7E  6600 000C               1133          BNE     ADDA_NOTWORD
00006B82  4EB9 00006BAE           1134          JSR     SIZEISWORD
00006B88  4243                    1135          CLR     D3
00006B8A  4E75                    1136          RTS
00006B8C                          1137          
00006B8C                          1138  
00006B8C                          1139          
00006B8C                          1140  ADDA_NOTWORD
00006B8C  B67C 0007               1141          CMP     #%111,D3
00006B90  6600 FE60               1142          BNE     INVALID_EA
00006B94  4EB9 00006BBE           1143          JSR     SIZEISLONG
00006B9A  4243                    1144          CLR     D3
00006B9C  4E75                    1145          RTS
00006B9E                          1146  **********************************        
00006B9E                          1147      
00006B9E                          1148  SIZEISBYTE
00006B9E  1CFC 002E               1149         MOVE.B   #'.',(A6)+
00006BA2  1CFC 0042               1150         MOVE.B   #'B',(A6)+
00006BA6  1CFC 0020               1151         MOVE.B   #' ',(A6)+
00006BAA  4243                    1152         CLR      D3
00006BAC  4E75                    1153         RTS
00006BAE                          1154  
00006BAE                          1155  SIZEISWORD    
00006BAE  1CFC 002E               1156         MOVE.B   #'.',(A6)+
00006BB2  1CFC 0057               1157         MOVE.B   #'W',(A6)+
00006BB6  1CFC 0020               1158         MOVE.B   #' ',(A6)+
00006BBA  4243                    1159         CLR      D3
00006BBC  4E75                    1160         RTS
00006BBE                          1161                  
00006BBE                          1162  SIZEISLONG    
00006BBE  1CFC 002E               1163         MOVE.B   #'.',(A6)+
00006BC2  1CFC 004C               1164         MOVE.B   #'L',(A6)+
00006BC6  1CFC 0020               1165         MOVE.B   #' ',(A6)+
00006BCA  4243                    1166         CLR      D3
00006BCC  4E75                    1167         RTS
00006BCE                          1168                  
00006BCE                          1169       
00006BCE= 20 20 20 20 20 00       1170  BUFFER DC.B '     ',0     
00006BD4                          1171  
00006BD4                          1172      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     699C
ABSOLUTE_LONG_BUFFER  69CC
ABSOLUTE_WORD_BUFFER  69BA
ADD                 63EC
ADDA                63C6
ADDA_BUFFER         63D0
ADDA_DISP           61AA
ADDA_NOTWORD        6B8C
ADDI                648E
ADDI_BUFFER         6516
ADDI_DES            64B2
ADDI_DISP           61AF
ADDI_NOTBYTE        6B52
ADDI_NOTWORD        6B64
ADDI_SRC            64A4
ADDQ                662C
ADDQ_BUFFER         668A
ADDQ_DEST           6660
ADDQ_DISP           61B4
ADDQ_NOTBYTE        6A90
ADDQ_NOTWORD        6AA2
ADDQ_SRC            6648
ADDRESS_BUFFER      6996
ADDR_ODDBIT_MSG     60C4
ADDR_ORDER_CHECK    60EB
ADD_BUFFER          642C
ADD_DEST            646C
ADD_DIRECTION_REVERSED  6412
ADD_DISP            61A6
ADD_DONE            6440
ADD_NOTBYTE         6ACE
ADD_NOTLEFT         6AFA
ADD_NOTRIGHTBYTE    6B10
ADD_NOTRIGHTWORD    6B26
ADD_NOTWORD         6AE4
ADD_SRC             6448
AND                 6762
AND_BUFFER          676C
AND_DISP            61CF
ASL                 679E
ASL_BUFFER          67A8
ASL_DISP            61DE
ASR                 6782
ASR_BUFFER          678C
ASR_DISP            61E2
BACKSLASHSIGH       622C
BCC_DISP            61F6
BGT_DISP            61FA
BITS11TO13          6906
BITS11TO16          6928
BITS14TO16          6918
BITS1TO10           6938
BITS5TO7            68CE
BITS5TO8            68E2
BITS8TO10           68F4
BLE_DISP            61FE
BUFFER              6BCE
CLOSEPAREN          6230
CLR_DISP            61CB
CMP                 6722
CMP_BUFFER          672C
CODE0000            62AE
CODE0001            62C2
CODE0010            62C6
CODE0011            62CA
CODE0100            62CE
CODE0101            6302
CODE0110            6308
CODE0111            630C
CODE1000            6312
CODE1001            6324
CODE1010            632A
CODE1011            632E
CODE1100            6334
CODE1101            6346
CODE1110            6392
CODE1111            63C2
COMMASIGN           622A
COPY_OPCODE         6A74
CR                  D
DIVU                66C6
DIVU_BUFFER         66D0
DIVU_DISP           61C2
DOLLARSIGN          6224
DONE                68CC
ENDTEST_MSG         613F
EXIT                6249
FINISHER            689E
FIVE                6872
FOUR                6862
GETSIZE_ADD         6AB4
GETSIZE_ADDA        6B76
GETSIZE_ADDI        6B3C
GETSIZE_ADDQ        6A7A
HEXATABLE           6202
INPUT_BUFFER        623E
INSERT_NUM          6822
INVALIDEA_DISP      6183
INVALID_DISP        617E
INVALID_EA          69F2
INVALID_OP          69F6
JMP_MODE            67F2
JMP_TABLE           624E
JSR                 6A16
JSR_DISP            61EE
LEA                 6532
LEA_BUFFER          6556
LEA_DEST            6608
LEA_DISP            61C7
LEA_SRC             6568
LF                  A
LINEBREAK           617B
LINECOUNT           623D
LOCATION_ENDDATA    6244
LOCATION_END_MSG    60A7
LOCATION_STARTDATA  6240
LOCATION_START_MSG  6088
LSL                 67BA
LSL_BUFFER          67C4
LSL_DISP            61D6
LSR                 67D6
LSR_BUFFER          67E0
LSR_DISP            61DA
MINUSSIGN           6228
MODE000             694A
MODE001             6950
MODE010             6958
MODE011             6962
MODE100             696C
MODE101             697A
MODE110             6984
MODE111             698E
MOVEA_DISP          6194
MOVEM               6A3C
MOVEM_DISP          61A0
MOVEM_W             6A5C
MOVEQ               66A2
MOVEQ_BUFFER        66AC
MOVEQ_DISP          619A
MOVE_DISP           618F
MULS                6742
MULS_BUFFER         674C
MULS_DISP           61BD
NOP                 69FA
NOP_DISP            618B
ONE                 6832
ONEPAREN            68BE
OPENPAREN           622E
OR                  66E6
OR_BUFFER           66F0
OR_DISP             61D3
PAUSE_MSG           6125
PLUSSIGN            6226
POSTINCR            68AC
POUNDSIGN           6222
PRINT_BUFFER        69DE
ROL_DISP            61E6
ROR_DISP            61EA
RTS                 6A08
RTS_DISP            61F2
SEVEN               6892
SIX                 6882
SIZEISBYTE          6B9E
SIZEISLONG          6BBE
SIZEISWORD          6BAE
SIZE_B              6234
SIZE_L              623A
SIZE_W              6237
SPACE               6232
START               6000
SUB                 6702
SUB_BUFFER          670C
SUB_DISP            61B9
TABLE_LENGTH        6248
THREE               6852
TWO                 6842
WELCOME_MSG         6024
