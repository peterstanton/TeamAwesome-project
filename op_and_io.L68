00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2017 11:00:52 AM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C8              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 0000112C             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012E2             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001CFC             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 0000121F             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001D52             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 0000114B             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012E2             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001CFC             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 0000121F             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001D6C             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012F2             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001CF8             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C                            80                   
0000109C                            81                   ** ACTUAL MEMORY READING
0000109C  3612                      82                   MOVE.W  (A2), D3
0000109E                            83  
0000109E                            84                   * TEST OPCODES
0000109E                            85                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109E                            86                   ;MOVE.W  #$4E71,D3 * NOP
0000109E                            87                   ; MOVE.W  #$4E75,D3 * RTS
0000109E                            88                   ; MOVE.W  #$4EB0,D3 * JSR
0000109E                            89                    ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109E                            90                   ;MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109E                            91                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109E                            92                   ;MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109E                            93                    ; MOVE.W    #$5613, D3    *ADDQ.B #$3, (A3)
0000109E                            94                   ; MOVE.W     #$7E70, D3 *MOVEQ
0000109E                            95                   ; MOVE.W     #$80C0, D3 *DIVU
0000109E                            96                   ; MOVE.W     #$8000, D3 * OR
0000109E                            97                   ; MOVE.W        #$9000, D3 * SUB
0000109E                            98                   ; MOVE.W        #$B000, D3 * CMP
0000109E                            99                   ; MOVE.W        #$C1C0, D3 * MULS
0000109E                           100                   ; MOVE.W        #$C000, D3 * AND
0000109E                           101                   ; MOVE.W        #$E0F8, D3  *ASR
0000109E                           102                   ; MOVE.W        #$E1E2, D3  *ASL
0000109E                           103                   ; MOVE.W        #$E393, D3  *LSL
0000109E                           104                   ; MOVE.W        #$E2DC, D3  *LSR
0000109E                           105  
0000109E  4EB9 00001B1E            106                   JSR    PRINT_ADDRESS
000010A4  544A                     107                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010A6  3A03                     108                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010A8  183C 000C                109                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010AC  E86B                     110                   LSR.W   D4,D3       *Move the bits
000010AE  C6FC 0006                111                   MULU    #6,D3       *Form offset     
000010B2  4EB0 3000                112                   JSR     0(A0,D3)   *Jump indirect with index
000010B6  4EB9 00001B3E            113                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010BC                           114                   
000010BC                           115                   ** Actual reading of data
000010BC  B4CB                     116                   CMP     A3,A2
000010BE  6E00 022D                117                   BGT     EXIT
000010C2  60CA                     118                   BRA     MAIN_LOOP
000010C4                           119                   
000010C4                           120                   ** FOR TEST OPCODES
000010C4  6000 0227                121                   BRA      EXIT
000010C8                           122                                  
000010C8                           123      INCLUDE 'definitions.x68'
000010C8                           124  
000010C8  =0000000D                125  CR              EQU     $0D         carriage return
000010C8  =0000000A                126  LF              EQU     $0A         line feed
000010C8= 43 53 53 20 34 32 ...    127  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010EC= 42 79 20 54 65 61 ...    128                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
0000112C= 45 6E 74 65 72 20 ...    129  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
0000114B= 45 6E 74 65 72 20 ...    130  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001168= 41 64 64 72 65 73 ...    131  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
0000118F= 45 6E 64 69 6E 67 ...    132  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C9= 50 72 65 73 73 20 ...    133  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011E3= 52 65 61 63 68 65 ...    134  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011FE= 54 72 79 20 61 6E ...    135                      DC.B    'Try another location? (yes/no): ',0
0000121F= 0D 0A 00                 136  linebreak           DC.B    CR,LF,0
00001222                           137                      
00001222= 44 41 54 41 00           138  Invalid_disp        DC.B    'DATA',0
00001227= 57 52 4F 4E 47 45 ...    139  InvalidEA_disp      DC.B    'WRONGEA',0
0000122F                           140  
0000122F= 4E 4F 50 00              141  NOP_disp            DC.B    'NOP',0
00001233= 4D 4F 56 45 00           142  MOVE_disp           DC.B    'MOVE',0
00001238= 4D 4F 56 45 41 00        143  MOVEA_disp          DC.B    'MOVEA',0
0000123E= 4D 4F 56 45 51 00        144  MOVEQ_disp          DC.B    'MOVEQ',0
00001244= 4D 4F 56 45 4D 00        145  MOVEM_disp          DC.B    'MOVEM',0
0000124A= 41 44 44 00              146  ADD_disp            DC.B    'ADD',0
0000124E= 41 44 44 41 00           147  ADDA_disp           DC.B    'ADDA',0
00001253= 41 44 44 49 00           148  ADDI_disp           DC.B    'ADDI',0
00001258= 41 44 44 51 00           149  ADDQ_disp           DC.B    'ADDQ',0
0000125D= 53 55 42 00              150  SUB_disp            DC.B    'SUB',0
00001261= 4D 55 4C 53 00           151  MULS_disp           DC.B    'MULS',0
00001266= 44 49 56 55 00           152  DIVU_disp           DC.B    'DIVU',0
0000126B= 4C 45 41 00              153  LEA_disp            DC.B    'LEA',0
0000126F= 43 4C 52 00              154  CLR_disp            DC.B    'CLR',0
00001273= 41 4E 44 00              155  AND_disp            DC.B    'AND',0
00001277= 4F 52 00                 156  OR_disp             DC.B    'OR',0
0000127A= 4C 53 4C 00              157  LSL_disp            DC.B    'LSL',0
0000127E= 4C 53 52 00              158  LSR_disp            DC.B    'LSR',0
00001282= 41 53 4C 00              159  ASL_disp            DC.B    'ASL',0
00001286= 41 53 52 00              160  ASR_disp            DC.B    'ASR',0
0000128A= 52 4F 4C 00              161  ROL_disp            DC.B    'ROL',0
0000128E= 52 4F 52 00              162  ROR_disp            DC.B    'ROR',0
00001292= 4A 53 52 00              163  JSR_disp            DC.B    'JSR',0
00001296= 52 54 53 00              164  RTS_disp            DC.B    'RTS',0
0000129A= 42 43 43 00              165  BCC_disp            DC.B    'BCC',0
0000129E= 42 47 54 00              166  BGT_disp            DC.B    'BGT',0    
000012A2= 42 4C 45 00              167  BLE_disp            DC.b    'BLE',0
000012A6                           168  
000012A6                           169  
000012A6= 30 00                    170  hexaTable               DC.B    '0',0
000012A8= 31 00                    171                          DC.B    '1',0
000012AA= 32 00                    172                          DC.B    '2',0
000012AC= 33 00                    173                          DC.B    '3',0
000012AE= 34 00                    174                          DC.B    '4',0
000012B0= 35 00                    175                          DC.B    '5',0
000012B2= 36 00                    176                          DC.B    '6',0
000012B4= 37 00                    177                          DC.B    '7',0
000012B6= 38 00                    178                          DC.B    '8',0
000012B8= 39 00                    179                          DC.B    '9',0
000012BA= 41 00                    180                          DC.B    'A',0
000012BC= 42 00                    181                          DC.B    'B',0
000012BE= 43 00                    182                          DC.B    'C',0
000012C0= 44 00                    183                          DC.B    'D',0
000012C2= 45 00                    184                          DC.B    'E',0
000012C4= 46 00                    185                          DC.B    'F',0
000012C6= 23 00                    186  poundsign               DC.B    '#',0
000012C8= 24 00                    187  dollarsign              DC.B    '$',0
000012CA= 2B 00                    188  plussign                DC.B    '+',0
000012CC= 2D 00                    189  minussign               DC.B    '-',0
000012CE= 2C 00                    190  commasign               DC.B    ',',0
000012D0= 2F 00                    191  backslashsigh           DC.B    '/',0
000012D2= 28 00                    192  openparen               DC.B    '(',0
000012D4= 29 00                    193  closeparen              DC.B    ')',0
000012D6= 20 00                    194  space                   DC.B    ' ',0   
000012D8= 2E 42 00                 195  size_b                  DC.B    '.B',0
000012DB= 2E 57 00                 196  size_w                  DC.B    '.W',0        
000012DE= 2E 4C 00                 197  size_l                  DC.B    '.L',0
000012E1                           198  
000012E1                           199  linecount               DS.B    1       *storeage for lines on a screen
000012E2= 01                       200  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012E4                           201  location_startData      DS.L    1       *location on where to start reading data
000012E8                           202  location_endData        DS.L    1       *location on where to end reading data
000012EC                           203  table_length            DS.B    1       *Number of spaces in the table to print to console
000012ED                           204  
000012ED                           205  
000012ED                           206  -------------------- end include --------------------
000012ED                           207             
000012ED                           208  EXIT                 
000012EE  FFFF FFFF                209         SIMHALT   
000012F2                           210  
000012F2                           211  
000012F2                           212  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012F2  4EF9 00001352            213  jmp_table      JMP         code0000
000012F8                           214                  *ADDI
000012F8                           215  
000012F8  4EF9 00001366            216                 JMP         code0001
000012FE                           217                 *MOVE
000012FE                           218                 *MOVEA
000012FE                           219  
000012FE  4EF9 0000136C            220                 JMP         code0010
00001304                           221  
00001304  4EF9 0000136C            222                 JMP         code0011
0000130A                           223  
0000130A  4EF9 0000136C            224                 JMP         code0100
00001310                           225                             
00001310  4EF9 000013A0            226                 JMP         code0101
00001316                           227                 * ADDQ
00001316                           228                  
00001316                           229        
00001316  4EF9 000013A4            230                 JMP         code0110
0000131C                           231                 * BCC
0000131C                           232                 * BGT
0000131C                           233                 * BLE
0000131C                           234                 
0000131C  4EF9 000013A8            235                 JMP         code0111
00001322                           236                 * MOVEQ
00001322                           237  
00001322  4EF9 000013AC            238                 JMP         code1000
00001328                           239                 * DIVU
00001328                           240                 * OR
00001328                           241  
00001328  4EF9 000013BE            242                 JMP         code1001
0000132E                           243                  *SUB
0000132E  4EF9 000013C2            244                 JMP         code1010
00001334                           245                 
00001334  4EF9 000013C6            246                 JMP         code1011
0000133A                           247                 * CMP
0000133A                           248                 
0000133A  4EF9 000013CA            249                 JMP         code1100
00001340                           250                 * MULS
00001340                           251                 * AND
00001340                           252          
00001340  4EF9 000013DC            253                 JMP         code1101
00001346                           254                 *ADD
00001346                           255                 *ADDA
00001346  4EF9 00001428            256                 JMP         code1110
0000134C                           257                 * ASR
0000134C                           258                 * ASL
0000134C                           259                 * LSL
0000134C                           260                 * LSR
0000134C                           261                 * ROL
0000134C                           262                 * ROR
0000134C                           263  
0000134C  4EF9 00001458            264                 JMP         code1111
00001352                           265  
00001352                           266  
00001352                           267  code0000      
00001352  4EB9 00001976            268                 JSR          bits5to8 // RETURNS INTO D3
00001358  B6BC 00000006            269                 CMP.L        #%0110, D3
0000135E  6600 0724                270                 BNE          INVALID_OP
00001362  6000 01D0                271                 BRA          ADDI  
00001366                           272  
00001366                           273  code0001      
00001366  4EB9 0000145C            274                 JSR   MOVE_B
0000136C                           275                 *MOVE.B
0000136C                           276  
0000136C                           277  code0010        
0000136C                           278                  * MOVE.L
0000136C                           279                  * MOVEA.L
0000136C                           280  code0011        
0000136C                           281                  *MOVEA.W
0000136C                           282                  *MOVE.W
0000136C                           283  
0000136C                           284  code0100       
0000136C  4EB9 00001B18            285                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
00001372                           286                  
00001372                           287                 *NOP
00001372  C47C 0FFF                288                 AND     #%0000111111111111,D2
00001376  B4BC 00000E71            289                 CMP.L   #%000111001110001, D2
0000137C  6700 0720                290                 BEQ     NOP
00001380                           291                 
00001380                           292                 *RTS
00001380  C47C 0FFF                293                 AND     #%0000111111111111,D2
00001384  B4BC 00000E75            294                 CMP.L   #%0000111001110101, D2
0000138A  6700 0720                295                 BEQ     RTS
0000138E                           296  
0000138E                           297                 *JSR
0000138E  C47C 0FC0                298                 AND     #%0000111111000000,D2
00001392  B4BC 00000E80            299                 CMP.L   #%0000111010000000,D2
00001398  6700 0720                300                 BEQ     JSR
0000139C                           301                 
0000139C                           302                 * MOVEM
0000139C                           303                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
0000139C                           304                ** AND     #%0000111110000000,D2
0000139C                           305                 * DATA REGISTER
0000139C                           306                ** CMP.L   #%0000100010000000, D2
0000139C                           307                 ** JSR      MOVEM
0000139C                           308                 * ADDRESS REGISTER (DECREMENTED)
0000139C                           309                 ** CMP.L  #%0000110010000000, D2
0000139C                           310                 ** JSR    MOVEM
0000139C                           311                  
0000139C                           312                  ** TO DO: BRANCH IF INVALID OPCODE
0000139C                           313                  *LEA - if it's not the top codes, it's LEA
0000139C  6000 0238                314                  BRA     LEA
000013A0                           315  code0101      
000013A0                           316  
000013A0  6000 031E                317                  BRA   ADDQ
000013A4                           318  
000013A4  6000 06DE                319  code0110        BRA       INVALID_OP
000013A8                           320  
000013A8                           321  code0111       
000013A8  6000 038C                322                  BRA      MOVEQ
000013AC                           323  
000013AC                           324  code1000      
000013AC  4EB9 00001988            325                  JSR        bits8to10
000013B2  B67C 0003                326                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013B6  6700 03A2                327                  BEQ        DIVU
000013BA  6000 03BE                328                  BRA        OR       ** OTHERWISE OR
000013BE                           329                  
000013BE                           330  
000013BE                           331  code1001       
000013BE  6000 03D6                332                 BRA        SUB
000013C2  6000 06C0                333  code1010       BRA       INVALID_OP
000013C6                           334  
000013C6                           335  code1011       
000013C6  6000 03EE                336                 BRA         CMP
000013CA                           337  
000013CA                           338  code1100      
000013CA  4EB9 00001988            339                  JSR        bits8to10
000013D0  B67C 0007                340                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013D4  6700 0400                341                  BEQ        MULS
000013D8  6000 041C                342                  BRA        AND       ** OTHERWISE AND
000013DC                           343  
000013DC                           344  code1101       
000013DC  4EB9 00001B18            345                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013E2                           346                 *ADDA
000013E2  4EB9 00001988            347                 JSR      bits8to10
000013E8  B67C 0003                348                 CMP      #%011, D3  ** WORD
000013EC  6700 008E                349                 BEQ      ADDA
000013F0  B67C 0007                350                 CMP      #%111, D3   ** LONG
000013F4  6700 0086                351                 BEQ      ADDA
000013F8                           352                 
000013F8                           353                 *ADD
000013F8  B67C 0000                354                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
000013FC  6700 00A2                355                 BEQ      ADD
00001400  B67C 0001                356                 CMP      #%001, D3   ** WORD TO DATA REGISTER
00001404  6700 009A                357                 BEQ      ADD
00001408  B67C 0002                358                 CMP      #%010, D3   ** LONG TO DATA REGISTER
0000140C  6700 0092                359                 BEQ      ADD
00001410  B67C 0004                360                 CMP      #%100, D3   ** BYTE TO EA
00001414  6700 008A                361                 BEQ      ADD
00001418  B67C 0005                362                 CMP      #%101, D3   ** WORD TO EA
0000141C  6700 0082                363                 BEQ      ADD
00001420  B67C 0006                364                 CMP      #%110, D3   ** LONG TO EA
00001424  6700 007A                365                 BEQ      ADD
00001428                           366                 
00001428                           367  
00001428                           368  code1110       
00001428                           369                  * ASR
00001428  4EB9 000019CC            370                  JSR     bits1to10
0000142E  B67C 0383                371                  CMP     #%1110000011,D3
00001432  6700 03E2                372                  BEQ     ASR
00001436                           373                  
00001436                           374                  * ASL
00001436  B67C 0387                375                  CMP     #%1110000111,D3
0000143A  6700 03F6                376                  BEQ     ASL
0000143E                           377                  
0000143E                           378                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
0000143E                           379                  * LSL
0000143E  4244                     380                  CLR     D4
00001440  2803                     381                  MOVE.L  D3,D4
00001442  C8BC 00A98671            382                  AND.L   #11110001,D4
00001448  B87C 01C7                383                  CMP     #%111000111,D4
0000144C  6700 0400                384                  BEQ     LSL
00001450                           385                  
00001450                           386                  * LSR
00001450  B67C 038B                387                  CMP     #%1110001011,D3
00001454  6700 0414                388                  BEQ     LSR
00001458                           389                  
00001458                           390                  * ROL
00001458                           391                  
00001458                           392                  * ROR
00001458                           393  
00001458  6000 062A                394  code1111       BRA      INVALID_OP
0000145C                           395  
0000145C                           396  * ------------------------------------------
0000145C                           397  MOVE_B
0000145C  4EB9 0000146A            398                 JSR     MOVE_BUFFER
00001462  4EB9 00001CC8            399                 JSR     SIZEISBYTE
00001468  4E75                     400                 RTS
0000146A                           401  MOVE_BUFFER
0000146A  1CFC 004D                402                 MOVE.B #'M', (A6)+   
0000146E  1CFC 004F                403                 MOVE.B #'O', (A6)+ 
00001472  1CFC 0056                404                 MOVE.B #'V', (A6)+ 
00001476  1CFC 0045                405                 MOVE.B #'E', (A6)+ 
0000147A  4E75                     406                 RTS
0000147C                           407                 
0000147C                           408  * ----------------------------------
0000147C                           409  ** TO DO: FIND SOURCE AND DESTINATION
0000147C                           410  ADDA    
0000147C  4EB9 00001484            411                 JSR     ADDA_BUFFER
00001482  4E75                     412                 RTS
00001484                           413                  
00001484                           414  ADDA_BUFFER
00001484  1CFC 0041                415                 MOVE.B   #'A',(A6)+
00001488  1CFC 0044                416                 MOVE.B   #'D', (A6)+  
0000148C  1CFC 0044                417                 MOVE.B   #'D', (A6)+
00001490  1CFC 0041                418                 MOVE.B   #'A', (A6)+
00001494  4EB9 00001CA0            419                 JSR      GETSIZE_ADDA
0000149A  1CFC 0020                420                 MOVE.B   #' ', (A6)+
0000149E  4E75                     421                 RTS
000014A0                           422                 
000014A0                           423  *********************************************               
000014A0                           424  ADD    
000014A0  4EB9 000014A8            425                 JSR     ADD_BUFFER
000014A6  4E75                     426                 RTS
000014A8                           427                  
000014A8                           428  ADD_BUFFER
000014A8  1CFC 0041                429                 MOVE.B   #'A',(A6)+
000014AC  1CFC 0044                430                 MOVE.B   #'D', (A6)+  
000014B0  1CFC 0044                431                 MOVE.B   #'D', (A6)+
000014B4  4EB9 00001BDE            432                 JSR      GETSIZE_ADD
000014BA                           433                 
000014BA                           434                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014BA  BC7C 0001                435                 CMP      #1,D6
000014BE  6600 0018                436                 BNE      ADD_DIRECTION_REVERSED
000014C2  4EB9 000014EE            437                 JSR      ADD_SRC
000014C8  1CFC 002C                438                 MOVE.B   #',', (A6)+
000014CC  1CFC 0020                439                 MOVE.B   #' ', (A6)+
000014D0  4EB9 00001512            440                 JSR      ADD_DEST
000014D6  4E75                     441                 RTS
000014D8                           442                 
000014D8                           443                 
000014D8                           444  ADD_DIRECTION_REVERSED
000014D8  4246                     445                 CLR      D6
000014DA  4EB9 00001512            446                 JSR      ADD_DEST
000014E0  1CFC 002C                447                 MOVE.B   #',', (A6)+
000014E4  1CFC 0020                448                 MOVE.B   #' ', (A6)+
000014E8  4EB9 000014EE            449                 JSR      ADD_SRC             
000014EE                           450                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014EE                           451                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014EE                           452                 
000014EE                           453  ***********************************************        
000014EE                           454  
000014EE                           455  
000014EE                           456  
000014EE                           457  ****************************************************************************************
000014EE                           458  ADD_SRC
000014EE                           459  
000014EE  4EB9 0000199A            460                  JSR    bits11to13
000014F4  3803                     461                  MOVE   D3,D4
000014F6  41F9 00001886            462                  LEA     jmp_mode,A0    *Index into the table
000014FC  C6FC 0006                463                  MULU   #6,D3
00001500  4EB0 3000                464                  JSR    0(A0,D3)     
00001504  4EB9 000019AC            465                  JSR    bits14to16
0000150A  4EB9 000018B6            466                  JSR    insert_num
00001510  4E75                     467                  RTS
00001512                           468  
00001512                           469  ADD_DEST
00001512  363C 0000                470                  MOVE.W #%000,D3     ;Can only have a data register.
00001516  3803                     471                  MOVE   D3,D4
00001518  41F9 00001886            472                  LEA     jmp_mode,A0    *Index into the table
0000151E  C6FC 0006                473                  MULU    #6,D3       *Form offset     
00001522  4EB0 3000                474                  JSR     0(A0,D3)   *Jump indirect with index
00001526                           475                  
00001526  4EB9 00001962            476                  JSR     bits5to7
0000152C  4EB9 000018B6            477                  JSR     insert_num
00001532  4E75                     478                  RTS
00001534                           479  
00001534                           480  ADDI
00001534  4EB9 000015BA            481                  JSR     ADDI_BUFFER
0000153A  4EB9 00001548            482                  JSR     ADDI_SRC
00001540  4EB9 00001556            483                  JSR     ADDI_DES
00001546  4E75                     484                  RTS
00001548                           485                  
00001548                           486  ADDI_SRC                        
00001548  1CFC 0023                487                  MOVE.B  #'#', (A6)+
0000154C  1CFC 002C                488                  MOVE.B  #',', (A6)+
00001550  1CFC 0020                489                  MOVE.B  #' ', (A6)+
00001554  4E75                     490                  RTS
00001556                           491                    ** TODO: IMPLEMENT THIS IN EA
00001556                           492                  ** Immediate field—Data immediately following the instruction.
00001556                           493                  **If size = 00, the data is the low-order byte of the immediate word.
00001556                           494                  **If size = 01, the data is the entire immediate word.
00001556                           495                  **If size = 10, the data is the next two immediate words. 
00001556                           496  ADDI_DES
00001556                           497                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001556                           498                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001556  4EB9 0000199A            499                 JSR      bits11to13
0000155C  B67C 0001                500                 CMP      #%001, D3 **AN
00001560  6700 051E                501                 BEQ      INVALID_EA
00001564  B67C 0005                502                 CMP      #%101, D3 **COMPLICATED
00001568  6700 0516                503                 BEQ      INVALID_EA
0000156C  B67C 0006                504                 CMP      #%110, D3 **COMPLICATED
00001570  6700 050E                505                 BEQ      INVALID_EA
00001574                           506                 
00001574  4EB9 000019BC            507                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000157A  B67C 003C                508                 CMP      #%111100,D3 // immediate data
0000157E  6700 0500                509                 BEQ      INVALID_EA
00001582  B67C 003A                510                 CMP      #%111010,D3 // complicated
00001586  6700 04F8                511                 BEQ      INVALID_EA
0000158A  B67C 003B                512                 CMP      #%111011,D3 // complicated
0000158E  6700 04F0                513                 BEQ      INVALID_EA
00001592                           514                 
00001592  4EB9 0000199A            515                 JSR      bits11to13 ** grab bits to jump with\
00001598  3803                     516                 MOVE     D3,D4
0000159A  41F9 00001886            517                 LEA     jmp_mode,A0    *Index into the table
000015A0  C6FC 0006                518                 MULU    #6,D3       *Form offset     
000015A4  4EB0 3000                519                 JSR     0(A0,D3)   *Jump indirect with index
000015A8                           520                 
000015A8  4243                     521                 CLR     D3
000015AA  4EB9 000019AC            522                 JSR     bits14to16
000015B0  4EB9 000018B6            523                 JSR     insert_num
000015B6  4244                     524                 CLR     D4
000015B8                           525                 
000015B8  4E75                     526                 RTS
000015BA                           527                 
000015BA                           528                             
000015BA                           529  ADDI_BUFFER
000015BA  1CFC 0041                530                 MOVE.B   #'A',(A6)+
000015BE  1CFC 0044                531                 MOVE.B   #'D', (A6)+  
000015C2  1CFC 0044                532                 MOVE.B   #'D', (A6)+
000015C6  1CFC 0049                533                 MOVE.B   #'I', (A6)+
000015CA                           534                 
000015CA  4EB9 00001C66            535                 JSR      GETSIZE_ADDI
000015D0                           536                 
000015D0                           537                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015D0                           538                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015D0  1CFC 0020                539                 MOVE.B   #' ', (A6)+
000015D4  4E75                     540                 RTS
000015D6                           541                              
000015D6                           542  LEA
000015D6  4EB9 00001988            543                 JSR      bits8to10   // 1 1 1
000015DC  B47C 0007                544                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015E0  6600 04A2                545                 BNE      INVALID_OP
000015E4  4EB9 000015F8            546                 JSR      LEA_BUFFER
000015EA  4EB9 0000160A            547                 JSR      LEA_SRC
000015F0  4EB9 00001694            548                 JSR      LEA_DEST
000015F6  4E75                     549                 RTS
000015F8                           550                 
000015F8                           551  LEA_BUFFER 
000015F8  1CFC 004C                552                 MOVE.B   #'L',(A6)+
000015FC  1CFC 0045                553                 MOVE.B   #'E', (A6)+  
00001600  1CFC 0041                554                 MOVE.B   #'A', (A6)+
00001604  1CFC 0020                555                 MOVE.B   #' ', (A6)+
00001608  4E75                     556                 RTS
0000160A                           557            
0000160A                           558  LEA_SRC
0000160A                           559              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
0000160A  4EB9 0000199A            560              JSR      bits11to13  // source mode - D3
00001610  B67C 0000                561              CMP      #%000, D3
00001614  6700 046A                562              BEQ      INVALID_EA
00001618  B67C 0001                563              CMP      #%001, D3
0000161C  6700 0462                564              BEQ      INVALID_EA
00001620  B67C 0003                565              CMP      #%011, D3
00001624  6700 045A                566              BEQ      INVALID_EA
00001628  B67C 0004                567              CMP      #%100, D3
0000162C  6700 0452                568              BEQ      INVALID_EA
00001630  B67C 0005                569              CMP      #%101, D3
00001634  6700 044A                570              BEQ      INVALID_EA
00001638  B67C 0006                571              CMP      #%110, D3
0000163C  6700 0442                572              BEQ      INVALID_EA
00001640                           573  
00001640                           574              
00001640                           575              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00001640  4EB9 000019AC            576              JSR      bits14to16 // source register - d4
00001646  B67C 0004                577              CMP      #%100, D3
0000164A  6700 0434                578              BEQ      INVALID_EA
0000164E  B67C 0002                579              CMP      #%010, D3
00001652  6700 042C                580              BEQ      INVALID_EA
00001656  B67C 0003                581              CMP      #%011, D3
0000165A  6700 0424                582              BEQ      INVALID_EA
0000165E                           583              
0000165E                           584  
0000165E  4EB9 000019BC            585               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001664  B67C 003C                586               CMP      #%111100,D3 // immediate data
00001668  6700 0416                587               BEQ      INVALID_EA
0000166C  B67C 003A                588               CMP      #%111010,D3 // complicated
00001670  6700 040E                589               BEQ      INVALID_EA
00001674  B67C 003B                590               CMP      #%111011,D3 // complicated
00001678  6700 0406                591               BEQ      INVALID_EA
0000167C                           592     
0000167C  4EB9 0000199A            593               JSR      bits11to13 ** grab mode bits to jump with
00001682  3803                     594               MOVE    D3,D4
00001684  4EB9 000016B0            595               JSR     LOAD_MODE_JMP_TB
0000168A  1CFC 002C                596               MOVE.B     #',', (A6)+
0000168E  1CFC 0020                597               MOVE.B     #' ', (A6)+
00001692                           598  
00001692  4E75                     599               RTS
00001694                           600               
00001694                           601  LEA_DEST    
00001694  4244                     602                  CLR     D4               
00001696  363C 0001                603                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
0000169A  3803                     604                  MOVE    D3,D4
0000169C  4EB9 000016B0            605                  JSR     LOAD_MODE_JMP_TB
000016A2  4EB9 00001962            606                  JSR     bits5to7
000016A8  4EB9 000018B6            607                  JSR     insert_num
000016AE                           608                  
000016AE  4E75                     609                  RTS
000016B0                           610  LOAD_MODE_JMP_TB
000016B0  41F9 00001886            611                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING 
000016B6  C6FC 0006                612                  MULU    #6,D3       *Form offset     
000016BA  4EB0 3000                613                  JSR     0(A0,D3)   *Jump indirect with index
000016BE  4E75                     614                  RTS
000016C0                           615  
000016C0                           616  ADDQ
000016C0  4EB9 0000171E            617                  JSR     ADDQ_BUFFER
000016C6  4EB9 000016DC            618                  JSR     ADDQ_SRC
000016CC  1CFC 002C                619                  MOVE.B  #',',(A6)+
000016D0  1CFC 0020                620                  MOVE.B  #' ',(A6)+
000016D4  4EB9 000016F4            621                  JSR     ADDQ_DEST
000016DA  4E75                     622                  RTS                 ;BRA     PRINT_BUFFER
000016DC                           623  
000016DC                           624  ADDQ_SRC
000016DC  4EB9 00001962            625                  JSR     bits5to7
000016E2  1CFC 0023                626                  MOVE.B  #'#',(A6)+
000016E6  183C 0000                627                  MOVE.B  #%000,D4
000016EA  4EB9 000018B6            628                  JSR     insert_num
000016F0  4244                     629                  CLR     D4
000016F2  4E75                     630                  RTS
000016F4                           631                  
000016F4                           632  ADDQ_DEST
000016F4  4EB9 0000199A            633                 JSR      bits11to13
000016FA  3803                     634                 MOVE     D3,D4
000016FC  41F9 00001886            635                 LEA     jmp_mode,A0    *Index into the table
00001702  C6FC 0006                636                 MULU    #6,D3       *Form offset     
00001706  4EB0 3000                637                 JSR     0(A0,D3)   *Jump indirect with index
0000170A  4243                     638                 CLR     D3
0000170C  4EB9 000019AC            639                 JSR     bits14to16
00001712  4EB9 000018B6            640                 JSR     insert_num
00001718  4244                     641                 CLR     D4
0000171A  4243                     642                 CLR     D3
0000171C  4E75                     643                 RTS
0000171E                           644                 
0000171E                           645  
0000171E                           646  ADDQ_BUFFER
0000171E  1CFC 0041                647                 MOVE.B   #'A',(A6)+
00001722  1CFC 0044                648                 MOVE.B   #'D', (A6)+  
00001726  1CFC 0044                649                 MOVE.B   #'D', (A6)+
0000172A  1CFC 0051                650                 MOVE.B   #'Q', (A6)+
0000172E  4EB9 00001BA4            651                 JSR      GETSIZE_ADDQ
00001734                           652                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00001734                           653                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001734  4E75                     654                 RTS               
00001736                           655                 
00001736                           656  MOVEQ
00001736  4EB9 00001740            657                  JSR     MOVEQ_BUFFER
0000173C  6000 0400                658                  BRA     PRINT_BUFFER
00001740                           659  
00001740                           660  MOVEQ_BUFFER
00001740  1CFC 004D                661                 MOVE.B   #'M',(A6)+
00001744  1CFC 004F                662                 MOVE.B   #'O', (A6)+  
00001748  1CFC 0056                663                 MOVE.B   #'V', (A6)+
0000174C  1CFC 0045                664                 MOVE.B   #'E', (A6)+
00001750  1CFC 0051                665                 MOVE.B   #'Q', (A6)+
00001754  1CFC 0020                666                 MOVE.B   #' ', (A6)+
00001758  4E75                     667                 RTS
0000175A                           668  
0000175A                           669  DIVU
0000175A  4EB9 00001764            670                  JSR     DIVU_BUFFER
00001760  6000 03DC                671                  BRA     PRINT_BUFFER
00001764                           672  
00001764                           673  DIVU_BUFFER
00001764  1CFC 0044                674                 MOVE.B   #'D',(A6)+
00001768  1CFC 0049                675                 MOVE.B   #'I', (A6)+  
0000176C  1CFC 0056                676                 MOVE.B   #'V', (A6)+
00001770  1CFC 0055                677                 MOVE.B   #'U', (A6)+
00001774  1CFC 0020                678                 MOVE.B   #' ', (A6)+
00001778  4E75                     679                 RTS  
0000177A                           680  OR    
0000177A  4EB9 00001784            681                 JSR     OR_BUFFER
00001780  6000 03BC                682                 BRA     PRINT_BUFFER
00001784                           683                  
00001784                           684  OR_BUFFER
00001784  1CFC 004F                685                 MOVE.B   #'O',(A6)+
00001788  1CFC 0052                686                 MOVE.B   #'R', (A6)+  
0000178C  1CFC 002E                687                 MOVE.B   #'.', (A6)+
00001790                           688                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001790                           689                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001790                           690                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001790  1CFC 0020                691                 MOVE.B   #' ', (A6)+
00001794  4E75                     692                 RTS   
00001796                           693  
00001796                           694  SUB   
00001796  4EB9 000017A0            695                 JSR     SUB_BUFFER
0000179C  6000 03A0                696                 BRA     PRINT_BUFFER               
000017A0                           697  
000017A0                           698  SUB_BUFFER
000017A0  1CFC 0053                699                 MOVE.B   #'S',(A6)+
000017A4  1CFC 0055                700                 MOVE.B   #'U', (A6)+  
000017A8  1CFC 0042                701                 MOVE.B   #'B', (A6)+
000017AC  1CFC 002E                702                 MOVE.B   #'.', (A6)+
000017B0                           703                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017B0                           704                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017B0                           705                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017B0  1CFC 0020                706                 MOVE.B   #' ', (A6)+
000017B4  4E75                     707                 RTS  
000017B6                           708  CMP   
000017B6  4EB9 000017C0            709                 JSR     CMP_BUFFER
000017BC  6000 0380                710                 BRA     PRINT_BUFFER
000017C0                           711                  
000017C0                           712  CMP_BUFFER
000017C0  1CFC 0043                713                 MOVE.B   #'C',(A6)+
000017C4  1CFC 004D                714                 MOVE.B   #'M', (A6)+  
000017C8  1CFC 0050                715                 MOVE.B   #'P', (A6)+
000017CC  1CFC 002E                716                 MOVE.B   #'.', (A6)+
000017D0                           717                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017D0                           718                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017D0                           719                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017D0  1CFC 0020                720                 MOVE.B   #' ', (A6)+
000017D4  4E75                     721                 RTS   
000017D6                           722                 
000017D6                           723  MULS
000017D6  4EB9 000017E0            724                  JSR     MULS_BUFFER
000017DC  6000 0360                725                  BRA     PRINT_BUFFER
000017E0                           726  
000017E0                           727  MULS_BUFFER
000017E0  1CFC 004D                728                 MOVE.B   #'M',(A6)+
000017E4  1CFC 0055                729                 MOVE.B   #'U', (A6)+  
000017E8  1CFC 004C                730                 MOVE.B   #'L', (A6)+
000017EC  1CFC 0053                731                 MOVE.B   #'S', (A6)+
000017F0  1CFC 0020                732                 MOVE.B   #' ', (A6)+
000017F4  4E75                     733                 RTS
000017F6                           734  
000017F6                           735  AND    
000017F6  4EB9 00001800            736                 JSR     AND_BUFFER
000017FC  6000 0340                737                 BRA     PRINT_BUFFER
00001800                           738                  
00001800                           739  AND_BUFFER
00001800  1CFC 0041                740                 MOVE.B   #'A',(A6)+
00001804  1CFC 004E                741                 MOVE.B   #'N', (A6)+  
00001808  1CFC 0044                742                 MOVE.B   #'D', (A6)+
0000180C  1CFC 002E                743                 MOVE.B   #'.', (A6)+
00001810                           744                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001810                           745                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001810                           746                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001810  1CFC 0020                747                 MOVE.B   #' ', (A6)+
00001814  4E75                     748                 RTS    
00001816                           749  
00001816                           750  ASR     
00001816  4EB9 00001820            751                  JSR     ASR_BUFFER
0000181C  6000 0320                752                  BRA     PRINT_BUFFER
00001820                           753  
00001820                           754  ASR_BUFFER
00001820  1CFC 0041                755                 MOVE.B   #'A',(A6)+
00001824  1CFC 0053                756                 MOVE.B   #'S', (A6)+  
00001828  1CFC 0052                757                 MOVE.B   #'R', (A6)+
0000182C  1CFC 0020                758                 MOVE.B   #' ', (A6)+
00001830  4E75                     759                 RTS      
00001832                           760  
00001832                           761  ASL     
00001832  4EB9 0000183C            762                  JSR     ASL_BUFFER
00001838  6000 0304                763                  BRA     PRINT_BUFFER
0000183C                           764  
0000183C                           765  ASL_BUFFER
0000183C  1CFC 0041                766                 MOVE.B   #'A',(A6)+
00001840  1CFC 0053                767                 MOVE.B   #'S', (A6)+  
00001844  1CFC 004C                768                 MOVE.B   #'L', (A6)+
00001848  1CFC 0020                769                 MOVE.B   #' ', (A6)+
0000184C  4E75                     770                 RTS     
0000184E                           771  
0000184E                           772  LSL     
0000184E  4EB9 00001858            773                  JSR     LSL_BUFFER
00001854  6000 02E8                774                  BRA     PRINT_BUFFER
00001858                           775  
00001858                           776  LSL_BUFFER
00001858  1CFC 004C                777                 MOVE.B   #'L',(A6)+
0000185C  1CFC 0053                778                 MOVE.B   #'S', (A6)+  
00001860  1CFC 004C                779                 MOVE.B   #'L', (A6)+
00001864  1CFC 0020                780                 MOVE.B   #' ', (A6)+
00001868  4E75                     781                 RTS     
0000186A                           782  
0000186A                           783  LSR     
0000186A  4EB9 00001874            784                  JSR     LSR_BUFFER
00001870  6000 02CC                785                  BRA     PRINT_BUFFER
00001874                           786  
00001874                           787  LSR_BUFFER
00001874  1CFC 004C                788                 MOVE.B   #'L',(A6)+
00001878  1CFC 0053                789                 MOVE.B   #'S', (A6)+  
0000187C  1CFC 0052                790                 MOVE.B   #'R', (A6)+
00001880  1CFC 0020                791                 MOVE.B   #' ', (A6)+
00001884  4E75                     792                 RTS       
00001886                           793                 
00001886                           794  jmp_mode
00001886  4EF9 000019DE            795                  JMP     MODE000  ** DN
0000188C  4EF9 000019E4            796                  JMP     MODE001  ** AN
00001892  4EF9 000019EC            797                  JMP     MODE010  ** (AN)
00001898  4EF9 000019F6            798                  JMP     MODE011  ** (AN)+   
0000189E  4EF9 00001A00            799                  JMP     MODE100  ** -(AN)
000018A4  4EF9 00001A0E            800                  JMP     MODE101  **INVALID
000018AA  4EF9 00001A18            801                  JMP     MODE110  **INVALID
000018B0  4EF9 00001A22            802                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000018B6                           803  
000018B6                           804                  
000018B6                           805  insert_num
000018B6                           806                  
000018B6                           807                  ;get number from D3
000018B6  B67C 0000                808                  CMP     #%000,D3       ;0
000018BA  6600 000A                809                  BNE     ONE         
000018BE  1CFC 0030                810                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000018C2  6000 006E                811                  BRA     FINISHER
000018C6                           812                  
000018C6  B67C 0001                813  ONE             CMP     #%001,D3       ;1
000018CA  6600 000A                814                  BNE     TWO 
000018CE  1CFC 0031                815                  MOVE.B  #'1',(A6)+
000018D2  6000 005E                816                  BRA     FINISHER
000018D6                           817  
000018D6                           818                  
000018D6  B67C 0002                819  TWO             CMP     #%010,D3        ;2
000018DA  6600 000A                820                  BNE     THREE
000018DE  1CFC 0032                821                  MOVE.B  #'2',(A6)+
000018E2  6000 004E                822                  BRA     FINISHER
000018E6                           823                  
000018E6  B67C 0003                824  THREE           CMP     #%011,D3        ;3
000018EA  6600 000A                825                  BNE     FOUR
000018EE  1CFC 0033                826                  MOVE.B  #'3',(A6)+
000018F2  6000 003E                827                  BRA     FINISHER
000018F6                           828                  
000018F6  B67C 0004                829  FOUR            CMP     #%100,D3        ;4
000018FA  6600 000A                830                  BNE     FIVE
000018FE  1CFC 0034                831                  MOVE.B  #'4',(A6)+
00001902  6000 002E                832                  BRA     FINISHER
00001906                           833                  
00001906  B67C 0005                834  FIVE            CMP     #%101,D3        ;5
0000190A  6600 000A                835                  BNE     SIX
0000190E  1CFC 0035                836                  MOVE.B  #'5',(A6)+
00001912  6000 001E                837                  BRA     FINISHER
00001916                           838                  
00001916  B67C 0006                839  SIX             CMP     #%110,D3        ;6
0000191A  6600 000A                840                  BNE     SEVEN
0000191E  1CFC 0036                841                  MOVE.B  #'6',(A6)+
00001922  6000 000E                842                  BRA     FINISHER
00001926                           843                  
00001926  B67C 0007                844  SEVEN           CMP     #%111,D3        ;7
0000192A  1CFC 0037                845                  MOVE.B  #'7',(A6)+
0000192E  6000 0002                846                  BRA     FINISHER
00001932                           847                  
00001932                           848  FINISHER                
00001932                           849                  
00001932                           850                  ;check D4, do we need to do stuff?
00001932  B87C 0002                851                  CMP     #%010,D4
00001936  6600 0008                852                  BNE     POSTINCR
0000193A  1CFC 0029                853                  MOVE.B  #')',(A6)+
0000193E  4E75                     854                  RTS
00001940                           855                  
00001940  B87C 0003                856  POSTINCR        CMP     #%011,D4
00001944  6600 000C                857                  BNE     ONEPAREN
00001948  1CFC 0029                858                  MOVE.B  #')',(A6)+
0000194C  1CFC 002B                859                  MOVE.B  #'+',(A6)+
00001950  4E75                     860                  RTS
00001952                           861                  
00001952  B87C 0004                862  ONEPAREN        CMP     #%100,D4
00001956  6600 0008                863                  BNE     DONE
0000195A  1CFC 0029                864                  MOVE.B  #')',(A6)+                
0000195E                           865  
0000195E  4244                     866                  CLR     D4
00001960  4E75                     867  DONE            RTS
00001962                           868  
00001962                           869          
00001962                           870                 
00001962                           871  bits5to7
00001962  4243                     872                 CLR      D3
00001964  4EB9 00001B18            873                 JSR      COPY_OPCODE  // opcode copied to D2
0000196A  C47C 0E00                874                 AND      #%0000111000000000, D2
0000196E  E09A                     875                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001970  E29A                     876                 ROR.L    #1, D2
00001972  3602                     877                 MOVE.W   D2,D3 // moving isolated bits into d3
00001974  4E75                     878                 RTS
00001976                           879                 
00001976                           880  bits5to8
00001976  4243                     881                 CLR      D3
00001978  4EB9 00001B18            882                 JSR      COPY_OPCODE  // opcode copied to D2
0000197E  C47C 0F00                883                 AND      #%0000111100000000, D2
00001982  E09A                     884                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001984  3602                     885                 MOVE.W   D2,D3 // moving isolated bits into d3
00001986  4E75                     886                 RTS
00001988                           887                 
00001988                           888  bits8to10
00001988  4243                     889                 CLR      D3
0000198A  4EB9 00001B18            890                 JSR      COPY_OPCODE  // opcode copied to D2
00001990  C47C 01C0                891                 AND      #%0000000111000000, D2
00001994  EC9A                     892                 ROR.L    #6, D2          // rotate bits so isolated at the end
00001996  3602                     893                 MOVE.W   D2,D3 // moving isolated bits into d3
00001998  4E75                     894                 RTS               
0000199A                           895             
0000199A                           896  bits11to13
0000199A  4243                     897                 CLR      D3
0000199C  4EB9 00001B18            898                 JSR      COPY_OPCODE  // opcode copied to D2
000019A2  C47C 0038                899                 AND      #%0000000000111000, D2
000019A6  E69A                     900                 ROR.L    #3, D2          // rotate bits so isolated at the end
000019A8  3602                     901                 MOVE.W   D2,D3 // moving isolated bits into d3
000019AA  4E75                     902                 RTS
000019AC                           903             
000019AC                           904  bits14to16
000019AC  4243                     905                 CLR      D3
000019AE  4EB9 00001B18            906                 JSR      COPY_OPCODE  // opcode copied to D2
000019B4  C47C 0007                907                 AND      #%0000000000000111, D2
000019B8  3602                     908                 MOVE.W   D2,D3 // moving isolated bits into d3
000019BA  4E75                     909                 RTS
000019BC                           910  bits11to16
000019BC  4243                     911                 CLR      D3
000019BE  4EB9 00001B18            912                 JSR      COPY_OPCODE  // opcode copied to D2
000019C4  C47C 003F                913                 AND      #%0000000000111111, D2
000019C8  3602                     914                 MOVE.W   D2,D3 // moving isolated bits into d3
000019CA  4E75                     915                 RTS
000019CC                           916  bits1to10
000019CC  4243                     917                 CLR      D3
000019CE  4EB9 00001B18            918                 JSR      COPY_OPCODE  // opcode copied to D2
000019D4  C47C FFC0                919                 AND      #%1111111111000000, D2
000019D8  EC9A                     920                 ROR.L    #6, D2
000019DA  3602                     921                 MOVE.W   D2,D3 // moving isolated bits into d3
000019DC  4E75                     922                 RTS
000019DE                           923  ** DN       
000019DE                           924  MODE000         
000019DE  1CFC 0044                925                  MOVE.B  #'D',(A6)+     
000019E2  4E75                     926                  RTS
000019E4                           927  
000019E4                           928  ** AN
000019E4                           929  MODE001         
000019E4  4EB9 00001A38            930                  JSR ADDRESS_BUFFER  
000019EA  4E75                     931                  RTS      
000019EC                           932  
000019EC                           933   ** (AN)
000019EC                           934  MODE010         
000019EC  1CFC 0028                935                  MOVE.B  #'(', (A6)+
000019F0  1CFC 0041                936                  MOVE.B  #'A',(A6)+  
000019F4  4E75                     937                  RTS      
000019F6                           938  
000019F6                           939  ** (AN)+ 
000019F6                           940  MODE011         
000019F6  1CFC 0028                941                  MOVE.B  #'(', (A6)+
000019FA  1CFC 0041                942                  MOVE.B  #'A',(A6)+ 
000019FE  4E75                     943                  RTS       
00001A00                           944  
00001A00                           945   ** -(AN)
00001A00                           946  MODE100         
00001A00  1CFC 002D                947                  MOVE.B  #'-', (A6)+
00001A04  1CFC 0028                948                  MOVE.B  #'(', (A6)+
00001A08  1CFC 0041                949                  MOVE.B  #'A',(A6)+
00001A0C  4E75                     950                  RTS
00001A0E                           951                  
00001A0E                           952  **INVALID               
00001A0E                           953  MODE101         
00001A0E  1CFC 0028                954                  MOVE.B  #'(', (A6)+
00001A12  1CFC 0041                955                  MOVE.B  #'A',(A6)+ 
00001A16  4E75                     956                  RTS
00001A18                           957                  
00001A18                           958  **INVALID
00001A18                           959  MODE110         
00001A18  1CFC 0028                960                  MOVE.B  #'(', (A6)+
00001A1C  1CFC 0041                961                  MOVE.B  #'A',(A6)+
00001A20  4E75                     962                  RTS  
00001A22                           963  
00001A22                           964  ** ABSOLUTE AND IMMEDIATE            
00001A22                           965  MODE111         
00001A22                           966                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001A22  1CFC 0024                967                 MOVE.B   #'$', (A6)+  
00001A26  4EB9 00001B5A            968                 JSR      PRINT_DEREF_ADDRESS
00001A2C  544A                     969                 ADD.W    #2, A2
00001A2E  4EB9 00001B5A            970                 JSR      PRINT_DEREF_ADDRESS
00001A34  544A                     971                 ADD.W    #2, A2
00001A36  4E75                     972                 RTS            
00001A38                           973                                          
00001A38                           974  ADDRESS_BUFFER
00001A38  1CFC 0041                975                  MOVE.B  #'A',(A6)+ 
00001A3C  4E75                     976                  RTS
00001A3E                           977                 
00001A3E                           978  ABSOLUTE_BUFFER
00001A3E  4243                     979                 CLR      D3
00001A40  3604                     980                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001A42  1CF8 0024                981                 MOVE.B   '$', (A6)+
00001A46  B67C 0000                982                 CMP.W    #%000, D3
00001A4A  6700 0010                983                 BEQ      ABSOLUTE_WORD_BUFFER
00001A4E  4243                     984                 CLR      D3
00001A50  3604                     985                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001A52  B67C 0001                986                 CMP.W    #%001, D3
00001A56  6700 0016                987                 BEQ      ABSOLUTE_LONG_BUFFER
00001A5A  4E75                     988                 RTS
00001A5C                           989                 
00001A5C                           990  ABSOLUTE_WORD_BUFFER
00001A5C                           991                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A5C                           992                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A5C  1CFC 0046                993                         MOVE.B #'F', (A6)+ 
00001A60  1CFC 0046                994                         MOVE.B #'F', (A6)+ 
00001A64  1CFC 0046                995                         MOVE.B #'F', (A6)+ 
00001A68  1CFC 0046                996                         MOVE.B #'F', (A6)+ 
00001A6C  4E75                     997                         RTS       
00001A6E                           998                    
00001A6E                           999  ABSOLUTE_LONG_BUFFER       
00001A6E                          1000                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A6E                          1001                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A6E  1CFC 0047               1002                         MOVE.B #'G', (A6)+ 
00001A72  1CFC 0047               1003                         MOVE.B #'G', (A6)+ 
00001A76  1CFC 0047               1004                         MOVE.B #'G', (A6)+ 
00001A7A  1CFC 0047               1005                         MOVE.B #'G', (A6)+
00001A7E  4E75                    1006                         RTS 
00001A80                          1007  
00001A80                          1008  INVALID_EA  
00001A80                          1009                  * TODO: IMPLEMENT
00001A80                          1010                  *** CLEAR OUT A6
00001A80                          1011                  ** PUT INVALID MESSAGE INTO A6
00001A80  6000 F86B               1012                  BRA EXIT
00001A84                          1013  INVALID_OP  
00001A84                          1014                  ** TODO: IMPLEMENT
00001A84                          1015                 *** CLEAR OUT A6
00001A84                          1016                  ** PUT INVALID MESSAGE INTO A6
00001A84  1CFC 0044               1017                      MOVE.B #'D', (A6)+
00001A88  1CFC 0041               1018                      MOVE.B #'A', (A6)+
00001A8C  1CFC 0054               1019                      MOVE.B #'T', (A6)+
00001A90  1CFC 0041               1020                      MOVE.B #'A', (A6)+ 
00001A94  1CFC 0020               1021                      MOVE.B #' ', (A6)+ 
00001A98  4EB9 00001B5A           1022                      JSR     PRINT_DEREF_ADDRESS
00001A9E                          1023            
00001A9E                          1024                  
00001A9E  1CFC 004E               1025  NOP                 MOVE.B #'N', (A6)+
00001AA2  1CFC 004F               1026                      MOVE.B #'O', (A6)+
00001AA6  1CFC 0050               1027                      MOVE.B #'P', (A6)+
00001AAA  4E75                    1028                      RTS
00001AAC                          1029  
00001AAC                          1030                   
00001AAC                          1031  RTS      
00001AAC  43F8 1296               1032                      LEA     RTS_disp,A1          
00001AB0  103C 000E               1033                      MOVE.B  #14,D0
00001AB4  4E4F                    1034                      TRAP    #15 
00001AB6  6000 F835               1035                      BRA     EXIT
00001ABA                          1036  JSR      
00001ABA  4DF9 00001CF8           1037                      LEA     BUFFER, A6
00001AC0  1CFC 004A               1038                      MOVE.B #'J', (A6)+
00001AC4  1CFC 0053               1039                      MOVE.B #'S', (A6)+
00001AC8  1CFC 0052               1040                      MOVE.B #'R', (A6)+
00001ACC  1CFC 0020               1041                      MOVE.B #' ', (A6)+
00001AD0  43F9 00001CF8           1042                      LEA     BUFFER, A1
00001AD6                          1043                      ** BITS 10 - 12 MODE       
00001AD6                          1044                      ** BITS 13 - 16 REGISTER
00001AD6  103C 000E               1045                      MOVE.B  #14,D0
00001ADA  4E4F                    1046                      TRAP    #15 
00001ADC  6000 F80F               1047                      BRA     EXIT
00001AE0                          1048                    
00001AE0                          1049  MOVEM      
00001AE0                          1050                     
00001AE0                          1051                      ** SIZE SUBROUTINE
00001AE0                          1052                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001AE0  C47C 0040               1053                      AND #%0000000001000000,D2 
00001AE4                          1054                      * WORD
00001AE4  B4BC 00000040           1055                      CMP.L   #%0000000001000000,D2
00001AEA  4EB9 00001B00           1056                      JSR     MOVEM_W 
00001AF0                          1057                      *LONG
00001AF0  B4BC 00000040           1058                      CMP.L   #%0000000001000000,D2 
00001AF6                          1059                     ** JSR     MOVEM_L
00001AF6  103C 000E               1060                      MOVE.B  #14,D0
00001AFA  4E4F                    1061                      TRAP    #15
00001AFC  6000 F7EF               1062                      BRA     EXIT 
00001B00                          1063                      
00001B00                          1064  MOVEM_W 
00001B00  43F8 1244               1065                       LEA     MOVEM_disp,A1
00001B04                          1066                      * PRINT MOVEM
00001B04  103C 000E               1067                       MOVE.B  #14,D0
00001B08  4E4F                    1068                       TRAP    #15
00001B0A                          1069          
00001B0A                          1070                      * PRINT WORD PORTION
00001B0A  41F8 12DB               1071                       LEA     size_w, A0
00001B0E  103C 000E               1072                       MOVE.B  #14,D0
00001B12  4E4F                    1073                       TRAP    #15 
00001B14                          1074          
00001B14  6000 F7D7               1075                       BRA     EXIT 
00001B18                          1076       
00001B18                          1077     
00001B18                          1078  COPY_OPCODE 
00001B18                          1079                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001B18  4242                    1080                       CLR    D2  
00001B1A  3405                    1081                       MOVE.W D5,D2 
00001B1C  4E75                    1082                       RTS  
00001B1E                          1083  
00001B1E                          1084  PRINT_ADDRESS     
00001B1E  4242                    1085                   CLR         D2
00001B20  143C 0010               1086                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B24  220A                    1087                   MOVE.L      A2,D1        
00001B26  103C 000F               1088                   MOVE.B      #15,D0          
00001B2A  4E4F                    1089                   TRAP        #15            
00001B2C  1CFC 0020               1090                   MOVE.B      #' ', (A6)+
00001B30  1CFC 0020               1091                   MOVE.B      #' ', (A6)+
00001B34  1CFC 0020               1092                   MOVE.B      #' ', (A6)+
00001B38  1CFC 0020               1093                   MOVE.B      #' ', (A6)+
00001B3C  4E75                    1094                   RTS     
00001B3E                          1095  PRINT_BUFFER    
00001B3E  1CFC 0000               1096                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B42  43F9 00001CF8           1097                 LEA      BUFFER, A1
00001B48  303C 000E               1098                 MOVE.W   #14,D0
00001B4C  4E4F                    1099                 TRAP     #15
00001B4E  43F8 121F               1100                 LEA     linebreak,A1            *appends line at the end of the user input
00001B52  103C 000E               1101                 MOVE.B  #14,D0
00001B56  4E4F                    1102                 TRAP    #15
00001B58  4E75                    1103                 RTS  
00001B5A                          1104  
00001B5A                          1105  PRINT_DEREF_ADDRESS
00001B5A  1CFC 0000               1106                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B5E  43F9 00001CF8           1107                 LEA      BUFFER, A1
00001B64  303C 000E               1108                 MOVE.W   #14,D0
00001B68  4E4F                    1109                 TRAP     #15
00001B6A  4DF9 00001CF8           1110                 LEA      BUFFER, A6
00001B70  4242                    1111                 CLR      D2
00001B72  0C52 0000               1112                 CMP      #0, (A2)
00001B76  6700 0006               1113                 BEQ      PRINT_ZEROES
00001B7A  6000 001A               1114                 BRA      PRINT_HEX
00001B7E                          1115                 
00001B7E                          1116  PRINT_ZEROES
00001B7E  4DF9 00001CF8           1117                LEA   BUFFER,A6
00001B84  1CFC 0030               1118                MOVE.B #'0', (A6)+
00001B88  1CFC 0030               1119                MOVE.B #'0', (A6)+
00001B8C  1CFC 0030               1120                MOVE.B #'0', (A6)+
00001B90  1CFC 0030               1121                MOVE.B #'0', (A6)+
00001B94  4E75                    1122                RTS
00001B96                          1123  PRINT_HEX
00001B96  143C 0010               1124                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B9A  3212                    1125                 MOVE.W      (A2),D1        // print the hex value in current address      
00001B9C  103C 000F               1126                 MOVE.B      #15,D0          
00001BA0  4E4F                    1127                 TRAP        #15 
00001BA2  4E75                    1128                 RTS
00001BA4                          1129   ***************************
00001BA4                          1130  
00001BA4                          1131  GETSIZE_ADDQ
00001BA4                          1132                   
00001BA4                          1133                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001BA4                          1134                 
00001BA4  4EB8 1988               1135             JSR      bits8to10
00001BA8  B67C 0000               1136             CMP      #%000,D3
00001BAC  6600 000C               1137             BNE      ADDQ_NOTBYTE
00001BB0  4EB9 00001CC8           1138             JSR      SIZEISBYTE
00001BB6  4243                    1139             CLR      D3
00001BB8  4E75                    1140             RTS
00001BBA                          1141             
00001BBA                          1142  ADDQ_NOTBYTE
00001BBA  B67C 0001               1143             CMP      #%001,D3
00001BBE  6600 000C               1144             BNE      ADDQ_NOTWORD
00001BC2  4EB9 00001CD8           1145             JSR      SIZEISWORD
00001BC8  4243                    1146             CLR      D3
00001BCA  4E75                    1147             RTS
00001BCC                          1148             
00001BCC                          1149  ADDQ_NOTWORD
00001BCC  B67C 0002               1150             CMP      #%010,D3
00001BD0  6600 FEAE               1151             BNE      INVALID_EA
00001BD4  4EB9 00001CE8           1152             JSR      SIZEISLONG
00001BDA  4243                    1153             CLR      D3
00001BDC  4E75                    1154             RTS
00001BDE                          1155                   
00001BDE                          1156                                   
00001BDE                          1157  ****************************
00001BDE                          1158  ****************************
00001BDE                          1159                     
00001BDE                          1160  ****************************
00001BDE                          1161  
00001BDE                          1162                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001BDE                          1163                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001BDE                          1164                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001BDE                          1165  GETSIZE_ADD
00001BDE  4EB8 1988               1166              JSR     bits8to10
00001BE2  B67C 0000               1167              CMP     #%000,D3
00001BE6  6600 0010               1168              BNE     ADD_NOTBYTE
00001BEA  4EB9 00001CC8           1169              JSR     SIZEISBYTE
00001BF0  3C3C 0001               1170              MOVE    #1,D6
00001BF4  4243                    1171              CLR     D3
00001BF6  4E75                    1172              RTS
00001BF8                          1173          
00001BF8                          1174  ADD_NOTBYTE 
00001BF8  B67C 0001               1175              CMP     #%001,D3
00001BFC  6600 0010               1176              BNE     ADD_NOTWORD
00001C00  4EB9 00001CD8           1177              JSR     SIZEISWORD
00001C06  3C3C 0001               1178              MOVE    #1,D6
00001C0A  4243                    1179              CLR     D3
00001C0C  4E75                    1180              RTS
00001C0E                          1181              
00001C0E                          1182  ADD_NOTWORD
00001C0E  B67C 0002               1183              CMP     #%010,D3
00001C12  6600 0010               1184              BNE     ADD_NOTLEFT
00001C16  4EB9 00001CE8           1185              JSR     SIZEISLONG
00001C1C  3C3C 0001               1186              MOVE    #1,D6
00001C20  4243                    1187              CLR     D3
00001C22  4E75                    1188              RTS
00001C24                          1189              
00001C24                          1190  ADD_NOTLEFT     ;check other direction
00001C24  B67C 0004               1191              CMP     #%100,D3
00001C28  6600 0010               1192              BNE     ADD_NOTRIGHTBYTE
00001C2C  4EB9 00001CC8           1193              JSR     SIZEISBYTE
00001C32  3C3C 0002               1194              MOVE    #2,D6
00001C36  4243                    1195              CLR     D3
00001C38  4E75                    1196              RTS
00001C3A                          1197              
00001C3A                          1198  ADD_NOTRIGHTBYTE
00001C3A  B67C 0005               1199              CMP     #%101,D3
00001C3E  6600 0010               1200              BNE     ADD_NOTRIGHTWORD
00001C42  4EB9 00001CD8           1201              JSR     SIZEISWORD
00001C48  3C3C 0002               1202              MOVE    #2,D6
00001C4C  4243                    1203              CLR     D3
00001C4E  4E75                    1204              RTS
00001C50                          1205  
00001C50                          1206  ADD_NOTRIGHTWORD
00001C50  B67C 0006               1207              CMP     #%110,D3
00001C54  6600 FE2A               1208              BNE     INVALID_EA
00001C58  4EB9 00001CE8           1209              JSR     SIZEISLONG
00001C5E  3C3C 0002               1210              MOVE    #2,D6
00001C62  4243                    1211              CLR     D3
00001C64  4E75                    1212              RTS 
00001C66                          1213                               
00001C66                          1214                       
00001C66                          1215                       
00001C66                          1216  *****************************                  
00001C66                          1217  GETSIZE_ADDI
00001C66  4EB8 1988               1218          JSR     bits8to10
00001C6A  B67C 0000               1219          CMP     #%000,D3
00001C6E  6600 000C               1220          BNE     ADDI_NOTBYTE
00001C72  4EB9 00001CC8           1221          JSR     SIZEISBYTE
00001C78  4243                    1222          CLR     D3
00001C7A  4E75                    1223          RTS
00001C7C                          1224  
00001C7C                          1225  ADDI_NOTBYTE
00001C7C  B67C 0001               1226          CMP     #%001,D3
00001C80  6600 000C               1227          BNE     ADDI_NOTWORD
00001C84  4EB9 00001CD8           1228          JSR     SIZEISWORD
00001C8A  4243                    1229          CLR     D3
00001C8C  4E75                    1230          RTS
00001C8E                          1231          
00001C8E                          1232  ADDI_NOTWORD
00001C8E  B67C 0002               1233          CMP     #%010,D3
00001C92  6600 FDEC               1234          BNE     INVALID_EA
00001C96  4EB9 00001CE8           1235          JSR     SIZEISLONG
00001C9C  4243                    1236          CLR     D3
00001C9E  4E75                    1237          RTS
00001CA0                          1238          
00001CA0                          1239                              
00001CA0                          1240                       
00001CA0                          1241  ********************************          
00001CA0                          1242                       
00001CA0                          1243                       
00001CA0                          1244  ********************************                     
00001CA0                          1245  GETSIZE_ADDA
00001CA0  4EB8 1988               1246          JSR     bits8to10
00001CA4  B67C 0003               1247          CMP     #%011,D3
00001CA8  6600 000C               1248          BNE     ADDA_NOTWORD
00001CAC  4EB9 00001CD8           1249          JSR     SIZEISWORD
00001CB2  4243                    1250          CLR     D3
00001CB4  4E75                    1251          RTS
00001CB6                          1252          
00001CB6                          1253  
00001CB6                          1254          
00001CB6                          1255  ADDA_NOTWORD
00001CB6  B67C 0007               1256          CMP     #%111,D3
00001CBA  6600 FDC4               1257          BNE     INVALID_EA
00001CBE  4EB9 00001CE8           1258          JSR     SIZEISLONG
00001CC4  4243                    1259          CLR     D3
00001CC6  4E75                    1260          RTS
00001CC8                          1261  **********************************        
00001CC8                          1262      
00001CC8                          1263  SIZEISBYTE
00001CC8  1CFC 002E               1264         MOVE.B   #'.',(A6)+
00001CCC  1CFC 0042               1265         MOVE.B   #'B',(A6)+
00001CD0  1CFC 0020               1266         MOVE.B   #' ',(A6)+
00001CD4  4243                    1267         CLR      D3
00001CD6  4E75                    1268         RTS
00001CD8                          1269  
00001CD8                          1270  SIZEISWORD    
00001CD8  1CFC 002E               1271         MOVE.B   #'.',(A6)+
00001CDC  1CFC 0057               1272         MOVE.B   #'W',(A6)+
00001CE0  1CFC 0020               1273         MOVE.B   #' ',(A6)+
00001CE4  4243                    1274         CLR      D3
00001CE6  4E75                    1275         RTS
00001CE8                          1276                  
00001CE8                          1277  SIZEISLONG    
00001CE8  1CFC 002E               1278         MOVE.B   #'.',(A6)+
00001CEC  1CFC 004C               1279         MOVE.B   #'L',(A6)+
00001CF0  1CFC 0020               1280         MOVE.B   #' ',(A6)+
00001CF4                          1281  
00001CF4  4243                    1282         CLR      D3
00001CF6  4E75                    1283         RTS
00001CF8                          1284                  
00001CF8                          1285       
00001CF8= 00000001                1286  BUFFER DC.L 1     
00001CFC                          1287      INCLUDE 'helpers.x68'
00001CFC  1019                    1288  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001CFE  4EB9 00001D16           1289                          JSR     sub_breakDownAs     *breaks down ASCII code
00001D04  D280                    1290                          ADD.L   D0,D1               *load that char into D1
00001D06  0C11 0000               1291                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001D0A  6700 0006               1292                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001D0E  E989                    1293                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001D10  60EA                    1294                          BRA     sub_AsToHeLoop      *loops through again
00001D12                          1295                          
00001D12  2E01                    1296  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001D14  4E75                    1297                          RTS
00001D16  B03C 0030               1298  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001D1A  6D00 002A               1299                          BLT     as_ERROR                        
00001D1E                          1300                          
00001D1E  B03C 0039               1301                          CMP.B    #$39,D0            *is it an A-F letter?
00001D22  6E00 000C               1302                          BGT     as_LETTER
00001D26                          1303                          
00001D26  6000 0002               1304                          BRA     as_NUMBER
00001D2A                          1305                                                 
00001D2A  0400 0030               1306  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001D2E  4E75                    1307                          RTS
00001D30                          1308                          
00001D30  B03C 0041               1309  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001D34  6D00 0010               1310                          BLT     as_ERROR
00001D38                          1311                          
00001D38  B03C 0046               1312                          CMP.B     #$46, D0
00001D3C  6E00 0008               1313                          BGT     as_ERROR
00001D40                          1314                          
00001D40  0400 0037               1315                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001D44  4E75                    1316                          RTS
00001D46                          1317                          
00001D46  43F9 65727200           1318  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001D4C  103C 000D               1319                          MOVE.B  #13,D0
00001D50  4E4F                    1320                          TRAP    #15  
00001D52                          1321  sub_StartReadingData    
00001D52  0801 0000               1322                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001D56  6600 0006               1323                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001D5A                          1324                          
00001D5A  7E00                    1325                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001D5C  4E75                    1326  srdFinish               RTS
00001D5E                          1327  
00001D5E  43F8 1168               1328  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D62  103C 000E               1329                          MOVE.B  #14,D0
00001D66  4E4F                    1330                          TRAP    #15
00001D68                          1331                          
00001D68  7E01                    1332                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D6A  60F0                    1333                          BRA     srdFinish
00001D6C                          1334  sub_EndReadingData  
00001D6C  0801 0000               1335                          BTST    #0,D1               *checks if LSB is 1, 
00001D70  6600 0018               1336                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001D74                          1337                          
00001D74  B5CB                    1338                          CMP.L   A3,A2               *end address must be greater than start address
00001D76  6E00 0004               1339                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001D7A                          1340  
00001D7A  4E75                    1341  erdFinish               RTS
00001D7C                          1342  
00001D7C  43F8 118F               1343  erdFailAddrOrder        LEA     addr_order_check,A1
00001D80  103C 000E               1344                          MOVE.B  #14,D0
00001D84  4E4F                    1345                          TRAP    #15
00001D86                          1346                          
00001D86  7E01                    1347                          MOVE.L  #1,D7
00001D88  60F0                    1348                          BRA     erdFinish
00001D8A                          1349  
00001D8A  43F8 1168               1350  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D8E  103C 000E               1351                          MOVE.B  #14,D0
00001D92  4E4F                    1352                          TRAP    #15
00001D94                          1353                          
00001D94  7E01                    1354                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D96  60E2                    1355                          BRA     erdFinish
00001D98                          1356                          
00001D98                          1357  
00001D98                          1358  
00001D98                          1359  
00001D98                          1360  
00001D98                          1361  
00001D98                          1362  
00001D98                          1363  
00001D98                          1364  
00001D98                          1365  -------------------- end include --------------------
00001D98                          1366      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1A3E
ABSOLUTE_LONG_BUFFER  1A6E
ABSOLUTE_WORD_BUFFER  1A5C
ADD                 14A0
ADDA                147C
ADDA_BUFFER         1484
ADDA_DISP           124E
ADDA_NOTWORD        1CB6
ADDI                1534
ADDI_BUFFER         15BA
ADDI_DES            1556
ADDI_DISP           1253
ADDI_NOTBYTE        1C7C
ADDI_NOTWORD        1C8E
ADDI_SRC            1548
ADDQ                16C0
ADDQ_BUFFER         171E
ADDQ_DEST           16F4
ADDQ_DISP           1258
ADDQ_NOTBYTE        1BBA
ADDQ_NOTWORD        1BCC
ADDQ_SRC            16DC
ADDRESS_BUFFER      1A38
ADDR_ODDBIT_MSG     1168
ADDR_ORDER_CHECK    118F
ADD_BUFFER          14A8
ADD_DEST            1512
ADD_DIRECTION_REVERSED  14D8
ADD_DISP            124A
ADD_NOTBYTE         1BF8
ADD_NOTLEFT         1C24
ADD_NOTRIGHTBYTE    1C3A
ADD_NOTRIGHTWORD    1C50
ADD_NOTWORD         1C0E
ADD_SRC             14EE
AND                 17F6
AND_BUFFER          1800
AND_DISP            1273
ASL                 1832
ASL_BUFFER          183C
ASL_DISP            1282
ASR                 1816
ASR_BUFFER          1820
ASR_DISP            1286
AS_ERROR            1D46
AS_LETTER           1D30
AS_NUMBER           1D2A
ATHENDLOOP          1D12
BACKSLASHSIGH       12D0
BCC_DISP            129A
BGT_DISP            129E
BITS11TO13          199A
BITS11TO16          19BC
BITS14TO16          19AC
BITS1TO10           19CC
BITS5TO7            1962
BITS5TO8            1976
BITS8TO10           1988
BLE_DISP            12A2
BUFFER              1CF8
CLOSEPAREN          12D4
CLR_DISP            126F
CMP                 17B6
CMP_BUFFER          17C0
CODE0000            1352
CODE0001            1366
CODE0010            136C
CODE0011            136C
CODE0100            136C
CODE0101            13A0
CODE0110            13A4
CODE0111            13A8
CODE1000            13AC
CODE1001            13BE
CODE1010            13C2
CODE1011            13C6
CODE1100            13CA
CODE1101            13DC
CODE1110            1428
CODE1111            1458
COMMASIGN           12CE
COPY_OPCODE         1B18
CR                  D
DIVU                175A
DIVU_BUFFER         1764
DIVU_DISP           1266
DOLLARSIGN          12C8
DONE                1960
ENDTEST_MSG         11E3
ERDFAILADDRODDB     1D8A
ERDFAILADDRORDER    1D7C
ERDFINISH           1D7A
EXIT                12ED
FINISHER            1932
FIVE                1906
FOUR                18F6
GETSIZE_ADD         1BDE
GETSIZE_ADDA        1CA0
GETSIZE_ADDI        1C66
GETSIZE_ADDQ        1BA4
HEXATABLE           12A6
INPUT_BUFFER        12E2
INSERT_NUM          18B6
INVALIDEA_DISP      1227
INVALID_DISP        1222
INVALID_EA          1A80
INVALID_OP          1A84
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            1886
JMP_TABLE           12F2
JSR                 1ABA
JSR_DISP            1292
LEA                 15D6
LEA_BUFFER          15F8
LEA_DEST            1694
LEA_DISP            126B
LEA_SRC             160A
LF                  A
LINEBREAK           121F
LINECOUNT           12E1
LOAD_MODE_JMP_TB    16B0
LOCATION_ENDDATA    12E8
LOCATION_END_MSG    114B
LOCATION_STARTDATA  12E4
LOCATION_START_MSG  112C
LSL                 184E
LSL_BUFFER          1858
LSL_DISP            127A
LSR                 186A
LSR_BUFFER          1874
LSR_DISP            127E
MAIN_LOOP           108E
MINUSSIGN           12CC
MODE000             19DE
MODE001             19E4
MODE010             19EC
MODE011             19F6
MODE100             1A00
MODE101             1A0E
MODE110             1A18
MODE111             1A22
MOVEA_DISP          1238
MOVEM               1AE0
MOVEM_DISP          1244
MOVEM_W             1B00
MOVEQ               1736
MOVEQ_BUFFER        1740
MOVEQ_DISP          123E
MOVE_B              145C
MOVE_BUFFER         146A
MOVE_DISP           1233
MULS                17D6
MULS_BUFFER         17E0
MULS_DISP           1261
NOP                 1A9E
NOP_DISP            122F
ONE                 18C6
ONEPAREN            1952
OPENPAREN           12D2
OR                  177A
OR_BUFFER           1784
OR_DISP             1277
PAUSE_MSG           11C9
PLUSSIGN            12CA
POSTINCR            1940
POUNDSIGN           12C6
PRINT_ADDRESS       1B1E
PRINT_BUFFER        1B3E
PRINT_DEREF_ADDRESS  1B5A
PRINT_HEX           1B96
PRINT_ZEROES        1B7E
ROL_DISP            128A
ROR_DISP            128E
RTS                 1AAC
RTS_DISP            1296
SEVEN               1926
SIX                 1916
SIZEISBYTE          1CC8
SIZEISLONG          1CE8
SIZEISWORD          1CD8
SIZE_B              12D8
SIZE_L              12DE
SIZE_W              12DB
SPACE               12D6
SRDFAILADDRODDB     1D5E
SRDFINISH           1D5C
START               1000
SUB                 1796
SUB_ASTOHELOOP      1CFC
SUB_BREAKDOWNAS     1D16
SUB_BUFFER          17A0
SUB_DISP            125D
SUB_ENDREADINGDATA  1D6C
SUB_STARTREADINGDATA  1D52
TABLE_LENGTH        12EC
THREE               18E6
TWO                 18D6
WELCOME_MSG         10C8
