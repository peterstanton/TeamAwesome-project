00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/27/2017 6:16:07 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D5 - CURRENT OPCODE
00000000                             3  ***
00000000                             4  ***
00000000                             5  
00000000                             6  
00006000                             7  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       8                     ADDQ.B  #$1,D1      
00006002                             9                   
00006002  41F9 0000624E             10                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 000067CA             11                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      12                   CLR.L   D3              *Zero it
00006010                            13                   * TEST OPCODES
00006010                            14                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006010                            15                   ; MOVE.W  #$4E71,D3 * NOP
00006010                            16                   ; MOVE.W  #$4E75,D3 * RTS
00006010                            17                   ; MOVE.W  #$4EB0,D3 * JSR
00006010                            18                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006010                            19                   ; MOVE.W  #$D4FC,D3   *ADDA.L   #1000, A2
00006010                            20                   ; MOVE.W  #$D5FC,D3   *ADDA.W   #1000, A2
00006010                            21                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006010                            22                   ; MOVE.W    #$5201,D3    *ADDQ
00006010  363C 47D5                 23                   MOVE.W     #$47D5, D3
00006014                            24                   
00006014  3A03                      25                   MOVE.W  D3,D5
00006016  183C 000C                 26                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601A                            27  
0000601A                            28             
0000601A  E86B                      29                   LSR.W   D4,D3       *Move the bits
0000601C  C6FC 0006                 30                   MULU    #6,D3       *Form offset     
00006020  4EB0 3000                 31                   JSR     0(A0,D3)   *Jump indirect with index
00006024                            32                  
00006024                            33      INCLUDE 'definitions.x68'
00006024                            34  
00006024  =0000000D                 35  CR              EQU     $0D         carriage return
00006024  =0000000A                 36  LF              EQU     $0A         line feed
00006024= 43 53 53 20 34 32 ...     37  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
00006048= 42 79 20 54 65 61 ...     38                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00006088= 45 6E 74 65 72 20 ...     39  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060A7= 45 6E 74 65 72 20 ...     40  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C4= 41 64 64 72 65 73 ...     41  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EB= 45 6E 64 69 6E 67 ...     42  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006125= 50 72 65 73 73 20 ...     43  pause_msg           DC.B    'Press enter to continue!',CR,LF
0000613F= 52 65 61 63 68 65 ...     44  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615A= 54 72 79 20 61 6E ...     45                      DC.B    'Try another location? (yes/no): ',0
0000617B= 0D 0A 00                  46  linebreak           DC.B    CR,LF,0
0000617E                            47                      
0000617E= 44 41 54 41 00            48  Invalid_disp        DC.B    'DATA',0
00006183= 57 52 4F 4E 47 45 ...     49  InvalidEA_disp      DC.B    'WRONGEA',0
0000618B                            50  
0000618B= 4E 4F 50 00               51  NOP_disp            DC.B    'NOP',0
0000618F= 4D 4F 56 45 00            52  MOVE_disp           DC.B    'MOVE',0
00006194= 4D 4F 56 45 41 00         53  MOVEA_disp          DC.B    'MOVEA',0
0000619A= 4D 4F 56 45 51 00         54  MOVEQ_disp          DC.B    'MOVEQ',0
000061A0= 4D 4F 56 45 4D 00         55  MOVEM_disp          DC.B    'MOVEM',0
000061A6= 41 44 44 00               56  ADD_disp            DC.B    'ADD',0
000061AA= 41 44 44 41 00            57  ADDA_disp           DC.B    'ADDA',0
000061AF= 41 44 44 49 00            58  ADDI_disp           DC.B    'ADDI',0
000061B4= 41 44 44 51 00            59  ADDQ_disp           DC.B    'ADDQ',0
000061B9= 53 55 42 00               60  SUB_disp            DC.B    'SUB',0
000061BD= 4D 55 4C 53 00            61  MULS_disp           DC.B    'MULS',0
000061C2= 44 49 56 55 00            62  DIVU_disp           DC.B    'DIVU',0
000061C7= 4C 45 41 00               63  LEA_disp            DC.B    'LEA',0
000061CB= 43 4C 52 00               64  CLR_disp            DC.B    'CLR',0
000061CF= 41 4E 44 00               65  AND_disp            DC.B    'AND',0
000061D3= 4F 52 00                  66  OR_disp             DC.B    'OR',0
000061D6= 4C 53 4C 00               67  LSL_disp            DC.B    'LSL',0
000061DA= 4C 53 52 00               68  LSR_disp            DC.B    'LSR',0
000061DE= 41 53 4C 00               69  ASL_disp            DC.B    'ASL',0
000061E2= 41 53 52 00               70  ASR_disp            DC.B    'ASR',0
000061E6= 52 4F 4C 00               71  ROL_disp            DC.B    'ROL',0
000061EA= 52 4F 52 00               72  ROR_disp            DC.B    'ROR',0
000061EE= 4A 53 52 00               73  JSR_disp            DC.B    'JSR',0
000061F2= 52 54 53 00               74  RTS_disp            DC.B    'RTS',0
000061F6= 42 43 43 00               75  BCC_disp            DC.B    'BCC',0
000061FA= 42 47 54 00               76  BGT_disp            DC.B    'BGT',0    
000061FE= 42 4C 45 00               77  BLE_disp            DC.b    'BLE',0
00006202                            78  
00006202                            79  
00006202= 30 00                     80  hexaTable               DC.B    '0',0
00006204= 31 00                     81                          DC.B    '1',0
00006206= 32 00                     82                          DC.B    '2',0
00006208= 33 00                     83                          DC.B    '3',0
0000620A= 34 00                     84                          DC.B    '4',0
0000620C= 35 00                     85                          DC.B    '5',0
0000620E= 36 00                     86                          DC.B    '6',0
00006210= 37 00                     87                          DC.B    '7',0
00006212= 38 00                     88                          DC.B    '8',0
00006214= 39 00                     89                          DC.B    '9',0
00006216= 41 00                     90                          DC.B    'A',0
00006218= 42 00                     91                          DC.B    'B',0
0000621A= 43 00                     92                          DC.B    'C',0
0000621C= 44 00                     93                          DC.B    'D',0
0000621E= 45 00                     94                          DC.B    'E',0
00006220= 46 00                     95                          DC.B    'F',0
00006222= 23 00                     96  poundsign               DC.B    '#',0
00006224= 24 00                     97  dollarsign              DC.B    '$',0
00006226= 2B 00                     98  plussign                DC.B    '+',0
00006228= 2D 00                     99  minussign               DC.B    '-',0
0000622A= 2C 00                    100  commasign               DC.B    ',',0
0000622C= 2F 00                    101  backslashsigh           DC.B    '/',0
0000622E= 28 00                    102  openparen               DC.B    '(',0
00006230= 29 00                    103  closeparen              DC.B    ')',0
00006232= 20 00                    104  space                   DC.B    ' ',0   
00006234= 2E 42 00                 105  size_b                  DC.B    '.B',0
00006237= 2E 57 00                 106  size_w                  DC.B    '.W',0        
0000623A= 2E 4C 00                 107  size_l                  DC.B    '.L',0
0000623D                           108  
0000623D                           109  linecount               DS.B    1       *storeage for lines on a screen
0000623E= 01                       110  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006240                           111  location_startData      DS.L    1       *location on where to start reading data
00006244                           112  location_endData        DS.L    1       *location on where to end reading data
00006248                           113  table_length            DS.B    1       *Number of spaces in the table to print to console
00006249                           114  
00006249                           115  
00006249                           116  -------------------- end include --------------------
00006249                           117             
00006249                           118  EXIT                 
0000624A  FFFF FFFF                119         SIMHALT   
0000624E                           120  
0000624E  4EF9 000062AE            121  jmp_table      JMP         code0000
00006254                           122                  *ADDI
00006254                           123  
00006254  4EF9 000062C2            124                 JMP         code0001
0000625A                           125  
0000625A  4EF9 000062C6            126                 JMP         code0010
00006260                           127  
00006260  4EF9 000062CA            128                 JMP         code0011
00006266                           129  
00006266  4EF9 000062CE            130                 JMP         code0100
0000626C                           131                             
0000626C  4EF9 00006302            132                 JMP         code0101
00006272                           133                 * ADDQ
00006272                           134                  
00006272                           135        
00006272  4EF9 00006308            136                 JMP         code0110
00006278                           137                 * BCC
00006278                           138                 * BGT
00006278                           139                 * BLE
00006278                           140                 
00006278  4EF9 0000630C            141                 JMP         code0111
0000627E                           142                 * MOVEQ
0000627E                           143  
0000627E  4EF9 00006312            144                 JMP         code1000
00006284                           145                 * DIVU
00006284                           146                 * OR
00006284                           147  
00006284  4EF9 00006316            148                 JMP         code1001
0000628A                           149                  *SUB
0000628A  4EF9 0000631A            150                 JMP         code1010
00006290                           151                 
00006290  4EF9 0000631E            152                 JMP         code1011
00006296                           153                 * CMP
00006296  4EF9 00006320            154                 JMP         code1100
0000629C                           155                 * MULS
0000629C                           156                 * AND
0000629C                           157          
0000629C  4EF9 00006324            158                 JMP         code1101
000062A2                           159                 *ADD
000062A2                           160                 *ADDA
000062A2  4EF9 00006370            161                 JMP         code1110
000062A8                           162                 * ASR
000062A8                           163                 * ASL
000062A8                           164                 * LSL
000062A8                           165                 * LSR
000062A8                           166                 * ROL
000062A8                           167                 * ROR
000062A8                           168  
000062A8  4EF9 00006374            169                 JMP         code1111
000062AE                           170  
000062AE                           171  
000062AE                           172  code0000      
000062AE  4EB9 00006654            173                 JSR          bits5to8 // RETURNS INTO D3
000062B4  B6BC 00000006            174                 CMP.L        #%0110, D3
000062BA  6600 048A                175                 BNE          INVALID_OP
000062BE  6000 00FC                176                 BRA          ADDI  
000062C2                           177  
000062C2  4E72 2700                178  code0001       STOP        #$2700
000062C6                           179  
000062C6  4E72 2700                180  code0010       STOP        #$2700
000062CA                           181  
000062CA  4E72 2700                182  code0011       STOP        #$2700
000062CE                           183  
000062CE                           184  code0100       
000062CE  4EB9 000067C4            185                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D4                           186                  
000062D4                           187                 *NOP
000062D4  C47C 0FFF                188                 AND     #%0000111111111111,D2
000062D8  B4BC 00000E71            189                 CMP.L   #%000111001110001, D2
000062DE  6700 046A                190                 BEQ     NOP
000062E2                           191                 
000062E2                           192                 *RTS
000062E2  C47C 0FFF                193                 AND     #%0000111111111111,D2
000062E6  B4BC 00000E75            194                 CMP.L   #%0000111001110101, D2
000062EC  6700 046A                195                 BEQ     RTS
000062F0                           196  
000062F0                           197                 *JSR
000062F0  C47C 0FC0                198                 AND     #%0000111111000000,D2
000062F4  B4BC 00000E80            199                 CMP.L   #%0000111010000000,D2
000062FA  6700 046A                200                 BEQ     JSR
000062FE                           201                 
000062FE                           202                 * MOVEM
000062FE                           203                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000062FE                           204                ** AND     #%0000111110000000,D2
000062FE                           205                 * DATA REGISTER
000062FE                           206                ** CMP.L   #%0000100010000000, D2
000062FE                           207                 ** JSR      MOVEM
000062FE                           208                 * ADDRESS REGISTER (DECREMENTED)
000062FE                           209                 ** CMP.L  #%0000110010000000, D2
000062FE                           210                 ** JSR    MOVEM
000062FE                           211                  
000062FE                           212                  ** TO DO: BRANCH IF INVALID OPCODE
000062FE                           213                  *LEA - if it's not the top codes, it's LEA
000062FE  6000 0142                214                  BRA     LEA
00006302                           215  code0101      
00006302  4EB9 0000651E            216                JSR   ADDQ
00006308                           217  
00006308  4E72 2700                218  code0110       STOP        #$2700
0000630C                           219  
0000630C                           220  code0111       
0000630C  4EB9 00006542            221                 JSR       MOVEQ
00006312                           222  
00006312  4E72 2700                223  code1000       STOP        #$2700
00006316                           224  
00006316  4E72 2700                225  code1001       STOP        #$2700
0000631A                           226  
0000631A  4E72 2700                227  code1010       STOP        #$2700
0000631E                           228  
0000631E  60FE                     229  code1011       BRA        code1011
00006320                           230  
00006320                           231    
00006320                           232  
00006320  4E72 2700                233  code1100       STOP        #$2700
00006324                           234  
00006324                           235  code1101       
00006324  4EB9 000067C4            236                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000632A                           237                 *ADDA
0000632A  4EB9 00006666            238                 JSR      bits8to10
00006330  B67C 0003                239                 CMP      #%011, D3  ** WORD
00006334  6700 0042                240                 BEQ      ADDA
00006338  B67C 0007                241                 CMP      #%111, D3   ** LONG
0000633C  6700 003A                242                 BEQ      ADDA
00006340                           243                 
00006340                           244                 *ADD
00006340  B67C 0000                245                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00006344  6700 0056                246                 BEQ      ADD
00006348  B67C 0001                247                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000634C  6700 004E                248                 BEQ      ADD
00006350  B67C 0002                249                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00006354  6700 0046                250                 BEQ      ADD
00006358  B67C 0004                251                 CMP      #%100, D3   ** BYTE TO EA
0000635C  6700 003E                252                 BEQ      ADD
00006360  B67C 0005                253                 CMP      #%101, D3   ** WORD TO EA
00006364  6700 0036                254                 BEQ      ADD
00006368  B67C 0006                255                 CMP      #%110, D3   ** LONG TO EA
0000636C  6700 002E                256                 BEQ      ADD
00006370                           257                 
00006370                           258  
00006370  4E72 2700                259  code1110       STOP        #$2700
00006374                           260  
00006374  4E72 2700                261  code1111       STOP        #$2700
00006378                           262  
00006378                           263  ADDA    
00006378  4EB9 00006382            264                 JSR     ADDA_BUFFER
0000637E  6000 03AE                265                 BRA     PRINT_BUFFER
00006382                           266                  
00006382                           267  ADDA_BUFFER
00006382  1CFC 0041                268                 MOVE.B   #'A',(A6)+
00006386  1CFC 0044                269                 MOVE.B   #'D', (A6)+  
0000638A  1CFC 0044                270                 MOVE.B   #'D', (A6)+
0000638E  1CFC 0041                271                 MOVE.B   #'A', (A6)+
00006392  1CFC 002E                272                 MOVE.B   #'.', (A6)+
00006396                           273                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006396                           274                 ** VALID SIZES ARE W (011) ,L (111)
00006396  1CFC 0020                275                 MOVE.B   #' ', (A6)+
0000639A  4E75                     276                 RTS
0000639C                           277                 
0000639C                           278  ADD    
0000639C  4EB9 000063A6            279                 JSR     ADD_BUFFER
000063A2  6000 038A                280                 BRA     PRINT_BUFFER
000063A6                           281                  
000063A6                           282  ADD_BUFFER
000063A6  1CFC 0041                283                 MOVE.B   #'A',(A6)+
000063AA  1CFC 0044                284                 MOVE.B   #'D', (A6)+  
000063AE  1CFC 0044                285                 MOVE.B   #'D', (A6)+
000063B2  1CFC 002E                286                 MOVE.B   #'.', (A6)+
000063B6                           287                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000063B6                           288                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000063B6                           289                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000063B6  1CFC 0020                290                 MOVE.B   #' ', (A6)+
000063BA  4E75                     291                 RTS               
000063BC                           292  ADDI
000063BC  4EB9 00006428            293                  JSR     ADDI_BUFFER
000063C2  4EB9 000063D2            294                  JSR     ADDI_SRC
000063C8  4EB9 000063D6            295                  JSR     ADDI_DES
000063CE  6000 035E                296                  BRA     PRINT_BUFFER
000063D2                           297                  
000063D2                           298  ADDI_SRC                        
000063D2  1CFC 0023                299                  MOVE.B  #'#', (A6)+
000063D6                           300                    ** TODO: IMPLEMENT THIS IN EA
000063D6                           301                  ** Immediate field—Data immediately following the instruction.
000063D6                           302                  **If size = 00, the data is the low-order byte of the immediate word.
000063D6                           303                  **If size = 01, the data is the entire immediate word.
000063D6                           304                  **If size = 10, the data is the next two immediate words. 
000063D6                           305  ADDI_DES
000063D6                           306                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
000063D6                           307                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
000063D6  4EB9 00006678            308                 JSR      bits11to13
000063DC  B67C 0001                309                 CMP      #%001, D3 **AN
000063E0  6700 0360                310                 BEQ      INVALID_EA
000063E4  B67C 0005                311                 CMP      #%101, D3 **COMPLICATED
000063E8  6700 0358                312                 BEQ      INVALID_EA
000063EC  B67C 0006                313                 CMP      #%110, D3 **COMPLICATED
000063F0  6700 0350                314                 BEQ      INVALID_EA
000063F4                           315                 
000063F4  4EB9 0000669A            316                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000063FA  B67C 003C                317                 CMP      #%111100,D3 // immediate data
000063FE  6700 0342                318                 BEQ      INVALID_EA
00006402  B67C 003A                319                 CMP      #%111010,D3 // complicated
00006406  6700 033A                320                 BEQ      INVALID_EA
0000640A  B67C 003B                321                 CMP      #%111011,D3 // complicated
0000640E  6700 0332                322                 BEQ      INVALID_EA
00006412                           323                 
00006412  4EB9 00006678            324                 JSR      bits11to13 ** grab bits to jump with
00006418  41F9 00006566            325                 LEA     jmp_mode,A0    *Index into the table
0000641E  C6FC 0006                326                 MULU    #6,D3       *Form offset     
00006422  4EB0 3000                327                 JSR     0(A0,D3)   *Jump indirect with index
00006426  4E75                     328                 RTS
00006428                           329                 
00006428                           330                             
00006428                           331  ADDI_BUFFER
00006428  1CFC 0041                332                 MOVE.B   #'A',(A6)+
0000642C  1CFC 0044                333                 MOVE.B   #'D', (A6)+  
00006430  1CFC 0044                334                 MOVE.B   #'D', (A6)+
00006434  1CFC 0049                335                 MOVE.B   #'I', (A6)+
00006438  1CFC 002E                336                 MOVE.B   #'.', (A6)+
0000643C                           337                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
0000643C                           338                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000643C  1CFC 0020                339                 MOVE.B   #' ', (A6)+
00006440  4E75                     340                 RTS
00006442                           341                              
00006442                           342  LEA
00006442  4EB9 00006666            343                 JSR      bits8to10   // 1 1 1
00006448  B47C 0007                344                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
0000644C  6600 02F8                345                 BNE      INVALID_OP
00006450  4EB9 00006466            346                 JSR      LEA_BUFFER
00006456  4EB9 00006478            347                 JSR      LEA_SRC
0000645C  4EB9 000064FA            348                 JSR      LEA_DEST
00006462  6000 02CA                349                 BRA      PRINT_BUFFER
00006466                           350                 
00006466                           351  LEA_BUFFER 
00006466  1CFC 004C                352                 MOVE.B   #'L',(A6)+
0000646A  1CFC 0045                353                 MOVE.B   #'E', (A6)+  
0000646E  1CFC 0041                354                 MOVE.B   #'A', (A6)+
00006472  1CFC 0020                355                 MOVE.B   #' ', (A6)+
00006476  4E75                     356                 RTS
00006478                           357            
00006478                           358  LEA_SRC
00006478                           359              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00006478  4EB9 00006678            360              JSR      bits11to13  // source mode - D3
0000647E  B67C 0000                361              CMP      #%000, D3
00006482  6700 02BE                362              BEQ      INVALID_EA
00006486  B67C 0001                363              CMP      #%001, D3
0000648A  6700 02B6                364              BEQ      INVALID_EA
0000648E  B67C 0003                365              CMP      #%011, D3
00006492  6700 02AE                366              BEQ      INVALID_EA
00006496  B67C 0004                367              CMP      #%100, D3
0000649A  6700 02A6                368              BEQ      INVALID_EA
0000649E  B67C 0005                369              CMP      #%101, D3
000064A2  6700 029E                370              BEQ      INVALID_EA
000064A6  B67C 0006                371              CMP      #%110, D3
000064AA  6700 0296                372              BEQ      INVALID_EA
000064AE                           373              
000064AE                           374              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
000064AE  4EB9 0000668A            375              JSR      bits14to16 // source register - d4
000064B4  B67C 0004                376              CMP      #%100, D3
000064B8  6700 0288                377              BEQ      INVALID_EA
000064BC  B67C 0002                378              CMP      #%010, D3
000064C0  6700 0280                379              BEQ      INVALID_EA
000064C4  B67C 0003                380              CMP      #%011, D3
000064C8  6700 0278                381              BEQ      INVALID_EA
000064CC                           382              
000064CC                           383              
000064CC  4EB9 00006678            384               JSR      bits11to13 ** grab mode bits to jump with
000064D2  3803                     385               MOVE     D3,D4
000064D4  41F9 00006566            386               LEA     jmp_mode,A0    *Index into the table
000064DA  C6FC 0006                387               MULU    #6,D3       *Form offset     
000064DE  4EB0 3000                388               JSR     0(A0,D3)   *Jump indirect with index
000064E2                           389               
000064E2  4243                     390               CLR     D3
000064E4  4EB9 0000668A            391               JSR     bits14to16
000064EA  4EB9 00006596            392               JSR     insert_num
000064F0                           393               
000064F0  1CFC 002C                394               MOVE.B     #',', (A6)+
000064F4  1CFC 0020                395               MOVE.B     #' ', (A6)+
000064F8                           396  
000064F8  4E75                     397               RTS
000064FA                           398               
000064FA                           399  LEA_DEST    
000064FA  4244                     400                  CLR     D4
000064FC  41F9 00006566            401                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00006502  363C 0001                402                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
00006506  3803                     403                  MOVE    D3,D4
00006508  C6FC 0006                404                  MULU    #6,D3       *Form offset     
0000650C  4EB0 3000                405                  JSR     0(A0,D3)   *Jump indirect with index
00006510                           406                  
00006510  4EB9 00006640            407                  JSR     bits5to7
00006516  4EB9 00006596            408                  JSR     insert_num
0000651C                           409                  
0000651C  4E75                     410                  RTS
0000651E                           411  
0000651E                           412  ADDQ
0000651E  4EB9 00006528            413                  JSR     ADDQ_BUFFER
00006524  6000 0208                414                  BRA     PRINT_BUFFER
00006528                           415  
00006528                           416  ADDQ_BUFFER
00006528  1CFC 0041                417                 MOVE.B   #'A',(A6)+
0000652C  1CFC 0044                418                 MOVE.B   #'D', (A6)+  
00006530  1CFC 0044                419                 MOVE.B   #'D', (A6)+
00006534  1CFC 0051                420                 MOVE.B   #'Q', (A6)+
00006538  1CFC 002E                421                 MOVE.B   #'.', (A6)+
0000653C                           422                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
0000653C                           423                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000653C  1CFC 0020                424                 MOVE.B   #' ', (A6)+
00006540  4E75                     425                 RTS
00006542                           426                 
00006542                           427  MOVEQ
00006542  4EB9 0000654C            428                  JSR     MOVEQ_BUFFER
00006548  6000 01E4                429                  BRA     PRINT_BUFFER
0000654C                           430  
0000654C                           431  MOVEQ_BUFFER
0000654C  1CFC 004D                432                 MOVE.B   #'M',(A6)+
00006550  1CFC 004F                433                 MOVE.B   #'O', (A6)+  
00006554  1CFC 0056                434                 MOVE.B   #'V', (A6)+
00006558  1CFC 0045                435                 MOVE.B   #'E', (A6)+
0000655C  1CFC 0051                436                 MOVE.B   #'Q', (A6)+
00006560  1CFC 0020                437                 MOVE.B   #' ', (A6)+
00006564  4E75                     438                 RTS
00006566                           439                    
00006566                           440  jmp_mode
00006566  4EF9 000066AA            441                  JMP     MODE000  ** DN
0000656C  4EF9 000066B2            442                  JMP     MODE001  ** AN
00006572  4EF9 000066BA            443                  JMP     MODE010  ** (AN)
00006578  4EF9 000066C4            444                  JMP     MODE011  ** (AN)+   
0000657E  4EF9 000066CC            445                  JMP     MODE100  ** -(AN)
00006584  4EF9 000066D4            446                  JMP     MODE101  **INVALID
0000658A  4EF9 000066DC            447                  JMP     MODE110  **INVALID
00006590  4EF9 000066E4            448                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00006596                           449                  
00006596                           450                  
00006596                           451  insert_num
00006596                           452                  
00006596                           453                  ;get number from D3
00006596  B67C 0000                454                  CMP     #%000,D3       ;0
0000659A  6600 000A                455                  BNE     ONE         
0000659E  1CFC 0030                456                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000065A2  6000 006E                457                  BRA     FINISHER
000065A6                           458                  
000065A6  B67C 0001                459  ONE             CMP     #%001,D3       ;1
000065AA  6600 000A                460                  BNE     TWO 
000065AE  1CFC 0031                461                  MOVE.B  #'1',(A6)+
000065B2  6000 005E                462                  BRA     FINISHER
000065B6                           463  
000065B6                           464                  
000065B6  B67C 0002                465  TWO             CMP     #%010,D3        ;2
000065BA  6600 000A                466                  BNE     THREE
000065BE  1CFC 0032                467                  MOVE.B  #'2',(A6)+
000065C2  6000 004E                468                  BRA     FINISHER
000065C6                           469                  
000065C6  B67C 0003                470  THREE           CMP     #%011,D3        ;3
000065CA  6600 000A                471                  BNE     FOUR
000065CE  1CFC 0033                472                  MOVE.B  #'3',(A6)+
000065D2  6000 003E                473                  BRA     FINISHER
000065D6                           474                  
000065D6  B67C 0004                475  FOUR            CMP     #%100,D3        ;4
000065DA  6600 000A                476                  BNE     FIVE
000065DE  1CFC 0034                477                  MOVE.B  #'4',(A6)+
000065E2  6000 002E                478                  BRA     FINISHER
000065E6                           479                  
000065E6  B67C 0005                480  FIVE            CMP     #%101,D3        ;5
000065EA  6600 000A                481                  BNE     SIX
000065EE  1CFC 0035                482                  MOVE.B  #'5',(A6)+
000065F2  6000 001E                483                  BRA     FINISHER
000065F6                           484                  
000065F6  B67C 0006                485  SIX             CMP     #%110,D3        ;6
000065FA  6600 000A                486                  BNE     SEVEN
000065FE  1CFC 0036                487                  MOVE.B  #'6',(A6)+
00006602  6000 000E                488                  BRA     FINISHER
00006606                           489                  
00006606  B67C 0007                490  SEVEN           CMP     #%111,D3        ;7
0000660A  1CFC 0037                491                  MOVE.B  #'7',(A6)+
0000660E  6000 0002                492                  BRA     FINISHER
00006612                           493                  
00006612                           494  FINISHER                
00006612                           495                  
00006612                           496                  ;check D4, do we need to do stuff?
00006612  B87C 0002                497                  CMP     #%010,D4
00006616  6600 0008                498                  BNE     POSTINCR
0000661A  1CFC 0029                499                  MOVE.B  #')',(A6)+
0000661E  4E75                     500                  RTS
00006620                           501                  
00006620  B87C 0003                502  POSTINCR        CMP     #%011,D4
00006624  6600 000C                503                  BNE     ONEPAREN
00006628  1CFC 0029                504                  MOVE.B  #')',(A6)+
0000662C  1CFC 002B                505                  MOVE.B  #'+',(A6)+
00006630  4E75                     506                  RTS
00006632                           507                  
00006632  B87C 0004                508  ONEPAREN        CMP     #%100,D4
00006636  6600 0006                509                  BNE     DONE
0000663A  1CFC 0029                510                  MOVE.B  #')',(A6)+                
0000663E                           511  
0000663E  4E75                     512  DONE            RTS
00006640                           513          
00006640                           514                 
00006640                           515  bits5to7
00006640  4243                     516                 CLR      D3
00006642  4EB9 000067C4            517                 JSR      COPY_OPCODE  // opcode copied to D2
00006648  C47C 0E00                518                 AND      #%0000111000000000, D2
0000664C  E09A                     519                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000664E  E29A                     520                 ROR.L    #1, D2
00006650  3602                     521                 MOVE.W   D2,D3 // moving isolated bits into d3
00006652  4E75                     522                 RTS
00006654                           523                 
00006654                           524  bits5to8
00006654  4243                     525                 CLR      D3
00006656  4EB9 000067C4            526                 JSR      COPY_OPCODE  // opcode copied to D2
0000665C  C47C 0F00                527                 AND      #%0000111100000000, D2
00006660  E09A                     528                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006662  3602                     529                 MOVE.W   D2,D3 // moving isolated bits into d3
00006664  4E75                     530                 RTS
00006666                           531                 
00006666                           532  bits8to10
00006666  4243                     533                 CLR      D3
00006668  4EB9 000067C4            534                 JSR      COPY_OPCODE  // opcode copied to D2
0000666E  C47C 01C0                535                 AND      #%0000000111000000, D2
00006672  EC9A                     536                 ROR.L    #6, D2          // rotate bits so isolated at the end
00006674  3602                     537                 MOVE.W   D2,D3 // moving isolated bits into d3
00006676  4E75                     538                 RTS               
00006678                           539             
00006678                           540  bits11to13
00006678  4243                     541                 CLR      D3
0000667A  4EB9 000067C4            542                 JSR      COPY_OPCODE  // opcode copied to D2
00006680  C47C 0038                543                 AND      #%0000000000111000, D2
00006684  E69A                     544                 ROR.L    #3, D2          // rotate bits so isolated at the end
00006686  3602                     545                 MOVE.W   D2,D3 // moving isolated bits into d3
00006688  4E75                     546                 RTS
0000668A                           547             
0000668A                           548  bits14to16
0000668A  4243                     549                 CLR      D3
0000668C  4EB9 000067C4            550                 JSR      COPY_OPCODE  // opcode copied to D2
00006692  C47C 0007                551                 AND      #%0000000000000111, D2
00006696  3602                     552                 MOVE.W   D2,D3 // moving isolated bits into d3
00006698  4E75                     553                 RTS
0000669A                           554  bits11to16
0000669A  4243                     555                 CLR      D3
0000669C  4EB9 000067C4            556                 JSR      COPY_OPCODE  // opcode copied to D2
000066A2  C47C 003F                557                 AND      #%0000000000111111, D2
000066A6  3602                     558                 MOVE.W   D2,D3 // moving isolated bits into d3
000066A8  4E75                     559                 RTS
000066AA                           560  ** DN       
000066AA                           561  MODE000         
000066AA  1CFC 0028                562                  MOVE.B  #'(', (A6)+
000066AE  1CFC 0041                563                  MOVE.B  #'A',(A6)+     
000066B2                           564  
000066B2                           565  ** AN
000066B2                           566  MODE001         
000066B2  4EB9 000066EC            567                  JSR ADDRESS_BUFFER  
000066B8  4E75                     568                  RTS      
000066BA                           569  
000066BA                           570   ** (AN)
000066BA                           571  MODE010         
000066BA  1CFC 0028                572                  MOVE.B  #'(', (A6)+
000066BE  1CFC 0041                573                  MOVE.B  #'A',(A6)+  
000066C2  4E75                     574                  RTS      
000066C4                           575  
000066C4                           576  ** (AN)+ 
000066C4                           577  MODE011         
000066C4  1CFC 0028                578                  MOVE.B  #'(', (A6)+
000066C8  1CFC 0041                579                  MOVE.B  #'A',(A6)+        
000066CC                           580  
000066CC                           581   ** -(AN)
000066CC                           582  MODE100         
000066CC  1CFC 0028                583                  MOVE.B  #'(', (A6)+
000066D0  1CFC 0041                584                  MOVE.B  #'A',(A6)+
000066D4                           585                  
000066D4                           586  **INVALID               
000066D4                           587  MODE101         
000066D4  1CFC 0028                588                  MOVE.B  #'(', (A6)+
000066D8  1CFC 0041                589                  MOVE.B  #'A',(A6)+ 
000066DC                           590                  
000066DC                           591  **INVALID
000066DC                           592  MODE110         
000066DC  1CFC 0028                593                  MOVE.B  #'(', (A6)+
000066E0  1CFC 0041                594                  MOVE.B  #'A',(A6)+  
000066E4                           595  
000066E4                           596  ** ABSOLUTE AND IMMEDIATE            
000066E4                           597  MODE111         
000066E4                           598                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
000066E4  4EB9 000066F2            599                 JSR ABSOLUTE_BUFFER  
000066EA  4E75                     600                 RTS            
000066EC                           601                                          
000066EC                           602  ADDRESS_BUFFER
000066EC  1CFC 0041                603                  MOVE.B  #'A',(A6)+ 
000066F0  4E75                     604                  RTS
000066F2                           605                 
000066F2                           606  ABSOLUTE_BUFFER
000066F2  4243                     607                 CLR      D3
000066F4  3604                     608                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000066F6  1CF8 0024                609                 MOVE.B   '$', (A6)+
000066FA  B67C 0000                610                 CMP.W    #%000, D3
000066FE  6700 000E                611                 BEQ      ABSOLUTE_WORD_BUFFER
00006702  4243                     612                 CLR      D3
00006704  3604                     613                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00006706  B67C 0001                614                 CMP.W    #%001, D3
0000670A  6700 0012                615                 BEQ      ABSOLUTE_LONG_BUFFER
0000670E                           616                 
0000670E                           617  ABSOLUTE_WORD_BUFFER
0000670E                           618                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
0000670E                           619                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
0000670E  1CFC 0046                620                         MOVE.B #'F', (A6)+ 
00006712  1CFC 0046                621                         MOVE.B #'F', (A6)+ 
00006716  1CFC 0046                622                         MOVE.B #'F', (A6)+ 
0000671A  1CFC 0046                623                         MOVE.B #'F', (A6)+   
0000671E                           624  ABSOLUTE_LONG_BUFFER       
0000671E                           625                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
0000671E                           626                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
0000671E  1CFC 0047                627                         MOVE.B #'G', (A6)+ 
00006722  1CFC 0047                628                         MOVE.B #'G', (A6)+ 
00006726  1CFC 0047                629                         MOVE.B #'G', (A6)+ 
0000672A  1CFC 0047                630                         MOVE.B #'G', (A6)+ 
0000672E                           631                                                      
0000672E                           632  
0000672E                           633  PRINT_BUFFER    
0000672E  1CFC 0000                634                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00006732  43F9 000067CA            635                 LEA      BUFFER, A1
00006738  303C 000E                636                 MOVE.W   #14,D0
0000673C  4E4F                     637                 TRAP     #15
0000673E  6000 FB09                638                 BRA EXIT
00006742                           639                 
00006742                           640                 
00006742                           641  
00006742                           642  INVALID_EA  
00006742                           643                  * TODO: IMPLEMENT
00006742                           644                  *** CLEAR OUT A6
00006742                           645                  ** PUT INVALID MESSAGE INTO A6
00006742  6000 FB05                646                  BRA EXIT
00006746                           647  INVALID_OP  
00006746                           648                  ** TODO: IMPLEMENT
00006746                           649                 *** CLEAR OUT A6
00006746                           650                  ** PUT INVALID MESSAGE INTO A6
00006746  6000 FB01                651                  BRA EXIT             
0000674A                           652                  
0000674A  43F8 618B                653  NOP                 LEA     NOP_disp,A1          
0000674E  103C 000E                654                      MOVE.B  #14,D0
00006752  4E4F                     655                      TRAP    #15
00006754  6000 FAF3                656                      BRA     EXIT
00006758                           657                   
00006758                           658  RTS      
00006758  43F8 61F2                659                      LEA     RTS_disp,A1          
0000675C  103C 000E                660                      MOVE.B  #14,D0
00006760  4E4F                     661                      TRAP    #15 
00006762  6000 FAE5                662                      BRA     EXIT
00006766                           663  JSR      
00006766  4DF9 000067CA            664                      LEA     BUFFER, A6
0000676C  1CFC 004A                665                      MOVE.B #'J', (A6)+
00006770  1CFC 0053                666                      MOVE.B #'S', (A6)+
00006774  1CFC 0052                667                      MOVE.B #'R', (A6)+
00006778  1CFC 0020                668                      MOVE.B #' ', (A6)+
0000677C  43F9 000067CA            669                      LEA     BUFFER, A1
00006782                           670                      ** BITS 10 - 12 MODE       
00006782                           671                      ** BITS 13 - 16 REGISTER
00006782  103C 000E                672                      MOVE.B  #14,D0
00006786  4E4F                     673                      TRAP    #15 
00006788  6000 FABF                674                      BRA     EXIT
0000678C                           675                    
0000678C                           676  MOVEM      
0000678C                           677                     
0000678C                           678                      ** SIZE SUBROUTINE
0000678C                           679                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
0000678C  C47C 0040                680                      AND #%0000000001000000,D2 
00006790                           681                      * WORD
00006790  B4BC 00000040            682                      CMP.L   #%0000000001000000,D2
00006796  4EB9 000067AC            683                      JSR     MOVEM_W 
0000679C                           684                      *LONG
0000679C  B4BC 00000040            685                      CMP.L   #%0000000001000000,D2 
000067A2                           686                     ** JSR     MOVEM_L
000067A2  103C 000E                687                      MOVE.B  #14,D0
000067A6  4E4F                     688                      TRAP    #15
000067A8  6000 FA9F                689                      BRA     EXIT 
000067AC                           690                      
000067AC                           691  MOVEM_W 
000067AC  43F8 61A0                692                       LEA     MOVEM_disp,A1
000067B0                           693                      * PRINT MOVEM
000067B0  103C 000E                694                       MOVE.B  #14,D0
000067B4  4E4F                     695                       TRAP    #15
000067B6                           696          
000067B6                           697                      * PRINT WORD PORTION
000067B6  41F8 6237                698                       LEA     size_w, A0
000067BA  103C 000E                699                       MOVE.B  #14,D0
000067BE  4E4F                     700                       TRAP    #15 
000067C0                           701          
000067C0  6000 FA87                702                       BRA     EXIT 
000067C4                           703       
000067C4                           704     
000067C4                           705  COPY_OPCODE 
000067C4                           706                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
000067C4  4242                     707                       CLR    D2  
000067C6  3405                     708                       MOVE.W D5,D2 
000067C8  4E75                     709                       RTS  
000067CA                           710  
000067CA                           711                  
000067CA                           712       
000067CA= 20 20 20 20 20 00        713  BUFFER DC.B '     ',0     
000067D0                           714        
000067D0                           715  
000067D0                           716      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     66F2
ABSOLUTE_LONG_BUFFER  671E
ABSOLUTE_WORD_BUFFER  670E
ADD                 639C
ADDA                6378
ADDA_BUFFER         6382
ADDA_DISP           61AA
ADDI                63BC
ADDI_BUFFER         6428
ADDI_DES            63D6
ADDI_DISP           61AF
ADDI_SRC            63D2
ADDQ                651E
ADDQ_BUFFER         6528
ADDQ_DISP           61B4
ADDRESS_BUFFER      66EC
ADDR_ODDBIT_MSG     60C4
ADDR_ORDER_CHECK    60EB
ADD_BUFFER          63A6
ADD_DISP            61A6
AND_DISP            61CF
ASL_DISP            61DE
ASR_DISP            61E2
BACKSLASHSIGH       622C
BCC_DISP            61F6
BGT_DISP            61FA
BITS11TO13          6678
BITS11TO16          669A
BITS14TO16          668A
BITS5TO7            6640
BITS5TO8            6654
BITS8TO10           6666
BLE_DISP            61FE
BUFFER              67CA
CLOSEPAREN          6230
CLR_DISP            61CB
CODE0000            62AE
CODE0001            62C2
CODE0010            62C6
CODE0011            62CA
CODE0100            62CE
CODE0101            6302
CODE0110            6308
CODE0111            630C
CODE1000            6312
CODE1001            6316
CODE1010            631A
CODE1011            631E
CODE1100            6320
CODE1101            6324
CODE1110            6370
CODE1111            6374
COMMASIGN           622A
COPY_OPCODE         67C4
CR                  D
DIVU_DISP           61C2
DOLLARSIGN          6224
DONE                663E
ENDTEST_MSG         613F
EXIT                6249
FINISHER            6612
FIVE                65E6
FOUR                65D6
HEXATABLE           6202
INPUT_BUFFER        623E
INSERT_NUM          6596
INVALIDEA_DISP      6183
INVALID_DISP        617E
INVALID_EA          6742
INVALID_OP          6746
JMP_MODE            6566
JMP_TABLE           624E
JSR                 6766
JSR_DISP            61EE
LEA                 6442
LEA_BUFFER          6466
LEA_DEST            64FA
LEA_DISP            61C7
LEA_SRC             6478
LF                  A
LINEBREAK           617B
LINECOUNT           623D
LOCATION_ENDDATA    6244
LOCATION_END_MSG    60A7
LOCATION_STARTDATA  6240
LOCATION_START_MSG  6088
LSL_DISP            61D6
LSR_DISP            61DA
MINUSSIGN           6228
MODE000             66AA
MODE001             66B2
MODE010             66BA
MODE011             66C4
MODE100             66CC
MODE101             66D4
MODE110             66DC
MODE111             66E4
MOVEA_DISP          6194
MOVEM               678C
MOVEM_DISP          61A0
MOVEM_W             67AC
MOVEQ               6542
MOVEQ_BUFFER        654C
MOVEQ_DISP          619A
MOVE_DISP           618F
MULS_DISP           61BD
NOP                 674A
NOP_DISP            618B
ONE                 65A6
ONEPAREN            6632
OPENPAREN           622E
OR_DISP             61D3
PAUSE_MSG           6125
PLUSSIGN            6226
POSTINCR            6620
POUNDSIGN           6222
PRINT_BUFFER        672E
ROL_DISP            61E6
ROR_DISP            61EA
RTS                 6758
RTS_DISP            61F2
SEVEN               6606
SIX                 65F6
SIZE_B              6234
SIZE_L              623A
SIZE_W              6237
SPACE               6232
START               6000
SUB_DISP            61B9
TABLE_LENGTH        6248
THREE               65C6
TWO                 65B6
WELCOME_MSG         6024
