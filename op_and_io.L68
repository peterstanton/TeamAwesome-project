00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 9:24:46 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C4              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001128             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012DE             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001C48             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 0000121B             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001C9E             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001147             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012DE             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001C48             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 0000121B             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001CB8             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012EE             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001C44             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C  3612                      80                   MOVE.W  (A2), D3
0000109E                            81  
0000109E                            82                   * TEST OPCODES
0000109E                            83                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109E                            84                   ; MOVE.W  #$4E71,D3 * NOP
0000109E                            85                   ; MOVE.W  #$4E75,D3 * RTS
0000109E                            86                   ; MOVE.W  #$4EB0,D3 * JSR
0000109E                            87                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109E                            88                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109E                            89                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109E                            90                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109E                            91  
0000109E                            92                   ; MOVE.W    #$5201,D3    *ADDQ
0000109E                            93  
0000109E                            94                   ; MOVE.W     #$7E70, D3 *MOVEQ
0000109E                            95                   ; MOVE.W     #$80C0, D3 *DIVU
0000109E                            96                   ; MOVE.W     #$8000, D3 * OR
0000109E                            97                   ; MOVE.W        #$9000, D3 * SUB
0000109E                            98                   ; MOVE.W        #$B000, D3 * CMP
0000109E                            99                   ; MOVE.W        #$C1C0, D3 * MULS
0000109E                           100                   ; MOVE.W        #$C000, D3 * AND
0000109E                           101                   ; MOVE.W        #$E0F8, D3  *ASR
0000109E                           102                   ; MOVE.W        #$E1E2, D3  *ASL
0000109E                           103                   ; MOVE.W        #$E393, D3  *LSL
0000109E                           104                   ; MOVE.W        #$E2DC, D3  *LSR
0000109E                           105  
0000109E  4EB9 00001AC8            106                   JSR    PRINT_ADDRESS
000010A4  544A                     107                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010A6  3A03                     108                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010A8  183C 000C                109                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010AC  E86B                     110                   LSR.W   D4,D3       *Move the bits
000010AE  C6FC 0006                111                   MULU    #6,D3       *Form offset     
000010B2  4EB0 3000                112                   JSR     0(A0,D3)   *Jump indirect with index
000010B6  4EB9 00001AE8            113                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010BC  B4CB                     114                   CMP     A3,A2
000010BE  6E00 0229                115                   BGT     EXIT
000010C2  60CA                     116                   BRA     MAIN_LOOP
000010C4                           117                   
000010C4                           118                                  
000010C4                           119      INCLUDE 'definitions.x68'
000010C4                           120  
000010C4  =0000000D                121  CR              EQU     $0D         carriage return
000010C4  =0000000A                122  LF              EQU     $0A         line feed
000010C4= 43 53 53 20 34 32 ...    123  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010E8= 42 79 20 54 65 61 ...    124                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001128= 45 6E 74 65 72 20 ...    125  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001147= 45 6E 74 65 72 20 ...    126  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001164= 41 64 64 72 65 73 ...    127  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
0000118B= 45 6E 64 69 6E 67 ...    128  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C5= 50 72 65 73 73 20 ...    129  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011DF= 52 65 61 63 68 65 ...    130  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011FA= 54 72 79 20 61 6E ...    131                      DC.B    'Try another location? (yes/no): ',0
0000121B= 0D 0A 00                 132  linebreak           DC.B    CR,LF,0
0000121E                           133                      
0000121E= 44 41 54 41 00           134  Invalid_disp        DC.B    'DATA',0
00001223= 57 52 4F 4E 47 45 ...    135  InvalidEA_disp      DC.B    'WRONGEA',0
0000122B                           136  
0000122B= 4E 4F 50 00              137  NOP_disp            DC.B    'NOP',0
0000122F= 4D 4F 56 45 00           138  MOVE_disp           DC.B    'MOVE',0
00001234= 4D 4F 56 45 41 00        139  MOVEA_disp          DC.B    'MOVEA',0
0000123A= 4D 4F 56 45 51 00        140  MOVEQ_disp          DC.B    'MOVEQ',0
00001240= 4D 4F 56 45 4D 00        141  MOVEM_disp          DC.B    'MOVEM',0
00001246= 41 44 44 00              142  ADD_disp            DC.B    'ADD',0
0000124A= 41 44 44 41 00           143  ADDA_disp           DC.B    'ADDA',0
0000124F= 41 44 44 49 00           144  ADDI_disp           DC.B    'ADDI',0
00001254= 41 44 44 51 00           145  ADDQ_disp           DC.B    'ADDQ',0
00001259= 53 55 42 00              146  SUB_disp            DC.B    'SUB',0
0000125D= 4D 55 4C 53 00           147  MULS_disp           DC.B    'MULS',0
00001262= 44 49 56 55 00           148  DIVU_disp           DC.B    'DIVU',0
00001267= 4C 45 41 00              149  LEA_disp            DC.B    'LEA',0
0000126B= 43 4C 52 00              150  CLR_disp            DC.B    'CLR',0
0000126F= 41 4E 44 00              151  AND_disp            DC.B    'AND',0
00001273= 4F 52 00                 152  OR_disp             DC.B    'OR',0
00001276= 4C 53 4C 00              153  LSL_disp            DC.B    'LSL',0
0000127A= 4C 53 52 00              154  LSR_disp            DC.B    'LSR',0
0000127E= 41 53 4C 00              155  ASL_disp            DC.B    'ASL',0
00001282= 41 53 52 00              156  ASR_disp            DC.B    'ASR',0
00001286= 52 4F 4C 00              157  ROL_disp            DC.B    'ROL',0
0000128A= 52 4F 52 00              158  ROR_disp            DC.B    'ROR',0
0000128E= 4A 53 52 00              159  JSR_disp            DC.B    'JSR',0
00001292= 52 54 53 00              160  RTS_disp            DC.B    'RTS',0
00001296= 42 43 43 00              161  BCC_disp            DC.B    'BCC',0
0000129A= 42 47 54 00              162  BGT_disp            DC.B    'BGT',0    
0000129E= 42 4C 45 00              163  BLE_disp            DC.b    'BLE',0
000012A2                           164  
000012A2                           165  
000012A2= 30 00                    166  hexaTable               DC.B    '0',0
000012A4= 31 00                    167                          DC.B    '1',0
000012A6= 32 00                    168                          DC.B    '2',0
000012A8= 33 00                    169                          DC.B    '3',0
000012AA= 34 00                    170                          DC.B    '4',0
000012AC= 35 00                    171                          DC.B    '5',0
000012AE= 36 00                    172                          DC.B    '6',0
000012B0= 37 00                    173                          DC.B    '7',0
000012B2= 38 00                    174                          DC.B    '8',0
000012B4= 39 00                    175                          DC.B    '9',0
000012B6= 41 00                    176                          DC.B    'A',0
000012B8= 42 00                    177                          DC.B    'B',0
000012BA= 43 00                    178                          DC.B    'C',0
000012BC= 44 00                    179                          DC.B    'D',0
000012BE= 45 00                    180                          DC.B    'E',0
000012C0= 46 00                    181                          DC.B    'F',0
000012C2= 23 00                    182  poundsign               DC.B    '#',0
000012C4= 24 00                    183  dollarsign              DC.B    '$',0
000012C6= 2B 00                    184  plussign                DC.B    '+',0
000012C8= 2D 00                    185  minussign               DC.B    '-',0
000012CA= 2C 00                    186  commasign               DC.B    ',',0
000012CC= 2F 00                    187  backslashsigh           DC.B    '/',0
000012CE= 28 00                    188  openparen               DC.B    '(',0
000012D0= 29 00                    189  closeparen              DC.B    ')',0
000012D2= 20 00                    190  space                   DC.B    ' ',0   
000012D4= 2E 42 00                 191  size_b                  DC.B    '.B',0
000012D7= 2E 57 00                 192  size_w                  DC.B    '.W',0        
000012DA= 2E 4C 00                 193  size_l                  DC.B    '.L',0
000012DD                           194  
000012DD                           195  linecount               DS.B    1       *storeage for lines on a screen
000012DE= 01                       196  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012E0                           197  location_startData      DS.L    1       *location on where to start reading data
000012E4                           198  location_endData        DS.L    1       *location on where to end reading data
000012E8                           199  table_length            DS.B    1       *Number of spaces in the table to print to console
000012E9                           200  
000012E9                           201  
000012E9                           202  -------------------- end include --------------------
000012E9                           203             
000012E9                           204  EXIT                 
000012EA  FFFF FFFF                205         SIMHALT   
000012EE                           206  
000012EE                           207  
000012EE                           208  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012EE  4EF9 0000134E            209  jmp_table      JMP         code0000
000012F4                           210                  *ADDI
000012F4                           211  
000012F4  4EF9 00001362            212                 JMP         code0001
000012FA                           213  
000012FA  4EF9 00001366            214                 JMP         code0010
00001300                           215  
00001300  4EF9 0000136A            216                 JMP         code0011
00001306                           217  
00001306  4EF9 0000136E            218                 JMP         code0100
0000130C                           219                             
0000130C  4EF9 000013A2            220                 JMP         code0101
00001312                           221                 * ADDQ
00001312                           222                  
00001312                           223        
00001312  4EF9 000013A8            224                 JMP         code0110
00001318                           225                 * BCC
00001318                           226                 * BGT
00001318                           227                 * BLE
00001318                           228                 
00001318  4EF9 000013AC            229                 JMP         code0111
0000131E                           230                 * MOVEQ
0000131E                           231  
0000131E  4EF9 000013B2            232                 JMP         code1000
00001324                           233                 * DIVU
00001324                           234                 * OR
00001324                           235  
00001324  4EF9 000013C4            236                 JMP         code1001
0000132A                           237                  *SUB
0000132A  4EF9 000013CA            238                 JMP         code1010
00001330                           239                 
00001330  4EF9 000013CE            240                 JMP         code1011
00001336                           241                 * CMP
00001336                           242                 
00001336  4EF9 000013D4            243                 JMP         code1100
0000133C                           244                 * MULS
0000133C                           245                 * AND
0000133C                           246          
0000133C  4EF9 000013E6            247                 JMP         code1101
00001342                           248                 *ADD
00001342                           249                 *ADDA
00001342  4EF9 00001432            250                 JMP         code1110
00001348                           251                 * ASR
00001348                           252                 * ASL
00001348                           253                 * LSL
00001348                           254                 * LSR
00001348                           255                 * ROL
00001348                           256                 * ROR
00001348                           257  
00001348  4EF9 00001462            258                 JMP         code1111
0000134E                           259  
0000134E                           260  
0000134E                           261  code0000      
0000134E  4EB9 0000191E            262                 JSR          bits5to8 // RETURNS INTO D3
00001354  B6BC 00000006            263                 CMP.L        #%0110, D3
0000135A  6600 06CE                264                 BNE          INVALID_OP
0000135E  6000 01D0                265                 BRA          ADDI  
00001362                           266  
00001362  4E72 2700                267  code0001       STOP        #$2700
00001366                           268  
00001366  4E72 2700                269  code0010       STOP        #$2700
0000136A                           270  
0000136A  4E72 2700                271  code0011       STOP        #$2700
0000136E                           272  
0000136E                           273  code0100       
0000136E  4EB9 00001AC2            274                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
00001374                           275                  
00001374                           276                 *NOP
00001374  C47C 0FFF                277                 AND     #%0000111111111111,D2
00001378  B4BC 00000E71            278                 CMP.L   #%000111001110001, D2
0000137E  6700 06C8                279                 BEQ     NOP
00001382                           280                 
00001382                           281                 *RTS
00001382  C47C 0FFF                282                 AND     #%0000111111111111,D2
00001386  B4BC 00000E75            283                 CMP.L   #%0000111001110101, D2
0000138C  6700 06C8                284                 BEQ     RTS
00001390                           285  
00001390                           286                 *JSR
00001390  C47C 0FC0                287                 AND     #%0000111111000000,D2
00001394  B4BC 00000E80            288                 CMP.L   #%0000111010000000,D2
0000139A  6700 06C8                289                 BEQ     JSR
0000139E                           290                 
0000139E                           291                 * MOVEM
0000139E                           292                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
0000139E                           293                ** AND     #%0000111110000000,D2
0000139E                           294                 * DATA REGISTER
0000139E                           295                ** CMP.L   #%0000100010000000, D2
0000139E                           296                 ** JSR      MOVEM
0000139E                           297                 * ADDRESS REGISTER (DECREMENTED)
0000139E                           298                 ** CMP.L  #%0000110010000000, D2
0000139E                           299                 ** JSR    MOVEM
0000139E                           300                  
0000139E                           301                  ** TO DO: BRANCH IF INVALID OPCODE
0000139E                           302                  *LEA - if it's not the top codes, it's LEA
0000139E  6000 0234                303                  BRA     LEA
000013A2                           304  code0101      
000013A2                           305  
000013A2  4EB9 000016BE            306                  JSR   ADDQ
000013A8                           307  
000013A8  4E72 2700                308  code0110        STOP        #$2700
000013AC                           309  
000013AC                           310  code0111       
000013AC  4EB9 000016DE            311                  JSR       MOVEQ
000013B2                           312  
000013B2                           313  code1000      
000013B2  4EB9 00001930            314                  JSR        bits8to10
000013B8  B67C 0003                315                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013BC  6700 0344                316                  BEQ        DIVU
000013C0  6000 0360                317                  BRA        OR       ** OTHERWISE OR
000013C4                           318                  
000013C4                           319  
000013C4                           320  code1001       
000013C4  4EB9 0000173E            321                 JSR         SUB
000013CA  4E72 2700                322  code1010       STOP        #$2700
000013CE                           323  
000013CE                           324  code1011       
000013CE  4EB9 0000175E            325                 JSR         CMP
000013D4                           326  
000013D4                           327  code1100      
000013D4  4EB9 00001930            328                  JSR        bits8to10
000013DA  B67C 0007                329                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013DE  6700 039E                330                  BEQ        MULS
000013E2  6000 03BA                331                  BRA        AND       ** OTHERWISE AND
000013E6                           332  
000013E6                           333  code1101       
000013E6  4EB9 00001AC2            334                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013EC                           335                 *ADDA
000013EC  4EB9 00001930            336                 JSR      bits8to10
000013F2  B67C 0003                337                 CMP      #%011, D3  ** WORD
000013F6  6700 006E                338                 BEQ      ADDA
000013FA  B67C 0007                339                 CMP      #%111, D3   ** LONG
000013FE  6700 0066                340                 BEQ      ADDA
00001402                           341                 
00001402                           342                 *ADD
00001402  B67C 0000                343                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00001406  6700 0084                344                 BEQ      ADD
0000140A  B67C 0001                345                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000140E  6700 007C                346                 BEQ      ADD
00001412  B67C 0002                347                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001416  6700 0074                348                 BEQ      ADD
0000141A  B67C 0004                349                 CMP      #%100, D3   ** BYTE TO EA
0000141E  6700 006C                350                 BEQ      ADD
00001422  B67C 0005                351                 CMP      #%101, D3   ** WORD TO EA
00001426  6700 0064                352                 BEQ      ADD
0000142A  B67C 0006                353                 CMP      #%110, D3   ** LONG TO EA
0000142E  6700 005C                354                 BEQ      ADD
00001432                           355                 
00001432                           356  
00001432                           357  code1110       
00001432                           358                  * ASR
00001432  4EB9 00001974            359                  JSR     bits1to10
00001438  B67C 0383                360                  CMP     #%1110000011,D3
0000143C  6700 0380                361                  BEQ     ASR
00001440                           362                  
00001440                           363                  * ASL
00001440  B67C 0387                364                  CMP     #%1110000111,D3
00001444  6700 0394                365                  BEQ     ASL
00001448                           366                  
00001448                           367                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001448                           368                  * LSL
00001448  4244                     369                  CLR     D4
0000144A  2803                     370                  MOVE.L  D3,D4
0000144C  C8BC 00A98671            371                  AND.L   #11110001,D4
00001452  B87C 01C7                372                  CMP     #%111000111,D4
00001456  6700 039E                373                  BEQ     LSL
0000145A                           374                  
0000145A                           375                  * LSR
0000145A  B67C 038B                376                  CMP     #%1110001011,D3
0000145E  6700 03B2                377                  BEQ     LSR
00001462                           378                  
00001462                           379                  * ROL
00001462                           380                  
00001462                           381                  * ROR
00001462                           382  
00001462  4E72 2700                383  code1111       STOP        #$2700
00001466                           384  
00001466                           385  ADDA    
00001466  4EB9 00001470            386                 JSR     ADDA_BUFFER
0000146C  6000 067A                387                 BRA     PRINT_BUFFER
00001470                           388                  
00001470                           389  ADDA_BUFFER
00001470  1CFC 0041                390                 MOVE.B   #'A',(A6)+
00001474  1CFC 0044                391                 MOVE.B   #'D', (A6)+  
00001478  1CFC 0044                392                 MOVE.B   #'D', (A6)+
0000147C  1CFC 0041                393                 MOVE.B   #'A', (A6)+
00001480  4EB9 00001BEC            394                 JSR      GETSIZE_ADDA
00001486  1CFC 0020                395                 MOVE.B   #' ', (A6)+
0000148A  4E75                     396                 RTS
0000148C                           397                 
0000148C                           398                 
0000148C                           399                 
0000148C                           400  *********************************************               
0000148C                           401  ADD    
0000148C  4EB9 00001496            402                 JSR     ADD_BUFFER
00001492  6000 0654                403                 BRA     PRINT_BUFFER
00001496                           404                  
00001496                           405  ADD_BUFFER
00001496  1CFC 0041                406                 MOVE.B   #'A',(A6)+
0000149A  1CFC 0044                407                 MOVE.B   #'D', (A6)+  
0000149E  1CFC 0044                408                 MOVE.B   #'D', (A6)+
000014A2  4EB9 00001B2A            409                 JSR      GETSIZE_ADD
000014A8                           410                 
000014A8                           411                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014A8                           412                 
000014A8  BC7C 0001                413                 CMP      #1,D6
000014AC  6600 001A                414                 BNE      ADD_DIRECTION_REVERSED
000014B0  4EB9 000014EA            415                 JSR      ADD_SRC
000014B6  1CFC 002C                416                 MOVE.B   #',', (A6)+
000014BA  1CFC 0020                417                 MOVE.B   #' ', (A6)+
000014BE  4EB9 0000150E            418                 JSR      ADD_DEST
000014C4  6000 001C                419                 BRA      ADD_DONE
000014C8                           420                 
000014C8                           421                 
000014C8                           422  ADD_DIRECTION_REVERSED
000014C8                           423  
000014C8  4246                     424                 CLR      D6
000014CA  4EB9 0000150E            425                 JSR      ADD_DEST
000014D0  1CFC 002C                426                 MOVE.B   #',', (A6)+
000014D4  1CFC 0020                427                 MOVE.B   #' ', (A6)+
000014D8  4EB9 000014EA            428                 JSR      ADD_SRC
000014DE  6000 0002                429                 BRA      ADD_DONE              
000014E2                           430                 
000014E2                           431                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014E2                           432                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014E2                           433                 
000014E2                           434  ADD_DONE       
000014E2  4246                     435                 CLR      D6
000014E4  4EB9 00001AE8            436                 JSR     PRINT_BUFFER
000014EA                           437  
000014EA                           438                  
000014EA                           439  
000014EA                           440  ***********************************************        
000014EA                           441  
000014EA                           442  
000014EA                           443  
000014EA                           444  ****************************************************************************************
000014EA                           445  ADD_SRC
000014EA                           446  
000014EA  4EB9 00001942            447                  JSR    bits11to13
000014F0  3803                     448                  MOVE   D3,D4
000014F2  41F9 0000182E            449                  LEA     jmp_mode,A0    *Index into the table
000014F8  C6FC 0006                450                  MULU   #6,D3
000014FC  4EB0 3000                451                  JSR    0(A0,D3)     
00001500  4EB9 00001954            452                  JSR    bits14to16
00001506  4EB9 0000185E            453                  JSR    insert_num
0000150C  4E75                     454                  RTS
0000150E                           455  
0000150E                           456  
0000150E                           457  
0000150E                           458  
0000150E                           459  
0000150E                           460  ADD_DEST
0000150E  363C 0000                461                  MOVE.W #%000,D3     ;Can only have a data register.
00001512  3803                     462                  MOVE   D3,D4
00001514  41F9 0000182E            463                  LEA     jmp_mode,A0    *Index into the table
0000151A  C6FC 0006                464                  MULU    #6,D3       *Form offset     
0000151E  4EB0 3000                465                  JSR     0(A0,D3)   *Jump indirect with index
00001522                           466                  
00001522  4EB9 0000190A            467                  JSR     bits5to7
00001528  4EB9 0000185E            468                  JSR     insert_num
0000152E  4E75                     469                  RTS
00001530                           470                          
00001530                           471  
00001530                           472  
00001530                           473  
00001530                           474  ADDI
00001530  4EB9 000015B8            475                  JSR     ADDI_BUFFER
00001536  4EB9 00001546            476                  JSR     ADDI_SRC
0000153C  4EB9 00001554            477                  JSR     ADDI_DES
00001542  6000 05A4                478                  BRA     PRINT_BUFFER
00001546                           479                  
00001546                           480  ADDI_SRC                        
00001546  1CFC 0023                481                  MOVE.B  #'#', (A6)+
0000154A  1CFC 002C                482                  MOVE.B  #',', (A6)+
0000154E  1CFC 0020                483                  MOVE.B  #' ', (A6)+
00001552  4E75                     484                  RTS
00001554                           485                    ** TODO: IMPLEMENT THIS IN EA
00001554                           486                  ** Immediate field—Data immediately following the instruction.
00001554                           487                  **If size = 00, the data is the low-order byte of the immediate word.
00001554                           488                  **If size = 01, the data is the entire immediate word.
00001554                           489                  **If size = 10, the data is the next two immediate words. 
00001554                           490  ADDI_DES
00001554                           491                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001554                           492                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001554  4EB9 00001942            493                 JSR      bits11to13
0000155A  B67C 0001                494                 CMP      #%001, D3 **AN
0000155E  6700 04C6                495                 BEQ      INVALID_EA
00001562  B67C 0005                496                 CMP      #%101, D3 **COMPLICATED
00001566  6700 04BE                497                 BEQ      INVALID_EA
0000156A  B67C 0006                498                 CMP      #%110, D3 **COMPLICATED
0000156E  6700 04B6                499                 BEQ      INVALID_EA
00001572                           500                 
00001572  4EB9 00001964            501                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001578  B67C 003C                502                 CMP      #%111100,D3 // immediate data
0000157C  6700 04A8                503                 BEQ      INVALID_EA
00001580  B67C 003A                504                 CMP      #%111010,D3 // complicated
00001584  6700 04A0                505                 BEQ      INVALID_EA
00001588  B67C 003B                506                 CMP      #%111011,D3 // complicated
0000158C  6700 0498                507                 BEQ      INVALID_EA
00001590                           508                 
00001590  4EB9 00001942            509                 JSR      bits11to13 ** grab bits to jump with\
00001596  3803                     510                 MOVE     D3,D4
00001598  41F9 0000182E            511                 LEA     jmp_mode,A0    *Index into the table
0000159E  C6FC 0006                512                 MULU    #6,D3       *Form offset     
000015A2  4EB0 3000                513                 JSR     0(A0,D3)   *Jump indirect with index
000015A6                           514                 
000015A6  4243                     515                 CLR     D3
000015A8  4EB9 00001954            516                 JSR     bits14to16
000015AE  4EB9 0000185E            517                 JSR     insert_num
000015B4  4244                     518                 CLR     D4
000015B6                           519                 
000015B6  4E75                     520                 RTS
000015B8                           521                 
000015B8                           522                             
000015B8                           523  ADDI_BUFFER
000015B8  1CFC 0041                524                 MOVE.B   #'A',(A6)+
000015BC  1CFC 0044                525                 MOVE.B   #'D', (A6)+  
000015C0  1CFC 0044                526                 MOVE.B   #'D', (A6)+
000015C4  1CFC 0049                527                 MOVE.B   #'I', (A6)+
000015C8                           528                 
000015C8  4EB9 00001BB2            529                 JSR      GETSIZE_ADDI
000015CE                           530                 
000015CE                           531                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015CE                           532                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015CE  1CFC 0020                533                 MOVE.B   #' ', (A6)+
000015D2  4E75                     534                 RTS
000015D4                           535                              
000015D4                           536  LEA
000015D4  4EB9 00001930            537                 JSR      bits8to10   // 1 1 1
000015DA  B47C 0007                538                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015DE  6600 044A                539                 BNE      INVALID_OP
000015E2  4EB9 000015F6            540                 JSR      LEA_BUFFER
000015E8  4EB9 00001608            541                 JSR      LEA_SRC
000015EE  4EB9 0000169A            542                 JSR      LEA_DEST
000015F4  4E75                     543                 RTS
000015F6                           544                 
000015F6                           545  LEA_BUFFER 
000015F6  1CFC 004C                546                 MOVE.B   #'L',(A6)+
000015FA  1CFC 0045                547                 MOVE.B   #'E', (A6)+  
000015FE  1CFC 0041                548                 MOVE.B   #'A', (A6)+
00001602  1CFC 0020                549                 MOVE.B   #' ', (A6)+
00001606  4E75                     550                 RTS
00001608                           551            
00001608                           552  LEA_SRC
00001608                           553              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00001608  4EB9 00001942            554              JSR      bits11to13  // source mode - D3
0000160E  B67C 0000                555              CMP      #%000, D3
00001612  6700 0412                556              BEQ      INVALID_EA
00001616  B67C 0001                557              CMP      #%001, D3
0000161A  6700 040A                558              BEQ      INVALID_EA
0000161E  B67C 0003                559              CMP      #%011, D3
00001622  6700 0402                560              BEQ      INVALID_EA
00001626  B67C 0004                561              CMP      #%100, D3
0000162A  6700 03FA                562              BEQ      INVALID_EA
0000162E  B67C 0005                563              CMP      #%101, D3
00001632  6700 03F2                564              BEQ      INVALID_EA
00001636  B67C 0006                565              CMP      #%110, D3
0000163A  6700 03EA                566              BEQ      INVALID_EA
0000163E                           567  
0000163E                           568              
0000163E                           569              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
0000163E  4EB9 00001954            570              JSR      bits14to16 // source register - d4
00001644  B67C 0004                571              CMP      #%100, D3
00001648  6700 03DC                572              BEQ      INVALID_EA
0000164C  B67C 0002                573              CMP      #%010, D3
00001650  6700 03D4                574              BEQ      INVALID_EA
00001654  B67C 0003                575              CMP      #%011, D3
00001658  6700 03CC                576              BEQ      INVALID_EA
0000165C                           577              
0000165C                           578  
0000165C  4EB9 00001964            579               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001662  B67C 003C                580               CMP      #%111100,D3 // immediate data
00001666  6700 03BE                581               BEQ      INVALID_EA
0000166A  B67C 003A                582               CMP      #%111010,D3 // complicated
0000166E  6700 03B6                583               BEQ      INVALID_EA
00001672  B67C 003B                584               CMP      #%111011,D3 // complicated
00001676  6700 03AE                585               BEQ      INVALID_EA
0000167A                           586     
0000167A  4EB9 00001942            587               JSR      bits11to13 ** grab mode bits to jump with
00001680  3803                     588               MOVE    D3,D4
00001682                           589  
00001682  41F9 0000182E            590               LEA     jmp_mode,A0    *Index into the table
00001688  C6FC 0006                591               MULU    #6,D3       *Form offset     
0000168C  4EB0 3000                592               JSR     0(A0,D3)   *Jump indirect with index
00001690                           593   
00001690  1CFC 002C                594               MOVE.B     #',', (A6)+
00001694  1CFC 0020                595               MOVE.B     #' ', (A6)+
00001698                           596  
00001698  4E75                     597               RTS
0000169A                           598               
0000169A                           599  LEA_DEST    
0000169A  4244                     600                  CLR     D4
0000169C  41F9 0000182E            601                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
000016A2  363C 0001                602                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
000016A6  3803                     603                  MOVE    D3,D4
000016A8  C6FC 0006                604                  MULU    #6,D3       *Form offset     
000016AC  4EB0 3000                605                  JSR     0(A0,D3)   *Jump indirect with index
000016B0                           606                  
000016B0  4EB9 0000190A            607                  JSR     bits5to7
000016B6  4EB9 0000185E            608                  JSR     insert_num
000016BC                           609                  
000016BC  4E75                     610                  RTS
000016BE                           611  
000016BE                           612  
000016BE                           613  ADDQ
000016BE  4EB9 000016C8            614                  JSR     ADDQ_BUFFER
000016C4  6000 0422                615                  BRA     PRINT_BUFFER
000016C8                           616  
000016C8                           617  ADDQ_BUFFER
000016C8  1CFC 0041                618                 MOVE.B   #'A',(A6)+
000016CC  1CFC 0044                619                 MOVE.B   #'D', (A6)+  
000016D0  1CFC 0044                620                 MOVE.B   #'D', (A6)+
000016D4  1CFC 0051                621                 MOVE.B   #'Q', (A6)+
000016D8                           622                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
000016D8                           623                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000016D8  1CFC 0020                624                 MOVE.B   #' ', (A6)+
000016DC  4E75                     625                 RTS
000016DE                           626                 
000016DE                           627  MOVEQ
000016DE  4EB9 000016E8            628                  JSR     MOVEQ_BUFFER
000016E4  6000 0402                629                  BRA     PRINT_BUFFER
000016E8                           630  
000016E8                           631  MOVEQ_BUFFER
000016E8  1CFC 004D                632                 MOVE.B   #'M',(A6)+
000016EC  1CFC 004F                633                 MOVE.B   #'O', (A6)+  
000016F0  1CFC 0056                634                 MOVE.B   #'V', (A6)+
000016F4  1CFC 0045                635                 MOVE.B   #'E', (A6)+
000016F8  1CFC 0051                636                 MOVE.B   #'Q', (A6)+
000016FC  1CFC 0020                637                 MOVE.B   #' ', (A6)+
00001700  4E75                     638                 RTS
00001702                           639  
00001702                           640  DIVU
00001702  4EB9 0000170C            641                  JSR     DIVU_BUFFER
00001708  6000 03DE                642                  BRA     PRINT_BUFFER
0000170C                           643  
0000170C                           644  DIVU_BUFFER
0000170C  1CFC 0044                645                 MOVE.B   #'D',(A6)+
00001710  1CFC 0049                646                 MOVE.B   #'I', (A6)+  
00001714  1CFC 0056                647                 MOVE.B   #'V', (A6)+
00001718  1CFC 0055                648                 MOVE.B   #'U', (A6)+
0000171C  1CFC 0020                649                 MOVE.B   #' ', (A6)+
00001720  4E75                     650                 RTS  
00001722                           651  OR    
00001722  4EB9 0000172C            652                 JSR     OR_BUFFER
00001728  6000 03BE                653                 BRA     PRINT_BUFFER
0000172C                           654                  
0000172C                           655  OR_BUFFER
0000172C  1CFC 004F                656                 MOVE.B   #'O',(A6)+
00001730  1CFC 0052                657                 MOVE.B   #'R', (A6)+  
00001734  1CFC 002E                658                 MOVE.B   #'.', (A6)+
00001738                           659                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001738                           660                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001738                           661                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001738  1CFC 0020                662                 MOVE.B   #' ', (A6)+
0000173C  4E75                     663                 RTS   
0000173E                           664  
0000173E                           665  SUB   
0000173E  4EB9 00001748            666                 JSR     SUB_BUFFER
00001744  6000 03A2                667                 BRA     PRINT_BUFFER               
00001748                           668  
00001748                           669  SUB_BUFFER
00001748  1CFC 0053                670                 MOVE.B   #'S',(A6)+
0000174C  1CFC 0055                671                 MOVE.B   #'U', (A6)+  
00001750  1CFC 0042                672                 MOVE.B   #'B', (A6)+
00001754  1CFC 002E                673                 MOVE.B   #'.', (A6)+
00001758                           674                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001758                           675                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001758                           676                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001758  1CFC 0020                677                 MOVE.B   #' ', (A6)+
0000175C  4E75                     678                 RTS  
0000175E                           679  CMP   
0000175E  4EB9 00001768            680                 JSR     CMP_BUFFER
00001764  6000 0382                681                 BRA     PRINT_BUFFER
00001768                           682                  
00001768                           683  CMP_BUFFER
00001768  1CFC 0043                684                 MOVE.B   #'C',(A6)+
0000176C  1CFC 004D                685                 MOVE.B   #'M', (A6)+  
00001770  1CFC 0050                686                 MOVE.B   #'P', (A6)+
00001774  1CFC 002E                687                 MOVE.B   #'.', (A6)+
00001778                           688                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001778                           689                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001778                           690                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001778  1CFC 0020                691                 MOVE.B   #' ', (A6)+
0000177C  4E75                     692                 RTS   
0000177E                           693                 
0000177E                           694  MULS
0000177E  4EB9 00001788            695                  JSR     MULS_BUFFER
00001784  6000 0362                696                  BRA     PRINT_BUFFER
00001788                           697  
00001788                           698  MULS_BUFFER
00001788  1CFC 004D                699                 MOVE.B   #'M',(A6)+
0000178C  1CFC 0055                700                 MOVE.B   #'U', (A6)+  
00001790  1CFC 004C                701                 MOVE.B   #'L', (A6)+
00001794  1CFC 0053                702                 MOVE.B   #'S', (A6)+
00001798  1CFC 0020                703                 MOVE.B   #' ', (A6)+
0000179C  4E75                     704                 RTS
0000179E                           705  
0000179E                           706  AND    
0000179E  4EB9 000017A8            707                 JSR     AND_BUFFER
000017A4  6000 0342                708                 BRA     PRINT_BUFFER
000017A8                           709                  
000017A8                           710  AND_BUFFER
000017A8  1CFC 0041                711                 MOVE.B   #'A',(A6)+
000017AC  1CFC 004E                712                 MOVE.B   #'N', (A6)+  
000017B0  1CFC 0044                713                 MOVE.B   #'D', (A6)+
000017B4  1CFC 002E                714                 MOVE.B   #'.', (A6)+
000017B8                           715                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017B8                           716                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017B8                           717                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017B8  1CFC 0020                718                 MOVE.B   #' ', (A6)+
000017BC  4E75                     719                 RTS    
000017BE                           720  
000017BE                           721  ASR     
000017BE  4EB9 000017C8            722                  JSR     ASR_BUFFER
000017C4  6000 0322                723                  BRA     PRINT_BUFFER
000017C8                           724  
000017C8                           725  ASR_BUFFER
000017C8  1CFC 0041                726                 MOVE.B   #'A',(A6)+
000017CC  1CFC 0053                727                 MOVE.B   #'S', (A6)+  
000017D0  1CFC 0052                728                 MOVE.B   #'R', (A6)+
000017D4  1CFC 0020                729                 MOVE.B   #' ', (A6)+
000017D8  4E75                     730                 RTS      
000017DA                           731  
000017DA                           732  ASL     
000017DA  4EB9 000017E4            733                  JSR     ASL_BUFFER
000017E0  6000 0306                734                  BRA     PRINT_BUFFER
000017E4                           735  
000017E4                           736  ASL_BUFFER
000017E4  1CFC 0041                737                 MOVE.B   #'A',(A6)+
000017E8  1CFC 0053                738                 MOVE.B   #'S', (A6)+  
000017EC  1CFC 004C                739                 MOVE.B   #'L', (A6)+
000017F0  1CFC 0020                740                 MOVE.B   #' ', (A6)+
000017F4  4E75                     741                 RTS     
000017F6                           742  
000017F6                           743  LSL     
000017F6  4EB9 00001800            744                  JSR     LSL_BUFFER
000017FC  6000 02EA                745                  BRA     PRINT_BUFFER
00001800                           746  
00001800                           747  LSL_BUFFER
00001800  1CFC 004C                748                 MOVE.B   #'L',(A6)+
00001804  1CFC 0053                749                 MOVE.B   #'S', (A6)+  
00001808  1CFC 004C                750                 MOVE.B   #'L', (A6)+
0000180C  1CFC 0020                751                 MOVE.B   #' ', (A6)+
00001810  4E75                     752                 RTS     
00001812                           753  
00001812                           754  LSR     
00001812  4EB9 0000181C            755                  JSR     LSR_BUFFER
00001818  6000 02CE                756                  BRA     PRINT_BUFFER
0000181C                           757  
0000181C                           758  LSR_BUFFER
0000181C  1CFC 004C                759                 MOVE.B   #'L',(A6)+
00001820  1CFC 0053                760                 MOVE.B   #'S', (A6)+  
00001824  1CFC 0052                761                 MOVE.B   #'R', (A6)+
00001828  1CFC 0020                762                 MOVE.B   #' ', (A6)+
0000182C  4E75                     763                 RTS       
0000182E                           764                 
0000182E                           765  jmp_mode
0000182E  4EF9 00001986            766                  JMP     MODE000  ** DN
00001834  4EF9 0000198C            767                  JMP     MODE001  ** AN
0000183A  4EF9 00001994            768                  JMP     MODE010  ** (AN)
00001840  4EF9 0000199E            769                  JMP     MODE011  ** (AN)+   
00001846  4EF9 000019A8            770                  JMP     MODE100  ** -(AN)
0000184C  4EF9 000019B6            771                  JMP     MODE101  **INVALID
00001852  4EF9 000019C0            772                  JMP     MODE110  **INVALID
00001858  4EF9 000019CA            773                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
0000185E                           774  
0000185E                           775                  
0000185E                           776  insert_num
0000185E                           777                  
0000185E                           778                  ;get number from D3
0000185E  B67C 0000                779                  CMP     #%000,D3       ;0
00001862  6600 000A                780                  BNE     ONE         
00001866  1CFC 0030                781                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
0000186A  6000 006E                782                  BRA     FINISHER
0000186E                           783                  
0000186E  B67C 0001                784  ONE             CMP     #%001,D3       ;1
00001872  6600 000A                785                  BNE     TWO 
00001876  1CFC 0031                786                  MOVE.B  #'1',(A6)+
0000187A  6000 005E                787                  BRA     FINISHER
0000187E                           788  
0000187E                           789                  
0000187E  B67C 0002                790  TWO             CMP     #%010,D3        ;2
00001882  6600 000A                791                  BNE     THREE
00001886  1CFC 0032                792                  MOVE.B  #'2',(A6)+
0000188A  6000 004E                793                  BRA     FINISHER
0000188E                           794                  
0000188E  B67C 0003                795  THREE           CMP     #%011,D3        ;3
00001892  6600 000A                796                  BNE     FOUR
00001896  1CFC 0033                797                  MOVE.B  #'3',(A6)+
0000189A  6000 003E                798                  BRA     FINISHER
0000189E                           799                  
0000189E  B67C 0004                800  FOUR            CMP     #%100,D3        ;4
000018A2  6600 000A                801                  BNE     FIVE
000018A6  1CFC 0034                802                  MOVE.B  #'4',(A6)+
000018AA  6000 002E                803                  BRA     FINISHER
000018AE                           804                  
000018AE  B67C 0005                805  FIVE            CMP     #%101,D3        ;5
000018B2  6600 000A                806                  BNE     SIX
000018B6  1CFC 0035                807                  MOVE.B  #'5',(A6)+
000018BA  6000 001E                808                  BRA     FINISHER
000018BE                           809                  
000018BE  B67C 0006                810  SIX             CMP     #%110,D3        ;6
000018C2  6600 000A                811                  BNE     SEVEN
000018C6  1CFC 0036                812                  MOVE.B  #'6',(A6)+
000018CA  6000 000E                813                  BRA     FINISHER
000018CE                           814                  
000018CE  B67C 0007                815  SEVEN           CMP     #%111,D3        ;7
000018D2  1CFC 0037                816                  MOVE.B  #'7',(A6)+
000018D6  6000 0002                817                  BRA     FINISHER
000018DA                           818                  
000018DA                           819  FINISHER                
000018DA                           820                  
000018DA                           821                  ;check D4, do we need to do stuff?
000018DA  B87C 0002                822                  CMP     #%010,D4
000018DE  6600 0008                823                  BNE     POSTINCR
000018E2  1CFC 0029                824                  MOVE.B  #')',(A6)+
000018E6  4E75                     825                  RTS
000018E8                           826                  
000018E8  B87C 0003                827  POSTINCR        CMP     #%011,D4
000018EC  6600 000C                828                  BNE     ONEPAREN
000018F0  1CFC 0029                829                  MOVE.B  #')',(A6)+
000018F4  1CFC 002B                830                  MOVE.B  #'+',(A6)+
000018F8  4E75                     831                  RTS
000018FA                           832                  
000018FA  B87C 0004                833  ONEPAREN        CMP     #%100,D4
000018FE  6600 0008                834                  BNE     DONE
00001902  1CFC 0029                835                  MOVE.B  #')',(A6)+                
00001906                           836  
00001906  4244                     837                  CLR     D4
00001908  4E75                     838  DONE            RTS
0000190A                           839  
0000190A                           840          
0000190A                           841                 
0000190A                           842  bits5to7
0000190A  4243                     843                 CLR      D3
0000190C  4EB9 00001AC2            844                 JSR      COPY_OPCODE  // opcode copied to D2
00001912  C47C 0E00                845                 AND      #%0000111000000000, D2
00001916  E09A                     846                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001918  E29A                     847                 ROR.L    #1, D2
0000191A  3602                     848                 MOVE.W   D2,D3 // moving isolated bits into d3
0000191C  4E75                     849                 RTS
0000191E                           850                 
0000191E                           851  bits5to8
0000191E  4243                     852                 CLR      D3
00001920  4EB9 00001AC2            853                 JSR      COPY_OPCODE  // opcode copied to D2
00001926  C47C 0F00                854                 AND      #%0000111100000000, D2
0000192A  E09A                     855                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000192C  3602                     856                 MOVE.W   D2,D3 // moving isolated bits into d3
0000192E  4E75                     857                 RTS
00001930                           858                 
00001930                           859  bits8to10
00001930  4243                     860                 CLR      D3
00001932  4EB9 00001AC2            861                 JSR      COPY_OPCODE  // opcode copied to D2
00001938  C47C 01C0                862                 AND      #%0000000111000000, D2
0000193C  EC9A                     863                 ROR.L    #6, D2          // rotate bits so isolated at the end
0000193E  3602                     864                 MOVE.W   D2,D3 // moving isolated bits into d3
00001940  4E75                     865                 RTS               
00001942                           866             
00001942                           867  bits11to13
00001942  4243                     868                 CLR      D3
00001944  4EB9 00001AC2            869                 JSR      COPY_OPCODE  // opcode copied to D2
0000194A  C47C 0038                870                 AND      #%0000000000111000, D2
0000194E  E69A                     871                 ROR.L    #3, D2          // rotate bits so isolated at the end
00001950  3602                     872                 MOVE.W   D2,D3 // moving isolated bits into d3
00001952  4E75                     873                 RTS
00001954                           874             
00001954                           875  bits14to16
00001954  4243                     876                 CLR      D3
00001956  4EB9 00001AC2            877                 JSR      COPY_OPCODE  // opcode copied to D2
0000195C  C47C 0007                878                 AND      #%0000000000000111, D2
00001960  3602                     879                 MOVE.W   D2,D3 // moving isolated bits into d3
00001962  4E75                     880                 RTS
00001964                           881  bits11to16
00001964  4243                     882                 CLR      D3
00001966  4EB9 00001AC2            883                 JSR      COPY_OPCODE  // opcode copied to D2
0000196C  C47C 003F                884                 AND      #%0000000000111111, D2
00001970  3602                     885                 MOVE.W   D2,D3 // moving isolated bits into d3
00001972  4E75                     886                 RTS
00001974                           887  bits1to10
00001974  4243                     888                 CLR      D3
00001976  4EB9 00001AC2            889                 JSR      COPY_OPCODE  // opcode copied to D2
0000197C  C47C FFC0                890                 AND      #%1111111111000000, D2
00001980  EC9A                     891                 ROR.L    #6, D2
00001982  3602                     892                 MOVE.W   D2,D3 // moving isolated bits into d3
00001984  4E75                     893                 RTS
00001986                           894  ** DN       
00001986                           895  MODE000         
00001986  1CFC 0044                896                  MOVE.B  #'D',(A6)+     
0000198A  4E75                     897                  RTS
0000198C                           898  
0000198C                           899  ** AN
0000198C                           900  MODE001         
0000198C  4EB9 000019DE            901                  JSR ADDRESS_BUFFER  
00001992  4E75                     902                  RTS      
00001994                           903  
00001994                           904   ** (AN)
00001994                           905  MODE010         
00001994  1CFC 0028                906                  MOVE.B  #'(', (A6)+
00001998  1CFC 0041                907                  MOVE.B  #'A',(A6)+  
0000199C  4E75                     908                  RTS      
0000199E                           909  
0000199E                           910  ** (AN)+ 
0000199E                           911  MODE011         
0000199E  1CFC 0028                912                  MOVE.B  #'(', (A6)+
000019A2  1CFC 0041                913                  MOVE.B  #'A',(A6)+ 
000019A6  4E75                     914                  RTS       
000019A8                           915  
000019A8                           916   ** -(AN)
000019A8                           917  MODE100         
000019A8  1CFC 002D                918                  MOVE.B  #'-', (A6)+
000019AC  1CFC 0028                919                  MOVE.B  #'(', (A6)+
000019B0  1CFC 0041                920                  MOVE.B  #'A',(A6)+
000019B4  4E75                     921                  RTS
000019B6                           922                  
000019B6                           923  **INVALID               
000019B6                           924  MODE101         
000019B6  1CFC 0028                925                  MOVE.B  #'(', (A6)+
000019BA  1CFC 0041                926                  MOVE.B  #'A',(A6)+ 
000019BE  4E75                     927                  RTS
000019C0                           928                  
000019C0                           929  **INVALID
000019C0                           930  MODE110         
000019C0  1CFC 0028                931                  MOVE.B  #'(', (A6)+
000019C4  1CFC 0041                932                  MOVE.B  #'A',(A6)+
000019C8  4E75                     933                  RTS  
000019CA                           934  
000019CA                           935  ** ABSOLUTE AND IMMEDIATE            
000019CA                           936  MODE111         
000019CA                           937                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
000019CA  1CFC 0024                938                 MOVE.B   #'$', (A6)+  
000019CE  4EB9 00001B04            939                 JSR      PRINT_DEREF_ADDRESS
000019D4  544A                     940                 ADD.W    #2, A2
000019D6  4EB9 00001B04            941                 JSR      PRINT_DEREF_ADDRESS
000019DC  4E75                     942                 RTS            
000019DE                           943                                          
000019DE                           944  ADDRESS_BUFFER
000019DE  1CFC 0041                945                  MOVE.B  #'A',(A6)+ 
000019E2  4E75                     946                  RTS
000019E4                           947                 
000019E4                           948  ABSOLUTE_BUFFER
000019E4  4243                     949                 CLR      D3
000019E6  3604                     950                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000019E8  1CF8 0024                951                 MOVE.B   '$', (A6)+
000019EC  B67C 0000                952                 CMP.W    #%000, D3
000019F0  6700 0010                953                 BEQ      ABSOLUTE_WORD_BUFFER
000019F4  4243                     954                 CLR      D3
000019F6  3604                     955                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
000019F8  B67C 0001                956                 CMP.W    #%001, D3
000019FC  6700 0016                957                 BEQ      ABSOLUTE_LONG_BUFFER
00001A00  4E75                     958                 RTS
00001A02                           959                 
00001A02                           960  ABSOLUTE_WORD_BUFFER
00001A02                           961                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A02                           962                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A02  1CFC 0046                963                         MOVE.B #'F', (A6)+ 
00001A06  1CFC 0046                964                         MOVE.B #'F', (A6)+ 
00001A0A  1CFC 0046                965                         MOVE.B #'F', (A6)+ 
00001A0E  1CFC 0046                966                         MOVE.B #'F', (A6)+ 
00001A12  4E75                     967                         RTS       
00001A14                           968                    
00001A14                           969  ABSOLUTE_LONG_BUFFER       
00001A14                           970                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A14                           971                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A14  1CFC 0047                972                         MOVE.B #'G', (A6)+ 
00001A18  1CFC 0047                973                         MOVE.B #'G', (A6)+ 
00001A1C  1CFC 0047                974                         MOVE.B #'G', (A6)+ 
00001A20  1CFC 0047                975                         MOVE.B #'G', (A6)+
00001A24  4E75                     976                         RTS 
00001A26                           977  
00001A26                           978  INVALID_EA  
00001A26                           979                  * TODO: IMPLEMENT
00001A26                           980                  *** CLEAR OUT A6
00001A26                           981                  ** PUT INVALID MESSAGE INTO A6
00001A26  6000 F8C1                982                  BRA EXIT
00001A2A                           983  INVALID_OP  
00001A2A                           984                  ** TODO: IMPLEMENT
00001A2A                           985                 *** CLEAR OUT A6
00001A2A                           986                  ** PUT INVALID MESSAGE INTO A6
00001A2A  1CFC 0044                987                      MOVE.B #'D', (A6)+
00001A2E  1CFC 0041                988                      MOVE.B #'A', (A6)+
00001A32  1CFC 0054                989                      MOVE.B #'T', (A6)+
00001A36  1CFC 0041                990                      MOVE.B #'A', (A6)+ 
00001A3A  1CFC 0020                991                      MOVE.B #' ', (A6)+ 
00001A3E  4EB9 00001B04            992                      JSR     PRINT_DEREF_ADDRESS
00001A44  6000 F8A3                993                      BRA     EXIT
00001A48                           994            
00001A48                           995                  
00001A48  43F8 122B                996  NOP                 LEA     NOP_disp,A1          
00001A4C  103C 000E                997                      MOVE.B  #14,D0
00001A50  4E4F                     998                      TRAP    #15
00001A52  6000 F895                999                      BRA     EXIT
00001A56                          1000                   
00001A56                          1001  RTS      
00001A56  43F8 1292               1002                      LEA     RTS_disp,A1          
00001A5A  103C 000E               1003                      MOVE.B  #14,D0
00001A5E  4E4F                    1004                      TRAP    #15 
00001A60  6000 F887               1005                      BRA     EXIT
00001A64                          1006  JSR      
00001A64  4DF9 00001C44           1007                      LEA     BUFFER, A6
00001A6A  1CFC 004A               1008                      MOVE.B #'J', (A6)+
00001A6E  1CFC 0053               1009                      MOVE.B #'S', (A6)+
00001A72  1CFC 0052               1010                      MOVE.B #'R', (A6)+
00001A76  1CFC 0020               1011                      MOVE.B #' ', (A6)+
00001A7A  43F9 00001C44           1012                      LEA     BUFFER, A1
00001A80                          1013                      ** BITS 10 - 12 MODE       
00001A80                          1014                      ** BITS 13 - 16 REGISTER
00001A80  103C 000E               1015                      MOVE.B  #14,D0
00001A84  4E4F                    1016                      TRAP    #15 
00001A86  6000 F861               1017                      BRA     EXIT
00001A8A                          1018                    
00001A8A                          1019  MOVEM      
00001A8A                          1020                     
00001A8A                          1021                      ** SIZE SUBROUTINE
00001A8A                          1022                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001A8A  C47C 0040               1023                      AND #%0000000001000000,D2 
00001A8E                          1024                      * WORD
00001A8E  B4BC 00000040           1025                      CMP.L   #%0000000001000000,D2
00001A94  4EB9 00001AAA           1026                      JSR     MOVEM_W 
00001A9A                          1027                      *LONG
00001A9A  B4BC 00000040           1028                      CMP.L   #%0000000001000000,D2 
00001AA0                          1029                     ** JSR     MOVEM_L
00001AA0  103C 000E               1030                      MOVE.B  #14,D0
00001AA4  4E4F                    1031                      TRAP    #15
00001AA6  6000 F841               1032                      BRA     EXIT 
00001AAA                          1033                      
00001AAA                          1034  MOVEM_W 
00001AAA  43F8 1240               1035                       LEA     MOVEM_disp,A1
00001AAE                          1036                      * PRINT MOVEM
00001AAE  103C 000E               1037                       MOVE.B  #14,D0
00001AB2  4E4F                    1038                       TRAP    #15
00001AB4                          1039          
00001AB4                          1040                      * PRINT WORD PORTION
00001AB4  41F8 12D7               1041                       LEA     size_w, A0
00001AB8  103C 000E               1042                       MOVE.B  #14,D0
00001ABC  4E4F                    1043                       TRAP    #15 
00001ABE                          1044          
00001ABE  6000 F829               1045                       BRA     EXIT 
00001AC2                          1046       
00001AC2                          1047     
00001AC2                          1048  COPY_OPCODE 
00001AC2                          1049                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001AC2  4242                    1050                       CLR    D2  
00001AC4  3405                    1051                       MOVE.W D5,D2 
00001AC6  4E75                    1052                       RTS  
00001AC8                          1053  
00001AC8                          1054  PRINT_ADDRESS     
00001AC8  4242                    1055                   CLR         D2
00001ACA  143C 0010               1056                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001ACE  220A                    1057                   MOVE.L      A2,D1        
00001AD0  103C 000F               1058                   MOVE.B      #15,D0          
00001AD4  4E4F                    1059                   TRAP        #15            
00001AD6  1CFC 0020               1060                   MOVE.B      #' ', (A6)+
00001ADA  1CFC 0020               1061                   MOVE.B      #' ', (A6)+
00001ADE  1CFC 0020               1062                   MOVE.B      #' ', (A6)+
00001AE2  1CFC 0020               1063                   MOVE.B      #' ', (A6)+
00001AE6  4E75                    1064                   RTS     
00001AE8                          1065  PRINT_BUFFER    
00001AE8  1CFC 0000               1066                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001AEC  43F9 00001C44           1067                 LEA      BUFFER, A1
00001AF2  303C 000E               1068                 MOVE.W   #14,D0
00001AF6  4E4F                    1069                 TRAP     #15
00001AF8  43F8 121B               1070                 LEA     linebreak,A1            *appends line at the end of the user input
00001AFC  103C 000E               1071                 MOVE.B  #14,D0
00001B00  4E4F                    1072                 TRAP    #15
00001B02  4E75                    1073                 RTS  
00001B04                          1074  
00001B04                          1075  PRINT_DEREF_ADDRESS
00001B04  1CFC 0000               1076                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B08  43F9 00001C44           1077                 LEA      BUFFER, A1
00001B0E  303C 000E               1078                 MOVE.W   #14,D0
00001B12  4E4F                    1079                 TRAP     #15
00001B14  4DF9 00001C44           1080                 LEA      BUFFER, A6
00001B1A  4242                    1081                 CLR         D2
00001B1C  143C 0010               1082                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B20  2212                    1083                 MOVE.L      (A2),D1        // PRINT INVALID HEX OPCODE        
00001B22  103C 000F               1084                 MOVE.B      #15,D0          
00001B26  4E4F                    1085                 TRAP        #15 
00001B28  4E75                    1086                 RTS
00001B2A                          1087   
00001B2A                          1088                     
00001B2A                          1089  ****************************
00001B2A                          1090  
00001B2A                          1091                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001B2A                          1092                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001B2A                          1093                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001B2A                          1094  GETSIZE_ADD
00001B2A  4EB8 1930               1095              JSR     bits8to10
00001B2E  B67C 0000               1096              CMP     #%000,D3
00001B32  6600 0010               1097              BNE     ADD_NOTBYTE
00001B36  4EB9 00001C14           1098              JSR     SIZEISBYTE
00001B3C  3C3C 0001               1099              MOVE    #1,D6
00001B40  4243                    1100              CLR     D3
00001B42  4E75                    1101              RTS
00001B44                          1102          
00001B44                          1103  ADD_NOTBYTE 
00001B44  B67C 0001               1104              CMP     #%001,D3
00001B48  6600 0010               1105              BNE     ADD_NOTWORD
00001B4C  4EB9 00001C24           1106              JSR     SIZEISWORD
00001B52  3C3C 0001               1107              MOVE    #1,D6
00001B56  4243                    1108              CLR     D3
00001B58  4E75                    1109              RTS
00001B5A                          1110              
00001B5A                          1111  ADD_NOTWORD
00001B5A  B67C 0002               1112              CMP     #%010,D3
00001B5E  6600 0010               1113              BNE     ADD_NOTLEFT
00001B62  4EB9 00001C34           1114              JSR     SIZEISLONG
00001B68  3C3C 0001               1115              MOVE    #1,D6
00001B6C  4243                    1116              CLR     D3
00001B6E  4E75                    1117              RTS
00001B70                          1118              
00001B70                          1119  ADD_NOTLEFT     ;check other direction
00001B70  B67C 0004               1120              CMP     #%100,D3
00001B74  6600 0010               1121              BNE     ADD_NOTRIGHTBYTE
00001B78  4EB9 00001C14           1122              JSR     SIZEISBYTE
00001B7E  3C3C 0002               1123              MOVE    #2,D6
00001B82  4243                    1124              CLR     D3
00001B84  4E75                    1125              RTS
00001B86                          1126              
00001B86                          1127  ADD_NOTRIGHTBYTE
00001B86  B67C 0005               1128              CMP     #%101,D3
00001B8A  6600 0010               1129              BNE     ADD_NOTRIGHTWORD
00001B8E  4EB9 00001C24           1130              JSR     SIZEISWORD
00001B94  3C3C 0002               1131              MOVE    #2,D6
00001B98  4243                    1132              CLR     D3
00001B9A  4E75                    1133              RTS
00001B9C                          1134  
00001B9C                          1135  ADD_NOTRIGHTWORD
00001B9C  B67C 0006               1136              CMP     #%110,D3
00001BA0  6600 FE84               1137              BNE     INVALID_EA
00001BA4  4EB9 00001C34           1138              JSR     SIZEISLONG
00001BAA  3C3C 0002               1139              MOVE    #2,D6
00001BAE  4243                    1140              CLR     D3
00001BB0  4E75                    1141              RTS 
00001BB2                          1142                               
00001BB2                          1143                       
00001BB2                          1144                       
00001BB2                          1145  *****************************                  
00001BB2                          1146  GETSIZE_ADDI
00001BB2  4EB8 1930               1147          JSR     bits8to10
00001BB6  B67C 0000               1148          CMP     #%000,D3
00001BBA  6600 000C               1149          BNE     ADDI_NOTBYTE
00001BBE  4EB9 00001C14           1150          JSR     SIZEISBYTE
00001BC4  4243                    1151          CLR     D3
00001BC6  4E75                    1152          RTS
00001BC8                          1153  
00001BC8                          1154  ADDI_NOTBYTE
00001BC8  B67C 0001               1155          CMP     #%001,D3
00001BCC  6600 000C               1156          BNE     ADDI_NOTWORD
00001BD0  4EB9 00001C24           1157          JSR     SIZEISWORD
00001BD6  4243                    1158          CLR     D3
00001BD8  4E75                    1159          RTS
00001BDA                          1160          
00001BDA                          1161  ADDI_NOTWORD
00001BDA  B67C 0002               1162          CMP     #%010,D3
00001BDE  6600 FE46               1163          BNE     INVALID_EA
00001BE2  4EB9 00001C34           1164          JSR     SIZEISLONG
00001BE8  4243                    1165          CLR     D3
00001BEA  4E75                    1166          RTS
00001BEC                          1167          
00001BEC                          1168                              
00001BEC                          1169                       
00001BEC                          1170  ********************************          
00001BEC                          1171                       
00001BEC                          1172                       
00001BEC                          1173  ********************************                     
00001BEC                          1174  GETSIZE_ADDA
00001BEC  4EB8 1930               1175          JSR     bits8to10
00001BF0  B67C 0003               1176          CMP     #%011,D3
00001BF4  6600 000C               1177          BNE     ADDA_NOTWORD
00001BF8  4EB9 00001C24           1178          JSR     SIZEISWORD
00001BFE  4243                    1179          CLR     D3
00001C00  4E75                    1180          RTS
00001C02                          1181          
00001C02                          1182  
00001C02                          1183          
00001C02                          1184  ADDA_NOTWORD
00001C02  B67C 0007               1185          CMP     #%111,D3
00001C06  6600 FE1E               1186          BNE     INVALID_EA
00001C0A  4EB9 00001C34           1187          JSR     SIZEISLONG
00001C10  4243                    1188          CLR     D3
00001C12  4E75                    1189          RTS
00001C14                          1190  **********************************        
00001C14                          1191      
00001C14                          1192  SIZEISBYTE
00001C14  1CFC 002E               1193         MOVE.B   #'.',(A6)+
00001C18  1CFC 0042               1194         MOVE.B   #'B',(A6)+
00001C1C  1CFC 0020               1195         MOVE.B   #' ',(A6)+
00001C20  4243                    1196         CLR      D3
00001C22  4E75                    1197         RTS
00001C24                          1198  
00001C24                          1199  SIZEISWORD    
00001C24  1CFC 002E               1200         MOVE.B   #'.',(A6)+
00001C28  1CFC 0057               1201         MOVE.B   #'W',(A6)+
00001C2C  1CFC 0020               1202         MOVE.B   #' ',(A6)+
00001C30  4243                    1203         CLR      D3
00001C32  4E75                    1204         RTS
00001C34                          1205                  
00001C34                          1206  SIZEISLONG    
00001C34  1CFC 002E               1207         MOVE.B   #'.',(A6)+
00001C38  1CFC 004C               1208         MOVE.B   #'L',(A6)+
00001C3C  1CFC 0020               1209         MOVE.B   #' ',(A6)+
00001C40                          1210  
00001C40  4243                    1211         CLR      D3
00001C42  4E75                    1212         RTS
00001C44                          1213                  
00001C44                          1214       
00001C44= 00000001                1215  BUFFER DC.L 1     
00001C48                          1216      INCLUDE 'helpers.x68'
00001C48  1019                    1217  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001C4A  4EB9 00001C62           1218                          JSR     sub_breakDownAs     *breaks down ASCII code
00001C50  D280                    1219                          ADD.L   D0,D1               *load that char into D1
00001C52  0C11 0000               1220                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001C56  6700 0006               1221                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001C5A  E989                    1222                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001C5C  60EA                    1223                          BRA     sub_AsToHeLoop      *loops through again
00001C5E                          1224                          
00001C5E  2E01                    1225  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001C60  4E75                    1226                          RTS
00001C62  B03C 0030               1227  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001C66  6D00 002A               1228                          BLT     as_ERROR                        
00001C6A                          1229                          
00001C6A  B03C 0039               1230                          CMP.B    #$39,D0            *is it an A-F letter?
00001C6E  6E00 000C               1231                          BGT     as_LETTER
00001C72                          1232                          
00001C72  6000 0002               1233                          BRA     as_NUMBER
00001C76                          1234                                                 
00001C76  0400 0030               1235  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001C7A  4E75                    1236                          RTS
00001C7C                          1237                          
00001C7C  B03C 0041               1238  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001C80  6D00 0010               1239                          BLT     as_ERROR
00001C84                          1240                          
00001C84  B03C 0046               1241                          CMP.B     #$46, D0
00001C88  6E00 0008               1242                          BGT     as_ERROR
00001C8C                          1243                          
00001C8C  0400 0037               1244                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001C90  4E75                    1245                          RTS
00001C92                          1246                          
00001C92  43F9 65727200           1247  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001C98  103C 000D               1248                          MOVE.B  #13,D0
00001C9C  4E4F                    1249                          TRAP    #15  
00001C9E                          1250  sub_StartReadingData    
00001C9E  0801 0000               1251                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001CA2  6600 0006               1252                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001CA6                          1253                          
00001CA6  7E00                    1254                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001CA8  4E75                    1255  srdFinish               RTS
00001CAA                          1256  
00001CAA  43F8 1164               1257  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CAE  103C 000E               1258                          MOVE.B  #14,D0
00001CB2  4E4F                    1259                          TRAP    #15
00001CB4                          1260                          
00001CB4  7E01                    1261                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CB6  60F0                    1262                          BRA     srdFinish
00001CB8                          1263  sub_EndReadingData  
00001CB8  0801 0000               1264                          BTST    #0,D1               *checks if LSB is 1, 
00001CBC  6600 0018               1265                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001CC0                          1266                          
00001CC0  B5CB                    1267                          CMP.L   A3,A2               *end address must be greater than start address
00001CC2  6E00 0004               1268                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001CC6                          1269  
00001CC6  4E75                    1270  erdFinish               RTS
00001CC8                          1271  
00001CC8  43F8 118B               1272  erdFailAddrOrder        LEA     addr_order_check,A1
00001CCC  103C 000E               1273                          MOVE.B  #14,D0
00001CD0  4E4F                    1274                          TRAP    #15
00001CD2                          1275                          
00001CD2  7E01                    1276                          MOVE.L  #1,D7
00001CD4  60F0                    1277                          BRA     erdFinish
00001CD6                          1278  
00001CD6  43F8 1164               1279  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CDA  103C 000E               1280                          MOVE.B  #14,D0
00001CDE  4E4F                    1281                          TRAP    #15
00001CE0                          1282                          
00001CE0  7E01                    1283                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CE2  60E2                    1284                          BRA     erdFinish
00001CE4                          1285                          
00001CE4                          1286  
00001CE4                          1287  
00001CE4                          1288  
00001CE4                          1289  
00001CE4                          1290  
00001CE4                          1291  
00001CE4                          1292  
00001CE4                          1293  
00001CE4                          1294  -------------------- end include --------------------
00001CE4                          1295      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     19E4
ABSOLUTE_LONG_BUFFER  1A14
ABSOLUTE_WORD_BUFFER  1A02
ADD                 148C
ADDA                1466
ADDA_BUFFER         1470
ADDA_DISP           124A
ADDA_NOTWORD        1C02
ADDI                1530
ADDI_BUFFER         15B8
ADDI_DES            1554
ADDI_DISP           124F
ADDI_NOTBYTE        1BC8
ADDI_NOTWORD        1BDA
ADDI_SRC            1546
ADDQ                16BE
ADDQ_BUFFER         16C8
ADDQ_DISP           1254
ADDRESS_BUFFER      19DE
ADDR_ODDBIT_MSG     1164
ADDR_ORDER_CHECK    118B
ADD_BUFFER          1496
ADD_DEST            150E
ADD_DIRECTION_REVERSED  14C8
ADD_DISP            1246
ADD_DONE            14E2
ADD_NOTBYTE         1B44
ADD_NOTLEFT         1B70
ADD_NOTRIGHTBYTE    1B86
ADD_NOTRIGHTWORD    1B9C
ADD_NOTWORD         1B5A
ADD_SRC             14EA
AND                 179E
AND_BUFFER          17A8
AND_DISP            126F
ASL                 17DA
ASL_BUFFER          17E4
ASL_DISP            127E
ASR                 17BE
ASR_BUFFER          17C8
ASR_DISP            1282
AS_ERROR            1C92
AS_LETTER           1C7C
AS_NUMBER           1C76
ATHENDLOOP          1C5E
BACKSLASHSIGH       12CC
BCC_DISP            1296
BGT_DISP            129A
BITS11TO13          1942
BITS11TO16          1964
BITS14TO16          1954
BITS1TO10           1974
BITS5TO7            190A
BITS5TO8            191E
BITS8TO10           1930
BLE_DISP            129E
BUFFER              1C44
CLOSEPAREN          12D0
CLR_DISP            126B
CMP                 175E
CMP_BUFFER          1768
CODE0000            134E
CODE0001            1362
CODE0010            1366
CODE0011            136A
CODE0100            136E
CODE0101            13A2
CODE0110            13A8
CODE0111            13AC
CODE1000            13B2
CODE1001            13C4
CODE1010            13CA
CODE1011            13CE
CODE1100            13D4
CODE1101            13E6
CODE1110            1432
CODE1111            1462
COMMASIGN           12CA
COPY_OPCODE         1AC2
CR                  D
DIVU                1702
DIVU_BUFFER         170C
DIVU_DISP           1262
DOLLARSIGN          12C4
DONE                1908
ENDTEST_MSG         11DF
ERDFAILADDRODDB     1CD6
ERDFAILADDRORDER    1CC8
ERDFINISH           1CC6
EXIT                12E9
FINISHER            18DA
FIVE                18AE
FOUR                189E
GETSIZE_ADD         1B2A
GETSIZE_ADDA        1BEC
GETSIZE_ADDI        1BB2
HEXATABLE           12A2
INPUT_BUFFER        12DE
INSERT_NUM          185E
INVALIDEA_DISP      1223
INVALID_DISP        121E
INVALID_EA          1A26
INVALID_OP          1A2A
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            182E
JMP_TABLE           12EE
JSR                 1A64
JSR_DISP            128E
LEA                 15D4
LEA_BUFFER          15F6
LEA_DEST            169A
LEA_DISP            1267
LEA_SRC             1608
LF                  A
LINEBREAK           121B
LINECOUNT           12DD
LOCATION_ENDDATA    12E4
LOCATION_END_MSG    1147
LOCATION_STARTDATA  12E0
LOCATION_START_MSG  1128
LSL                 17F6
LSL_BUFFER          1800
LSL_DISP            1276
LSR                 1812
LSR_BUFFER          181C
LSR_DISP            127A
MAIN_LOOP           108E
MINUSSIGN           12C8
MODE000             1986
MODE001             198C
MODE010             1994
MODE011             199E
MODE100             19A8
MODE101             19B6
MODE110             19C0
MODE111             19CA
MOVEA_DISP          1234
MOVEM               1A8A
MOVEM_DISP          1240
MOVEM_W             1AAA
MOVEQ               16DE
MOVEQ_BUFFER        16E8
MOVEQ_DISP          123A
MOVE_DISP           122F
MULS                177E
MULS_BUFFER         1788
MULS_DISP           125D
NOP                 1A48
NOP_DISP            122B
ONE                 186E
ONEPAREN            18FA
OPENPAREN           12CE
OR                  1722
OR_BUFFER           172C
OR_DISP             1273
PAUSE_MSG           11C5
PLUSSIGN            12C6
POSTINCR            18E8
POUNDSIGN           12C2
PRINT_ADDRESS       1AC8
PRINT_BUFFER        1AE8
PRINT_DEREF_ADDRESS  1B04
ROL_DISP            1286
ROR_DISP            128A
RTS                 1A56
RTS_DISP            1292
SEVEN               18CE
SIX                 18BE
SIZEISBYTE          1C14
SIZEISLONG          1C34
SIZEISWORD          1C24
SIZE_B              12D4
SIZE_L              12DA
SIZE_W              12D7
SPACE               12D2
SRDFAILADDRODDB     1CAA
SRDFINISH           1CA8
START               1000
SUB                 173E
SUB_ASTOHELOOP      1C48
SUB_BREAKDOWNAS     1C62
SUB_BUFFER          1748
SUB_DISP            1259
SUB_ENDREADINGDATA  1CB8
SUB_STARTREADINGDATA  1C9E
TABLE_LENGTH        12E8
THREE               188E
TWO                 187E
WELCOME_MSG         10C4
