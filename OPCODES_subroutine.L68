00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 3:42:16 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D4 - MODE
00000000                             3  *** D5 - CURRENT OPCODE
00000000                             4  *** D6 - 
00000000                             5  ***
00000000                             6  
00000000                             7  
00006000                             8  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       9                     ADDQ.B  #$1,D1      
00006002                            10                   
00006002  41F9 0000624E             11                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 00006B34             12                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      13                   CLR.L   D3              *Zero it
00006010                            14                   * TEST OPCODES
00006010                            15                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006010                            16                   ; MOVE.W  #$4E71,D3 * NOP
00006010                            17                   ; MOVE.W  #$4E75,D3 * RTS
00006010                            18                   ; MOVE.W  #$4EB0,D3 * JSR
00006010                            19                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006010                            20                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
00006010                            21                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
00006010                            22                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006010  363C DC1B                 23                   MOVE.W  #$DC1B, D3  * ADD.B (A3)+,D6
00006014                            24                    ; MOVE.W  #$D9A5, D3  * ADD.L D4,-(A5)
00006014                            25                     ; MOVE.W  #$D579, D3  * ADD.W D2,$FF0FF0FF
00006014                            26                   ; MOVE.W    #$5201,D3    *ADDQ
00006014                            27  
00006014                            28                   ; MOVE.W     #$7E70, D3 *MOVEQ
00006014                            29                   ; MOVE.W     #$80C0, D3 *DIVU
00006014                            30                   ; MOVE.W     #$8000, D3 * OR
00006014                            31                   ; MOVE.W        #$9000, D3 * SUB
00006014                            32                   ; MOVE.W        #$B000, D3 * CMP
00006014                            33                   ; MOVE.W        #$C1C0, D3 * MULS
00006014                            34                   ; MOVE.W        #$C000, D3 * AND
00006014                            35                   ; MOVE.W        #$E0F8, D3  *ASR
00006014                            36                   ; MOVE.W        #$E1E2, D3  *ASL
00006014                            37                   ;MOVE.W        #$E393, D3  *LSL
00006014                            38                   ;MOVE.W        #$E2DC, D3  *LSR
00006014                            39  
00006014                            40                   
00006014  3A03                      41                   MOVE.W  D3,D5
00006016  183C 000C                 42                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601A                            43  
0000601A                            44             
0000601A  E86B                      45                   LSR.W   D4,D3       *Move the bits
0000601C  C6FC 0006                 46                   MULU    #6,D3       *Form offset     
00006020  4EB0 3000                 47                   JSR     0(A0,D3)   *Jump indirect with index
00006024                            48                  
00006024                            49      INCLUDE 'definitions.x68'
00006024                            50  
00006024  =0000000D                 51  CR              EQU     $0D         carriage return
00006024  =0000000A                 52  LF              EQU     $0A         line feed
00006024= 43 53 53 20 34 32 ...     53  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
00006048= 42 79 20 54 65 61 ...     54                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00006088= 45 6E 74 65 72 20 ...     55  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060A7= 45 6E 74 65 72 20 ...     56  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C4= 41 64 64 72 65 73 ...     57  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EB= 45 6E 64 69 6E 67 ...     58  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006125= 50 72 65 73 73 20 ...     59  pause_msg           DC.B    'Press enter to continue!',CR,LF
0000613F= 52 65 61 63 68 65 ...     60  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615A= 54 72 79 20 61 6E ...     61                      DC.B    'Try another location? (yes/no): ',0
0000617B= 0D 0A 00                  62  linebreak           DC.B    CR,LF,0
0000617E                            63                      
0000617E= 44 41 54 41 00            64  Invalid_disp        DC.B    'DATA',0
00006183= 57 52 4F 4E 47 45 ...     65  InvalidEA_disp      DC.B    'WRONGEA',0
0000618B                            66  
0000618B= 4E 4F 50 00               67  NOP_disp            DC.B    'NOP',0
0000618F= 4D 4F 56 45 00            68  MOVE_disp           DC.B    'MOVE',0
00006194= 4D 4F 56 45 41 00         69  MOVEA_disp          DC.B    'MOVEA',0
0000619A= 4D 4F 56 45 51 00         70  MOVEQ_disp          DC.B    'MOVEQ',0
000061A0= 4D 4F 56 45 4D 00         71  MOVEM_disp          DC.B    'MOVEM',0
000061A6= 41 44 44 00               72  ADD_disp            DC.B    'ADD',0
000061AA= 41 44 44 41 00            73  ADDA_disp           DC.B    'ADDA',0
000061AF= 41 44 44 49 00            74  ADDI_disp           DC.B    'ADDI',0
000061B4= 41 44 44 51 00            75  ADDQ_disp           DC.B    'ADDQ',0
000061B9= 53 55 42 00               76  SUB_disp            DC.B    'SUB',0
000061BD= 4D 55 4C 53 00            77  MULS_disp           DC.B    'MULS',0
000061C2= 44 49 56 55 00            78  DIVU_disp           DC.B    'DIVU',0
000061C7= 4C 45 41 00               79  LEA_disp            DC.B    'LEA',0
000061CB= 43 4C 52 00               80  CLR_disp            DC.B    'CLR',0
000061CF= 41 4E 44 00               81  AND_disp            DC.B    'AND',0
000061D3= 4F 52 00                  82  OR_disp             DC.B    'OR',0
000061D6= 4C 53 4C 00               83  LSL_disp            DC.B    'LSL',0
000061DA= 4C 53 52 00               84  LSR_disp            DC.B    'LSR',0
000061DE= 41 53 4C 00               85  ASL_disp            DC.B    'ASL',0
000061E2= 41 53 52 00               86  ASR_disp            DC.B    'ASR',0
000061E6= 52 4F 4C 00               87  ROL_disp            DC.B    'ROL',0
000061EA= 52 4F 52 00               88  ROR_disp            DC.B    'ROR',0
000061EE= 4A 53 52 00               89  JSR_disp            DC.B    'JSR',0
000061F2= 52 54 53 00               90  RTS_disp            DC.B    'RTS',0
000061F6= 42 43 43 00               91  BCC_disp            DC.B    'BCC',0
000061FA= 42 47 54 00               92  BGT_disp            DC.B    'BGT',0    
000061FE= 42 4C 45 00               93  BLE_disp            DC.b    'BLE',0
00006202                            94  
00006202                            95  
00006202= 30 00                     96  hexaTable               DC.B    '0',0
00006204= 31 00                     97                          DC.B    '1',0
00006206= 32 00                     98                          DC.B    '2',0
00006208= 33 00                     99                          DC.B    '3',0
0000620A= 34 00                    100                          DC.B    '4',0
0000620C= 35 00                    101                          DC.B    '5',0
0000620E= 36 00                    102                          DC.B    '6',0
00006210= 37 00                    103                          DC.B    '7',0
00006212= 38 00                    104                          DC.B    '8',0
00006214= 39 00                    105                          DC.B    '9',0
00006216= 41 00                    106                          DC.B    'A',0
00006218= 42 00                    107                          DC.B    'B',0
0000621A= 43 00                    108                          DC.B    'C',0
0000621C= 44 00                    109                          DC.B    'D',0
0000621E= 45 00                    110                          DC.B    'E',0
00006220= 46 00                    111                          DC.B    'F',0
00006222= 23 00                    112  poundsign               DC.B    '#',0
00006224= 24 00                    113  dollarsign              DC.B    '$',0
00006226= 2B 00                    114  plussign                DC.B    '+',0
00006228= 2D 00                    115  minussign               DC.B    '-',0
0000622A= 2C 00                    116  commasign               DC.B    ',',0
0000622C= 2F 00                    117  backslashsigh           DC.B    '/',0
0000622E= 28 00                    118  openparen               DC.B    '(',0
00006230= 29 00                    119  closeparen              DC.B    ')',0
00006232= 20 00                    120  space                   DC.B    ' ',0   
00006234= 2E 42 00                 121  size_b                  DC.B    '.B',0
00006237= 2E 57 00                 122  size_w                  DC.B    '.W',0        
0000623A= 2E 4C 00                 123  size_l                  DC.B    '.L',0
0000623D                           124  
0000623D                           125  linecount               DS.B    1       *storeage for lines on a screen
0000623E= 01                       126  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006240                           127  location_startData      DS.L    1       *location on where to start reading data
00006244                           128  location_endData        DS.L    1       *location on where to end reading data
00006248                           129  table_length            DS.B    1       *Number of spaces in the table to print to console
00006249                           130  
00006249                           131  
00006249                           132  -------------------- end include --------------------
00006249                           133             
00006249                           134  EXIT                 
0000624A  FFFF FFFF                135         SIMHALT   
0000624E                           136  
0000624E                           137  
0000624E                           138  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
0000624E  4EF9 000062AE            139  jmp_table      JMP         code0000
00006254                           140                  *ADDI
00006254                           141  
00006254  4EF9 000062C2            142                 JMP         code0001
0000625A                           143  
0000625A  4EF9 000062C6            144                 JMP         code0010
00006260                           145  
00006260  4EF9 000062CA            146                 JMP         code0011
00006266                           147  
00006266  4EF9 000062CE            148                 JMP         code0100
0000626C                           149                             
0000626C  4EF9 00006302            150                 JMP         code0101
00006272                           151                 * ADDQ
00006272                           152                  
00006272                           153        
00006272  4EF9 00006308            154                 JMP         code0110
00006278                           155                 * BCC
00006278                           156                 * BGT
00006278                           157                 * BLE
00006278                           158                 
00006278  4EF9 0000630C            159                 JMP         code0111
0000627E                           160                 * MOVEQ
0000627E                           161  
0000627E  4EF9 00006312            162                 JMP         code1000
00006284                           163                 * DIVU
00006284                           164                 * OR
00006284                           165  
00006284  4EF9 00006324            166                 JMP         code1001
0000628A                           167                  *SUB
0000628A  4EF9 0000632A            168                 JMP         code1010
00006290                           169                 
00006290  4EF9 0000632E            170                 JMP         code1011
00006296                           171                 * CMP
00006296                           172                 
00006296  4EF9 00006334            173                 JMP         code1100
0000629C                           174                 * MULS
0000629C                           175                 * AND
0000629C                           176          
0000629C  4EF9 00006346            177                 JMP         code1101
000062A2                           178                 *ADD
000062A2                           179                 *ADDA
000062A2  4EF9 00006392            180                 JMP         code1110
000062A8                           181                 * ASR
000062A8                           182                 * ASL
000062A8                           183                 * LSL
000062A8                           184                 * LSR
000062A8                           185                 * ROL
000062A8                           186                 * ROR
000062A8                           187  
000062A8  4EF9 000063C2            188                 JMP         code1111
000062AE                           189  
000062AE                           190  
000062AE                           191  code0000      
000062AE  4EB9 0000688A            192                 JSR          bits5to8 // RETURNS INTO D3
000062B4  B6BC 00000006            193                 CMP.L        #%0110, D3
000062BA  6600 06E2                194                 BNE          INVALID_OP
000062BE  6000 01CC                195                 BRA          ADDI  
000062C2                           196  
000062C2  4E72 2700                197  code0001       STOP        #$2700
000062C6                           198  
000062C6  4E72 2700                199  code0010       STOP        #$2700
000062CA                           200  
000062CA  4E72 2700                201  code0011       STOP        #$2700
000062CE                           202  
000062CE                           203  code0100       
000062CE  4EB9 00006A1C            204                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D4                           205                  
000062D4                           206                 *NOP
000062D4  C47C 0FFF                207                 AND     #%0000111111111111,D2
000062D8  B4BC 00000E71            208                 CMP.L   #%000111001110001, D2
000062DE  6700 06C2                209                 BEQ     NOP
000062E2                           210                 
000062E2                           211                 *RTS
000062E2  C47C 0FFF                212                 AND     #%0000111111111111,D2
000062E6  B4BC 00000E75            213                 CMP.L   #%0000111001110101, D2
000062EC  6700 06C2                214                 BEQ     RTS
000062F0                           215  
000062F0                           216                 *JSR
000062F0  C47C 0FC0                217                 AND     #%0000111111000000,D2
000062F4  B4BC 00000E80            218                 CMP.L   #%0000111010000000,D2
000062FA  6700 06C2                219                 BEQ     JSR
000062FE                           220                 
000062FE                           221                 * MOVEM
000062FE                           222                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000062FE                           223                ** AND     #%0000111110000000,D2
000062FE                           224                 * DATA REGISTER
000062FE                           225                ** CMP.L   #%0000100010000000, D2
000062FE                           226                 ** JSR      MOVEM
000062FE                           227                 * ADDRESS REGISTER (DECREMENTED)
000062FE                           228                 ** CMP.L  #%0000110010000000, D2
000062FE                           229                 ** JSR    MOVEM
000062FE                           230                  
000062FE                           231                  ** TO DO: BRANCH IF INVALID OPCODE
000062FE                           232                  *LEA - if it's not the top codes, it's LEA
000062FE  6000 0230                233                  BRA     LEA
00006302                           234  code0101      
00006302                           235  
00006302  4EB9 0000662A            236                  JSR   ADDQ
00006308                           237  
00006308  4E72 2700                238  code0110        STOP        #$2700
0000630C                           239  
0000630C                           240  code0111       
0000630C  4EB9 0000664A            241                  JSR       MOVEQ
00006312                           242  
00006312                           243  code1000      
00006312  4EB9 0000689C            244                  JSR        bits8to10
00006318  B67C 0003                245                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
0000631C  6700 0350                246                  BEQ        DIVU
00006320  6000 036C                247                  BRA        OR       ** OTHERWISE OR
00006324                           248                  
00006324                           249  
00006324                           250  code1001       
00006324  4EB9 000066AA            251                 JSR         SUB
0000632A  4E72 2700                252  code1010       STOP        #$2700
0000632E                           253  
0000632E                           254  code1011       
0000632E  4EB9 000066CA            255                 JSR         CMP
00006334                           256  
00006334                           257  code1100      
00006334  4EB9 0000689C            258                  JSR        bits8to10
0000633A  B67C 0007                259                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
0000633E  6700 03AA                260                  BEQ        MULS
00006342  6000 03C6                261                  BRA        AND       ** OTHERWISE AND
00006346                           262  
00006346                           263  code1101       
00006346  4EB9 00006A1C            264                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000634C                           265                 *ADDA
0000634C  4EB9 0000689C            266                 JSR      bits8to10
00006352  B67C 0003                267                 CMP      #%011, D3  ** WORD
00006356  6700 006E                268                 BEQ      ADDA
0000635A  B67C 0007                269                 CMP      #%111, D3   ** LONG
0000635E  6700 0066                270                 BEQ      ADDA
00006362                           271                 
00006362                           272                 *ADD
00006362  B67C 0000                273                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00006366  6700 0084                274                 BEQ      ADD
0000636A  B67C 0001                275                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000636E  6700 007C                276                 BEQ      ADD
00006372  B67C 0002                277                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00006376  6700 0074                278                 BEQ      ADD
0000637A  B67C 0004                279                 CMP      #%100, D3   ** BYTE TO EA
0000637E  6700 006C                280                 BEQ      ADD
00006382  B67C 0005                281                 CMP      #%101, D3   ** WORD TO EA
00006386  6700 0064                282                 BEQ      ADD
0000638A  B67C 0006                283                 CMP      #%110, D3   ** LONG TO EA
0000638E  6700 005C                284                 BEQ      ADD
00006392                           285                 
00006392                           286  
00006392                           287  code1110       
00006392                           288                  * ASR
00006392  4EB9 000068E0            289                  JSR     bits1to10
00006398  B67C 0383                290                  CMP     #%1110000011,D3
0000639C  6700 038C                291                  BEQ     ASR
000063A0                           292                  
000063A0                           293                  * ASL
000063A0  B67C 0387                294                  CMP     #%1110000111,D3
000063A4  6700 03A0                295                  BEQ     ASL
000063A8                           296                  
000063A8                           297                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
000063A8                           298                  * LSL
000063A8  4244                     299                  CLR     D4
000063AA  2803                     300                  MOVE.L  D3,D4
000063AC  C8BC 00A98671            301                  AND.L   #11110001,D4
000063B2  B87C 01C7                302                  CMP     #%111000111,D4
000063B6  6700 03AA                303                  BEQ     LSL
000063BA                           304                  
000063BA                           305                  * LSR
000063BA  B67C 038B                306                  CMP     #%1110001011,D3
000063BE  6700 03BE                307                  BEQ     LSR
000063C2                           308                  
000063C2                           309                  * ROL
000063C2                           310                  
000063C2                           311                  * ROR
000063C2                           312  
000063C2  4E72 2700                313  code1111       STOP        #$2700
000063C6                           314  
000063C6                           315  ADDA    
000063C6  4EB9 000063D0            316                 JSR     ADDA_BUFFER
000063CC  6000 05B8                317                 BRA     PRINT_BUFFER
000063D0                           318                  
000063D0                           319  ADDA_BUFFER
000063D0  1CFC 0041                320                 MOVE.B   #'A',(A6)+
000063D4  1CFC 0044                321                 MOVE.B   #'D', (A6)+  
000063D8  1CFC 0044                322                 MOVE.B   #'D', (A6)+
000063DC  1CFC 0041                323                 MOVE.B   #'A', (A6)+
000063E0  4EB9 00006AE4            324                 JSR      GETSIZE_ADDA
000063E6  1CFC 0020                325                 MOVE.B   #' ', (A6)+
000063EA  4E75                     326                 RTS
000063EC                           327                 
000063EC                           328                 
000063EC                           329                 
000063EC                           330  *********************************************               
000063EC                           331  ADD    
000063EC  4EB9 000063F6            332                 JSR     ADD_BUFFER
000063F2  6000 0592                333                 BRA     PRINT_BUFFER
000063F6                           334                  
000063F6                           335  ADD_BUFFER
000063F6  1CFC 0041                336                 MOVE.B   #'A',(A6)+
000063FA  1CFC 0044                337                 MOVE.B   #'D', (A6)+  
000063FE  1CFC 0044                338                 MOVE.B   #'D', (A6)+
00006402  4EB9 00006A22            339                 JSR      GETSIZE_ADD
00006408                           340                 
00006408                           341                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
00006408                           342                 
00006408  BC7C 0001                343                 CMP      #1,D6
0000640C  6600 0016                344                 BNE      ADD_DIRECTION_REVERSED
00006410  4EB9 00006446            345                 JSR      ADD_SRC
00006416  1CFC 0020                346                 MOVE.B   #' ', (A6)+
0000641A  4EB9 0000646A            347                 JSR      ADD_DEST
00006420  6000 001C                348                 BRA      ADD_DONE
00006424                           349                 
00006424                           350                 
00006424                           351  ADD_DIRECTION_REVERSED
00006424                           352  
00006424  4246                     353                 CLR      D6
00006426  4EB9 0000646A            354                 JSR      ADD_DEST
0000642C  1CFC 002C                355                 MOVE.B   #',', (A6)+
00006430  1CFC 0020                356                 MOVE.B   #' ', (A6)+
00006434  4EB9 00006446            357                 JSR      ADD_SRC
0000643A  6000 0002                358                 BRA      ADD_DONE              
0000643E                           359                 
0000643E                           360                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000643E                           361                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000643E                           362                 
0000643E                           363  ADD_DONE       
0000643E  4246                     364                 CLR      D6
00006440  4EB9 00006986            365                 JSR     PRINT_BUFFER
00006446                           366  
00006446                           367                  
00006446                           368  
00006446                           369  ***********************************************        
00006446                           370  
00006446                           371  
00006446                           372  
00006446                           373  ****************************************************************************************
00006446                           374  ADD_SRC
00006446                           375  
00006446  4EB9 000068AE            376                  JSR    bits11to13
0000644C  3803                     377                  MOVE   D3,D4
0000644E  41F9 0000679A            378                  LEA     jmp_mode,A0    *Index into the table
00006454  C6FC 0006                379                  MULU   #6,D3
00006458  4EB0 3000                380                  JSR    0(A0,D3)     
0000645C  4EB9 000068C0            381                  JSR    bits14to16
00006462  4EB9 000067CA            382                  JSR    insert_num
00006468  4E75                     383                  RTS
0000646A                           384  
0000646A                           385  
0000646A                           386  
0000646A                           387  
0000646A                           388  
0000646A                           389  ADD_DEST
0000646A  363C 0000                390                  MOVE.W #%000,D3     ;Can only have a data register.
0000646E  3803                     391                  MOVE   D3,D4
00006470  41F9 0000679A            392                  LEA     jmp_mode,A0    *Index into the table
00006476  C6FC 0006                393                  MULU    #6,D3       *Form offset     
0000647A  4EB0 3000                394                  JSR     0(A0,D3)   *Jump indirect with index
0000647E                           395                  
0000647E  4EB9 00006876            396                  JSR     bits5to7
00006484  4EB9 000067CA            397                  JSR     insert_num
0000648A  4E75                     398                  RTS
0000648C                           399                          
0000648C                           400  
0000648C                           401  
0000648C                           402  
0000648C                           403  ADDI
0000648C  4EB9 00006514            404                  JSR     ADDI_BUFFER
00006492  4EB9 000064A2            405                  JSR     ADDI_SRC
00006498  4EB9 000064B0            406                  JSR     ADDI_DES
0000649E  6000 04E6                407                  BRA     PRINT_BUFFER
000064A2                           408                  
000064A2                           409  ADDI_SRC                        
000064A2  1CFC 0023                410                  MOVE.B  #'#', (A6)+
000064A6  1CFC 002C                411                  MOVE.B  #',', (A6)+
000064AA  1CFC 0020                412                  MOVE.B  #' ', (A6)+
000064AE  4E75                     413                  RTS
000064B0                           414                    ** TODO: IMPLEMENT THIS IN EA
000064B0                           415                  ** Immediate field—Data immediately following the instruction.
000064B0                           416                  **If size = 00, the data is the low-order byte of the immediate word.
000064B0                           417                  **If size = 01, the data is the entire immediate word.
000064B0                           418                  **If size = 10, the data is the next two immediate words. 
000064B0                           419  ADDI_DES
000064B0                           420                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
000064B0                           421                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
000064B0  4EB9 000068AE            422                 JSR      bits11to13
000064B6  B67C 0001                423                 CMP      #%001, D3 **AN
000064BA  6700 04DE                424                 BEQ      INVALID_EA
000064BE  B67C 0005                425                 CMP      #%101, D3 **COMPLICATED
000064C2  6700 04D6                426                 BEQ      INVALID_EA
000064C6  B67C 0006                427                 CMP      #%110, D3 **COMPLICATED
000064CA  6700 04CE                428                 BEQ      INVALID_EA
000064CE                           429                 
000064CE  4EB9 000068D0            430                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000064D4  B67C 003C                431                 CMP      #%111100,D3 // immediate data
000064D8  6700 04C0                432                 BEQ      INVALID_EA
000064DC  B67C 003A                433                 CMP      #%111010,D3 // complicated
000064E0  6700 04B8                434                 BEQ      INVALID_EA
000064E4  B67C 003B                435                 CMP      #%111011,D3 // complicated
000064E8  6700 04B0                436                 BEQ      INVALID_EA
000064EC                           437                 
000064EC  4EB9 000068AE            438                 JSR      bits11to13 ** grab bits to jump with\
000064F2  3803                     439                 MOVE     D3,D4
000064F4  41F9 0000679A            440                 LEA     jmp_mode,A0    *Index into the table
000064FA  C6FC 0006                441                 MULU    #6,D3       *Form offset     
000064FE  4EB0 3000                442                 JSR     0(A0,D3)   *Jump indirect with index
00006502                           443                 
00006502  4243                     444                 CLR     D3
00006504  4EB9 000068C0            445                 JSR     bits14to16
0000650A  4EB9 000067CA            446                 JSR     insert_num
00006510  4244                     447                 CLR     D4
00006512                           448                 
00006512  4E75                     449                 RTS
00006514                           450                 
00006514                           451                             
00006514                           452  ADDI_BUFFER
00006514  1CFC 0041                453                 MOVE.B   #'A',(A6)+
00006518  1CFC 0044                454                 MOVE.B   #'D', (A6)+  
0000651C  1CFC 0044                455                 MOVE.B   #'D', (A6)+
00006520  1CFC 0049                456                 MOVE.B   #'I', (A6)+
00006524                           457                 
00006524  4EB9 00006AAA            458                 JSR      GETSIZE_ADDI
0000652A                           459                 
0000652A                           460                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
0000652A                           461                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000652A  1CFC 0020                462                 MOVE.B   #' ', (A6)+
0000652E  4E75                     463                 RTS
00006530                           464                              
00006530                           465  LEA
00006530  4EB9 0000689C            466                 JSR      bits8to10   // 1 1 1
00006536  B47C 0007                467                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
0000653A  6600 0462                468                 BNE      INVALID_OP
0000653E  4EB9 00006554            469                 JSR      LEA_BUFFER
00006544  4EB9 00006566            470                 JSR      LEA_SRC
0000654A  4EB9 00006606            471                 JSR      LEA_DEST
00006550  6000 0434                472                 BRA      PRINT_BUFFER
00006554                           473                 
00006554                           474  LEA_BUFFER 
00006554  1CFC 004C                475                 MOVE.B   #'L',(A6)+
00006558  1CFC 0045                476                 MOVE.B   #'E', (A6)+  
0000655C  1CFC 0041                477                 MOVE.B   #'A', (A6)+
00006560  1CFC 0020                478                 MOVE.B   #' ', (A6)+
00006564  4E75                     479                 RTS
00006566                           480            
00006566                           481  LEA_SRC
00006566                           482              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00006566  4EB9 000068AE            483              JSR      bits11to13  // source mode - D3
0000656C  B67C 0000                484              CMP      #%000, D3
00006570  6700 0428                485              BEQ      INVALID_EA
00006574  B67C 0001                486              CMP      #%001, D3
00006578  6700 0420                487              BEQ      INVALID_EA
0000657C  B67C 0003                488              CMP      #%011, D3
00006580  6700 0418                489              BEQ      INVALID_EA
00006584  B67C 0004                490              CMP      #%100, D3
00006588  6700 0410                491              BEQ      INVALID_EA
0000658C  B67C 0005                492              CMP      #%101, D3
00006590  6700 0408                493              BEQ      INVALID_EA
00006594  B67C 0006                494              CMP      #%110, D3
00006598  6700 0400                495              BEQ      INVALID_EA
0000659C                           496  
0000659C                           497              
0000659C                           498              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
0000659C  4EB9 000068C0            499              JSR      bits14to16 // source register - d4
000065A2  B67C 0004                500              CMP      #%100, D3
000065A6  6700 03F2                501              BEQ      INVALID_EA
000065AA  B67C 0002                502              CMP      #%010, D3
000065AE  6700 03EA                503              BEQ      INVALID_EA
000065B2  B67C 0003                504              CMP      #%011, D3
000065B6  6700 03E2                505              BEQ      INVALID_EA
000065BA                           506              
000065BA                           507  
000065BA  4EB9 000068D0            508               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000065C0  B67C 003C                509               CMP      #%111100,D3 // immediate data
000065C4  6700 03D4                510               BEQ      INVALID_EA
000065C8  B67C 003A                511               CMP      #%111010,D3 // complicated
000065CC  6700 03CC                512               BEQ      INVALID_EA
000065D0  B67C 003B                513               CMP      #%111011,D3 // complicated
000065D4  6700 03C4                514               BEQ      INVALID_EA
000065D8                           515     
000065D8  4EB9 000068AE            516               JSR      bits11to13 ** grab mode bits to jump with
000065DE  3803                     517               MOVE    D3,D4
000065E0                           518  
000065E0  41F9 0000679A            519               LEA     jmp_mode,A0    *Index into the table
000065E6  C6FC 0006                520               MULU    #6,D3       *Form offset     
000065EA  4EB0 3000                521               JSR     0(A0,D3)   *Jump indirect with index
000065EE                           522               
000065EE                           523  
000065EE  4243                     524               CLR     D3
000065F0  4EB9 000068C0            525               JSR     bits14to16
000065F6  4EB9 000067CA            526               JSR     insert_num
000065FC                           527               
000065FC  1CFC 002C                528               MOVE.B     #',', (A6)+
00006600  1CFC 0020                529               MOVE.B     #' ', (A6)+
00006604                           530  
00006604  4E75                     531               RTS
00006606                           532               
00006606                           533  LEA_DEST    
00006606  4244                     534                  CLR     D4
00006608  41F9 0000679A            535                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
0000660E  363C 0001                536                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
00006612  3803                     537                  MOVE    D3,D4
00006614  C6FC 0006                538                  MULU    #6,D3       *Form offset     
00006618  4EB0 3000                539                  JSR     0(A0,D3)   *Jump indirect with index
0000661C                           540                  
0000661C  4EB9 00006876            541                  JSR     bits5to7
00006622  4EB9 000067CA            542                  JSR     insert_num
00006628                           543                  
00006628  4E75                     544                  RTS
0000662A                           545  
0000662A                           546  
0000662A                           547  ADDQ
0000662A  4EB9 00006634            548                  JSR     ADDQ_BUFFER
00006630  6000 0354                549                  BRA     PRINT_BUFFER
00006634                           550  
00006634                           551  ADDQ_BUFFER
00006634  1CFC 0041                552                 MOVE.B   #'A',(A6)+
00006638  1CFC 0044                553                 MOVE.B   #'D', (A6)+  
0000663C  1CFC 0044                554                 MOVE.B   #'D', (A6)+
00006640  1CFC 0051                555                 MOVE.B   #'Q', (A6)+
00006644                           556                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00006644                           557                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006644  1CFC 0020                558                 MOVE.B   #' ', (A6)+
00006648  4E75                     559                 RTS
0000664A                           560                 
0000664A                           561  MOVEQ
0000664A  4EB9 00006654            562                  JSR     MOVEQ_BUFFER
00006650  6000 0334                563                  BRA     PRINT_BUFFER
00006654                           564  
00006654                           565  MOVEQ_BUFFER
00006654  1CFC 004D                566                 MOVE.B   #'M',(A6)+
00006658  1CFC 004F                567                 MOVE.B   #'O', (A6)+  
0000665C  1CFC 0056                568                 MOVE.B   #'V', (A6)+
00006660  1CFC 0045                569                 MOVE.B   #'E', (A6)+
00006664  1CFC 0051                570                 MOVE.B   #'Q', (A6)+
00006668  1CFC 0020                571                 MOVE.B   #' ', (A6)+
0000666C  4E75                     572                 RTS
0000666E                           573  
0000666E                           574  DIVU
0000666E  4EB9 00006678            575                  JSR     DIVU_BUFFER
00006674  6000 0310                576                  BRA     PRINT_BUFFER
00006678                           577  
00006678                           578  DIVU_BUFFER
00006678  1CFC 0044                579                 MOVE.B   #'D',(A6)+
0000667C  1CFC 0049                580                 MOVE.B   #'I', (A6)+  
00006680  1CFC 0056                581                 MOVE.B   #'V', (A6)+
00006684  1CFC 0055                582                 MOVE.B   #'U', (A6)+
00006688  1CFC 0020                583                 MOVE.B   #' ', (A6)+
0000668C  4E75                     584                 RTS  
0000668E                           585  OR    
0000668E  4EB9 00006698            586                 JSR     OR_BUFFER
00006694  6000 02F0                587                 BRA     PRINT_BUFFER
00006698                           588                  
00006698                           589  OR_BUFFER
00006698  1CFC 004F                590                 MOVE.B   #'O',(A6)+
0000669C  1CFC 0052                591                 MOVE.B   #'R', (A6)+  
000066A0  1CFC 002E                592                 MOVE.B   #'.', (A6)+
000066A4                           593                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066A4                           594                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066A4                           595                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066A4  1CFC 0020                596                 MOVE.B   #' ', (A6)+
000066A8  4E75                     597                 RTS   
000066AA                           598  
000066AA                           599  SUB   
000066AA  4EB9 000066B4            600                 JSR     SUB_BUFFER
000066B0  6000 02D4                601                 BRA     PRINT_BUFFER               
000066B4                           602  
000066B4                           603  SUB_BUFFER
000066B4  1CFC 0053                604                 MOVE.B   #'S',(A6)+
000066B8  1CFC 0055                605                 MOVE.B   #'U', (A6)+  
000066BC  1CFC 0042                606                 MOVE.B   #'B', (A6)+
000066C0  1CFC 002E                607                 MOVE.B   #'.', (A6)+
000066C4                           608                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066C4                           609                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066C4                           610                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066C4  1CFC 0020                611                 MOVE.B   #' ', (A6)+
000066C8  4E75                     612                 RTS  
000066CA                           613  CMP   
000066CA  4EB9 000066D4            614                 JSR     CMP_BUFFER
000066D0  6000 02B4                615                 BRA     PRINT_BUFFER
000066D4                           616                  
000066D4                           617  CMP_BUFFER
000066D4  1CFC 0043                618                 MOVE.B   #'C',(A6)+
000066D8  1CFC 004D                619                 MOVE.B   #'M', (A6)+  
000066DC  1CFC 0050                620                 MOVE.B   #'P', (A6)+
000066E0  1CFC 002E                621                 MOVE.B   #'.', (A6)+
000066E4                           622                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066E4                           623                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066E4                           624                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066E4  1CFC 0020                625                 MOVE.B   #' ', (A6)+
000066E8  4E75                     626                 RTS   
000066EA                           627                 
000066EA                           628  MULS
000066EA  4EB9 000066F4            629                  JSR     MULS_BUFFER
000066F0  6000 0294                630                  BRA     PRINT_BUFFER
000066F4                           631  
000066F4                           632  MULS_BUFFER
000066F4  1CFC 004D                633                 MOVE.B   #'M',(A6)+
000066F8  1CFC 0055                634                 MOVE.B   #'U', (A6)+  
000066FC  1CFC 004C                635                 MOVE.B   #'L', (A6)+
00006700  1CFC 0053                636                 MOVE.B   #'S', (A6)+
00006704  1CFC 0020                637                 MOVE.B   #' ', (A6)+
00006708  4E75                     638                 RTS
0000670A                           639  
0000670A                           640  AND    
0000670A  4EB9 00006714            641                 JSR     AND_BUFFER
00006710  6000 0274                642                 BRA     PRINT_BUFFER
00006714                           643                  
00006714                           644  AND_BUFFER
00006714  1CFC 0041                645                 MOVE.B   #'A',(A6)+
00006718  1CFC 004E                646                 MOVE.B   #'N', (A6)+  
0000671C  1CFC 0044                647                 MOVE.B   #'D', (A6)+
00006720  1CFC 002E                648                 MOVE.B   #'.', (A6)+
00006724                           649                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006724                           650                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006724                           651                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006724  1CFC 0020                652                 MOVE.B   #' ', (A6)+
00006728  4E75                     653                 RTS    
0000672A                           654  
0000672A                           655  ASR     
0000672A  4EB9 00006734            656                  JSR     ASR_BUFFER
00006730  6000 0254                657                  BRA     PRINT_BUFFER
00006734                           658  
00006734                           659  ASR_BUFFER
00006734  1CFC 0041                660                 MOVE.B   #'A',(A6)+
00006738  1CFC 0053                661                 MOVE.B   #'S', (A6)+  
0000673C  1CFC 0052                662                 MOVE.B   #'R', (A6)+
00006740  1CFC 0020                663                 MOVE.B   #' ', (A6)+
00006744  4E75                     664                 RTS      
00006746                           665  
00006746                           666  ASL     
00006746  4EB9 00006750            667                  JSR     ASL_BUFFER
0000674C  6000 0238                668                  BRA     PRINT_BUFFER
00006750                           669  
00006750                           670  ASL_BUFFER
00006750  1CFC 0041                671                 MOVE.B   #'A',(A6)+
00006754  1CFC 0053                672                 MOVE.B   #'S', (A6)+  
00006758  1CFC 004C                673                 MOVE.B   #'L', (A6)+
0000675C  1CFC 0020                674                 MOVE.B   #' ', (A6)+
00006760  4E75                     675                 RTS     
00006762                           676  
00006762                           677  LSL     
00006762  4EB9 0000676C            678                  JSR     LSL_BUFFER
00006768  6000 021C                679                  BRA     PRINT_BUFFER
0000676C                           680  
0000676C                           681  LSL_BUFFER
0000676C  1CFC 004C                682                 MOVE.B   #'L',(A6)+
00006770  1CFC 0053                683                 MOVE.B   #'S', (A6)+  
00006774  1CFC 004C                684                 MOVE.B   #'L', (A6)+
00006778  1CFC 0020                685                 MOVE.B   #' ', (A6)+
0000677C  4E75                     686                 RTS     
0000677E                           687  
0000677E                           688  LSR     
0000677E  4EB9 00006788            689                  JSR     LSR_BUFFER
00006784  6000 0200                690                  BRA     PRINT_BUFFER
00006788                           691  
00006788                           692  LSR_BUFFER
00006788  1CFC 004C                693                 MOVE.B   #'L',(A6)+
0000678C  1CFC 0053                694                 MOVE.B   #'S', (A6)+  
00006790  1CFC 0052                695                 MOVE.B   #'R', (A6)+
00006794  1CFC 0020                696                 MOVE.B   #' ', (A6)+
00006798  4E75                     697                 RTS       
0000679A                           698                 
0000679A                           699  jmp_mode
0000679A  4EF9 000068F2            700                  JMP     MODE000  ** DN
000067A0  4EF9 000068F8            701                  JMP     MODE001  ** AN
000067A6  4EF9 00006900            702                  JMP     MODE010  ** (AN)
000067AC  4EF9 0000690A            703                  JMP     MODE011  ** (AN)+   
000067B2  4EF9 00006914            704                  JMP     MODE100  ** -(AN)
000067B8  4EF9 00006922            705                  JMP     MODE101  **INVALID
000067BE  4EF9 0000692C            706                  JMP     MODE110  **INVALID
000067C4  4EF9 00006936            707                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000067CA                           708  
000067CA                           709                  
000067CA                           710  insert_num
000067CA                           711                  
000067CA                           712                  ;get number from D3
000067CA  B67C 0000                713                  CMP     #%000,D3       ;0
000067CE  6600 000A                714                  BNE     ONE         
000067D2  1CFC 0030                715                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000067D6  6000 006E                716                  BRA     FINISHER
000067DA                           717                  
000067DA  B67C 0001                718  ONE             CMP     #%001,D3       ;1
000067DE  6600 000A                719                  BNE     TWO 
000067E2  1CFC 0031                720                  MOVE.B  #'1',(A6)+
000067E6  6000 005E                721                  BRA     FINISHER
000067EA                           722  
000067EA                           723                  
000067EA  B67C 0002                724  TWO             CMP     #%010,D3        ;2
000067EE  6600 000A                725                  BNE     THREE
000067F2  1CFC 0032                726                  MOVE.B  #'2',(A6)+
000067F6  6000 004E                727                  BRA     FINISHER
000067FA                           728                  
000067FA  B67C 0003                729  THREE           CMP     #%011,D3        ;3
000067FE  6600 000A                730                  BNE     FOUR
00006802  1CFC 0033                731                  MOVE.B  #'3',(A6)+
00006806  6000 003E                732                  BRA     FINISHER
0000680A                           733                  
0000680A  B67C 0004                734  FOUR            CMP     #%100,D3        ;4
0000680E  6600 000A                735                  BNE     FIVE
00006812  1CFC 0034                736                  MOVE.B  #'4',(A6)+
00006816  6000 002E                737                  BRA     FINISHER
0000681A                           738                  
0000681A  B67C 0005                739  FIVE            CMP     #%101,D3        ;5
0000681E  6600 000A                740                  BNE     SIX
00006822  1CFC 0035                741                  MOVE.B  #'5',(A6)+
00006826  6000 001E                742                  BRA     FINISHER
0000682A                           743                  
0000682A  B67C 0006                744  SIX             CMP     #%110,D3        ;6
0000682E  6600 000A                745                  BNE     SEVEN
00006832  1CFC 0036                746                  MOVE.B  #'6',(A6)+
00006836  6000 000E                747                  BRA     FINISHER
0000683A                           748                  
0000683A  B67C 0007                749  SEVEN           CMP     #%111,D3        ;7
0000683E  1CFC 0037                750                  MOVE.B  #'7',(A6)+
00006842  6000 0002                751                  BRA     FINISHER
00006846                           752                  
00006846                           753  FINISHER                
00006846                           754                  
00006846                           755                  ;check D4, do we need to do stuff?
00006846  B87C 0002                756                  CMP     #%010,D4
0000684A  6600 0008                757                  BNE     POSTINCR
0000684E  1CFC 0029                758                  MOVE.B  #')',(A6)+
00006852  4E75                     759                  RTS
00006854                           760                  
00006854  B87C 0003                761  POSTINCR        CMP     #%011,D4
00006858  6600 000C                762                  BNE     ONEPAREN
0000685C  1CFC 0029                763                  MOVE.B  #')',(A6)+
00006860  1CFC 002B                764                  MOVE.B  #'+',(A6)+
00006864  4E75                     765                  RTS
00006866                           766                  
00006866  B87C 0004                767  ONEPAREN        CMP     #%100,D4
0000686A  6600 0008                768                  BNE     DONE
0000686E  1CFC 0029                769                  MOVE.B  #')',(A6)+                
00006872                           770  
00006872  4244                     771                  CLR     D4
00006874  4E75                     772  DONE            RTS
00006876                           773  
00006876                           774          
00006876                           775                 
00006876                           776  bits5to7
00006876  4243                     777                 CLR      D3
00006878  4EB9 00006A1C            778                 JSR      COPY_OPCODE  // opcode copied to D2
0000687E  C47C 0E00                779                 AND      #%0000111000000000, D2
00006882  E09A                     780                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006884  E29A                     781                 ROR.L    #1, D2
00006886  3602                     782                 MOVE.W   D2,D3 // moving isolated bits into d3
00006888  4E75                     783                 RTS
0000688A                           784                 
0000688A                           785  bits5to8
0000688A  4243                     786                 CLR      D3
0000688C  4EB9 00006A1C            787                 JSR      COPY_OPCODE  // opcode copied to D2
00006892  C47C 0F00                788                 AND      #%0000111100000000, D2
00006896  E09A                     789                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006898  3602                     790                 MOVE.W   D2,D3 // moving isolated bits into d3
0000689A  4E75                     791                 RTS
0000689C                           792                 
0000689C                           793  bits8to10
0000689C  4243                     794                 CLR      D3
0000689E  4EB9 00006A1C            795                 JSR      COPY_OPCODE  // opcode copied to D2
000068A4  C47C 01C0                796                 AND      #%0000000111000000, D2
000068A8  EC9A                     797                 ROR.L    #6, D2          // rotate bits so isolated at the end
000068AA  3602                     798                 MOVE.W   D2,D3 // moving isolated bits into d3
000068AC  4E75                     799                 RTS               
000068AE                           800             
000068AE                           801  bits11to13
000068AE  4243                     802                 CLR      D3
000068B0  4EB9 00006A1C            803                 JSR      COPY_OPCODE  // opcode copied to D2
000068B6  C47C 0038                804                 AND      #%0000000000111000, D2
000068BA  E69A                     805                 ROR.L    #3, D2          // rotate bits so isolated at the end
000068BC  3602                     806                 MOVE.W   D2,D3 // moving isolated bits into d3
000068BE  4E75                     807                 RTS
000068C0                           808             
000068C0                           809  bits14to16
000068C0  4243                     810                 CLR      D3
000068C2  4EB9 00006A1C            811                 JSR      COPY_OPCODE  // opcode copied to D2
000068C8  C47C 0007                812                 AND      #%0000000000000111, D2
000068CC  3602                     813                 MOVE.W   D2,D3 // moving isolated bits into d3
000068CE  4E75                     814                 RTS
000068D0                           815  bits11to16
000068D0  4243                     816                 CLR      D3
000068D2  4EB9 00006A1C            817                 JSR      COPY_OPCODE  // opcode copied to D2
000068D8  C47C 003F                818                 AND      #%0000000000111111, D2
000068DC  3602                     819                 MOVE.W   D2,D3 // moving isolated bits into d3
000068DE  4E75                     820                 RTS
000068E0                           821  bits1to10
000068E0  4243                     822                 CLR      D3
000068E2  4EB9 00006A1C            823                 JSR      COPY_OPCODE  // opcode copied to D2
000068E8  C47C FFC0                824                 AND      #%1111111111000000, D2
000068EC  EC9A                     825                 ROR.L    #6, D2
000068EE  3602                     826                 MOVE.W   D2,D3 // moving isolated bits into d3
000068F0  4E75                     827                 RTS
000068F2                           828  ** DN       
000068F2                           829  MODE000         
000068F2  1CFC 0044                830                  MOVE.B  #'D',(A6)+     
000068F6  4E75                     831                  RTS
000068F8                           832  
000068F8                           833  ** AN
000068F8                           834  MODE001         
000068F8  4EB9 0000693E            835                  JSR ADDRESS_BUFFER  
000068FE  4E75                     836                  RTS      
00006900                           837  
00006900                           838   ** (AN)
00006900                           839  MODE010         
00006900  1CFC 0028                840                  MOVE.B  #'(', (A6)+
00006904  1CFC 0041                841                  MOVE.B  #'A',(A6)+  
00006908  4E75                     842                  RTS      
0000690A                           843  
0000690A                           844  ** (AN)+ 
0000690A                           845  MODE011         
0000690A  1CFC 0028                846                  MOVE.B  #'(', (A6)+
0000690E  1CFC 0041                847                  MOVE.B  #'A',(A6)+ 
00006912  4E75                     848                  RTS       
00006914                           849  
00006914                           850   ** -(AN)
00006914                           851  MODE100         
00006914  1CFC 002D                852                  MOVE.B  #'-', (A6)+
00006918  1CFC 0028                853                  MOVE.B  #'(', (A6)+
0000691C  1CFC 0041                854                  MOVE.B  #'A',(A6)+
00006920  4E75                     855                  RTS
00006922                           856                  
00006922                           857  **INVALID               
00006922                           858  MODE101         
00006922  1CFC 0028                859                  MOVE.B  #'(', (A6)+
00006926  1CFC 0041                860                  MOVE.B  #'A',(A6)+ 
0000692A  4E75                     861                  RTS
0000692C                           862                  
0000692C                           863  **INVALID
0000692C                           864  MODE110         
0000692C  1CFC 0028                865                  MOVE.B  #'(', (A6)+
00006930  1CFC 0041                866                  MOVE.B  #'A',(A6)+
00006934  4E75                     867                  RTS  
00006936                           868  
00006936                           869  ** ABSOLUTE AND IMMEDIATE            
00006936                           870  MODE111         
00006936                           871                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00006936  4EB9 00006944            872                 JSR ABSOLUTE_BUFFER  
0000693C  4E75                     873                 RTS            
0000693E                           874                                          
0000693E                           875  ADDRESS_BUFFER
0000693E  1CFC 0041                876                  MOVE.B  #'A',(A6)+ 
00006942  4E75                     877                  RTS
00006944                           878                 
00006944                           879  ABSOLUTE_BUFFER
00006944  4243                     880                 CLR      D3
00006946  3604                     881                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00006948  1CF8 0024                882                 MOVE.B   '$', (A6)+
0000694C  B67C 0000                883                 CMP.W    #%000, D3
00006950  6700 0010                884                 BEQ      ABSOLUTE_WORD_BUFFER
00006954  4243                     885                 CLR      D3
00006956  3604                     886                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00006958  B67C 0001                887                 CMP.W    #%001, D3
0000695C  6700 0016                888                 BEQ      ABSOLUTE_LONG_BUFFER
00006960  4E75                     889                 RTS
00006962                           890                 
00006962                           891  ABSOLUTE_WORD_BUFFER
00006962                           892                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00006962                           893                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00006962  1CFC 0046                894                         MOVE.B #'F', (A6)+ 
00006966  1CFC 0046                895                         MOVE.B #'F', (A6)+ 
0000696A  1CFC 0046                896                         MOVE.B #'F', (A6)+ 
0000696E  1CFC 0046                897                         MOVE.B #'F', (A6)+ 
00006972  4E75                     898                         RTS       
00006974                           899                    
00006974                           900  ABSOLUTE_LONG_BUFFER       
00006974                           901                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00006974                           902                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00006974  1CFC 0047                903                         MOVE.B #'G', (A6)+ 
00006978  1CFC 0047                904                         MOVE.B #'G', (A6)+ 
0000697C  1CFC 0047                905                         MOVE.B #'G', (A6)+ 
00006980  1CFC 0047                906                         MOVE.B #'G', (A6)+
00006984  4E75                     907                         RTS 
00006986                           908                                                      
00006986                           909  
00006986                           910  PRINT_BUFFER    
00006986  1CFC 0000                911                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
0000698A  43F9 00006B34            912                 LEA      BUFFER, A1
00006990  303C 000E                913                 MOVE.W   #14,D0
00006994  4E4F                     914                 TRAP     #15
00006996  6000 F8B1                915                 BRA EXIT
0000699A                           916                 
0000699A                           917                 
0000699A                           918  
0000699A                           919  INVALID_EA  
0000699A                           920                  * TODO: IMPLEMENT
0000699A                           921                  *** CLEAR OUT A6
0000699A                           922                  ** PUT INVALID MESSAGE INTO A6
0000699A  6000 F8AD                923                  BRA EXIT
0000699E                           924  INVALID_OP  
0000699E                           925                  ** TODO: IMPLEMENT
0000699E                           926                 *** CLEAR OUT A6
0000699E                           927                  ** PUT INVALID MESSAGE INTO A6
0000699E  6000 F8A9                928                  BRA EXIT             
000069A2                           929                  
000069A2  43F8 618B                930  NOP                 LEA     NOP_disp,A1          
000069A6  103C 000E                931                      MOVE.B  #14,D0
000069AA  4E4F                     932                      TRAP    #15
000069AC  6000 F89B                933                      BRA     EXIT
000069B0                           934                   
000069B0                           935  RTS      
000069B0  43F8 61F2                936                      LEA     RTS_disp,A1          
000069B4  103C 000E                937                      MOVE.B  #14,D0
000069B8  4E4F                     938                      TRAP    #15 
000069BA  6000 F88D                939                      BRA     EXIT
000069BE                           940  JSR      
000069BE  4DF9 00006B34            941                      LEA     BUFFER, A6
000069C4  1CFC 004A                942                      MOVE.B #'J', (A6)+
000069C8  1CFC 0053                943                      MOVE.B #'S', (A6)+
000069CC  1CFC 0052                944                      MOVE.B #'R', (A6)+
000069D0  1CFC 0020                945                      MOVE.B #' ', (A6)+
000069D4  43F9 00006B34            946                      LEA     BUFFER, A1
000069DA                           947                      ** BITS 10 - 12 MODE       
000069DA                           948                      ** BITS 13 - 16 REGISTER
000069DA  103C 000E                949                      MOVE.B  #14,D0
000069DE  4E4F                     950                      TRAP    #15 
000069E0  6000 F867                951                      BRA     EXIT
000069E4                           952                    
000069E4                           953  MOVEM      
000069E4                           954                     
000069E4                           955                      ** SIZE SUBROUTINE
000069E4                           956                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000069E4  C47C 0040                957                      AND #%0000000001000000,D2 
000069E8                           958                      * WORD
000069E8  B4BC 00000040            959                      CMP.L   #%0000000001000000,D2
000069EE  4EB9 00006A04            960                      JSR     MOVEM_W 
000069F4                           961                      *LONG
000069F4  B4BC 00000040            962                      CMP.L   #%0000000001000000,D2 
000069FA                           963                     ** JSR     MOVEM_L
000069FA  103C 000E                964                      MOVE.B  #14,D0
000069FE  4E4F                     965                      TRAP    #15
00006A00  6000 F847                966                      BRA     EXIT 
00006A04                           967                      
00006A04                           968  MOVEM_W 
00006A04  43F8 61A0                969                       LEA     MOVEM_disp,A1
00006A08                           970                      * PRINT MOVEM
00006A08  103C 000E                971                       MOVE.B  #14,D0
00006A0C  4E4F                     972                       TRAP    #15
00006A0E                           973          
00006A0E                           974                      * PRINT WORD PORTION
00006A0E  41F8 6237                975                       LEA     size_w, A0
00006A12  103C 000E                976                       MOVE.B  #14,D0
00006A16  4E4F                     977                       TRAP    #15 
00006A18                           978          
00006A18  6000 F82F                979                       BRA     EXIT 
00006A1C                           980       
00006A1C                           981     
00006A1C                           982  COPY_OPCODE 
00006A1C                           983                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00006A1C  4242                     984                       CLR    D2  
00006A1E  3405                     985                       MOVE.W D5,D2 
00006A20  4E75                     986                       RTS  
00006A22                           987                       
00006A22                           988  ****************************
00006A22                           989  
00006A22                           990                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006A22                           991                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006A22                           992                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006A22                           993  GETSIZE_ADD
00006A22  4EB8 689C                994              JSR     bits8to10
00006A26  B67C 0000                995              CMP     #%000,D3
00006A2A  6600 0010                996              BNE     ADD_NOTBYTE
00006A2E  4EB9 00006B0C            997              JSR     SIZEISBYTE
00006A34  3C3C 0001                998              MOVE    #1,D6
00006A38  4243                     999              CLR     D3
00006A3A  4E75                    1000              RTS
00006A3C                          1001          
00006A3C                          1002  ADD_NOTBYTE 
00006A3C  B67C 0001               1003              CMP     #%001,D3
00006A40  6600 0010               1004              BNE     ADD_NOTWORD
00006A44  4EB9 00006B1C           1005              JSR     SIZEISWORD
00006A4A  3C3C 0001               1006              MOVE    #1,D6
00006A4E  4243                    1007              CLR     D3
00006A50  4E75                    1008              RTS
00006A52                          1009              
00006A52                          1010  ADD_NOTWORD
00006A52  B67C 0002               1011              CMP     #%010,D3
00006A56  6600 0010               1012              BNE     ADD_NOTLEFT
00006A5A  4EB9 00006B28           1013              JSR     SIZEISLONG
00006A60  3C3C 0001               1014              MOVE    #1,D6
00006A64  4243                    1015              CLR     D3
00006A66  4E75                    1016              RTS
00006A68                          1017              
00006A68                          1018  ADD_NOTLEFT     ;check other direction
00006A68  B67C 0004               1019              CMP     #%100,D3
00006A6C  6600 0010               1020              BNE     ADD_NOTRIGHTBYTE
00006A70  4EB9 00006B0C           1021              JSR     SIZEISBYTE
00006A76  3C3C 0002               1022              MOVE    #2,D6
00006A7A  4243                    1023              CLR     D3
00006A7C  4E75                    1024              RTS
00006A7E                          1025              
00006A7E                          1026  ADD_NOTRIGHTBYTE
00006A7E  B67C 0005               1027              CMP     #%101,D3
00006A82  6600 0010               1028              BNE     ADD_NOTRIGHTWORD
00006A86  4EB9 00006B1C           1029              JSR     SIZEISWORD
00006A8C  3C3C 0002               1030              MOVE    #2,D6
00006A90  4243                    1031              CLR     D3
00006A92  4E75                    1032              RTS
00006A94                          1033  
00006A94                          1034  ADD_NOTRIGHTWORD
00006A94  B67C 0006               1035              CMP     #%110,D3
00006A98  6600 FF00               1036              BNE     INVALID_EA
00006A9C  4EB9 00006B28           1037              JSR     SIZEISLONG
00006AA2  3C3C 0002               1038              MOVE    #2,D6
00006AA6  4243                    1039              CLR     D3
00006AA8  4E75                    1040              RTS 
00006AAA                          1041                               
00006AAA                          1042                       
00006AAA                          1043                       
00006AAA                          1044  *****************************                  
00006AAA                          1045  GETSIZE_ADDI
00006AAA  4EB8 689C               1046          JSR     bits8to10
00006AAE  B67C 0000               1047          CMP     #%000,D3
00006AB2  6600 000C               1048          BNE     ADDI_NOTBYTE
00006AB6  4EB9 00006B0C           1049          JSR     SIZEISBYTE
00006ABC  4243                    1050          CLR     D3
00006ABE  4E75                    1051          RTS
00006AC0                          1052  
00006AC0                          1053  ADDI_NOTBYTE
00006AC0  B67C 0001               1054          CMP     #%001,D3
00006AC4  6600 000C               1055          BNE     ADDI_NOTWORD
00006AC8  4EB9 00006B1C           1056          JSR     SIZEISWORD
00006ACE  4243                    1057          CLR     D3
00006AD0  4E75                    1058          RTS
00006AD2                          1059          
00006AD2                          1060  ADDI_NOTWORD
00006AD2  B67C 0002               1061          CMP     #%010,D3
00006AD6  6600 FEC2               1062          BNE     INVALID_EA
00006ADA  4EB9 00006B28           1063          JSR     SIZEISLONG
00006AE0  4243                    1064          CLR     D3
00006AE2  4E75                    1065          RTS
00006AE4                          1066          
00006AE4                          1067                              
00006AE4                          1068                       
00006AE4                          1069  ********************************          
00006AE4                          1070                       
00006AE4                          1071                       
00006AE4                          1072  ********************************                     
00006AE4                          1073  GETSIZE_ADDA
00006AE4  4EB8 689C               1074          JSR     bits8to10
00006AE8  B67C 0003               1075          CMP     #%011,D3
00006AEC  6600 000C               1076          BNE     ADDA_NOTWORD
00006AF0  4EB9 00006B1C           1077          JSR     SIZEISWORD
00006AF6  4243                    1078          CLR     D3
00006AF8  4E75                    1079          RTS
00006AFA                          1080          
00006AFA                          1081  
00006AFA                          1082          
00006AFA                          1083  ADDA_NOTWORD
00006AFA  B67C 0007               1084          CMP     #%111,D3
00006AFE  6600 FE9A               1085          BNE     INVALID_EA
00006B02  4EB9 00006B28           1086          JSR     SIZEISLONG
00006B08  4243                    1087          CLR     D3
00006B0A  4E75                    1088          RTS
00006B0C                          1089  **********************************        
00006B0C                          1090      
00006B0C                          1091  SIZEISBYTE
00006B0C  1CFC 002E               1092         MOVE.B   #'.',(A6)+
00006B10  1CFC 0042               1093         MOVE.B   #'B',(A6)+
00006B14  1CFC 0020               1094         MOVE.B   #' ',(A6)+
00006B18  4243                    1095         CLR      D3
00006B1A  4E75                    1096         RTS
00006B1C                          1097  
00006B1C                          1098  SIZEISWORD    
00006B1C  1CFC 002E               1099         MOVE.B   #'.',(A6)+
00006B20  1CFC 0057               1100         MOVE.B   #'W',(A6)+
00006B24  4243                    1101         CLR      D3
00006B26  4E75                    1102         RTS
00006B28                          1103                  
00006B28                          1104  SIZEISLONG    
00006B28  1CFC 002E               1105         MOVE.B   #'.',(A6)+
00006B2C  1CFC 004C               1106         MOVE.B   #'L',(A6)+
00006B30  4243                    1107         CLR      D3
00006B32  4E75                    1108         RTS
00006B34                          1109                  
00006B34                          1110       
00006B34= 20 20 20 20 20 00       1111  BUFFER DC.B '     ',0     
00006B3A                          1112  
00006B3A                          1113      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     6944
ABSOLUTE_LONG_BUFFER  6974
ABSOLUTE_WORD_BUFFER  6962
ADD                 63EC
ADDA                63C6
ADDA_BUFFER         63D0
ADDA_DISP           61AA
ADDA_NOTWORD        6AFA
ADDI                648C
ADDI_BUFFER         6514
ADDI_DES            64B0
ADDI_DISP           61AF
ADDI_NOTBYTE        6AC0
ADDI_NOTWORD        6AD2
ADDI_SRC            64A2
ADDQ                662A
ADDQ_BUFFER         6634
ADDQ_DISP           61B4
ADDRESS_BUFFER      693E
ADDR_ODDBIT_MSG     60C4
ADDR_ORDER_CHECK    60EB
ADD_BUFFER          63F6
ADD_DEST            646A
ADD_DIRECTION_REVERSED  6424
ADD_DISP            61A6
ADD_DONE            643E
ADD_NOTBYTE         6A3C
ADD_NOTLEFT         6A68
ADD_NOTRIGHTBYTE    6A7E
ADD_NOTRIGHTWORD    6A94
ADD_NOTWORD         6A52
ADD_SRC             6446
AND                 670A
AND_BUFFER          6714
AND_DISP            61CF
ASL                 6746
ASL_BUFFER          6750
ASL_DISP            61DE
ASR                 672A
ASR_BUFFER          6734
ASR_DISP            61E2
BACKSLASHSIGH       622C
BCC_DISP            61F6
BGT_DISP            61FA
BITS11TO13          68AE
BITS11TO16          68D0
BITS14TO16          68C0
BITS1TO10           68E0
BITS5TO7            6876
BITS5TO8            688A
BITS8TO10           689C
BLE_DISP            61FE
BUFFER              6B34
CLOSEPAREN          6230
CLR_DISP            61CB
CMP                 66CA
CMP_BUFFER          66D4
CODE0000            62AE
CODE0001            62C2
CODE0010            62C6
CODE0011            62CA
CODE0100            62CE
CODE0101            6302
CODE0110            6308
CODE0111            630C
CODE1000            6312
CODE1001            6324
CODE1010            632A
CODE1011            632E
CODE1100            6334
CODE1101            6346
CODE1110            6392
CODE1111            63C2
COMMASIGN           622A
COPY_OPCODE         6A1C
CR                  D
DIVU                666E
DIVU_BUFFER         6678
DIVU_DISP           61C2
DOLLARSIGN          6224
DONE                6874
ENDTEST_MSG         613F
EXIT                6249
FINISHER            6846
FIVE                681A
FOUR                680A
GETSIZE_ADD         6A22
GETSIZE_ADDA        6AE4
GETSIZE_ADDI        6AAA
HEXATABLE           6202
INPUT_BUFFER        623E
INSERT_NUM          67CA
INVALIDEA_DISP      6183
INVALID_DISP        617E
INVALID_EA          699A
INVALID_OP          699E
JMP_MODE            679A
JMP_TABLE           624E
JSR                 69BE
JSR_DISP            61EE
LEA                 6530
LEA_BUFFER          6554
LEA_DEST            6606
LEA_DISP            61C7
LEA_SRC             6566
LF                  A
LINEBREAK           617B
LINECOUNT           623D
LOCATION_ENDDATA    6244
LOCATION_END_MSG    60A7
LOCATION_STARTDATA  6240
LOCATION_START_MSG  6088
LSL                 6762
LSL_BUFFER          676C
LSL_DISP            61D6
LSR                 677E
LSR_BUFFER          6788
LSR_DISP            61DA
MINUSSIGN           6228
MODE000             68F2
MODE001             68F8
MODE010             6900
MODE011             690A
MODE100             6914
MODE101             6922
MODE110             692C
MODE111             6936
MOVEA_DISP          6194
MOVEM               69E4
MOVEM_DISP          61A0
MOVEM_W             6A04
MOVEQ               664A
MOVEQ_BUFFER        6654
MOVEQ_DISP          619A
MOVE_DISP           618F
MULS                66EA
MULS_BUFFER         66F4
MULS_DISP           61BD
NOP                 69A2
NOP_DISP            618B
ONE                 67DA
ONEPAREN            6866
OPENPAREN           622E
OR                  668E
OR_BUFFER           6698
OR_DISP             61D3
PAUSE_MSG           6125
PLUSSIGN            6226
POSTINCR            6854
POUNDSIGN           6222
PRINT_BUFFER        6986
ROL_DISP            61E6
ROR_DISP            61EA
RTS                 69B0
RTS_DISP            61F2
SEVEN               683A
SIX                 682A
SIZEISBYTE          6B0C
SIZEISLONG          6B28
SIZEISWORD          6B1C
SIZE_B              6234
SIZE_L              623A
SIZE_W              6237
SPACE               6232
START               6000
SUB                 66AA
SUB_BUFFER          66B4
SUB_DISP            61B9
TABLE_LENGTH        6248
THREE               67FA
TWO                 67EA
WELCOME_MSG         6024
