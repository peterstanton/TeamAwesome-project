00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 9:08:36 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010D4              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001138             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012EE             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001C4A             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 0000122B             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001CA0             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001157             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012EE             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001C4A             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 0000122B             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001CBA             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012FE             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001C46             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C  3612                      80                   MOVE.W  (A2), D3
0000109E                            81                  
0000109E                            82                   ; MOVE.W  (A2), D3
0000109E                            83  
0000109E                            84                   * TEST OPCODES
0000109E                            85                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109E                            86                   ; MOVE.W  #$4E71,D3 * NOP
0000109E                            87                   ; MOVE.W  #$4E75,D3 * RTS
0000109E                            88                   ; MOVE.W  #$4EB0,D3 * JSR
0000109E                            89                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109E                            90                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109E                            91                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109E  363C D64A                 92                   MOVE.W  #$D64A, D3  * ADD.W A2,D3
000010A2                            93  
000010A2                            94                   ; MOVE.W    #$5201,D3    *ADDQ
000010A2                            95  
000010A2                            96                   ; MOVE.W     #$7E70, D3 *MOVEQ
000010A2                            97                   ; MOVE.W     #$80C0, D3 *DIVU
000010A2                            98                   ; MOVE.W     #$8000, D3 * OR
000010A2                            99                   ; MOVE.W        #$9000, D3 * SUB
000010A2                           100                   ; MOVE.W        #$B000, D3 * CMP
000010A2                           101                   ; MOVE.W        #$C1C0, D3 * MULS
000010A2                           102                   ; MOVE.W        #$C000, D3 * AND
000010A2                           103                   ; MOVE.W        #$E0F8, D3  *ASR
000010A2                           104                   ; MOVE.W        #$E1E2, D3  *ASL
000010A2                           105                   ; MOVE.W        #$E393, D3  *LSL
000010A2                           106                   ;MOVE.W        #$E2DC, D3  *LSR
000010A2  4EB9 00001AD2            107                   JSR    PRINT_ADDRESS
000010A8  544A                     108                   ADD.W   #2,A2
000010AA  3A03                     109                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AC  183C 000C                110                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010B0                           111  
000010B0  4EB9 00001AD2            112                   JSR    PRINT_ADDRESS      
000010B6                           113                   
000010B6                           114                   
000010B6                           115                   
000010B6  3A03                     116                   MOVE.W  D3,D5
000010B8  183C 000C                117                   MOVE.B  #12,D4          *Shift 12 bits to the right  
000010BC  E86B                     118                   LSR.W   D4,D3       *Move the bits
000010BE  C6FC 0006                119                   MULU    #6,D3       *Form offset     
000010C2  4EB0 3000                120                   JSR     0(A0,D3)   *Jump indirect with index
000010C6                           121                   
000010C6  4EB9 00001A38            122                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010CC  B4CB                     123                   CMP     A3,A2
000010CE  6E00 0229                124                   BGT     EXIT
000010D2  60BA                     125                   BRA     MAIN_LOOP
000010D4                           126                   
000010D4                           127                                  
000010D4                           128      INCLUDE 'definitions.x68'
000010D4                           129  
000010D4  =0000000D                130  CR              EQU     $0D         carriage return
000010D4  =0000000A                131  LF              EQU     $0A         line feed
000010D4= 43 53 53 20 34 32 ...    132  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010F8= 42 79 20 54 65 61 ...    133                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001138= 45 6E 74 65 72 20 ...    134  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001157= 45 6E 74 65 72 20 ...    135  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001174= 41 64 64 72 65 73 ...    136  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
0000119B= 45 6E 64 69 6E 67 ...    137  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011D5= 50 72 65 73 73 20 ...    138  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011EF= 52 65 61 63 68 65 ...    139  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000120A= 54 72 79 20 61 6E ...    140                      DC.B    'Try another location? (yes/no): ',0
0000122B= 0D 0A 00                 141  linebreak           DC.B    CR,LF,0
0000122E                           142                      
0000122E= 44 41 54 41 00           143  Invalid_disp        DC.B    'DATA',0
00001233= 57 52 4F 4E 47 45 ...    144  InvalidEA_disp      DC.B    'WRONGEA',0
0000123B                           145  
0000123B= 4E 4F 50 00              146  NOP_disp            DC.B    'NOP',0
0000123F= 4D 4F 56 45 00           147  MOVE_disp           DC.B    'MOVE',0
00001244= 4D 4F 56 45 41 00        148  MOVEA_disp          DC.B    'MOVEA',0
0000124A= 4D 4F 56 45 51 00        149  MOVEQ_disp          DC.B    'MOVEQ',0
00001250= 4D 4F 56 45 4D 00        150  MOVEM_disp          DC.B    'MOVEM',0
00001256= 41 44 44 00              151  ADD_disp            DC.B    'ADD',0
0000125A= 41 44 44 41 00           152  ADDA_disp           DC.B    'ADDA',0
0000125F= 41 44 44 49 00           153  ADDI_disp           DC.B    'ADDI',0
00001264= 41 44 44 51 00           154  ADDQ_disp           DC.B    'ADDQ',0
00001269= 53 55 42 00              155  SUB_disp            DC.B    'SUB',0
0000126D= 4D 55 4C 53 00           156  MULS_disp           DC.B    'MULS',0
00001272= 44 49 56 55 00           157  DIVU_disp           DC.B    'DIVU',0
00001277= 4C 45 41 00              158  LEA_disp            DC.B    'LEA',0
0000127B= 43 4C 52 00              159  CLR_disp            DC.B    'CLR',0
0000127F= 41 4E 44 00              160  AND_disp            DC.B    'AND',0
00001283= 4F 52 00                 161  OR_disp             DC.B    'OR',0
00001286= 4C 53 4C 00              162  LSL_disp            DC.B    'LSL',0
0000128A= 4C 53 52 00              163  LSR_disp            DC.B    'LSR',0
0000128E= 41 53 4C 00              164  ASL_disp            DC.B    'ASL',0
00001292= 41 53 52 00              165  ASR_disp            DC.B    'ASR',0
00001296= 52 4F 4C 00              166  ROL_disp            DC.B    'ROL',0
0000129A= 52 4F 52 00              167  ROR_disp            DC.B    'ROR',0
0000129E= 4A 53 52 00              168  JSR_disp            DC.B    'JSR',0
000012A2= 52 54 53 00              169  RTS_disp            DC.B    'RTS',0
000012A6= 42 43 43 00              170  BCC_disp            DC.B    'BCC',0
000012AA= 42 47 54 00              171  BGT_disp            DC.B    'BGT',0    
000012AE= 42 4C 45 00              172  BLE_disp            DC.b    'BLE',0
000012B2                           173  
000012B2                           174  
000012B2= 30 00                    175  hexaTable               DC.B    '0',0
000012B4= 31 00                    176                          DC.B    '1',0
000012B6= 32 00                    177                          DC.B    '2',0
000012B8= 33 00                    178                          DC.B    '3',0
000012BA= 34 00                    179                          DC.B    '4',0
000012BC= 35 00                    180                          DC.B    '5',0
000012BE= 36 00                    181                          DC.B    '6',0
000012C0= 37 00                    182                          DC.B    '7',0
000012C2= 38 00                    183                          DC.B    '8',0
000012C4= 39 00                    184                          DC.B    '9',0
000012C6= 41 00                    185                          DC.B    'A',0
000012C8= 42 00                    186                          DC.B    'B',0
000012CA= 43 00                    187                          DC.B    'C',0
000012CC= 44 00                    188                          DC.B    'D',0
000012CE= 45 00                    189                          DC.B    'E',0
000012D0= 46 00                    190                          DC.B    'F',0
000012D2= 23 00                    191  poundsign               DC.B    '#',0
000012D4= 24 00                    192  dollarsign              DC.B    '$',0
000012D6= 2B 00                    193  plussign                DC.B    '+',0
000012D8= 2D 00                    194  minussign               DC.B    '-',0
000012DA= 2C 00                    195  commasign               DC.B    ',',0
000012DC= 2F 00                    196  backslashsigh           DC.B    '/',0
000012DE= 28 00                    197  openparen               DC.B    '(',0
000012E0= 29 00                    198  closeparen              DC.B    ')',0
000012E2= 20 00                    199  space                   DC.B    ' ',0   
000012E4= 2E 42 00                 200  size_b                  DC.B    '.B',0
000012E7= 2E 57 00                 201  size_w                  DC.B    '.W',0        
000012EA= 2E 4C 00                 202  size_l                  DC.B    '.L',0
000012ED                           203  
000012ED                           204  linecount               DS.B    1       *storeage for lines on a screen
000012EE= 01                       205  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012F0                           206  location_startData      DS.L    1       *location on where to start reading data
000012F4                           207  location_endData        DS.L    1       *location on where to end reading data
000012F8                           208  table_length            DS.B    1       *Number of spaces in the table to print to console
000012F9                           209  
000012F9                           210  
000012F9                           211  -------------------- end include --------------------
000012F9                           212             
000012F9                           213  EXIT                 
000012FA  FFFF FFFF                214         SIMHALT   
000012FE                           215  
000012FE                           216  
000012FE                           217  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012FE  4EF9 0000135E            218  jmp_table      JMP         code0000
00001304                           219                  *ADDI
00001304                           220  
00001304  4EF9 00001372            221                 JMP         code0001
0000130A                           222  
0000130A  4EF9 00001376            223                 JMP         code0010
00001310                           224  
00001310  4EF9 0000137A            225                 JMP         code0011
00001316                           226  
00001316  4EF9 0000137E            227                 JMP         code0100
0000131C                           228                             
0000131C  4EF9 000013B2            229                 JMP         code0101
00001322                           230                 * ADDQ
00001322                           231                  
00001322                           232        
00001322  4EF9 000013B8            233                 JMP         code0110
00001328                           234                 * BCC
00001328                           235                 * BGT
00001328                           236                 * BLE
00001328                           237                 
00001328  4EF9 000013BC            238                 JMP         code0111
0000132E                           239                 * MOVEQ
0000132E                           240  
0000132E  4EF9 000013C2            241                 JMP         code1000
00001334                           242                 * DIVU
00001334                           243                 * OR
00001334                           244  
00001334  4EF9 000013D4            245                 JMP         code1001
0000133A                           246                  *SUB
0000133A  4EF9 000013DA            247                 JMP         code1010
00001340                           248                 
00001340  4EF9 000013DE            249                 JMP         code1011
00001346                           250                 * CMP
00001346                           251                 
00001346  4EF9 000013E4            252                 JMP         code1100
0000134C                           253                 * MULS
0000134C                           254                 * AND
0000134C                           255          
0000134C  4EF9 000013F6            256                 JMP         code1101
00001352                           257                 *ADD
00001352                           258                 *ADDA
00001352  4EF9 00001442            259                 JMP         code1110
00001358                           260                 * ASR
00001358                           261                 * ASL
00001358                           262                 * LSL
00001358                           263                 * LSR
00001358                           264                 * ROL
00001358                           265                 * ROR
00001358                           266  
00001358  4EF9 00001472            267                 JMP         code1111
0000135E                           268  
0000135E                           269  
0000135E                           270  code0000      
0000135E  4EB9 0000193C            271                 JSR          bits5to8 // RETURNS INTO D3
00001364  B6BC 00000006            272                 CMP.L        #%0110, D3
0000136A  6600 06E2                273                 BNE          INVALID_OP
0000136E  6000 01D0                274                 BRA          ADDI  
00001372                           275  
00001372  4E72 2700                276  code0001       STOP        #$2700
00001376                           277  
00001376  4E72 2700                278  code0010       STOP        #$2700
0000137A                           279  
0000137A  4E72 2700                280  code0011       STOP        #$2700
0000137E                           281  
0000137E                           282  code0100       
0000137E  4EB9 00001ACC            283                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
00001384                           284                  
00001384                           285                 *NOP
00001384  C47C 0FFF                286                 AND     #%0000111111111111,D2
00001388  B4BC 00000E71            287                 CMP.L   #%000111001110001, D2
0000138E  6700 06C2                288                 BEQ     NOP
00001392                           289                 
00001392                           290                 *RTS
00001392  C47C 0FFF                291                 AND     #%0000111111111111,D2
00001396  B4BC 00000E75            292                 CMP.L   #%0000111001110101, D2
0000139C  6700 06C2                293                 BEQ     RTS
000013A0                           294  
000013A0                           295                 *JSR
000013A0  C47C 0FC0                296                 AND     #%0000111111000000,D2
000013A4  B4BC 00000E80            297                 CMP.L   #%0000111010000000,D2
000013AA  6700 06C2                298                 BEQ     JSR
000013AE                           299                 
000013AE                           300                 * MOVEM
000013AE                           301                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000013AE                           302                ** AND     #%0000111110000000,D2
000013AE                           303                 * DATA REGISTER
000013AE                           304                ** CMP.L   #%0000100010000000, D2
000013AE                           305                 ** JSR      MOVEM
000013AE                           306                 * ADDRESS REGISTER (DECREMENTED)
000013AE                           307                 ** CMP.L  #%0000110010000000, D2
000013AE                           308                 ** JSR    MOVEM
000013AE                           309                  
000013AE                           310                  ** TO DO: BRANCH IF INVALID OPCODE
000013AE                           311                  *LEA - if it's not the top codes, it's LEA
000013AE  6000 0234                312                  BRA     LEA
000013B2                           313  code0101      
000013B2                           314  
000013B2  4EB9 000016DC            315                  JSR   ADDQ
000013B8                           316  
000013B8  4E72 2700                317  code0110        STOP        #$2700
000013BC                           318  
000013BC                           319  code0111       
000013BC  4EB9 000016FC            320                  JSR       MOVEQ
000013C2                           321  
000013C2                           322  code1000      
000013C2  4EB9 0000194E            323                  JSR        bits8to10
000013C8  B67C 0003                324                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013CC  6700 0352                325                  BEQ        DIVU
000013D0  6000 036E                326                  BRA        OR       ** OTHERWISE OR
000013D4                           327                  
000013D4                           328  
000013D4                           329  code1001       
000013D4  4EB9 0000175C            330                 JSR         SUB
000013DA  4E72 2700                331  code1010       STOP        #$2700
000013DE                           332  
000013DE                           333  code1011       
000013DE  4EB9 0000177C            334                 JSR         CMP
000013E4                           335  
000013E4                           336  code1100      
000013E4  4EB9 0000194E            337                  JSR        bits8to10
000013EA  B67C 0007                338                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013EE  6700 03AC                339                  BEQ        MULS
000013F2  6000 03C8                340                  BRA        AND       ** OTHERWISE AND
000013F6                           341  
000013F6                           342  code1101       
000013F6  4EB9 00001ACC            343                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013FC                           344                 *ADDA
000013FC  4EB9 0000194E            345                 JSR      bits8to10
00001402  B67C 0003                346                 CMP      #%011, D3  ** WORD
00001406  6700 006E                347                 BEQ      ADDA
0000140A  B67C 0007                348                 CMP      #%111, D3   ** LONG
0000140E  6700 0066                349                 BEQ      ADDA
00001412                           350                 
00001412                           351                 *ADD
00001412  B67C 0000                352                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00001416  6700 0084                353                 BEQ      ADD
0000141A  B67C 0001                354                 CMP      #%001, D3   ** WORD TO DATA REGISTER
0000141E  6700 007C                355                 BEQ      ADD
00001422  B67C 0002                356                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001426  6700 0074                357                 BEQ      ADD
0000142A  B67C 0004                358                 CMP      #%100, D3   ** BYTE TO EA
0000142E  6700 006C                359                 BEQ      ADD
00001432  B67C 0005                360                 CMP      #%101, D3   ** WORD TO EA
00001436  6700 0064                361                 BEQ      ADD
0000143A  B67C 0006                362                 CMP      #%110, D3   ** LONG TO EA
0000143E  6700 005C                363                 BEQ      ADD
00001442                           364                 
00001442                           365  
00001442                           366  code1110       
00001442                           367                  * ASR
00001442  4EB9 00001992            368                  JSR     bits1to10
00001448  B67C 0383                369                  CMP     #%1110000011,D3
0000144C  6700 038E                370                  BEQ     ASR
00001450                           371                  
00001450                           372                  * ASL
00001450  B67C 0387                373                  CMP     #%1110000111,D3
00001454  6700 03A2                374                  BEQ     ASL
00001458                           375                  
00001458                           376                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001458                           377                  * LSL
00001458  4244                     378                  CLR     D4
0000145A  2803                     379                  MOVE.L  D3,D4
0000145C  C8BC 00A98671            380                  AND.L   #11110001,D4
00001462  B87C 01C7                381                  CMP     #%111000111,D4
00001466  6700 03AC                382                  BEQ     LSL
0000146A                           383                  
0000146A                           384                  * LSR
0000146A  B67C 038B                385                  CMP     #%1110001011,D3
0000146E  6700 03C0                386                  BEQ     LSR
00001472                           387                  
00001472                           388                  * ROL
00001472                           389                  
00001472                           390                  * ROR
00001472                           391  
00001472  4E72 2700                392  code1111       STOP        #$2700
00001476                           393  
00001476                           394  ADDA    
00001476  4EB9 00001480            395                 JSR     ADDA_BUFFER
0000147C  6000 05BA                396                 BRA     PRINT_BUFFER
00001480                           397                  
00001480                           398  ADDA_BUFFER
00001480  1CFC 0041                399                 MOVE.B   #'A',(A6)+
00001484  1CFC 0044                400                 MOVE.B   #'D', (A6)+  
00001488  1CFC 0044                401                 MOVE.B   #'D', (A6)+
0000148C  1CFC 0041                402                 MOVE.B   #'A', (A6)+
00001490  4EB9 00001BEE            403                 JSR      GETSIZE_ADDA
00001496  1CFC 0020                404                 MOVE.B   #' ', (A6)+
0000149A  4E75                     405                 RTS
0000149C                           406                 
0000149C                           407                 
0000149C                           408                 
0000149C                           409  *********************************************               
0000149C                           410  ADD    
0000149C  4EB9 000014A6            411                 JSR     ADD_BUFFER
000014A2  6000 0594                412                 BRA     PRINT_BUFFER
000014A6                           413                  
000014A6                           414  ADD_BUFFER
000014A6  1CFC 0041                415                 MOVE.B   #'A',(A6)+
000014AA  1CFC 0044                416                 MOVE.B   #'D', (A6)+  
000014AE  1CFC 0044                417                 MOVE.B   #'D', (A6)+
000014B2  4EB9 00001B2C            418                 JSR      GETSIZE_ADD
000014B8                           419                 
000014B8                           420                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014B8                           421                 
000014B8  BC7C 0001                422                 CMP      #1,D6
000014BC  6600 001A                423                 BNE      ADD_DIRECTION_REVERSED
000014C0  4EB9 000014FA            424                 JSR      ADD_SRC
000014C6  1CFC 002C                425                 MOVE.B   #',', (A6)+
000014CA  1CFC 0020                426                 MOVE.B   #' ', (A6)+
000014CE  4EB9 0000151E            427                 JSR      ADD_DEST
000014D4  6000 001C                428                 BRA      ADD_DONE
000014D8                           429                 
000014D8                           430                 
000014D8                           431  ADD_DIRECTION_REVERSED
000014D8                           432  
000014D8  4246                     433                 CLR      D6
000014DA  4EB9 0000151E            434                 JSR      ADD_DEST
000014E0  1CFC 002C                435                 MOVE.B   #',', (A6)+
000014E4  1CFC 0020                436                 MOVE.B   #' ', (A6)+
000014E8  4EB9 000014FA            437                 JSR      ADD_SRC
000014EE  6000 0002                438                 BRA      ADD_DONE              
000014F2                           439                 
000014F2                           440                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014F2                           441                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014F2                           442                 
000014F2                           443  ADD_DONE       
000014F2  4246                     444                 CLR      D6
000014F4  4EB9 00001A38            445                 JSR     PRINT_BUFFER
000014FA                           446  
000014FA                           447                  
000014FA                           448  
000014FA                           449  ***********************************************        
000014FA                           450  
000014FA                           451  
000014FA                           452  
000014FA                           453  ****************************************************************************************
000014FA                           454  ADD_SRC
000014FA                           455  
000014FA  4EB9 00001960            456                  JSR    bits11to13
00001500  3803                     457                  MOVE   D3,D4
00001502  41F9 0000184C            458                  LEA     jmp_mode,A0    *Index into the table
00001508  C6FC 0006                459                  MULU   #6,D3
0000150C  4EB0 3000                460                  JSR    0(A0,D3)     
00001510  4EB9 00001972            461                  JSR    bits14to16
00001516  4EB9 0000187C            462                  JSR    insert_num
0000151C  4E75                     463                  RTS
0000151E                           464  
0000151E                           465  
0000151E                           466  
0000151E                           467  
0000151E                           468  
0000151E                           469  ADD_DEST
0000151E  363C 0000                470                  MOVE.W #%000,D3     ;Can only have a data register.
00001522  3803                     471                  MOVE   D3,D4
00001524  41F9 0000184C            472                  LEA     jmp_mode,A0    *Index into the table
0000152A  C6FC 0006                473                  MULU    #6,D3       *Form offset     
0000152E  4EB0 3000                474                  JSR     0(A0,D3)   *Jump indirect with index
00001532                           475                  
00001532  4EB9 00001928            476                  JSR     bits5to7
00001538  4EB9 0000187C            477                  JSR     insert_num
0000153E  4E75                     478                  RTS
00001540                           479                          
00001540                           480  
00001540                           481  
00001540                           482  
00001540                           483  ADDI
00001540  4EB9 000015C8            484                  JSR     ADDI_BUFFER
00001546  4EB9 00001556            485                  JSR     ADDI_SRC
0000154C  4EB9 00001564            486                  JSR     ADDI_DES
00001552  6000 04E4                487                  BRA     PRINT_BUFFER
00001556                           488                  
00001556                           489  ADDI_SRC                        
00001556  1CFC 0023                490                  MOVE.B  #'#', (A6)+
0000155A  1CFC 002C                491                  MOVE.B  #',', (A6)+
0000155E  1CFC 0020                492                  MOVE.B  #' ', (A6)+
00001562  4E75                     493                  RTS
00001564                           494                    ** TODO: IMPLEMENT THIS IN EA
00001564                           495                  ** Immediate field—Data immediately following the instruction.
00001564                           496                  **If size = 00, the data is the low-order byte of the immediate word.
00001564                           497                  **If size = 01, the data is the entire immediate word.
00001564                           498                  **If size = 10, the data is the next two immediate words. 
00001564                           499  ADDI_DES
00001564                           500                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001564                           501                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001564  4EB9 00001960            502                 JSR      bits11to13
0000156A  B67C 0001                503                 CMP      #%001, D3 **AN
0000156E  6700 04DA                504                 BEQ      INVALID_EA
00001572  B67C 0005                505                 CMP      #%101, D3 **COMPLICATED
00001576  6700 04D2                506                 BEQ      INVALID_EA
0000157A  B67C 0006                507                 CMP      #%110, D3 **COMPLICATED
0000157E  6700 04CA                508                 BEQ      INVALID_EA
00001582                           509                 
00001582  4EB9 00001982            510                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001588  B67C 003C                511                 CMP      #%111100,D3 // immediate data
0000158C  6700 04BC                512                 BEQ      INVALID_EA
00001590  B67C 003A                513                 CMP      #%111010,D3 // complicated
00001594  6700 04B4                514                 BEQ      INVALID_EA
00001598  B67C 003B                515                 CMP      #%111011,D3 // complicated
0000159C  6700 04AC                516                 BEQ      INVALID_EA
000015A0                           517                 
000015A0  4EB9 00001960            518                 JSR      bits11to13 ** grab bits to jump with\
000015A6  3803                     519                 MOVE     D3,D4
000015A8  41F9 0000184C            520                 LEA     jmp_mode,A0    *Index into the table
000015AE  C6FC 0006                521                 MULU    #6,D3       *Form offset     
000015B2  4EB0 3000                522                 JSR     0(A0,D3)   *Jump indirect with index
000015B6                           523                 
000015B6  4243                     524                 CLR     D3
000015B8  4EB9 00001972            525                 JSR     bits14to16
000015BE  4EB9 0000187C            526                 JSR     insert_num
000015C4  4244                     527                 CLR     D4
000015C6                           528                 
000015C6  4E75                     529                 RTS
000015C8                           530                 
000015C8                           531                             
000015C8                           532  ADDI_BUFFER
000015C8  1CFC 0041                533                 MOVE.B   #'A',(A6)+
000015CC  1CFC 0044                534                 MOVE.B   #'D', (A6)+  
000015D0  1CFC 0044                535                 MOVE.B   #'D', (A6)+
000015D4  1CFC 0049                536                 MOVE.B   #'I', (A6)+
000015D8                           537                 
000015D8  4EB9 00001BB4            538                 JSR      GETSIZE_ADDI
000015DE                           539                 
000015DE                           540                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015DE                           541                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015DE  1CFC 0020                542                 MOVE.B   #' ', (A6)+
000015E2  4E75                     543                 RTS
000015E4                           544                              
000015E4                           545  LEA
000015E4  4EB9 0000194E            546                 JSR      bits8to10   // 1 1 1
000015EA  B47C 0007                547                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015EE  6600 045E                548                 BNE      INVALID_OP
000015F2  4EB9 00001606            549                 JSR      LEA_BUFFER
000015F8  4EB9 00001618            550                 JSR      LEA_SRC
000015FE  4EB9 000016B8            551                 JSR      LEA_DEST
00001604  4E75                     552                 RTS
00001606                           553                 
00001606                           554  LEA_BUFFER 
00001606  1CFC 004C                555                 MOVE.B   #'L',(A6)+
0000160A  1CFC 0045                556                 MOVE.B   #'E', (A6)+  
0000160E  1CFC 0041                557                 MOVE.B   #'A', (A6)+
00001612  1CFC 0020                558                 MOVE.B   #' ', (A6)+
00001616  4E75                     559                 RTS
00001618                           560            
00001618                           561  LEA_SRC
00001618                           562              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00001618  4EB9 00001960            563              JSR      bits11to13  // source mode - D3
0000161E  B67C 0000                564              CMP      #%000, D3
00001622  6700 0426                565              BEQ      INVALID_EA
00001626  B67C 0001                566              CMP      #%001, D3
0000162A  6700 041E                567              BEQ      INVALID_EA
0000162E  B67C 0003                568              CMP      #%011, D3
00001632  6700 0416                569              BEQ      INVALID_EA
00001636  B67C 0004                570              CMP      #%100, D3
0000163A  6700 040E                571              BEQ      INVALID_EA
0000163E  B67C 0005                572              CMP      #%101, D3
00001642  6700 0406                573              BEQ      INVALID_EA
00001646  B67C 0006                574              CMP      #%110, D3
0000164A  6700 03FE                575              BEQ      INVALID_EA
0000164E                           576  
0000164E                           577              
0000164E                           578              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
0000164E  4EB9 00001972            579              JSR      bits14to16 // source register - d4
00001654  B67C 0004                580              CMP      #%100, D3
00001658  6700 03F0                581              BEQ      INVALID_EA
0000165C  B67C 0002                582              CMP      #%010, D3
00001660  6700 03E8                583              BEQ      INVALID_EA
00001664  B67C 0003                584              CMP      #%011, D3
00001668  6700 03E0                585              BEQ      INVALID_EA
0000166C                           586              
0000166C                           587  
0000166C  4EB9 00001982            588               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001672  B67C 003C                589               CMP      #%111100,D3 // immediate data
00001676  6700 03D2                590               BEQ      INVALID_EA
0000167A  B67C 003A                591               CMP      #%111010,D3 // complicated
0000167E  6700 03CA                592               BEQ      INVALID_EA
00001682  B67C 003B                593               CMP      #%111011,D3 // complicated
00001686  6700 03C2                594               BEQ      INVALID_EA
0000168A                           595     
0000168A  4EB9 00001960            596               JSR      bits11to13 ** grab mode bits to jump with
00001690  3803                     597               MOVE    D3,D4
00001692                           598  
00001692  41F9 0000184C            599               LEA     jmp_mode,A0    *Index into the table
00001698  C6FC 0006                600               MULU    #6,D3       *Form offset     
0000169C  4EB0 3000                601               JSR     0(A0,D3)   *Jump indirect with index
000016A0                           602               
000016A0                           603  
000016A0  4243                     604               CLR     D3
000016A2  4EB9 00001972            605               JSR     bits14to16
000016A8  4EB9 0000187C            606               JSR     insert_num
000016AE                           607               
000016AE  1CFC 002C                608               MOVE.B     #',', (A6)+
000016B2  1CFC 0020                609               MOVE.B     #' ', (A6)+
000016B6                           610  
000016B6  4E75                     611               RTS
000016B8                           612               
000016B8                           613  LEA_DEST    
000016B8  4244                     614                  CLR     D4
000016BA  41F9 0000184C            615                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
000016C0  363C 0001                616                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
000016C4  3803                     617                  MOVE    D3,D4
000016C6  C6FC 0006                618                  MULU    #6,D3       *Form offset     
000016CA  4EB0 3000                619                  JSR     0(A0,D3)   *Jump indirect with index
000016CE                           620                  
000016CE  4EB9 00001928            621                  JSR     bits5to7
000016D4  4EB9 0000187C            622                  JSR     insert_num
000016DA                           623                  
000016DA  4E75                     624                  RTS
000016DC                           625  
000016DC                           626  
000016DC                           627  ADDQ
000016DC  4EB9 000016E4            628                  JSR     ADDQ_BUFFER
000016E2  4E75                     629                  RTS                 ;BRA     PRINT_BUFFER
000016E4                           630  
000016E4                           631  ADDQ_BUFFER
000016E4  1CFC 0041                632                 MOVE.B   #'A',(A6)+
000016E8  1CFC 0044                633                 MOVE.B   #'D', (A6)+  
000016EC  1CFC 0044                634                 MOVE.B   #'D', (A6)+
000016F0  1CFC 0051                635                 MOVE.B   #'Q', (A6)+
000016F4  4EB9 00001AF2            636                 JSR      GETSIZE_ADDQ
000016FA                           637                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
000016FA                           638                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000016FA  4E75                     639                 RTS
000016FC                           640                 
000016FC                           641  MOVEQ
000016FC  4EB9 00001706            642                  JSR     MOVEQ_BUFFER
00001702  6000 0334                643                  BRA     PRINT_BUFFER
00001706                           644  
00001706                           645  MOVEQ_BUFFER
00001706  1CFC 004D                646                 MOVE.B   #'M',(A6)+
0000170A  1CFC 004F                647                 MOVE.B   #'O', (A6)+  
0000170E  1CFC 0056                648                 MOVE.B   #'V', (A6)+
00001712  1CFC 0045                649                 MOVE.B   #'E', (A6)+
00001716  1CFC 0051                650                 MOVE.B   #'Q', (A6)+
0000171A  1CFC 0020                651                 MOVE.B   #' ', (A6)+
0000171E  4E75                     652                 RTS
00001720                           653  
00001720                           654  DIVU
00001720  4EB9 0000172A            655                  JSR     DIVU_BUFFER
00001726  6000 0310                656                  BRA     PRINT_BUFFER
0000172A                           657  
0000172A                           658  DIVU_BUFFER
0000172A  1CFC 0044                659                 MOVE.B   #'D',(A6)+
0000172E  1CFC 0049                660                 MOVE.B   #'I', (A6)+  
00001732  1CFC 0056                661                 MOVE.B   #'V', (A6)+
00001736  1CFC 0055                662                 MOVE.B   #'U', (A6)+
0000173A  1CFC 0020                663                 MOVE.B   #' ', (A6)+
0000173E  4E75                     664                 RTS  
00001740                           665  OR    
00001740  4EB9 0000174A            666                 JSR     OR_BUFFER
00001746  6000 02F0                667                 BRA     PRINT_BUFFER
0000174A                           668                  
0000174A                           669  OR_BUFFER
0000174A  1CFC 004F                670                 MOVE.B   #'O',(A6)+
0000174E  1CFC 0052                671                 MOVE.B   #'R', (A6)+  
00001752  1CFC 002E                672                 MOVE.B   #'.', (A6)+
00001756                           673                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001756                           674                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001756                           675                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001756  1CFC 0020                676                 MOVE.B   #' ', (A6)+
0000175A  4E75                     677                 RTS   
0000175C                           678  
0000175C                           679  SUB   
0000175C  4EB9 00001766            680                 JSR     SUB_BUFFER
00001762  6000 02D4                681                 BRA     PRINT_BUFFER               
00001766                           682  
00001766                           683  SUB_BUFFER
00001766  1CFC 0053                684                 MOVE.B   #'S',(A6)+
0000176A  1CFC 0055                685                 MOVE.B   #'U', (A6)+  
0000176E  1CFC 0042                686                 MOVE.B   #'B', (A6)+
00001772  1CFC 002E                687                 MOVE.B   #'.', (A6)+
00001776                           688                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001776                           689                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001776                           690                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001776  1CFC 0020                691                 MOVE.B   #' ', (A6)+
0000177A  4E75                     692                 RTS  
0000177C                           693  CMP   
0000177C  4EB9 00001786            694                 JSR     CMP_BUFFER
00001782  6000 02B4                695                 BRA     PRINT_BUFFER
00001786                           696                  
00001786                           697  CMP_BUFFER
00001786  1CFC 0043                698                 MOVE.B   #'C',(A6)+
0000178A  1CFC 004D                699                 MOVE.B   #'M', (A6)+  
0000178E  1CFC 0050                700                 MOVE.B   #'P', (A6)+
00001792  1CFC 002E                701                 MOVE.B   #'.', (A6)+
00001796                           702                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001796                           703                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001796                           704                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001796  1CFC 0020                705                 MOVE.B   #' ', (A6)+
0000179A  4E75                     706                 RTS   
0000179C                           707                 
0000179C                           708  MULS
0000179C  4EB9 000017A6            709                  JSR     MULS_BUFFER
000017A2  6000 0294                710                  BRA     PRINT_BUFFER
000017A6                           711  
000017A6                           712  MULS_BUFFER
000017A6  1CFC 004D                713                 MOVE.B   #'M',(A6)+
000017AA  1CFC 0055                714                 MOVE.B   #'U', (A6)+  
000017AE  1CFC 004C                715                 MOVE.B   #'L', (A6)+
000017B2  1CFC 0053                716                 MOVE.B   #'S', (A6)+
000017B6  1CFC 0020                717                 MOVE.B   #' ', (A6)+
000017BA  4E75                     718                 RTS
000017BC                           719  
000017BC                           720  AND    
000017BC  4EB9 000017C6            721                 JSR     AND_BUFFER
000017C2  6000 0274                722                 BRA     PRINT_BUFFER
000017C6                           723                  
000017C6                           724  AND_BUFFER
000017C6  1CFC 0041                725                 MOVE.B   #'A',(A6)+
000017CA  1CFC 004E                726                 MOVE.B   #'N', (A6)+  
000017CE  1CFC 0044                727                 MOVE.B   #'D', (A6)+
000017D2  1CFC 002E                728                 MOVE.B   #'.', (A6)+
000017D6                           729                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017D6                           730                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017D6                           731                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017D6  1CFC 0020                732                 MOVE.B   #' ', (A6)+
000017DA  4E75                     733                 RTS    
000017DC                           734  
000017DC                           735  ASR     
000017DC  4EB9 000017E6            736                  JSR     ASR_BUFFER
000017E2  6000 0254                737                  BRA     PRINT_BUFFER
000017E6                           738  
000017E6                           739  ASR_BUFFER
000017E6  1CFC 0041                740                 MOVE.B   #'A',(A6)+
000017EA  1CFC 0053                741                 MOVE.B   #'S', (A6)+  
000017EE  1CFC 0052                742                 MOVE.B   #'R', (A6)+
000017F2  1CFC 0020                743                 MOVE.B   #' ', (A6)+
000017F6  4E75                     744                 RTS      
000017F8                           745  
000017F8                           746  ASL     
000017F8  4EB9 00001802            747                  JSR     ASL_BUFFER
000017FE  6000 0238                748                  BRA     PRINT_BUFFER
00001802                           749  
00001802                           750  ASL_BUFFER
00001802  1CFC 0041                751                 MOVE.B   #'A',(A6)+
00001806  1CFC 0053                752                 MOVE.B   #'S', (A6)+  
0000180A  1CFC 004C                753                 MOVE.B   #'L', (A6)+
0000180E  1CFC 0020                754                 MOVE.B   #' ', (A6)+
00001812  4E75                     755                 RTS     
00001814                           756  
00001814                           757  LSL     
00001814  4EB9 0000181E            758                  JSR     LSL_BUFFER
0000181A  6000 021C                759                  BRA     PRINT_BUFFER
0000181E                           760  
0000181E                           761  LSL_BUFFER
0000181E  1CFC 004C                762                 MOVE.B   #'L',(A6)+
00001822  1CFC 0053                763                 MOVE.B   #'S', (A6)+  
00001826  1CFC 004C                764                 MOVE.B   #'L', (A6)+
0000182A  1CFC 0020                765                 MOVE.B   #' ', (A6)+
0000182E  4E75                     766                 RTS     
00001830                           767  
00001830                           768  LSR     
00001830  4EB9 0000183A            769                  JSR     LSR_BUFFER
00001836  6000 0200                770                  BRA     PRINT_BUFFER
0000183A                           771  
0000183A                           772  LSR_BUFFER
0000183A  1CFC 004C                773                 MOVE.B   #'L',(A6)+
0000183E  1CFC 0053                774                 MOVE.B   #'S', (A6)+  
00001842  1CFC 0052                775                 MOVE.B   #'R', (A6)+
00001846  1CFC 0020                776                 MOVE.B   #' ', (A6)+
0000184A  4E75                     777                 RTS       
0000184C                           778                 
0000184C                           779  jmp_mode
0000184C  4EF9 000019A4            780                  JMP     MODE000  ** DN
00001852  4EF9 000019AA            781                  JMP     MODE001  ** AN
00001858  4EF9 000019B2            782                  JMP     MODE010  ** (AN)
0000185E  4EF9 000019BC            783                  JMP     MODE011  ** (AN)+   
00001864  4EF9 000019C6            784                  JMP     MODE100  ** -(AN)
0000186A  4EF9 000019D4            785                  JMP     MODE101  **INVALID
00001870  4EF9 000019DE            786                  JMP     MODE110  **INVALID
00001876  4EF9 000019E8            787                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
0000187C                           788  
0000187C                           789                  
0000187C                           790  insert_num
0000187C                           791                  
0000187C                           792                  ;get number from D3
0000187C  B67C 0000                793                  CMP     #%000,D3       ;0
00001880  6600 000A                794                  BNE     ONE         
00001884  1CFC 0030                795                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
00001888  6000 006E                796                  BRA     FINISHER
0000188C                           797                  
0000188C  B67C 0001                798  ONE             CMP     #%001,D3       ;1
00001890  6600 000A                799                  BNE     TWO 
00001894  1CFC 0031                800                  MOVE.B  #'1',(A6)+
00001898  6000 005E                801                  BRA     FINISHER
0000189C                           802  
0000189C                           803                  
0000189C  B67C 0002                804  TWO             CMP     #%010,D3        ;2
000018A0  6600 000A                805                  BNE     THREE
000018A4  1CFC 0032                806                  MOVE.B  #'2',(A6)+
000018A8  6000 004E                807                  BRA     FINISHER
000018AC                           808                  
000018AC  B67C 0003                809  THREE           CMP     #%011,D3        ;3
000018B0  6600 000A                810                  BNE     FOUR
000018B4  1CFC 0033                811                  MOVE.B  #'3',(A6)+
000018B8  6000 003E                812                  BRA     FINISHER
000018BC                           813                  
000018BC  B67C 0004                814  FOUR            CMP     #%100,D3        ;4
000018C0  6600 000A                815                  BNE     FIVE
000018C4  1CFC 0034                816                  MOVE.B  #'4',(A6)+
000018C8  6000 002E                817                  BRA     FINISHER
000018CC                           818                  
000018CC  B67C 0005                819  FIVE            CMP     #%101,D3        ;5
000018D0  6600 000A                820                  BNE     SIX
000018D4  1CFC 0035                821                  MOVE.B  #'5',(A6)+
000018D8  6000 001E                822                  BRA     FINISHER
000018DC                           823                  
000018DC  B67C 0006                824  SIX             CMP     #%110,D3        ;6
000018E0  6600 000A                825                  BNE     SEVEN
000018E4  1CFC 0036                826                  MOVE.B  #'6',(A6)+
000018E8  6000 000E                827                  BRA     FINISHER
000018EC                           828                  
000018EC  B67C 0007                829  SEVEN           CMP     #%111,D3        ;7
000018F0  1CFC 0037                830                  MOVE.B  #'7',(A6)+
000018F4  6000 0002                831                  BRA     FINISHER
000018F8                           832                  
000018F8                           833  FINISHER                
000018F8                           834                  
000018F8                           835                  ;check D4, do we need to do stuff?
000018F8  B87C 0002                836                  CMP     #%010,D4
000018FC  6600 0008                837                  BNE     POSTINCR
00001900  1CFC 0029                838                  MOVE.B  #')',(A6)+
00001904  4E75                     839                  RTS
00001906                           840                  
00001906  B87C 0003                841  POSTINCR        CMP     #%011,D4
0000190A  6600 000C                842                  BNE     ONEPAREN
0000190E  1CFC 0029                843                  MOVE.B  #')',(A6)+
00001912  1CFC 002B                844                  MOVE.B  #'+',(A6)+
00001916  4E75                     845                  RTS
00001918                           846                  
00001918  B87C 0004                847  ONEPAREN        CMP     #%100,D4
0000191C  6600 0008                848                  BNE     DONE
00001920  1CFC 0029                849                  MOVE.B  #')',(A6)+                
00001924                           850  
00001924  4244                     851                  CLR     D4
00001926  4E75                     852  DONE            RTS
00001928                           853  
00001928                           854          
00001928                           855                 
00001928                           856  bits5to7
00001928  4243                     857                 CLR      D3
0000192A  4EB9 00001ACC            858                 JSR      COPY_OPCODE  // opcode copied to D2
00001930  C47C 0E00                859                 AND      #%0000111000000000, D2
00001934  E09A                     860                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001936  E29A                     861                 ROR.L    #1, D2
00001938  3602                     862                 MOVE.W   D2,D3 // moving isolated bits into d3
0000193A  4E75                     863                 RTS
0000193C                           864                 
0000193C                           865  bits5to8
0000193C  4243                     866                 CLR      D3
0000193E  4EB9 00001ACC            867                 JSR      COPY_OPCODE  // opcode copied to D2
00001944  C47C 0F00                868                 AND      #%0000111100000000, D2
00001948  E09A                     869                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000194A  3602                     870                 MOVE.W   D2,D3 // moving isolated bits into d3
0000194C  4E75                     871                 RTS
0000194E                           872                 
0000194E                           873  bits8to10
0000194E  4243                     874                 CLR      D3
00001950  4EB9 00001ACC            875                 JSR      COPY_OPCODE  // opcode copied to D2
00001956  C47C 01C0                876                 AND      #%0000000111000000, D2
0000195A  EC9A                     877                 ROR.L    #6, D2          // rotate bits so isolated at the end
0000195C  3602                     878                 MOVE.W   D2,D3 // moving isolated bits into d3
0000195E  4E75                     879                 RTS               
00001960                           880             
00001960                           881  bits11to13
00001960  4243                     882                 CLR      D3
00001962  4EB9 00001ACC            883                 JSR      COPY_OPCODE  // opcode copied to D2
00001968  C47C 0038                884                 AND      #%0000000000111000, D2
0000196C  E69A                     885                 ROR.L    #3, D2          // rotate bits so isolated at the end
0000196E  3602                     886                 MOVE.W   D2,D3 // moving isolated bits into d3
00001970  4E75                     887                 RTS
00001972                           888             
00001972                           889  bits14to16
00001972  4243                     890                 CLR      D3
00001974  4EB9 00001ACC            891                 JSR      COPY_OPCODE  // opcode copied to D2
0000197A  C47C 0007                892                 AND      #%0000000000000111, D2
0000197E  3602                     893                 MOVE.W   D2,D3 // moving isolated bits into d3
00001980  4E75                     894                 RTS
00001982                           895  bits11to16
00001982  4243                     896                 CLR      D3
00001984  4EB9 00001ACC            897                 JSR      COPY_OPCODE  // opcode copied to D2
0000198A  C47C 003F                898                 AND      #%0000000000111111, D2
0000198E  3602                     899                 MOVE.W   D2,D3 // moving isolated bits into d3
00001990  4E75                     900                 RTS
00001992                           901  bits1to10
00001992  4243                     902                 CLR      D3
00001994  4EB9 00001ACC            903                 JSR      COPY_OPCODE  // opcode copied to D2
0000199A  C47C FFC0                904                 AND      #%1111111111000000, D2
0000199E  EC9A                     905                 ROR.L    #6, D2
000019A0  3602                     906                 MOVE.W   D2,D3 // moving isolated bits into d3
000019A2  4E75                     907                 RTS
000019A4                           908  ** DN       
000019A4                           909  MODE000         
000019A4  1CFC 0044                910                  MOVE.B  #'D',(A6)+     
000019A8  4E75                     911                  RTS
000019AA                           912  
000019AA                           913  ** AN
000019AA                           914  MODE001         
000019AA  4EB9 000019F0            915                  JSR ADDRESS_BUFFER  
000019B0  4E75                     916                  RTS      
000019B2                           917  
000019B2                           918   ** (AN)
000019B2                           919  MODE010         
000019B2  1CFC 0028                920                  MOVE.B  #'(', (A6)+
000019B6  1CFC 0041                921                  MOVE.B  #'A',(A6)+  
000019BA  4E75                     922                  RTS      
000019BC                           923  
000019BC                           924  ** (AN)+ 
000019BC                           925  MODE011         
000019BC  1CFC 0028                926                  MOVE.B  #'(', (A6)+
000019C0  1CFC 0041                927                  MOVE.B  #'A',(A6)+ 
000019C4  4E75                     928                  RTS       
000019C6                           929  
000019C6                           930   ** -(AN)
000019C6                           931  MODE100         
000019C6  1CFC 002D                932                  MOVE.B  #'-', (A6)+
000019CA  1CFC 0028                933                  MOVE.B  #'(', (A6)+
000019CE  1CFC 0041                934                  MOVE.B  #'A',(A6)+
000019D2  4E75                     935                  RTS
000019D4                           936                  
000019D4                           937  **INVALID               
000019D4                           938  MODE101         
000019D4  1CFC 0028                939                  MOVE.B  #'(', (A6)+
000019D8  1CFC 0041                940                  MOVE.B  #'A',(A6)+ 
000019DC  4E75                     941                  RTS
000019DE                           942                  
000019DE                           943  **INVALID
000019DE                           944  MODE110         
000019DE  1CFC 0028                945                  MOVE.B  #'(', (A6)+
000019E2  1CFC 0041                946                  MOVE.B  #'A',(A6)+
000019E6  4E75                     947                  RTS  
000019E8                           948  
000019E8                           949  ** ABSOLUTE AND IMMEDIATE            
000019E8                           950  MODE111         
000019E8                           951                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
000019E8  4EB9 000019F6            952                 JSR ABSOLUTE_BUFFER  
000019EE  4E75                     953                 RTS            
000019F0                           954                                          
000019F0                           955  ADDRESS_BUFFER
000019F0  1CFC 0041                956                  MOVE.B  #'A',(A6)+ 
000019F4  4E75                     957                  RTS
000019F6                           958                 
000019F6                           959  ABSOLUTE_BUFFER
000019F6  4243                     960                 CLR      D3
000019F8  3604                     961                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000019FA  1CF8 0024                962                 MOVE.B   '$', (A6)+
000019FE  B67C 0000                963                 CMP.W    #%000, D3
00001A02  6700 0010                964                 BEQ      ABSOLUTE_WORD_BUFFER
00001A06  4243                     965                 CLR      D3
00001A08  3604                     966                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001A0A  B67C 0001                967                 CMP.W    #%001, D3
00001A0E  6700 0016                968                 BEQ      ABSOLUTE_LONG_BUFFER
00001A12  4E75                     969                 RTS
00001A14                           970                 
00001A14                           971  ABSOLUTE_WORD_BUFFER
00001A14                           972                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A14                           973                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A14  1CFC 0046                974                         MOVE.B #'F', (A6)+ 
00001A18  1CFC 0046                975                         MOVE.B #'F', (A6)+ 
00001A1C  1CFC 0046                976                         MOVE.B #'F', (A6)+ 
00001A20  1CFC 0046                977                         MOVE.B #'F', (A6)+ 
00001A24  4E75                     978                         RTS       
00001A26                           979                    
00001A26                           980  ABSOLUTE_LONG_BUFFER       
00001A26                           981                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A26                           982                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A26  1CFC 0047                983                         MOVE.B #'G', (A6)+ 
00001A2A  1CFC 0047                984                         MOVE.B #'G', (A6)+ 
00001A2E  1CFC 0047                985                         MOVE.B #'G', (A6)+ 
00001A32  1CFC 0047                986                         MOVE.B #'G', (A6)+
00001A36  4E75                     987                         RTS 
00001A38                           988                                                      
00001A38                           989  
00001A38                           990  PRINT_BUFFER    
00001A38  1CFC 0000                991                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001A3C  43F9 00001C46            992                 LEA      BUFFER, A1
00001A42  303C 000E                993                 MOVE.W   #14,D0
00001A46  4E4F                     994                 TRAP     #15
00001A48  4E75                     995                 RTS
00001A4A                           996                 
00001A4A                           997                 
00001A4A                           998  
00001A4A                           999  INVALID_EA  
00001A4A                          1000                  * TODO: IMPLEMENT
00001A4A                          1001                  *** CLEAR OUT A6
00001A4A                          1002                  ** PUT INVALID MESSAGE INTO A6
00001A4A  6000 F8AD               1003                  BRA EXIT
00001A4E                          1004  INVALID_OP  
00001A4E                          1005                  ** TODO: IMPLEMENT
00001A4E                          1006                 *** CLEAR OUT A6
00001A4E                          1007                  ** PUT INVALID MESSAGE INTO A6
00001A4E  6000 F8A9               1008                  BRA EXIT             
00001A52                          1009                  
00001A52  43F8 123B               1010  NOP                 LEA     NOP_disp,A1          
00001A56  103C 000E               1011                      MOVE.B  #14,D0
00001A5A  4E4F                    1012                      TRAP    #15
00001A5C  6000 F89B               1013                      BRA     EXIT
00001A60                          1014                   
00001A60                          1015  RTS      
00001A60  43F8 12A2               1016                      LEA     RTS_disp,A1          
00001A64  103C 000E               1017                      MOVE.B  #14,D0
00001A68  4E4F                    1018                      TRAP    #15 
00001A6A  6000 F88D               1019                      BRA     EXIT
00001A6E                          1020  JSR      
00001A6E  4DF9 00001C46           1021                      LEA     BUFFER, A6
00001A74  1CFC 004A               1022                      MOVE.B #'J', (A6)+
00001A78  1CFC 0053               1023                      MOVE.B #'S', (A6)+
00001A7C  1CFC 0052               1024                      MOVE.B #'R', (A6)+
00001A80  1CFC 0020               1025                      MOVE.B #' ', (A6)+
00001A84  43F9 00001C46           1026                      LEA     BUFFER, A1
00001A8A                          1027                      ** BITS 10 - 12 MODE       
00001A8A                          1028                      ** BITS 13 - 16 REGISTER
00001A8A  103C 000E               1029                      MOVE.B  #14,D0
00001A8E  4E4F                    1030                      TRAP    #15 
00001A90  6000 F867               1031                      BRA     EXIT
00001A94                          1032                    
00001A94                          1033  MOVEM      
00001A94                          1034                     
00001A94                          1035                      ** SIZE SUBROUTINE
00001A94                          1036                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001A94  C47C 0040               1037                      AND #%0000000001000000,D2 
00001A98                          1038                      * WORD
00001A98  B4BC 00000040           1039                      CMP.L   #%0000000001000000,D2
00001A9E  4EB9 00001AB4           1040                      JSR     MOVEM_W 
00001AA4                          1041                      *LONG
00001AA4  B4BC 00000040           1042                      CMP.L   #%0000000001000000,D2 
00001AAA                          1043                     ** JSR     MOVEM_L
00001AAA  103C 000E               1044                      MOVE.B  #14,D0
00001AAE  4E4F                    1045                      TRAP    #15
00001AB0  6000 F847               1046                      BRA     EXIT 
00001AB4                          1047                      
00001AB4                          1048  MOVEM_W 
00001AB4  43F8 1250               1049                       LEA     MOVEM_disp,A1
00001AB8                          1050                      * PRINT MOVEM
00001AB8  103C 000E               1051                       MOVE.B  #14,D0
00001ABC  4E4F                    1052                       TRAP    #15
00001ABE                          1053          
00001ABE                          1054                      * PRINT WORD PORTION
00001ABE  41F8 12E7               1055                       LEA     size_w, A0
00001AC2  103C 000E               1056                       MOVE.B  #14,D0
00001AC6  4E4F                    1057                       TRAP    #15 
00001AC8                          1058          
00001AC8  6000 F82F               1059                       BRA     EXIT 
00001ACC                          1060       
00001ACC                          1061     
00001ACC                          1062  COPY_OPCODE 
00001ACC                          1063                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001ACC  4242                    1064                       CLR    D2  
00001ACE  3405                    1065                       MOVE.W D5,D2 
00001AD0  4E75                    1066                       RTS  
00001AD2                          1067  
00001AD2                          1068  PRINT_ADDRESS     
00001AD2  4242                    1069                   CLR         D2
00001AD4  143C 0010               1070                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001AD8  220A                    1071                   MOVE.L      A2,D1        
00001ADA  103C 000F               1072                   MOVE.B      #15,D0          
00001ADE  4E4F                    1073                   TRAP        #15            
00001AE0  1CFC 0020               1074                   MOVE.B      #' ', (A6)+
00001AE4  1CFC 0020               1075                   MOVE.B      #' ', (A6)+
00001AE8  1CFC 0020               1076                   MOVE.B      #' ', (A6)+
00001AEC  1CFC 0020               1077                   MOVE.B      #' ', (A6)+
00001AF0  4E75                    1078                   RTS                    
00001AF2                          1079                   
00001AF2                          1080                   
00001AF2                          1081  ***************************
00001AF2                          1082  
00001AF2                          1083  GETSIZE_ADDQ
00001AF2                          1084                   
00001AF2                          1085                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001AF2                          1086                 
00001AF2  4EB8 194E               1087             JSR      bits8to10
00001AF6  B67C 0000               1088             CMP      #%000,D3
00001AFA  6600 000C               1089             BNE      ADDQ_NOTBYTE
00001AFE  4EB9 00001C16           1090             JSR      SIZEISBYTE
00001B04  4243                    1091             CLR      D3
00001B06  4E75                    1092             RTS
00001B08                          1093             
00001B08                          1094  ADDQ_NOTBYTE
00001B08  B67C 0001               1095             CMP      #%001,D3
00001B0C  6600 000C               1096             BNE      ADDQ_NOTWORD
00001B10  4EB9 00001C26           1097             JSR      SIZEISWORD
00001B16  4243                    1098             CLR      D3
00001B18  4E75                    1099             RTS
00001B1A                          1100             
00001B1A                          1101  ADDQ_NOTWORD
00001B1A  B67C 0002               1102             CMP      #%010,D3
00001B1E  6600 FF2A               1103             BNE      INVALID_EA
00001B22  4EB9 00001C36           1104             JSR      SIZEISLONG
00001B28  4243                    1105             CLR      D3
00001B2A  4E75                    1106             RTS
00001B2C                          1107                   
00001B2C                          1108                                   
00001B2C                          1109  ****************************
00001B2C                          1110  
00001B2C                          1111                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001B2C                          1112                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001B2C                          1113                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001B2C                          1114  GETSIZE_ADD
00001B2C  4EB8 194E               1115              JSR     bits8to10
00001B30  B67C 0000               1116              CMP     #%000,D3
00001B34  6600 0010               1117              BNE     ADD_NOTBYTE
00001B38  4EB9 00001C16           1118              JSR     SIZEISBYTE
00001B3E  3C3C 0001               1119              MOVE    #1,D6
00001B42  4243                    1120              CLR     D3
00001B44  4E75                    1121              RTS
00001B46                          1122          
00001B46                          1123  ADD_NOTBYTE 
00001B46  B67C 0001               1124              CMP     #%001,D3
00001B4A  6600 0010               1125              BNE     ADD_NOTWORD
00001B4E  4EB9 00001C26           1126              JSR     SIZEISWORD
00001B54  3C3C 0001               1127              MOVE    #1,D6
00001B58  4243                    1128              CLR     D3
00001B5A  4E75                    1129              RTS
00001B5C                          1130              
00001B5C                          1131  ADD_NOTWORD
00001B5C  B67C 0002               1132              CMP     #%010,D3
00001B60  6600 0010               1133              BNE     ADD_NOTLEFT
00001B64  4EB9 00001C36           1134              JSR     SIZEISLONG
00001B6A  3C3C 0001               1135              MOVE    #1,D6
00001B6E  4243                    1136              CLR     D3
00001B70  4E75                    1137              RTS
00001B72                          1138              
00001B72                          1139  ADD_NOTLEFT     ;check other direction
00001B72  B67C 0004               1140              CMP     #%100,D3
00001B76  6600 0010               1141              BNE     ADD_NOTRIGHTBYTE
00001B7A  4EB9 00001C16           1142              JSR     SIZEISBYTE
00001B80  3C3C 0002               1143              MOVE    #2,D6
00001B84  4243                    1144              CLR     D3
00001B86  4E75                    1145              RTS
00001B88                          1146              
00001B88                          1147  ADD_NOTRIGHTBYTE
00001B88  B67C 0005               1148              CMP     #%101,D3
00001B8C  6600 0010               1149              BNE     ADD_NOTRIGHTWORD
00001B90  4EB9 00001C26           1150              JSR     SIZEISWORD
00001B96  3C3C 0002               1151              MOVE    #2,D6
00001B9A  4243                    1152              CLR     D3
00001B9C  4E75                    1153              RTS
00001B9E                          1154  
00001B9E                          1155  ADD_NOTRIGHTWORD
00001B9E  B67C 0006               1156              CMP     #%110,D3
00001BA2  6600 FEA6               1157              BNE     INVALID_EA
00001BA6  4EB9 00001C36           1158              JSR     SIZEISLONG
00001BAC  3C3C 0002               1159              MOVE    #2,D6
00001BB0  4243                    1160              CLR     D3
00001BB2  4E75                    1161              RTS 
00001BB4                          1162                               
00001BB4                          1163                       
00001BB4                          1164                       
00001BB4                          1165  *****************************                  
00001BB4                          1166  GETSIZE_ADDI
00001BB4  4EB8 194E               1167          JSR     bits8to10
00001BB8  B67C 0000               1168          CMP     #%000,D3
00001BBC  6600 000C               1169          BNE     ADDI_NOTBYTE
00001BC0  4EB9 00001C16           1170          JSR     SIZEISBYTE
00001BC6  4243                    1171          CLR     D3
00001BC8  4E75                    1172          RTS
00001BCA                          1173  
00001BCA                          1174  ADDI_NOTBYTE
00001BCA  B67C 0001               1175          CMP     #%001,D3
00001BCE  6600 000C               1176          BNE     ADDI_NOTWORD
00001BD2  4EB9 00001C26           1177          JSR     SIZEISWORD
00001BD8  4243                    1178          CLR     D3
00001BDA  4E75                    1179          RTS
00001BDC                          1180          
00001BDC                          1181  ADDI_NOTWORD
00001BDC  B67C 0002               1182          CMP     #%010,D3
00001BE0  6600 FE68               1183          BNE     INVALID_EA
00001BE4  4EB9 00001C36           1184          JSR     SIZEISLONG
00001BEA  4243                    1185          CLR     D3
00001BEC  4E75                    1186          RTS
00001BEE                          1187          
00001BEE                          1188                              
00001BEE                          1189                       
00001BEE                          1190  ********************************          
00001BEE                          1191                       
00001BEE                          1192                       
00001BEE                          1193  ********************************                     
00001BEE                          1194  GETSIZE_ADDA
00001BEE  4EB8 194E               1195          JSR     bits8to10
00001BF2  B67C 0003               1196          CMP     #%011,D3
00001BF6  6600 000C               1197          BNE     ADDA_NOTWORD
00001BFA  4EB9 00001C26           1198          JSR     SIZEISWORD
00001C00  4243                    1199          CLR     D3
00001C02  4E75                    1200          RTS
00001C04                          1201          
00001C04                          1202  
00001C04                          1203          
00001C04                          1204  ADDA_NOTWORD
00001C04  B67C 0007               1205          CMP     #%111,D3
00001C08  6600 FE40               1206          BNE     INVALID_EA
00001C0C  4EB9 00001C36           1207          JSR     SIZEISLONG
00001C12  4243                    1208          CLR     D3
00001C14  4E75                    1209          RTS
00001C16                          1210  **********************************        
00001C16                          1211      
00001C16                          1212  SIZEISBYTE
00001C16  1CFC 002E               1213         MOVE.B   #'.',(A6)+
00001C1A  1CFC 0042               1214         MOVE.B   #'B',(A6)+
00001C1E  1CFC 0020               1215         MOVE.B   #' ',(A6)+
00001C22  4243                    1216         CLR      D3
00001C24  4E75                    1217         RTS
00001C26                          1218  
00001C26                          1219  SIZEISWORD    
00001C26  1CFC 002E               1220         MOVE.B   #'.',(A6)+
00001C2A  1CFC 0057               1221         MOVE.B   #'W',(A6)+
00001C2E  1CFC 0020               1222         MOVE.B   #' ',(A6)+
00001C32  4243                    1223         CLR      D3
00001C34  4E75                    1224         RTS
00001C36                          1225                  
00001C36                          1226  SIZEISLONG    
00001C36  1CFC 002E               1227         MOVE.B   #'.',(A6)+
00001C3A  1CFC 004C               1228         MOVE.B   #'L',(A6)+
00001C3E  1CFC 0020               1229         MOVE.B   #' ',(A6)+
00001C42                          1230  
00001C42  4243                    1231         CLR      D3
00001C44  4E75                    1232         RTS
00001C46                          1233                  
00001C46                          1234       
00001C46= 00000001                1235  BUFFER DC.L 1     
00001C4A                          1236      INCLUDE 'helpers.x68'
00001C4A  1019                    1237  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001C4C  4EB9 00001C64           1238                          JSR     sub_breakDownAs     *breaks down ASCII code
00001C52  D280                    1239                          ADD.L   D0,D1               *load that char into D1
00001C54  0C11 0000               1240                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001C58  6700 0006               1241                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001C5C  E989                    1242                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001C5E  60EA                    1243                          BRA     sub_AsToHeLoop      *loops through again
00001C60                          1244                          
00001C60  2E01                    1245  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001C62  4E75                    1246                          RTS
00001C64  B03C 0030               1247  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001C68  6D00 002A               1248                          BLT     as_ERROR                        
00001C6C                          1249                          
00001C6C  B03C 0039               1250                          CMP.B    #$39,D0            *is it an A-F letter?
00001C70  6E00 000C               1251                          BGT     as_LETTER
00001C74                          1252                          
00001C74  6000 0002               1253                          BRA     as_NUMBER
00001C78                          1254                                                 
00001C78  0400 0030               1255  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001C7C  4E75                    1256                          RTS
00001C7E                          1257                          
00001C7E  B03C 0041               1258  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001C82  6D00 0010               1259                          BLT     as_ERROR
00001C86                          1260                          
00001C86  B03C 0046               1261                          CMP.B     #$46, D0
00001C8A  6E00 0008               1262                          BGT     as_ERROR
00001C8E                          1263                          
00001C8E  0400 0037               1264                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001C92  4E75                    1265                          RTS
00001C94                          1266                          
00001C94  43F9 65727200           1267  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001C9A  103C 000D               1268                          MOVE.B  #13,D0
00001C9E  4E4F                    1269                          TRAP    #15  
00001CA0                          1270  sub_StartReadingData    
00001CA0  0801 0000               1271                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001CA4  6600 0006               1272                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001CA8                          1273                          
00001CA8  7E00                    1274                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001CAA  4E75                    1275  srdFinish               RTS
00001CAC                          1276  
00001CAC  43F8 1174               1277  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CB0  103C 000E               1278                          MOVE.B  #14,D0
00001CB4  4E4F                    1279                          TRAP    #15
00001CB6                          1280                          
00001CB6  7E01                    1281                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CB8  60F0                    1282                          BRA     srdFinish
00001CBA                          1283  sub_EndReadingData  
00001CBA  0801 0000               1284                          BTST    #0,D1               *checks if LSB is 1, 
00001CBE  6600 0018               1285                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001CC2                          1286                          
00001CC2  B5CB                    1287                          CMP.L   A3,A2               *end address must be greater than start address
00001CC4  6E00 0004               1288                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001CC8                          1289  
00001CC8  4E75                    1290  erdFinish               RTS
00001CCA                          1291  
00001CCA  43F8 119B               1292  erdFailAddrOrder        LEA     addr_order_check,A1
00001CCE  103C 000E               1293                          MOVE.B  #14,D0
00001CD2  4E4F                    1294                          TRAP    #15
00001CD4                          1295                          
00001CD4  7E01                    1296                          MOVE.L  #1,D7
00001CD6  60F0                    1297                          BRA     erdFinish
00001CD8                          1298  
00001CD8  43F8 1174               1299  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CDC  103C 000E               1300                          MOVE.B  #14,D0
00001CE0  4E4F                    1301                          TRAP    #15
00001CE2                          1302                          
00001CE2  7E01                    1303                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CE4  60E2                    1304                          BRA     erdFinish
00001CE6                          1305                          
00001CE6                          1306  
00001CE6                          1307  
00001CE6                          1308  
00001CE6                          1309  
00001CE6                          1310  
00001CE6                          1311  
00001CE6                          1312  
00001CE6                          1313  
00001CE6                          1314  -------------------- end include --------------------
00001CE6                          1315      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     19F6
ABSOLUTE_LONG_BUFFER  1A26
ABSOLUTE_WORD_BUFFER  1A14
ADD                 149C
ADDA                1476
ADDA_BUFFER         1480
ADDA_DISP           125A
ADDA_NOTWORD        1C04
ADDI                1540
ADDI_BUFFER         15C8
ADDI_DES            1564
ADDI_DISP           125F
ADDI_NOTBYTE        1BCA
ADDI_NOTWORD        1BDC
ADDI_SRC            1556
ADDQ                16DC
ADDQ_BUFFER         16E4
ADDQ_DISP           1264
ADDQ_NOTBYTE        1B08
ADDQ_NOTWORD        1B1A
ADDRESS_BUFFER      19F0
ADDR_ODDBIT_MSG     1174
ADDR_ORDER_CHECK    119B
ADD_BUFFER          14A6
ADD_DEST            151E
ADD_DIRECTION_REVERSED  14D8
ADD_DISP            1256
ADD_DONE            14F2
ADD_NOTBYTE         1B46
ADD_NOTLEFT         1B72
ADD_NOTRIGHTBYTE    1B88
ADD_NOTRIGHTWORD    1B9E
ADD_NOTWORD         1B5C
ADD_SRC             14FA
AND                 17BC
AND_BUFFER          17C6
AND_DISP            127F
ASL                 17F8
ASL_BUFFER          1802
ASL_DISP            128E
ASR                 17DC
ASR_BUFFER          17E6
ASR_DISP            1292
AS_ERROR            1C94
AS_LETTER           1C7E
AS_NUMBER           1C78
ATHENDLOOP          1C60
BACKSLASHSIGH       12DC
BCC_DISP            12A6
BGT_DISP            12AA
BITS11TO13          1960
BITS11TO16          1982
BITS14TO16          1972
BITS1TO10           1992
BITS5TO7            1928
BITS5TO8            193C
BITS8TO10           194E
BLE_DISP            12AE
BUFFER              1C46
CLOSEPAREN          12E0
CLR_DISP            127B
CMP                 177C
CMP_BUFFER          1786
CODE0000            135E
CODE0001            1372
CODE0010            1376
CODE0011            137A
CODE0100            137E
CODE0101            13B2
CODE0110            13B8
CODE0111            13BC
CODE1000            13C2
CODE1001            13D4
CODE1010            13DA
CODE1011            13DE
CODE1100            13E4
CODE1101            13F6
CODE1110            1442
CODE1111            1472
COMMASIGN           12DA
COPY_OPCODE         1ACC
CR                  D
DIVU                1720
DIVU_BUFFER         172A
DIVU_DISP           1272
DOLLARSIGN          12D4
DONE                1926
ENDTEST_MSG         11EF
ERDFAILADDRODDB     1CD8
ERDFAILADDRORDER    1CCA
ERDFINISH           1CC8
EXIT                12F9
FINISHER            18F8
FIVE                18CC
FOUR                18BC
GETSIZE_ADD         1B2C
GETSIZE_ADDA        1BEE
GETSIZE_ADDI        1BB4
GETSIZE_ADDQ        1AF2
HEXATABLE           12B2
INPUT_BUFFER        12EE
INSERT_NUM          187C
INVALIDEA_DISP      1233
INVALID_DISP        122E
INVALID_EA          1A4A
INVALID_OP          1A4E
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            184C
JMP_TABLE           12FE
JSR                 1A6E
JSR_DISP            129E
LEA                 15E4
LEA_BUFFER          1606
LEA_DEST            16B8
LEA_DISP            1277
LEA_SRC             1618
LF                  A
LINEBREAK           122B
LINECOUNT           12ED
LOCATION_ENDDATA    12F4
LOCATION_END_MSG    1157
LOCATION_STARTDATA  12F0
LOCATION_START_MSG  1138
LSL                 1814
LSL_BUFFER          181E
LSL_DISP            1286
LSR                 1830
LSR_BUFFER          183A
LSR_DISP            128A
MAIN_LOOP           108E
MINUSSIGN           12D8
MODE000             19A4
MODE001             19AA
MODE010             19B2
MODE011             19BC
MODE100             19C6
MODE101             19D4
MODE110             19DE
MODE111             19E8
MOVEA_DISP          1244
MOVEM               1A94
MOVEM_DISP          1250
MOVEM_W             1AB4
MOVEQ               16FC
MOVEQ_BUFFER        1706
MOVEQ_DISP          124A
MOVE_DISP           123F
MULS                179C
MULS_BUFFER         17A6
MULS_DISP           126D
NOP                 1A52
NOP_DISP            123B
ONE                 188C
ONEPAREN            1918
OPENPAREN           12DE
OR                  1740
OR_BUFFER           174A
OR_DISP             1283
PAUSE_MSG           11D5
PLUSSIGN            12D6
POSTINCR            1906
POUNDSIGN           12D2
PRINT_ADDRESS       1AD2
PRINT_BUFFER        1A38
ROL_DISP            1296
ROR_DISP            129A
RTS                 1A60
RTS_DISP            12A2
SEVEN               18EC
SIX                 18DC
SIZEISBYTE          1C16
SIZEISLONG          1C36
SIZEISWORD          1C26
SIZE_B              12E4
SIZE_L              12EA
SIZE_W              12E7
SPACE               12E2
SRDFAILADDRODDB     1CAC
SRDFINISH           1CAA
START               1000
SUB                 175C
SUB_ASTOHELOOP      1C4A
SUB_BREAKDOWNAS     1C64
SUB_BUFFER          1766
SUB_DISP            1269
SUB_ENDREADINGDATA  1CBA
SUB_STARTREADINGDATA  1CA0
TABLE_LENGTH        12F8
THREE               18AC
TWO                 189C
WELCOME_MSG         10D4
