00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2017 10:40:16 AM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C2              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001126             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012DC             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001CDE             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 00001219             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001D34             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001145             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012DC             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001CDE             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 00001219             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001D4E             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012EC             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001CDA             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C                            80                   
0000109C                            81                   ;MOVE.W  (A2), D3
0000109C                            82  
0000109C                            83                   * TEST OPCODES
0000109C                            84                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109C                            85                   ;MOVE.W  #$4E71,D3 * NOP
0000109C                            86                   ; MOVE.W  #$4E75,D3 * RTS
0000109C                            87                   ; MOVE.W  #$4EB0,D3 * JSR
0000109C  363C 0642                 88                    MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
000010A0                            89                   ;MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
000010A0                            90                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
000010A0                            91                   ;MOVE.W  #$D64A, D3  * ADD.W A2,D3
000010A0                            92                    ; MOVE.W    #$5613, D3    *ADDQ.B #$3, (A3)
000010A0                            93                   ; MOVE.W     #$7E70, D3 *MOVEQ
000010A0                            94                   ; MOVE.W     #$80C0, D3 *DIVU
000010A0                            95                   ; MOVE.W     #$8000, D3 * OR
000010A0                            96                   ; MOVE.W        #$9000, D3 * SUB
000010A0                            97                   ; MOVE.W        #$B000, D3 * CMP
000010A0                            98                   ; MOVE.W        #$C1C0, D3 * MULS
000010A0                            99                   ; MOVE.W        #$C000, D3 * AND
000010A0                           100                   ; MOVE.W        #$E0F8, D3  *ASR
000010A0                           101                   ; MOVE.W        #$E1E2, D3  *ASL
000010A0                           102                   ; MOVE.W        #$E393, D3  *LSL
000010A0                           103                   ; MOVE.W        #$E2DC, D3  *LSR
000010A0                           104  
000010A0  4EB9 00001B00            105                   JSR    PRINT_ADDRESS
000010A6  544A                     106                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010A8  3A03                     107                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AA  183C 000C                108                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010AE  E86B                     109                   LSR.W   D4,D3       *Move the bits
000010B0  C6FC 0006                110                   MULU    #6,D3       *Form offset     
000010B4  4EB0 3000                111                   JSR     0(A0,D3)   *Jump indirect with index
000010B8  4EB9 00001B20            112                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010BE                           113                   
000010BE                           114                   ;CMP     A3,A2
000010BE                           115                   ;BGT     EXIT
000010BE                           116                   ;BRA     MAIN_LOOP
000010BE                           117                   
000010BE  6000 0227                118                   BRA      EXIT
000010C2                           119                                  
000010C2                           120      INCLUDE 'definitions.x68'
000010C2                           121  
000010C2  =0000000D                122  CR              EQU     $0D         carriage return
000010C2  =0000000A                123  LF              EQU     $0A         line feed
000010C2= 43 53 53 20 34 32 ...    124  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010E6= 42 79 20 54 65 61 ...    125                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001126= 45 6E 74 65 72 20 ...    126  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001145= 45 6E 74 65 72 20 ...    127  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001162= 41 64 64 72 65 73 ...    128  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
00001189= 45 6E 64 69 6E 67 ...    129  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C3= 50 72 65 73 73 20 ...    130  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011DD= 52 65 61 63 68 65 ...    131  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011F8= 54 72 79 20 61 6E ...    132                      DC.B    'Try another location? (yes/no): ',0
00001219= 0D 0A 00                 133  linebreak           DC.B    CR,LF,0
0000121C                           134                      
0000121C= 44 41 54 41 00           135  Invalid_disp        DC.B    'DATA',0
00001221= 57 52 4F 4E 47 45 ...    136  InvalidEA_disp      DC.B    'WRONGEA',0
00001229                           137  
00001229= 4E 4F 50 00              138  NOP_disp            DC.B    'NOP',0
0000122D= 4D 4F 56 45 00           139  MOVE_disp           DC.B    'MOVE',0
00001232= 4D 4F 56 45 41 00        140  MOVEA_disp          DC.B    'MOVEA',0
00001238= 4D 4F 56 45 51 00        141  MOVEQ_disp          DC.B    'MOVEQ',0
0000123E= 4D 4F 56 45 4D 00        142  MOVEM_disp          DC.B    'MOVEM',0
00001244= 41 44 44 00              143  ADD_disp            DC.B    'ADD',0
00001248= 41 44 44 41 00           144  ADDA_disp           DC.B    'ADDA',0
0000124D= 41 44 44 49 00           145  ADDI_disp           DC.B    'ADDI',0
00001252= 41 44 44 51 00           146  ADDQ_disp           DC.B    'ADDQ',0
00001257= 53 55 42 00              147  SUB_disp            DC.B    'SUB',0
0000125B= 4D 55 4C 53 00           148  MULS_disp           DC.B    'MULS',0
00001260= 44 49 56 55 00           149  DIVU_disp           DC.B    'DIVU',0
00001265= 4C 45 41 00              150  LEA_disp            DC.B    'LEA',0
00001269= 43 4C 52 00              151  CLR_disp            DC.B    'CLR',0
0000126D= 41 4E 44 00              152  AND_disp            DC.B    'AND',0
00001271= 4F 52 00                 153  OR_disp             DC.B    'OR',0
00001274= 4C 53 4C 00              154  LSL_disp            DC.B    'LSL',0
00001278= 4C 53 52 00              155  LSR_disp            DC.B    'LSR',0
0000127C= 41 53 4C 00              156  ASL_disp            DC.B    'ASL',0
00001280= 41 53 52 00              157  ASR_disp            DC.B    'ASR',0
00001284= 52 4F 4C 00              158  ROL_disp            DC.B    'ROL',0
00001288= 52 4F 52 00              159  ROR_disp            DC.B    'ROR',0
0000128C= 4A 53 52 00              160  JSR_disp            DC.B    'JSR',0
00001290= 52 54 53 00              161  RTS_disp            DC.B    'RTS',0
00001294= 42 43 43 00              162  BCC_disp            DC.B    'BCC',0
00001298= 42 47 54 00              163  BGT_disp            DC.B    'BGT',0    
0000129C= 42 4C 45 00              164  BLE_disp            DC.b    'BLE',0
000012A0                           165  
000012A0                           166  
000012A0= 30 00                    167  hexaTable               DC.B    '0',0
000012A2= 31 00                    168                          DC.B    '1',0
000012A4= 32 00                    169                          DC.B    '2',0
000012A6= 33 00                    170                          DC.B    '3',0
000012A8= 34 00                    171                          DC.B    '4',0
000012AA= 35 00                    172                          DC.B    '5',0
000012AC= 36 00                    173                          DC.B    '6',0
000012AE= 37 00                    174                          DC.B    '7',0
000012B0= 38 00                    175                          DC.B    '8',0
000012B2= 39 00                    176                          DC.B    '9',0
000012B4= 41 00                    177                          DC.B    'A',0
000012B6= 42 00                    178                          DC.B    'B',0
000012B8= 43 00                    179                          DC.B    'C',0
000012BA= 44 00                    180                          DC.B    'D',0
000012BC= 45 00                    181                          DC.B    'E',0
000012BE= 46 00                    182                          DC.B    'F',0
000012C0= 23 00                    183  poundsign               DC.B    '#',0
000012C2= 24 00                    184  dollarsign              DC.B    '$',0
000012C4= 2B 00                    185  plussign                DC.B    '+',0
000012C6= 2D 00                    186  minussign               DC.B    '-',0
000012C8= 2C 00                    187  commasign               DC.B    ',',0
000012CA= 2F 00                    188  backslashsigh           DC.B    '/',0
000012CC= 28 00                    189  openparen               DC.B    '(',0
000012CE= 29 00                    190  closeparen              DC.B    ')',0
000012D0= 20 00                    191  space                   DC.B    ' ',0   
000012D2= 2E 42 00                 192  size_b                  DC.B    '.B',0
000012D5= 2E 57 00                 193  size_w                  DC.B    '.W',0        
000012D8= 2E 4C 00                 194  size_l                  DC.B    '.L',0
000012DB                           195  
000012DB                           196  linecount               DS.B    1       *storeage for lines on a screen
000012DC= 01                       197  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012DE                           198  location_startData      DS.L    1       *location on where to start reading data
000012E2                           199  location_endData        DS.L    1       *location on where to end reading data
000012E6                           200  table_length            DS.B    1       *Number of spaces in the table to print to console
000012E7                           201  
000012E7                           202  
000012E7                           203  -------------------- end include --------------------
000012E7                           204             
000012E7                           205  EXIT                 
000012E8  FFFF FFFF                206         SIMHALT   
000012EC                           207  
000012EC                           208  
000012EC                           209  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012EC  4EF9 0000134C            210  jmp_table      JMP         code0000
000012F2                           211                  *ADDI
000012F2                           212  
000012F2  4EF9 00001360            213                 JMP         code0001
000012F8                           214                 *MOVE
000012F8                           215                 *MOVEA
000012F8                           216  
000012F8  4EF9 00001366            217                 JMP         code0010
000012FE                           218  
000012FE  4EF9 00001366            219                 JMP         code0011
00001304                           220  
00001304  4EF9 00001366            221                 JMP         code0100
0000130A                           222                             
0000130A  4EF9 0000139A            223                 JMP         code0101
00001310                           224                 * ADDQ
00001310                           225                  
00001310                           226        
00001310  4EF9 0000139E            227                 JMP         code0110
00001316                           228                 * BCC
00001316                           229                 * BGT
00001316                           230                 * BLE
00001316                           231                 
00001316  4EF9 000013A2            232                 JMP         code0111
0000131C                           233                 * MOVEQ
0000131C                           234  
0000131C  4EF9 000013A6            235                 JMP         code1000
00001322                           236                 * DIVU
00001322                           237                 * OR
00001322                           238  
00001322  4EF9 000013B8            239                 JMP         code1001
00001328                           240                  *SUB
00001328  4EF9 000013BC            241                 JMP         code1010
0000132E                           242                 
0000132E  4EF9 000013C0            243                 JMP         code1011
00001334                           244                 * CMP
00001334                           245                 
00001334  4EF9 000013C4            246                 JMP         code1100
0000133A                           247                 * MULS
0000133A                           248                 * AND
0000133A                           249          
0000133A  4EF9 000013D6            250                 JMP         code1101
00001340                           251                 *ADD
00001340                           252                 *ADDA
00001340  4EF9 00001422            253                 JMP         code1110
00001346                           254                 * ASR
00001346                           255                 * ASL
00001346                           256                 * LSL
00001346                           257                 * LSR
00001346                           258                 * ROL
00001346                           259                 * ROR
00001346                           260  
00001346  4EF9 00001452            261                 JMP         code1111
0000134C                           262  
0000134C                           263  
0000134C                           264  code0000      
0000134C  4EB9 00001958            265                 JSR          bits5to8 // RETURNS INTO D3
00001352  B6BC 00000006            266                 CMP.L        #%0110, D3
00001358  6600 070C                267                 BNE          INVALID_OP
0000135C  6000 01B8                268                 BRA          ADDI  
00001360                           269  
00001360                           270  code0001      
00001360  4EB9 00001456            271                 JSR   MOVE_B
00001366                           272                 *MOVE.B
00001366                           273  
00001366                           274  code0010        
00001366                           275                  * MOVE.L
00001366                           276                  * MOVEA.L
00001366                           277  code0011        
00001366                           278                  *MOVEA.W
00001366                           279                  *MOVE.W
00001366                           280  
00001366                           281  code0100       
00001366  4EB9 00001AFA            282                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000136C                           283                  
0000136C                           284                 *NOP
0000136C  C47C 0FFF                285                 AND     #%0000111111111111,D2
00001370  B4BC 00000E71            286                 CMP.L   #%000111001110001, D2
00001376  6700 0708                287                 BEQ     NOP
0000137A                           288                 
0000137A                           289                 *RTS
0000137A  C47C 0FFF                290                 AND     #%0000111111111111,D2
0000137E  B4BC 00000E75            291                 CMP.L   #%0000111001110101, D2
00001384  6700 0708                292                 BEQ     RTS
00001388                           293  
00001388                           294                 *JSR
00001388  C47C 0FC0                295                 AND     #%0000111111000000,D2
0000138C  B4BC 00000E80            296                 CMP.L   #%0000111010000000,D2
00001392  6700 0708                297                 BEQ     JSR
00001396                           298                 
00001396                           299                 * MOVEM
00001396                           300                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001396                           301                ** AND     #%0000111110000000,D2
00001396                           302                 * DATA REGISTER
00001396                           303                ** CMP.L   #%0000100010000000, D2
00001396                           304                 ** JSR      MOVEM
00001396                           305                 * ADDRESS REGISTER (DECREMENTED)
00001396                           306                 ** CMP.L  #%0000110010000000, D2
00001396                           307                 ** JSR    MOVEM
00001396                           308                  
00001396                           309                  ** TO DO: BRANCH IF INVALID OPCODE
00001396                           310                  *LEA - if it's not the top codes, it's LEA
00001396  6000 0220                311                  BRA     LEA
0000139A                           312  code0101      
0000139A                           313  
0000139A  6000 0306                314                  BRA   ADDQ
0000139E                           315  
0000139E  6000 06C6                316  code0110        BRA       INVALID_OP
000013A2                           317  
000013A2                           318  code0111       
000013A2  6000 0374                319                  BRA      MOVEQ
000013A6                           320  
000013A6                           321  code1000      
000013A6  4EB9 0000196A            322                  JSR        bits8to10
000013AC  B67C 0003                323                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013B0  6700 038A                324                  BEQ        DIVU
000013B4  6000 03A6                325                  BRA        OR       ** OTHERWISE OR
000013B8                           326                  
000013B8                           327  
000013B8                           328  code1001       
000013B8  6000 03BE                329                 BRA        SUB
000013BC  6000 06A8                330  code1010       BRA       INVALID_OP
000013C0                           331  
000013C0                           332  code1011       
000013C0  6000 03D6                333                 BRA         CMP
000013C4                           334  
000013C4                           335  code1100      
000013C4  4EB9 0000196A            336                  JSR        bits8to10
000013CA  B67C 0007                337                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013CE  6700 03E8                338                  BEQ        MULS
000013D2  6000 0404                339                  BRA        AND       ** OTHERWISE AND
000013D6                           340  
000013D6                           341  code1101       
000013D6  4EB9 00001AFA            342                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013DC                           343                 *ADDA
000013DC  4EB9 0000196A            344                 JSR      bits8to10
000013E2  B67C 0003                345                 CMP      #%011, D3  ** WORD
000013E6  6700 0076                346                 BEQ      ADDA
000013EA  B67C 0007                347                 CMP      #%111, D3   ** LONG
000013EE  6700 006E                348                 BEQ      ADDA
000013F2                           349                 
000013F2                           350                 *ADD
000013F2  B67C 0000                351                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
000013F6  6700 008A                352                 BEQ      ADD
000013FA  B67C 0001                353                 CMP      #%001, D3   ** WORD TO DATA REGISTER
000013FE  6700 0082                354                 BEQ      ADD
00001402  B67C 0002                355                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001406  6700 007A                356                 BEQ      ADD
0000140A  B67C 0004                357                 CMP      #%100, D3   ** BYTE TO EA
0000140E  6700 0072                358                 BEQ      ADD
00001412  B67C 0005                359                 CMP      #%101, D3   ** WORD TO EA
00001416  6700 006A                360                 BEQ      ADD
0000141A  B67C 0006                361                 CMP      #%110, D3   ** LONG TO EA
0000141E  6700 0062                362                 BEQ      ADD
00001422                           363                 
00001422                           364  
00001422                           365  code1110       
00001422                           366                  * ASR
00001422  4EB9 000019AE            367                  JSR     bits1to10
00001428  B67C 0383                368                  CMP     #%1110000011,D3
0000142C  6700 03CA                369                  BEQ     ASR
00001430                           370                  
00001430                           371                  * ASL
00001430  B67C 0387                372                  CMP     #%1110000111,D3
00001434  6700 03DE                373                  BEQ     ASL
00001438                           374                  
00001438                           375                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001438                           376                  * LSL
00001438  4244                     377                  CLR     D4
0000143A  2803                     378                  MOVE.L  D3,D4
0000143C  C8BC 00A98671            379                  AND.L   #11110001,D4
00001442  B87C 01C7                380                  CMP     #%111000111,D4
00001446  6700 03E8                381                  BEQ     LSL
0000144A                           382                  
0000144A                           383                  * LSR
0000144A  B67C 038B                384                  CMP     #%1110001011,D3
0000144E  6700 03FC                385                  BEQ     LSR
00001452                           386                  
00001452                           387                  * ROL
00001452                           388                  
00001452                           389                  * ROR
00001452                           390  
00001452  6000 0612                391  code1111       BRA      INVALID_OP
00001456                           392  
00001456                           393  MOVE_B
00001456  4EB9 0000145C            394                 JSR     MOVEB_BUFFER
0000145C                           395  MOVEB_BUFFER
0000145C  4E71                     396                  NOP              
0000145E                           397  * ----------------------------------
0000145E                           398  
0000145E                           399  ADDA    
0000145E  4EB9 00001466            400                 JSR     ADDA_BUFFER
00001464  4E75                     401                 RTS
00001466                           402                  
00001466                           403  ADDA_BUFFER
00001466  1CFC 0041                404                 MOVE.B   #'A',(A6)+
0000146A  1CFC 0044                405                 MOVE.B   #'D', (A6)+  
0000146E  1CFC 0044                406                 MOVE.B   #'D', (A6)+
00001472  1CFC 0041                407                 MOVE.B   #'A', (A6)+
00001476  4EB9 00001C82            408                 JSR      GETSIZE_ADDA
0000147C  1CFC 0020                409                 MOVE.B   #' ', (A6)+
00001480  4E75                     410                 RTS
00001482                           411                 
00001482                           412                 
00001482                           413                 
00001482                           414  *********************************************               
00001482                           415  ADD    
00001482  4EB9 0000148A            416                 JSR     ADD_BUFFER
00001488  4E75                     417                 RTS
0000148A                           418                  
0000148A                           419  ADD_BUFFER
0000148A  1CFC 0041                420                 MOVE.B   #'A',(A6)+
0000148E  1CFC 0044                421                 MOVE.B   #'D', (A6)+  
00001492  1CFC 0044                422                 MOVE.B   #'D', (A6)+
00001496  4EB9 00001BC0            423                 JSR      GETSIZE_ADD
0000149C                           424                 
0000149C                           425                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
0000149C  BC7C 0001                426                 CMP      #1,D6
000014A0  6600 0018                427                 BNE      ADD_DIRECTION_REVERSED
000014A4  4EB9 000014D0            428                 JSR      ADD_SRC
000014AA  1CFC 002C                429                 MOVE.B   #',', (A6)+
000014AE  1CFC 0020                430                 MOVE.B   #' ', (A6)+
000014B2  4EB9 000014F4            431                 JSR      ADD_DEST
000014B8  4E75                     432                 RTS
000014BA                           433                 
000014BA                           434                 
000014BA                           435  ADD_DIRECTION_REVERSED
000014BA  4246                     436                 CLR      D6
000014BC  4EB9 000014F4            437                 JSR      ADD_DEST
000014C2  1CFC 002C                438                 MOVE.B   #',', (A6)+
000014C6  1CFC 0020                439                 MOVE.B   #' ', (A6)+
000014CA  4EB9 000014D0            440                 JSR      ADD_SRC             
000014D0                           441                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014D0                           442                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014D0                           443                 
000014D0                           444  ***********************************************        
000014D0                           445  
000014D0                           446  
000014D0                           447  
000014D0                           448  ****************************************************************************************
000014D0                           449  ADD_SRC
000014D0                           450  
000014D0  4EB9 0000197C            451                  JSR    bits11to13
000014D6  3803                     452                  MOVE   D3,D4
000014D8  41F9 00001868            453                  LEA     jmp_mode,A0    *Index into the table
000014DE  C6FC 0006                454                  MULU   #6,D3
000014E2  4EB0 3000                455                  JSR    0(A0,D3)     
000014E6  4EB9 0000198E            456                  JSR    bits14to16
000014EC  4EB9 00001898            457                  JSR    insert_num
000014F2  4E75                     458                  RTS
000014F4                           459  
000014F4                           460  ADD_DEST
000014F4  363C 0000                461                  MOVE.W #%000,D3     ;Can only have a data register.
000014F8  3803                     462                  MOVE   D3,D4
000014FA  41F9 00001868            463                  LEA     jmp_mode,A0    *Index into the table
00001500  C6FC 0006                464                  MULU    #6,D3       *Form offset     
00001504  4EB0 3000                465                  JSR     0(A0,D3)   *Jump indirect with index
00001508                           466                  
00001508  4EB9 00001944            467                  JSR     bits5to7
0000150E  4EB9 00001898            468                  JSR     insert_num
00001514  4E75                     469                  RTS
00001516                           470  
00001516                           471  ADDI
00001516  4EB9 0000159C            472                  JSR     ADDI_BUFFER
0000151C  4EB9 0000152A            473                  JSR     ADDI_SRC
00001522  4EB9 00001538            474                  JSR     ADDI_DES
00001528  4E75                     475                  RTS
0000152A                           476                  
0000152A                           477  ADDI_SRC                        
0000152A  1CFC 0023                478                  MOVE.B  #'#', (A6)+
0000152E  1CFC 002C                479                  MOVE.B  #',', (A6)+
00001532  1CFC 0020                480                  MOVE.B  #' ', (A6)+
00001536  4E75                     481                  RTS
00001538                           482                    ** TODO: IMPLEMENT THIS IN EA
00001538                           483                  ** Immediate field—Data immediately following the instruction.
00001538                           484                  **If size = 00, the data is the low-order byte of the immediate word.
00001538                           485                  **If size = 01, the data is the entire immediate word.
00001538                           486                  **If size = 10, the data is the next two immediate words. 
00001538                           487  ADDI_DES
00001538                           488                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001538                           489                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001538  4EB9 0000197C            490                 JSR      bits11to13
0000153E  B67C 0001                491                 CMP      #%001, D3 **AN
00001542  6700 051E                492                 BEQ      INVALID_EA
00001546  B67C 0005                493                 CMP      #%101, D3 **COMPLICATED
0000154A  6700 0516                494                 BEQ      INVALID_EA
0000154E  B67C 0006                495                 CMP      #%110, D3 **COMPLICATED
00001552  6700 050E                496                 BEQ      INVALID_EA
00001556                           497                 
00001556  4EB9 0000199E            498                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000155C  B67C 003C                499                 CMP      #%111100,D3 // immediate data
00001560  6700 0500                500                 BEQ      INVALID_EA
00001564  B67C 003A                501                 CMP      #%111010,D3 // complicated
00001568  6700 04F8                502                 BEQ      INVALID_EA
0000156C  B67C 003B                503                 CMP      #%111011,D3 // complicated
00001570  6700 04F0                504                 BEQ      INVALID_EA
00001574                           505                 
00001574  4EB9 0000197C            506                 JSR      bits11to13 ** grab bits to jump with\
0000157A  3803                     507                 MOVE     D3,D4
0000157C  41F9 00001868            508                 LEA     jmp_mode,A0    *Index into the table
00001582  C6FC 0006                509                 MULU    #6,D3       *Form offset     
00001586  4EB0 3000                510                 JSR     0(A0,D3)   *Jump indirect with index
0000158A                           511                 
0000158A  4243                     512                 CLR     D3
0000158C  4EB9 0000198E            513                 JSR     bits14to16
00001592  4EB9 00001898            514                 JSR     insert_num
00001598  4244                     515                 CLR     D4
0000159A                           516                 
0000159A  4E75                     517                 RTS
0000159C                           518                 
0000159C                           519                             
0000159C                           520  ADDI_BUFFER
0000159C  1CFC 0041                521                 MOVE.B   #'A',(A6)+
000015A0  1CFC 0044                522                 MOVE.B   #'D', (A6)+  
000015A4  1CFC 0044                523                 MOVE.B   #'D', (A6)+
000015A8  1CFC 0049                524                 MOVE.B   #'I', (A6)+
000015AC                           525                 
000015AC  4EB9 00001C48            526                 JSR      GETSIZE_ADDI
000015B2                           527                 
000015B2                           528                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015B2                           529                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015B2  1CFC 0020                530                 MOVE.B   #' ', (A6)+
000015B6  4E75                     531                 RTS
000015B8                           532                              
000015B8                           533  LEA
000015B8  4EB9 0000196A            534                 JSR      bits8to10   // 1 1 1
000015BE  B47C 0007                535                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015C2  6600 04A2                536                 BNE      INVALID_OP
000015C6  4EB9 000015DA            537                 JSR      LEA_BUFFER
000015CC  4EB9 000015EC            538                 JSR      LEA_SRC
000015D2  4EB9 0000167E            539                 JSR      LEA_DEST
000015D8  4E75                     540                 RTS
000015DA                           541                 
000015DA                           542  LEA_BUFFER 
000015DA  1CFC 004C                543                 MOVE.B   #'L',(A6)+
000015DE  1CFC 0045                544                 MOVE.B   #'E', (A6)+  
000015E2  1CFC 0041                545                 MOVE.B   #'A', (A6)+
000015E6  1CFC 0020                546                 MOVE.B   #' ', (A6)+
000015EA  4E75                     547                 RTS
000015EC                           548            
000015EC                           549  LEA_SRC
000015EC                           550              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
000015EC  4EB9 0000197C            551              JSR      bits11to13  // source mode - D3
000015F2  B67C 0000                552              CMP      #%000, D3
000015F6  6700 046A                553              BEQ      INVALID_EA
000015FA  B67C 0001                554              CMP      #%001, D3
000015FE  6700 0462                555              BEQ      INVALID_EA
00001602  B67C 0003                556              CMP      #%011, D3
00001606  6700 045A                557              BEQ      INVALID_EA
0000160A  B67C 0004                558              CMP      #%100, D3
0000160E  6700 0452                559              BEQ      INVALID_EA
00001612  B67C 0005                560              CMP      #%101, D3
00001616  6700 044A                561              BEQ      INVALID_EA
0000161A  B67C 0006                562              CMP      #%110, D3
0000161E  6700 0442                563              BEQ      INVALID_EA
00001622                           564  
00001622                           565              
00001622                           566              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00001622  4EB9 0000198E            567              JSR      bits14to16 // source register - d4
00001628  B67C 0004                568              CMP      #%100, D3
0000162C  6700 0434                569              BEQ      INVALID_EA
00001630  B67C 0002                570              CMP      #%010, D3
00001634  6700 042C                571              BEQ      INVALID_EA
00001638  B67C 0003                572              CMP      #%011, D3
0000163C  6700 0424                573              BEQ      INVALID_EA
00001640                           574              
00001640                           575  
00001640  4EB9 0000199E            576               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001646  B67C 003C                577               CMP      #%111100,D3 // immediate data
0000164A  6700 0416                578               BEQ      INVALID_EA
0000164E  B67C 003A                579               CMP      #%111010,D3 // complicated
00001652  6700 040E                580               BEQ      INVALID_EA
00001656  B67C 003B                581               CMP      #%111011,D3 // complicated
0000165A  6700 0406                582               BEQ      INVALID_EA
0000165E                           583     
0000165E  4EB9 0000197C            584               JSR      bits11to13 ** grab mode bits to jump with
00001664  3803                     585               MOVE    D3,D4
00001666                           586  
00001666  41F9 00001868            587               LEA     jmp_mode,A0    *Index into the table
0000166C  C6FC 0006                588               MULU    #6,D3       *Form offset     
00001670  4EB0 3000                589               JSR     0(A0,D3)   *Jump indirect with index
00001674                           590   
00001674  1CFC 002C                591               MOVE.B     #',', (A6)+
00001678  1CFC 0020                592               MOVE.B     #' ', (A6)+
0000167C                           593  
0000167C  4E75                     594               RTS
0000167E                           595               
0000167E                           596  LEA_DEST    
0000167E  4244                     597                  CLR     D4
00001680  41F9 00001868            598                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00001686  363C 0001                599                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
0000168A  3803                     600                  MOVE    D3,D4
0000168C  C6FC 0006                601                  MULU    #6,D3       *Form offset     
00001690  4EB0 3000                602                  JSR     0(A0,D3)   *Jump indirect with index
00001694                           603                  
00001694  4EB9 00001944            604                  JSR     bits5to7
0000169A  4EB9 00001898            605                  JSR     insert_num
000016A0                           606                  
000016A0  4E75                     607                  RTS
000016A2                           608  
000016A2                           609  
000016A2                           610  ADDQ
000016A2  4EB9 00001700            611                  JSR     ADDQ_BUFFER
000016A8  4EB9 000016BE            612                  JSR     ADDQ_SRC
000016AE  1CFC 002C                613                  MOVE.B  #',',(A6)+
000016B2  1CFC 0020                614                  MOVE.B  #' ',(A6)+
000016B6  4EB9 000016D6            615                  JSR     ADDQ_DEST
000016BC  4E75                     616                  RTS                 ;BRA     PRINT_BUFFER
000016BE                           617  
000016BE                           618  ADDQ_SRC
000016BE  4EB9 00001944            619                  JSR     bits5to7
000016C4  1CFC 0023                620                  MOVE.B  #'#',(A6)+
000016C8  183C 0000                621                  MOVE.B  #%000,D4
000016CC  4EB9 00001898            622                  JSR     insert_num
000016D2  4244                     623                  CLR     D4
000016D4  4E75                     624                  RTS
000016D6                           625                  
000016D6                           626  ADDQ_DEST
000016D6  4EB9 0000197C            627                 JSR      bits11to13
000016DC  3803                     628                 MOVE     D3,D4
000016DE  41F9 00001868            629                 LEA     jmp_mode,A0    *Index into the table
000016E4  C6FC 0006                630                 MULU    #6,D3       *Form offset     
000016E8  4EB0 3000                631                 JSR     0(A0,D3)   *Jump indirect with index
000016EC  4243                     632                 CLR     D3
000016EE  4EB9 0000198E            633                 JSR     bits14to16
000016F4  4EB9 00001898            634                 JSR     insert_num
000016FA  4244                     635                 CLR     D4
000016FC  4243                     636                 CLR     D3
000016FE  4E75                     637                 RTS
00001700                           638                 
00001700                           639  
00001700                           640  ADDQ_BUFFER
00001700  1CFC 0041                641                 MOVE.B   #'A',(A6)+
00001704  1CFC 0044                642                 MOVE.B   #'D', (A6)+  
00001708  1CFC 0044                643                 MOVE.B   #'D', (A6)+
0000170C  1CFC 0051                644                 MOVE.B   #'Q', (A6)+
00001710  4EB9 00001B86            645                 JSR      GETSIZE_ADDQ
00001716                           646                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00001716                           647                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001716  4E75                     648                 RTS               
00001718                           649                 
00001718                           650  MOVEQ
00001718  4EB9 00001722            651                  JSR     MOVEQ_BUFFER
0000171E  6000 0400                652                  BRA     PRINT_BUFFER
00001722                           653  
00001722                           654  MOVEQ_BUFFER
00001722  1CFC 004D                655                 MOVE.B   #'M',(A6)+
00001726  1CFC 004F                656                 MOVE.B   #'O', (A6)+  
0000172A  1CFC 0056                657                 MOVE.B   #'V', (A6)+
0000172E  1CFC 0045                658                 MOVE.B   #'E', (A6)+
00001732  1CFC 0051                659                 MOVE.B   #'Q', (A6)+
00001736  1CFC 0020                660                 MOVE.B   #' ', (A6)+
0000173A  4E75                     661                 RTS
0000173C                           662  
0000173C                           663  DIVU
0000173C  4EB9 00001746            664                  JSR     DIVU_BUFFER
00001742  6000 03DC                665                  BRA     PRINT_BUFFER
00001746                           666  
00001746                           667  DIVU_BUFFER
00001746  1CFC 0044                668                 MOVE.B   #'D',(A6)+
0000174A  1CFC 0049                669                 MOVE.B   #'I', (A6)+  
0000174E  1CFC 0056                670                 MOVE.B   #'V', (A6)+
00001752  1CFC 0055                671                 MOVE.B   #'U', (A6)+
00001756  1CFC 0020                672                 MOVE.B   #' ', (A6)+
0000175A  4E75                     673                 RTS  
0000175C                           674  OR    
0000175C  4EB9 00001766            675                 JSR     OR_BUFFER
00001762  6000 03BC                676                 BRA     PRINT_BUFFER
00001766                           677                  
00001766                           678  OR_BUFFER
00001766  1CFC 004F                679                 MOVE.B   #'O',(A6)+
0000176A  1CFC 0052                680                 MOVE.B   #'R', (A6)+  
0000176E  1CFC 002E                681                 MOVE.B   #'.', (A6)+
00001772                           682                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001772                           683                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001772                           684                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001772  1CFC 0020                685                 MOVE.B   #' ', (A6)+
00001776  4E75                     686                 RTS   
00001778                           687  
00001778                           688  SUB   
00001778  4EB9 00001782            689                 JSR     SUB_BUFFER
0000177E  6000 03A0                690                 BRA     PRINT_BUFFER               
00001782                           691  
00001782                           692  SUB_BUFFER
00001782  1CFC 0053                693                 MOVE.B   #'S',(A6)+
00001786  1CFC 0055                694                 MOVE.B   #'U', (A6)+  
0000178A  1CFC 0042                695                 MOVE.B   #'B', (A6)+
0000178E  1CFC 002E                696                 MOVE.B   #'.', (A6)+
00001792                           697                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001792                           698                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001792                           699                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001792  1CFC 0020                700                 MOVE.B   #' ', (A6)+
00001796  4E75                     701                 RTS  
00001798                           702  CMP   
00001798  4EB9 000017A2            703                 JSR     CMP_BUFFER
0000179E  6000 0380                704                 BRA     PRINT_BUFFER
000017A2                           705                  
000017A2                           706  CMP_BUFFER
000017A2  1CFC 0043                707                 MOVE.B   #'C',(A6)+
000017A6  1CFC 004D                708                 MOVE.B   #'M', (A6)+  
000017AA  1CFC 0050                709                 MOVE.B   #'P', (A6)+
000017AE  1CFC 002E                710                 MOVE.B   #'.', (A6)+
000017B2                           711                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017B2                           712                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017B2                           713                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017B2  1CFC 0020                714                 MOVE.B   #' ', (A6)+
000017B6  4E75                     715                 RTS   
000017B8                           716                 
000017B8                           717  MULS
000017B8  4EB9 000017C2            718                  JSR     MULS_BUFFER
000017BE  6000 0360                719                  BRA     PRINT_BUFFER
000017C2                           720  
000017C2                           721  MULS_BUFFER
000017C2  1CFC 004D                722                 MOVE.B   #'M',(A6)+
000017C6  1CFC 0055                723                 MOVE.B   #'U', (A6)+  
000017CA  1CFC 004C                724                 MOVE.B   #'L', (A6)+
000017CE  1CFC 0053                725                 MOVE.B   #'S', (A6)+
000017D2  1CFC 0020                726                 MOVE.B   #' ', (A6)+
000017D6  4E75                     727                 RTS
000017D8                           728  
000017D8                           729  AND    
000017D8  4EB9 000017E2            730                 JSR     AND_BUFFER
000017DE  6000 0340                731                 BRA     PRINT_BUFFER
000017E2                           732                  
000017E2                           733  AND_BUFFER
000017E2  1CFC 0041                734                 MOVE.B   #'A',(A6)+
000017E6  1CFC 004E                735                 MOVE.B   #'N', (A6)+  
000017EA  1CFC 0044                736                 MOVE.B   #'D', (A6)+
000017EE  1CFC 002E                737                 MOVE.B   #'.', (A6)+
000017F2                           738                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017F2                           739                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017F2                           740                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017F2  1CFC 0020                741                 MOVE.B   #' ', (A6)+
000017F6  4E75                     742                 RTS    
000017F8                           743  
000017F8                           744  ASR     
000017F8  4EB9 00001802            745                  JSR     ASR_BUFFER
000017FE  6000 0320                746                  BRA     PRINT_BUFFER
00001802                           747  
00001802                           748  ASR_BUFFER
00001802  1CFC 0041                749                 MOVE.B   #'A',(A6)+
00001806  1CFC 0053                750                 MOVE.B   #'S', (A6)+  
0000180A  1CFC 0052                751                 MOVE.B   #'R', (A6)+
0000180E  1CFC 0020                752                 MOVE.B   #' ', (A6)+
00001812  4E75                     753                 RTS      
00001814                           754  
00001814                           755  ASL     
00001814  4EB9 0000181E            756                  JSR     ASL_BUFFER
0000181A  6000 0304                757                  BRA     PRINT_BUFFER
0000181E                           758  
0000181E                           759  ASL_BUFFER
0000181E  1CFC 0041                760                 MOVE.B   #'A',(A6)+
00001822  1CFC 0053                761                 MOVE.B   #'S', (A6)+  
00001826  1CFC 004C                762                 MOVE.B   #'L', (A6)+
0000182A  1CFC 0020                763                 MOVE.B   #' ', (A6)+
0000182E  4E75                     764                 RTS     
00001830                           765  
00001830                           766  LSL     
00001830  4EB9 0000183A            767                  JSR     LSL_BUFFER
00001836  6000 02E8                768                  BRA     PRINT_BUFFER
0000183A                           769  
0000183A                           770  LSL_BUFFER
0000183A  1CFC 004C                771                 MOVE.B   #'L',(A6)+
0000183E  1CFC 0053                772                 MOVE.B   #'S', (A6)+  
00001842  1CFC 004C                773                 MOVE.B   #'L', (A6)+
00001846  1CFC 0020                774                 MOVE.B   #' ', (A6)+
0000184A  4E75                     775                 RTS     
0000184C                           776  
0000184C                           777  LSR     
0000184C  4EB9 00001856            778                  JSR     LSR_BUFFER
00001852  6000 02CC                779                  BRA     PRINT_BUFFER
00001856                           780  
00001856                           781  LSR_BUFFER
00001856  1CFC 004C                782                 MOVE.B   #'L',(A6)+
0000185A  1CFC 0053                783                 MOVE.B   #'S', (A6)+  
0000185E  1CFC 0052                784                 MOVE.B   #'R', (A6)+
00001862  1CFC 0020                785                 MOVE.B   #' ', (A6)+
00001866  4E75                     786                 RTS       
00001868                           787                 
00001868                           788  jmp_mode
00001868  4EF9 000019C0            789                  JMP     MODE000  ** DN
0000186E  4EF9 000019C6            790                  JMP     MODE001  ** AN
00001874  4EF9 000019CE            791                  JMP     MODE010  ** (AN)
0000187A  4EF9 000019D8            792                  JMP     MODE011  ** (AN)+   
00001880  4EF9 000019E2            793                  JMP     MODE100  ** -(AN)
00001886  4EF9 000019F0            794                  JMP     MODE101  **INVALID
0000188C  4EF9 000019FA            795                  JMP     MODE110  **INVALID
00001892  4EF9 00001A04            796                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00001898                           797  
00001898                           798                  
00001898                           799  insert_num
00001898                           800                  
00001898                           801                  ;get number from D3
00001898  B67C 0000                802                  CMP     #%000,D3       ;0
0000189C  6600 000A                803                  BNE     ONE         
000018A0  1CFC 0030                804                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000018A4  6000 006E                805                  BRA     FINISHER
000018A8                           806                  
000018A8  B67C 0001                807  ONE             CMP     #%001,D3       ;1
000018AC  6600 000A                808                  BNE     TWO 
000018B0  1CFC 0031                809                  MOVE.B  #'1',(A6)+
000018B4  6000 005E                810                  BRA     FINISHER
000018B8                           811  
000018B8                           812                  
000018B8  B67C 0002                813  TWO             CMP     #%010,D3        ;2
000018BC  6600 000A                814                  BNE     THREE
000018C0  1CFC 0032                815                  MOVE.B  #'2',(A6)+
000018C4  6000 004E                816                  BRA     FINISHER
000018C8                           817                  
000018C8  B67C 0003                818  THREE           CMP     #%011,D3        ;3
000018CC  6600 000A                819                  BNE     FOUR
000018D0  1CFC 0033                820                  MOVE.B  #'3',(A6)+
000018D4  6000 003E                821                  BRA     FINISHER
000018D8                           822                  
000018D8  B67C 0004                823  FOUR            CMP     #%100,D3        ;4
000018DC  6600 000A                824                  BNE     FIVE
000018E0  1CFC 0034                825                  MOVE.B  #'4',(A6)+
000018E4  6000 002E                826                  BRA     FINISHER
000018E8                           827                  
000018E8  B67C 0005                828  FIVE            CMP     #%101,D3        ;5
000018EC  6600 000A                829                  BNE     SIX
000018F0  1CFC 0035                830                  MOVE.B  #'5',(A6)+
000018F4  6000 001E                831                  BRA     FINISHER
000018F8                           832                  
000018F8  B67C 0006                833  SIX             CMP     #%110,D3        ;6
000018FC  6600 000A                834                  BNE     SEVEN
00001900  1CFC 0036                835                  MOVE.B  #'6',(A6)+
00001904  6000 000E                836                  BRA     FINISHER
00001908                           837                  
00001908  B67C 0007                838  SEVEN           CMP     #%111,D3        ;7
0000190C  1CFC 0037                839                  MOVE.B  #'7',(A6)+
00001910  6000 0002                840                  BRA     FINISHER
00001914                           841                  
00001914                           842  FINISHER                
00001914                           843                  
00001914                           844                  ;check D4, do we need to do stuff?
00001914  B87C 0002                845                  CMP     #%010,D4
00001918  6600 0008                846                  BNE     POSTINCR
0000191C  1CFC 0029                847                  MOVE.B  #')',(A6)+
00001920  4E75                     848                  RTS
00001922                           849                  
00001922  B87C 0003                850  POSTINCR        CMP     #%011,D4
00001926  6600 000C                851                  BNE     ONEPAREN
0000192A  1CFC 0029                852                  MOVE.B  #')',(A6)+
0000192E  1CFC 002B                853                  MOVE.B  #'+',(A6)+
00001932  4E75                     854                  RTS
00001934                           855                  
00001934  B87C 0004                856  ONEPAREN        CMP     #%100,D4
00001938  6600 0008                857                  BNE     DONE
0000193C  1CFC 0029                858                  MOVE.B  #')',(A6)+                
00001940                           859  
00001940  4244                     860                  CLR     D4
00001942  4E75                     861  DONE            RTS
00001944                           862  
00001944                           863          
00001944                           864                 
00001944                           865  bits5to7
00001944  4243                     866                 CLR      D3
00001946  4EB9 00001AFA            867                 JSR      COPY_OPCODE  // opcode copied to D2
0000194C  C47C 0E00                868                 AND      #%0000111000000000, D2
00001950  E09A                     869                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001952  E29A                     870                 ROR.L    #1, D2
00001954  3602                     871                 MOVE.W   D2,D3 // moving isolated bits into d3
00001956  4E75                     872                 RTS
00001958                           873                 
00001958                           874  bits5to8
00001958  4243                     875                 CLR      D3
0000195A  4EB9 00001AFA            876                 JSR      COPY_OPCODE  // opcode copied to D2
00001960  C47C 0F00                877                 AND      #%0000111100000000, D2
00001964  E09A                     878                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001966  3602                     879                 MOVE.W   D2,D3 // moving isolated bits into d3
00001968  4E75                     880                 RTS
0000196A                           881                 
0000196A                           882  bits8to10
0000196A  4243                     883                 CLR      D3
0000196C  4EB9 00001AFA            884                 JSR      COPY_OPCODE  // opcode copied to D2
00001972  C47C 01C0                885                 AND      #%0000000111000000, D2
00001976  EC9A                     886                 ROR.L    #6, D2          // rotate bits so isolated at the end
00001978  3602                     887                 MOVE.W   D2,D3 // moving isolated bits into d3
0000197A  4E75                     888                 RTS               
0000197C                           889             
0000197C                           890  bits11to13
0000197C  4243                     891                 CLR      D3
0000197E  4EB9 00001AFA            892                 JSR      COPY_OPCODE  // opcode copied to D2
00001984  C47C 0038                893                 AND      #%0000000000111000, D2
00001988  E69A                     894                 ROR.L    #3, D2          // rotate bits so isolated at the end
0000198A  3602                     895                 MOVE.W   D2,D3 // moving isolated bits into d3
0000198C  4E75                     896                 RTS
0000198E                           897             
0000198E                           898  bits14to16
0000198E  4243                     899                 CLR      D3
00001990  4EB9 00001AFA            900                 JSR      COPY_OPCODE  // opcode copied to D2
00001996  C47C 0007                901                 AND      #%0000000000000111, D2
0000199A  3602                     902                 MOVE.W   D2,D3 // moving isolated bits into d3
0000199C  4E75                     903                 RTS
0000199E                           904  bits11to16
0000199E  4243                     905                 CLR      D3
000019A0  4EB9 00001AFA            906                 JSR      COPY_OPCODE  // opcode copied to D2
000019A6  C47C 003F                907                 AND      #%0000000000111111, D2
000019AA  3602                     908                 MOVE.W   D2,D3 // moving isolated bits into d3
000019AC  4E75                     909                 RTS
000019AE                           910  bits1to10
000019AE  4243                     911                 CLR      D3
000019B0  4EB9 00001AFA            912                 JSR      COPY_OPCODE  // opcode copied to D2
000019B6  C47C FFC0                913                 AND      #%1111111111000000, D2
000019BA  EC9A                     914                 ROR.L    #6, D2
000019BC  3602                     915                 MOVE.W   D2,D3 // moving isolated bits into d3
000019BE  4E75                     916                 RTS
000019C0                           917  ** DN       
000019C0                           918  MODE000         
000019C0  1CFC 0044                919                  MOVE.B  #'D',(A6)+     
000019C4  4E75                     920                  RTS
000019C6                           921  
000019C6                           922  ** AN
000019C6                           923  MODE001         
000019C6  4EB9 00001A1A            924                  JSR ADDRESS_BUFFER  
000019CC  4E75                     925                  RTS      
000019CE                           926  
000019CE                           927   ** (AN)
000019CE                           928  MODE010         
000019CE  1CFC 0028                929                  MOVE.B  #'(', (A6)+
000019D2  1CFC 0041                930                  MOVE.B  #'A',(A6)+  
000019D6  4E75                     931                  RTS      
000019D8                           932  
000019D8                           933  ** (AN)+ 
000019D8                           934  MODE011         
000019D8  1CFC 0028                935                  MOVE.B  #'(', (A6)+
000019DC  1CFC 0041                936                  MOVE.B  #'A',(A6)+ 
000019E0  4E75                     937                  RTS       
000019E2                           938  
000019E2                           939   ** -(AN)
000019E2                           940  MODE100         
000019E2  1CFC 002D                941                  MOVE.B  #'-', (A6)+
000019E6  1CFC 0028                942                  MOVE.B  #'(', (A6)+
000019EA  1CFC 0041                943                  MOVE.B  #'A',(A6)+
000019EE  4E75                     944                  RTS
000019F0                           945                  
000019F0                           946  **INVALID               
000019F0                           947  MODE101         
000019F0  1CFC 0028                948                  MOVE.B  #'(', (A6)+
000019F4  1CFC 0041                949                  MOVE.B  #'A',(A6)+ 
000019F8  4E75                     950                  RTS
000019FA                           951                  
000019FA                           952  **INVALID
000019FA                           953  MODE110         
000019FA  1CFC 0028                954                  MOVE.B  #'(', (A6)+
000019FE  1CFC 0041                955                  MOVE.B  #'A',(A6)+
00001A02  4E75                     956                  RTS  
00001A04                           957  
00001A04                           958  ** ABSOLUTE AND IMMEDIATE            
00001A04                           959  MODE111         
00001A04                           960                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001A04  1CFC 0024                961                 MOVE.B   #'$', (A6)+  
00001A08  4EB9 00001B3C            962                 JSR      PRINT_DEREF_ADDRESS
00001A0E  544A                     963                 ADD.W    #2, A2
00001A10  4EB9 00001B3C            964                 JSR      PRINT_DEREF_ADDRESS
00001A16  544A                     965                 ADD.W    #2, A2
00001A18  4E75                     966                 RTS            
00001A1A                           967                                          
00001A1A                           968  ADDRESS_BUFFER
00001A1A  1CFC 0041                969                  MOVE.B  #'A',(A6)+ 
00001A1E  4E75                     970                  RTS
00001A20                           971                 
00001A20                           972  ABSOLUTE_BUFFER
00001A20  4243                     973                 CLR      D3
00001A22  3604                     974                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001A24  1CF8 0024                975                 MOVE.B   '$', (A6)+
00001A28  B67C 0000                976                 CMP.W    #%000, D3
00001A2C  6700 0010                977                 BEQ      ABSOLUTE_WORD_BUFFER
00001A30  4243                     978                 CLR      D3
00001A32  3604                     979                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001A34  B67C 0001                980                 CMP.W    #%001, D3
00001A38  6700 0016                981                 BEQ      ABSOLUTE_LONG_BUFFER
00001A3C  4E75                     982                 RTS
00001A3E                           983                 
00001A3E                           984  ABSOLUTE_WORD_BUFFER
00001A3E                           985                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A3E                           986                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A3E  1CFC 0046                987                         MOVE.B #'F', (A6)+ 
00001A42  1CFC 0046                988                         MOVE.B #'F', (A6)+ 
00001A46  1CFC 0046                989                         MOVE.B #'F', (A6)+ 
00001A4A  1CFC 0046                990                         MOVE.B #'F', (A6)+ 
00001A4E  4E75                     991                         RTS       
00001A50                           992                    
00001A50                           993  ABSOLUTE_LONG_BUFFER       
00001A50                           994                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A50                           995                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A50  1CFC 0047                996                         MOVE.B #'G', (A6)+ 
00001A54  1CFC 0047                997                         MOVE.B #'G', (A6)+ 
00001A58  1CFC 0047                998                         MOVE.B #'G', (A6)+ 
00001A5C  1CFC 0047                999                         MOVE.B #'G', (A6)+
00001A60  4E75                    1000                         RTS 
00001A62                          1001  
00001A62                          1002  INVALID_EA  
00001A62                          1003                  * TODO: IMPLEMENT
00001A62                          1004                  *** CLEAR OUT A6
00001A62                          1005                  ** PUT INVALID MESSAGE INTO A6
00001A62  6000 F883               1006                  BRA EXIT
00001A66                          1007  INVALID_OP  
00001A66                          1008                  ** TODO: IMPLEMENT
00001A66                          1009                 *** CLEAR OUT A6
00001A66                          1010                  ** PUT INVALID MESSAGE INTO A6
00001A66  1CFC 0044               1011                      MOVE.B #'D', (A6)+
00001A6A  1CFC 0041               1012                      MOVE.B #'A', (A6)+
00001A6E  1CFC 0054               1013                      MOVE.B #'T', (A6)+
00001A72  1CFC 0041               1014                      MOVE.B #'A', (A6)+ 
00001A76  1CFC 0020               1015                      MOVE.B #' ', (A6)+ 
00001A7A  4EB9 00001B3C           1016                      JSR     PRINT_DEREF_ADDRESS
00001A80                          1017            
00001A80                          1018                  
00001A80  1CFC 004E               1019  NOP                 MOVE.B #'N', (A6)+
00001A84  1CFC 004F               1020                      MOVE.B #'O', (A6)+
00001A88  1CFC 0050               1021                      MOVE.B #'P', (A6)+
00001A8C  4E75                    1022                      RTS
00001A8E                          1023  
00001A8E                          1024                   
00001A8E                          1025  RTS      
00001A8E  43F8 1290               1026                      LEA     RTS_disp,A1          
00001A92  103C 000E               1027                      MOVE.B  #14,D0
00001A96  4E4F                    1028                      TRAP    #15 
00001A98  6000 F84D               1029                      BRA     EXIT
00001A9C                          1030  JSR      
00001A9C  4DF9 00001CDA           1031                      LEA     BUFFER, A6
00001AA2  1CFC 004A               1032                      MOVE.B #'J', (A6)+
00001AA6  1CFC 0053               1033                      MOVE.B #'S', (A6)+
00001AAA  1CFC 0052               1034                      MOVE.B #'R', (A6)+
00001AAE  1CFC 0020               1035                      MOVE.B #' ', (A6)+
00001AB2  43F9 00001CDA           1036                      LEA     BUFFER, A1
00001AB8                          1037                      ** BITS 10 - 12 MODE       
00001AB8                          1038                      ** BITS 13 - 16 REGISTER
00001AB8  103C 000E               1039                      MOVE.B  #14,D0
00001ABC  4E4F                    1040                      TRAP    #15 
00001ABE  6000 F827               1041                      BRA     EXIT
00001AC2                          1042                    
00001AC2                          1043  MOVEM      
00001AC2                          1044                     
00001AC2                          1045                      ** SIZE SUBROUTINE
00001AC2                          1046                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001AC2  C47C 0040               1047                      AND #%0000000001000000,D2 
00001AC6                          1048                      * WORD
00001AC6  B4BC 00000040           1049                      CMP.L   #%0000000001000000,D2
00001ACC  4EB9 00001AE2           1050                      JSR     MOVEM_W 
00001AD2                          1051                      *LONG
00001AD2  B4BC 00000040           1052                      CMP.L   #%0000000001000000,D2 
00001AD8                          1053                     ** JSR     MOVEM_L
00001AD8  103C 000E               1054                      MOVE.B  #14,D0
00001ADC  4E4F                    1055                      TRAP    #15
00001ADE  6000 F807               1056                      BRA     EXIT 
00001AE2                          1057                      
00001AE2                          1058  MOVEM_W 
00001AE2  43F8 123E               1059                       LEA     MOVEM_disp,A1
00001AE6                          1060                      * PRINT MOVEM
00001AE6  103C 000E               1061                       MOVE.B  #14,D0
00001AEA  4E4F                    1062                       TRAP    #15
00001AEC                          1063          
00001AEC                          1064                      * PRINT WORD PORTION
00001AEC  41F8 12D5               1065                       LEA     size_w, A0
00001AF0  103C 000E               1066                       MOVE.B  #14,D0
00001AF4  4E4F                    1067                       TRAP    #15 
00001AF6                          1068          
00001AF6  6000 F7EF               1069                       BRA     EXIT 
00001AFA                          1070       
00001AFA                          1071     
00001AFA                          1072  COPY_OPCODE 
00001AFA                          1073                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001AFA  4242                    1074                       CLR    D2  
00001AFC  3405                    1075                       MOVE.W D5,D2 
00001AFE  4E75                    1076                       RTS  
00001B00                          1077  
00001B00                          1078  PRINT_ADDRESS     
00001B00  4242                    1079                   CLR         D2
00001B02  143C 0010               1080                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B06  220A                    1081                   MOVE.L      A2,D1        
00001B08  103C 000F               1082                   MOVE.B      #15,D0          
00001B0C  4E4F                    1083                   TRAP        #15            
00001B0E  1CFC 0020               1084                   MOVE.B      #' ', (A6)+
00001B12  1CFC 0020               1085                   MOVE.B      #' ', (A6)+
00001B16  1CFC 0020               1086                   MOVE.B      #' ', (A6)+
00001B1A  1CFC 0020               1087                   MOVE.B      #' ', (A6)+
00001B1E  4E75                    1088                   RTS     
00001B20                          1089  PRINT_BUFFER    
00001B20  1CFC 0000               1090                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B24  43F9 00001CDA           1091                 LEA      BUFFER, A1
00001B2A  303C 000E               1092                 MOVE.W   #14,D0
00001B2E  4E4F                    1093                 TRAP     #15
00001B30  43F8 1219               1094                 LEA     linebreak,A1            *appends line at the end of the user input
00001B34  103C 000E               1095                 MOVE.B  #14,D0
00001B38  4E4F                    1096                 TRAP    #15
00001B3A  4E75                    1097                 RTS  
00001B3C                          1098  
00001B3C                          1099  PRINT_DEREF_ADDRESS
00001B3C  1CFC 0000               1100                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B40  43F9 00001CDA           1101                 LEA      BUFFER, A1
00001B46  303C 000E               1102                 MOVE.W   #14,D0
00001B4A  4E4F                    1103                 TRAP     #15
00001B4C  4DF9 00001CDA           1104                 LEA      BUFFER, A6
00001B52  4242                    1105                 CLR      D2
00001B54  0C52 0000               1106                 CMP      #0, (A2)
00001B58  6700 0006               1107                 BEQ      PRINT_ZEROES
00001B5C  6000 001A               1108                 BRA      PRINT_HEX
00001B60                          1109                 
00001B60                          1110  PRINT_ZEROES
00001B60  4DF9 00001CDA           1111                LEA   BUFFER,A6
00001B66  1CFC 0030               1112                MOVE.B #'0', (A6)+
00001B6A  1CFC 0030               1113                MOVE.B #'0', (A6)+
00001B6E  1CFC 0030               1114                MOVE.B #'0', (A6)+
00001B72  1CFC 0030               1115                MOVE.B #'0', (A6)+
00001B76  4E75                    1116                RTS
00001B78                          1117  PRINT_HEX
00001B78  143C 0010               1118                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B7C  3212                    1119                 MOVE.W      (A2),D1        // print the hex value in current address      
00001B7E  103C 000F               1120                 MOVE.B      #15,D0          
00001B82  4E4F                    1121                 TRAP        #15 
00001B84  4E75                    1122                 RTS
00001B86                          1123   ***************************
00001B86                          1124  
00001B86                          1125  GETSIZE_ADDQ
00001B86                          1126                   
00001B86                          1127                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001B86                          1128                 
00001B86  4EB8 196A               1129             JSR      bits8to10
00001B8A  B67C 0000               1130             CMP      #%000,D3
00001B8E  6600 000C               1131             BNE      ADDQ_NOTBYTE
00001B92  4EB9 00001CAA           1132             JSR      SIZEISBYTE
00001B98  4243                    1133             CLR      D3
00001B9A  4E75                    1134             RTS
00001B9C                          1135             
00001B9C                          1136  ADDQ_NOTBYTE
00001B9C  B67C 0001               1137             CMP      #%001,D3
00001BA0  6600 000C               1138             BNE      ADDQ_NOTWORD
00001BA4  4EB9 00001CBA           1139             JSR      SIZEISWORD
00001BAA  4243                    1140             CLR      D3
00001BAC  4E75                    1141             RTS
00001BAE                          1142             
00001BAE                          1143  ADDQ_NOTWORD
00001BAE  B67C 0002               1144             CMP      #%010,D3
00001BB2  6600 FEAE               1145             BNE      INVALID_EA
00001BB6  4EB9 00001CCA           1146             JSR      SIZEISLONG
00001BBC  4243                    1147             CLR      D3
00001BBE  4E75                    1148             RTS
00001BC0                          1149                   
00001BC0                          1150                                   
00001BC0                          1151  ****************************
00001BC0                          1152  ****************************
00001BC0                          1153                     
00001BC0                          1154  ****************************
00001BC0                          1155  
00001BC0                          1156                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001BC0                          1157                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001BC0                          1158                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001BC0                          1159  GETSIZE_ADD
00001BC0  4EB8 196A               1160              JSR     bits8to10
00001BC4  B67C 0000               1161              CMP     #%000,D3
00001BC8  6600 0010               1162              BNE     ADD_NOTBYTE
00001BCC  4EB9 00001CAA           1163              JSR     SIZEISBYTE
00001BD2  3C3C 0001               1164              MOVE    #1,D6
00001BD6  4243                    1165              CLR     D3
00001BD8  4E75                    1166              RTS
00001BDA                          1167          
00001BDA                          1168  ADD_NOTBYTE 
00001BDA  B67C 0001               1169              CMP     #%001,D3
00001BDE  6600 0010               1170              BNE     ADD_NOTWORD
00001BE2  4EB9 00001CBA           1171              JSR     SIZEISWORD
00001BE8  3C3C 0001               1172              MOVE    #1,D6
00001BEC  4243                    1173              CLR     D3
00001BEE  4E75                    1174              RTS
00001BF0                          1175              
00001BF0                          1176  ADD_NOTWORD
00001BF0  B67C 0002               1177              CMP     #%010,D3
00001BF4  6600 0010               1178              BNE     ADD_NOTLEFT
00001BF8  4EB9 00001CCA           1179              JSR     SIZEISLONG
00001BFE  3C3C 0001               1180              MOVE    #1,D6
00001C02  4243                    1181              CLR     D3
00001C04  4E75                    1182              RTS
00001C06                          1183              
00001C06                          1184  ADD_NOTLEFT     ;check other direction
00001C06  B67C 0004               1185              CMP     #%100,D3
00001C0A  6600 0010               1186              BNE     ADD_NOTRIGHTBYTE
00001C0E  4EB9 00001CAA           1187              JSR     SIZEISBYTE
00001C14  3C3C 0002               1188              MOVE    #2,D6
00001C18  4243                    1189              CLR     D3
00001C1A  4E75                    1190              RTS
00001C1C                          1191              
00001C1C                          1192  ADD_NOTRIGHTBYTE
00001C1C  B67C 0005               1193              CMP     #%101,D3
00001C20  6600 0010               1194              BNE     ADD_NOTRIGHTWORD
00001C24  4EB9 00001CBA           1195              JSR     SIZEISWORD
00001C2A  3C3C 0002               1196              MOVE    #2,D6
00001C2E  4243                    1197              CLR     D3
00001C30  4E75                    1198              RTS
00001C32                          1199  
00001C32                          1200  ADD_NOTRIGHTWORD
00001C32  B67C 0006               1201              CMP     #%110,D3
00001C36  6600 FE2A               1202              BNE     INVALID_EA
00001C3A  4EB9 00001CCA           1203              JSR     SIZEISLONG
00001C40  3C3C 0002               1204              MOVE    #2,D6
00001C44  4243                    1205              CLR     D3
00001C46  4E75                    1206              RTS 
00001C48                          1207                               
00001C48                          1208                       
00001C48                          1209                       
00001C48                          1210  *****************************                  
00001C48                          1211  GETSIZE_ADDI
00001C48  4EB8 196A               1212          JSR     bits8to10
00001C4C  B67C 0000               1213          CMP     #%000,D3
00001C50  6600 000C               1214          BNE     ADDI_NOTBYTE
00001C54  4EB9 00001CAA           1215          JSR     SIZEISBYTE
00001C5A  4243                    1216          CLR     D3
00001C5C  4E75                    1217          RTS
00001C5E                          1218  
00001C5E                          1219  ADDI_NOTBYTE
00001C5E  B67C 0001               1220          CMP     #%001,D3
00001C62  6600 000C               1221          BNE     ADDI_NOTWORD
00001C66  4EB9 00001CBA           1222          JSR     SIZEISWORD
00001C6C  4243                    1223          CLR     D3
00001C6E  4E75                    1224          RTS
00001C70                          1225          
00001C70                          1226  ADDI_NOTWORD
00001C70  B67C 0002               1227          CMP     #%010,D3
00001C74  6600 FDEC               1228          BNE     INVALID_EA
00001C78  4EB9 00001CCA           1229          JSR     SIZEISLONG
00001C7E  4243                    1230          CLR     D3
00001C80  4E75                    1231          RTS
00001C82                          1232          
00001C82                          1233                              
00001C82                          1234                       
00001C82                          1235  ********************************          
00001C82                          1236                       
00001C82                          1237                       
00001C82                          1238  ********************************                     
00001C82                          1239  GETSIZE_ADDA
00001C82  4EB8 196A               1240          JSR     bits8to10
00001C86  B67C 0003               1241          CMP     #%011,D3
00001C8A  6600 000C               1242          BNE     ADDA_NOTWORD
00001C8E  4EB9 00001CBA           1243          JSR     SIZEISWORD
00001C94  4243                    1244          CLR     D3
00001C96  4E75                    1245          RTS
00001C98                          1246          
00001C98                          1247  
00001C98                          1248          
00001C98                          1249  ADDA_NOTWORD
00001C98  B67C 0007               1250          CMP     #%111,D3
00001C9C  6600 FDC4               1251          BNE     INVALID_EA
00001CA0  4EB9 00001CCA           1252          JSR     SIZEISLONG
00001CA6  4243                    1253          CLR     D3
00001CA8  4E75                    1254          RTS
00001CAA                          1255  **********************************        
00001CAA                          1256      
00001CAA                          1257  SIZEISBYTE
00001CAA  1CFC 002E               1258         MOVE.B   #'.',(A6)+
00001CAE  1CFC 0042               1259         MOVE.B   #'B',(A6)+
00001CB2  1CFC 0020               1260         MOVE.B   #' ',(A6)+
00001CB6  4243                    1261         CLR      D3
00001CB8  4E75                    1262         RTS
00001CBA                          1263  
00001CBA                          1264  SIZEISWORD    
00001CBA  1CFC 002E               1265         MOVE.B   #'.',(A6)+
00001CBE  1CFC 0057               1266         MOVE.B   #'W',(A6)+
00001CC2  1CFC 0020               1267         MOVE.B   #' ',(A6)+
00001CC6  4243                    1268         CLR      D3
00001CC8  4E75                    1269         RTS
00001CCA                          1270                  
00001CCA                          1271  SIZEISLONG    
00001CCA  1CFC 002E               1272         MOVE.B   #'.',(A6)+
00001CCE  1CFC 004C               1273         MOVE.B   #'L',(A6)+
00001CD2  1CFC 0020               1274         MOVE.B   #' ',(A6)+
00001CD6                          1275  
00001CD6  4243                    1276         CLR      D3
00001CD8  4E75                    1277         RTS
00001CDA                          1278                  
00001CDA                          1279       
00001CDA= 00000001                1280  BUFFER DC.L 1     
00001CDE                          1281      INCLUDE 'helpers.x68'
00001CDE  1019                    1282  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001CE0  4EB9 00001CF8           1283                          JSR     sub_breakDownAs     *breaks down ASCII code
00001CE6  D280                    1284                          ADD.L   D0,D1               *load that char into D1
00001CE8  0C11 0000               1285                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001CEC  6700 0006               1286                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001CF0  E989                    1287                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001CF2  60EA                    1288                          BRA     sub_AsToHeLoop      *loops through again
00001CF4                          1289                          
00001CF4  2E01                    1290  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001CF6  4E75                    1291                          RTS
00001CF8  B03C 0030               1292  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001CFC  6D00 002A               1293                          BLT     as_ERROR                        
00001D00                          1294                          
00001D00  B03C 0039               1295                          CMP.B    #$39,D0            *is it an A-F letter?
00001D04  6E00 000C               1296                          BGT     as_LETTER
00001D08                          1297                          
00001D08  6000 0002               1298                          BRA     as_NUMBER
00001D0C                          1299                                                 
00001D0C  0400 0030               1300  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001D10  4E75                    1301                          RTS
00001D12                          1302                          
00001D12  B03C 0041               1303  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001D16  6D00 0010               1304                          BLT     as_ERROR
00001D1A                          1305                          
00001D1A  B03C 0046               1306                          CMP.B     #$46, D0
00001D1E  6E00 0008               1307                          BGT     as_ERROR
00001D22                          1308                          
00001D22  0400 0037               1309                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001D26  4E75                    1310                          RTS
00001D28                          1311                          
00001D28  43F9 65727200           1312  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001D2E  103C 000D               1313                          MOVE.B  #13,D0
00001D32  4E4F                    1314                          TRAP    #15  
00001D34                          1315  sub_StartReadingData    
00001D34  0801 0000               1316                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001D38  6600 0006               1317                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001D3C                          1318                          
00001D3C  7E00                    1319                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001D3E  4E75                    1320  srdFinish               RTS
00001D40                          1321  
00001D40  43F8 1162               1322  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D44  103C 000E               1323                          MOVE.B  #14,D0
00001D48  4E4F                    1324                          TRAP    #15
00001D4A                          1325                          
00001D4A  7E01                    1326                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D4C  60F0                    1327                          BRA     srdFinish
00001D4E                          1328  sub_EndReadingData  
00001D4E  0801 0000               1329                          BTST    #0,D1               *checks if LSB is 1, 
00001D52  6600 0018               1330                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001D56                          1331                          
00001D56  B5CB                    1332                          CMP.L   A3,A2               *end address must be greater than start address
00001D58  6E00 0004               1333                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001D5C                          1334  
00001D5C  4E75                    1335  erdFinish               RTS
00001D5E                          1336  
00001D5E  43F8 1189               1337  erdFailAddrOrder        LEA     addr_order_check,A1
00001D62  103C 000E               1338                          MOVE.B  #14,D0
00001D66  4E4F                    1339                          TRAP    #15
00001D68                          1340                          
00001D68  7E01                    1341                          MOVE.L  #1,D7
00001D6A  60F0                    1342                          BRA     erdFinish
00001D6C                          1343  
00001D6C  43F8 1162               1344  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D70  103C 000E               1345                          MOVE.B  #14,D0
00001D74  4E4F                    1346                          TRAP    #15
00001D76                          1347                          
00001D76  7E01                    1348                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D78  60E2                    1349                          BRA     erdFinish
00001D7A                          1350                          
00001D7A                          1351  
00001D7A                          1352  
00001D7A                          1353  
00001D7A                          1354  
00001D7A                          1355  
00001D7A                          1356  
00001D7A                          1357  
00001D7A                          1358  
00001D7A                          1359  -------------------- end include --------------------
00001D7A                          1360      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1A20
ABSOLUTE_LONG_BUFFER  1A50
ABSOLUTE_WORD_BUFFER  1A3E
ADD                 1482
ADDA                145E
ADDA_BUFFER         1466
ADDA_DISP           1248
ADDA_NOTWORD        1C98
ADDI                1516
ADDI_BUFFER         159C
ADDI_DES            1538
ADDI_DISP           124D
ADDI_NOTBYTE        1C5E
ADDI_NOTWORD        1C70
ADDI_SRC            152A
ADDQ                16A2
ADDQ_BUFFER         1700
ADDQ_DEST           16D6
ADDQ_DISP           1252
ADDQ_NOTBYTE        1B9C
ADDQ_NOTWORD        1BAE
ADDQ_SRC            16BE
ADDRESS_BUFFER      1A1A
ADDR_ODDBIT_MSG     1162
ADDR_ORDER_CHECK    1189
ADD_BUFFER          148A
ADD_DEST            14F4
ADD_DIRECTION_REVERSED  14BA
ADD_DISP            1244
ADD_NOTBYTE         1BDA
ADD_NOTLEFT         1C06
ADD_NOTRIGHTBYTE    1C1C
ADD_NOTRIGHTWORD    1C32
ADD_NOTWORD         1BF0
ADD_SRC             14D0
AND                 17D8
AND_BUFFER          17E2
AND_DISP            126D
ASL                 1814
ASL_BUFFER          181E
ASL_DISP            127C
ASR                 17F8
ASR_BUFFER          1802
ASR_DISP            1280
AS_ERROR            1D28
AS_LETTER           1D12
AS_NUMBER           1D0C
ATHENDLOOP          1CF4
BACKSLASHSIGH       12CA
BCC_DISP            1294
BGT_DISP            1298
BITS11TO13          197C
BITS11TO16          199E
BITS14TO16          198E
BITS1TO10           19AE
BITS5TO7            1944
BITS5TO8            1958
BITS8TO10           196A
BLE_DISP            129C
BUFFER              1CDA
CLOSEPAREN          12CE
CLR_DISP            1269
CMP                 1798
CMP_BUFFER          17A2
CODE0000            134C
CODE0001            1360
CODE0010            1366
CODE0011            1366
CODE0100            1366
CODE0101            139A
CODE0110            139E
CODE0111            13A2
CODE1000            13A6
CODE1001            13B8
CODE1010            13BC
CODE1011            13C0
CODE1100            13C4
CODE1101            13D6
CODE1110            1422
CODE1111            1452
COMMASIGN           12C8
COPY_OPCODE         1AFA
CR                  D
DIVU                173C
DIVU_BUFFER         1746
DIVU_DISP           1260
DOLLARSIGN          12C2
DONE                1942
ENDTEST_MSG         11DD
ERDFAILADDRODDB     1D6C
ERDFAILADDRORDER    1D5E
ERDFINISH           1D5C
EXIT                12E7
FINISHER            1914
FIVE                18E8
FOUR                18D8
GETSIZE_ADD         1BC0
GETSIZE_ADDA        1C82
GETSIZE_ADDI        1C48
GETSIZE_ADDQ        1B86
HEXATABLE           12A0
INPUT_BUFFER        12DC
INSERT_NUM          1898
INVALIDEA_DISP      1221
INVALID_DISP        121C
INVALID_EA          1A62
INVALID_OP          1A66
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            1868
JMP_TABLE           12EC
JSR                 1A9C
JSR_DISP            128C
LEA                 15B8
LEA_BUFFER          15DA
LEA_DEST            167E
LEA_DISP            1265
LEA_SRC             15EC
LF                  A
LINEBREAK           1219
LINECOUNT           12DB
LOCATION_ENDDATA    12E2
LOCATION_END_MSG    1145
LOCATION_STARTDATA  12DE
LOCATION_START_MSG  1126
LSL                 1830
LSL_BUFFER          183A
LSL_DISP            1274
LSR                 184C
LSR_BUFFER          1856
LSR_DISP            1278
MAIN_LOOP           108E
MINUSSIGN           12C6
MODE000             19C0
MODE001             19C6
MODE010             19CE
MODE011             19D8
MODE100             19E2
MODE101             19F0
MODE110             19FA
MODE111             1A04
MOVEA_DISP          1232
MOVEB_BUFFER        145C
MOVEM               1AC2
MOVEM_DISP          123E
MOVEM_W             1AE2
MOVEQ               1718
MOVEQ_BUFFER        1722
MOVEQ_DISP          1238
MOVE_B              1456
MOVE_DISP           122D
MULS                17B8
MULS_BUFFER         17C2
MULS_DISP           125B
NOP                 1A80
NOP_DISP            1229
ONE                 18A8
ONEPAREN            1934
OPENPAREN           12CC
OR                  175C
OR_BUFFER           1766
OR_DISP             1271
PAUSE_MSG           11C3
PLUSSIGN            12C4
POSTINCR            1922
POUNDSIGN           12C0
PRINT_ADDRESS       1B00
PRINT_BUFFER        1B20
PRINT_DEREF_ADDRESS  1B3C
PRINT_HEX           1B78
PRINT_ZEROES        1B60
ROL_DISP            1284
ROR_DISP            1288
RTS                 1A8E
RTS_DISP            1290
SEVEN               1908
SIX                 18F8
SIZEISBYTE          1CAA
SIZEISLONG          1CCA
SIZEISWORD          1CBA
SIZE_B              12D2
SIZE_L              12D8
SIZE_W              12D5
SPACE               12D0
SRDFAILADDRODDB     1D40
SRDFINISH           1D3E
START               1000
SUB                 1778
SUB_ASTOHELOOP      1CDE
SUB_BREAKDOWNAS     1CF8
SUB_BUFFER          1782
SUB_DISP            1257
SUB_ENDREADINGDATA  1D4E
SUB_STARTREADINGDATA  1D34
TABLE_LENGTH        12E6
THREE               18C8
TWO                 18B8
WELCOME_MSG         10C2
