00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
<<<<<<< HEAD
Created On: 5/29/2017 8:20:36 AM
=======
Created On: 5/28/2017 10:31:37 PM
>>>>>>> b36e14bd8bd5ee9eeba28b442361e996279a1be2

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C4              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001128             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012DE             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001CD0             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 0000121B             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001D26             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001147             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012DE             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001CD0             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 0000121B             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001D40             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012EE             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001CCC             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C  3612                      80                   MOVE.W  (A2), D3
0000109E                            81  
0000109E                            82                   * TEST OPCODES
0000109E                            83                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109E                            84                   ;MOVE.W  #$4E71,D3 * NOP
0000109E                            85                   ; MOVE.W  #$4E75,D3 * RTS
0000109E                            86                   ; MOVE.W  #$4EB0,D3 * JSR
0000109E                            87                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109E                            88                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109E                            89                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109E                            90                   ;MOVE.W  #$D64A, D3  * ADD.W A2,D3
0000109E                            91  
0000109E  363C 5201                 92                    MOVE.W    #$5201,D3    *ADDQ
000010A2                            93  
000010A2                            94                   ; MOVE.W     #$7E70, D3 *MOVEQ
000010A2                            95                   ; MOVE.W     #$80C0, D3 *DIVU
000010A2                            96                   ; MOVE.W     #$8000, D3 * OR
000010A2                            97                   ; MOVE.W        #$9000, D3 * SUB
000010A2                            98                   ; MOVE.W        #$B000, D3 * CMP
000010A2                            99                   ; MOVE.W        #$C1C0, D3 * MULS
000010A2                           100                   ; MOVE.W        #$C000, D3 * AND
000010A2                           101                   ; MOVE.W        #$E0F8, D3  *ASR
000010A2                           102                   ; MOVE.W        #$E1E2, D3  *ASL
000010A2                           103                   ; MOVE.W        #$E393, D3  *LSL
000010A2                           104                   ; MOVE.W        #$E2DC, D3  *LSR
000010A2                           105  
000010A2  4EB9 00001B16            106                   JSR    PRINT_ADDRESS
000010A8  544A                     107                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010AA  3A03                     108                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AC  183C 000C                109                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010B0  E86B                     110                   LSR.W   D4,D3       *Move the bits
000010B2  C6FC 0006                111                   MULU    #6,D3       *Form offset     
000010B6  4EB0 3000                112                   JSR     0(A0,D3)   *Jump indirect with index
000010BA  4EB9 00001B36            113                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010C0                           114                   ;CMP     A3,A2
000010C0                           115                   ;BGT     EXIT
000010C0                           116                   ;BRA     MAIN_LOOP
000010C0  6000 0227                117                   BRA      EXIT
000010C4                           118                                  
000010C4                           119      INCLUDE 'definitions.x68'
000010C4                           120  
000010C4  =0000000D                121  CR              EQU     $0D         carriage return
000010C4  =0000000A                122  LF              EQU     $0A         line feed
000010C4= 43 53 53 20 34 32 ...    123  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010E8= 42 79 20 54 65 61 ...    124                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001128= 45 6E 74 65 72 20 ...    125  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001147= 45 6E 74 65 72 20 ...    126  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001164= 41 64 64 72 65 73 ...    127  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
0000118B= 45 6E 64 69 6E 67 ...    128  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C5= 50 72 65 73 73 20 ...    129  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011DF= 52 65 61 63 68 65 ...    130  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011FA= 54 72 79 20 61 6E ...    131                      DC.B    'Try another location? (yes/no): ',0
0000121B= 0D 0A 00                 132  linebreak           DC.B    CR,LF,0
0000121E                           133                      
0000121E= 44 41 54 41 00           134  Invalid_disp        DC.B    'DATA',0
00001223= 57 52 4F 4E 47 45 ...    135  InvalidEA_disp      DC.B    'WRONGEA',0
0000122B                           136  
0000122B= 4E 4F 50 00              137  NOP_disp            DC.B    'NOP',0
0000122F= 4D 4F 56 45 00           138  MOVE_disp           DC.B    'MOVE',0
00001234= 4D 4F 56 45 41 00        139  MOVEA_disp          DC.B    'MOVEA',0
0000123A= 4D 4F 56 45 51 00        140  MOVEQ_disp          DC.B    'MOVEQ',0
00001240= 4D 4F 56 45 4D 00        141  MOVEM_disp          DC.B    'MOVEM',0
00001246= 41 44 44 00              142  ADD_disp            DC.B    'ADD',0
0000124A= 41 44 44 41 00           143  ADDA_disp           DC.B    'ADDA',0
0000124F= 41 44 44 49 00           144  ADDI_disp           DC.B    'ADDI',0
00001254= 41 44 44 51 00           145  ADDQ_disp           DC.B    'ADDQ',0
00001259= 53 55 42 00              146  SUB_disp            DC.B    'SUB',0
0000125D= 4D 55 4C 53 00           147  MULS_disp           DC.B    'MULS',0
00001262= 44 49 56 55 00           148  DIVU_disp           DC.B    'DIVU',0
00001267= 4C 45 41 00              149  LEA_disp            DC.B    'LEA',0
0000126B= 43 4C 52 00              150  CLR_disp            DC.B    'CLR',0
0000126F= 41 4E 44 00              151  AND_disp            DC.B    'AND',0
00001273= 4F 52 00                 152  OR_disp             DC.B    'OR',0
00001276= 4C 53 4C 00              153  LSL_disp            DC.B    'LSL',0
0000127A= 4C 53 52 00              154  LSR_disp            DC.B    'LSR',0
0000127E= 41 53 4C 00              155  ASL_disp            DC.B    'ASL',0
00001282= 41 53 52 00              156  ASR_disp            DC.B    'ASR',0
00001286= 52 4F 4C 00              157  ROL_disp            DC.B    'ROL',0
0000128A= 52 4F 52 00              158  ROR_disp            DC.B    'ROR',0
0000128E= 4A 53 52 00              159  JSR_disp            DC.B    'JSR',0
00001292= 52 54 53 00              160  RTS_disp            DC.B    'RTS',0
00001296= 42 43 43 00              161  BCC_disp            DC.B    'BCC',0
0000129A= 42 47 54 00              162  BGT_disp            DC.B    'BGT',0    
0000129E= 42 4C 45 00              163  BLE_disp            DC.b    'BLE',0
000012A2                           164  
000012A2                           165  
000012A2= 30 00                    166  hexaTable               DC.B    '0',0
000012A4= 31 00                    167                          DC.B    '1',0
000012A6= 32 00                    168                          DC.B    '2',0
000012A8= 33 00                    169                          DC.B    '3',0
000012AA= 34 00                    170                          DC.B    '4',0
000012AC= 35 00                    171                          DC.B    '5',0
000012AE= 36 00                    172                          DC.B    '6',0
000012B0= 37 00                    173                          DC.B    '7',0
000012B2= 38 00                    174                          DC.B    '8',0
000012B4= 39 00                    175                          DC.B    '9',0
000012B6= 41 00                    176                          DC.B    'A',0
000012B8= 42 00                    177                          DC.B    'B',0
000012BA= 43 00                    178                          DC.B    'C',0
000012BC= 44 00                    179                          DC.B    'D',0
000012BE= 45 00                    180                          DC.B    'E',0
000012C0= 46 00                    181                          DC.B    'F',0
000012C2= 23 00                    182  poundsign               DC.B    '#',0
000012C4= 24 00                    183  dollarsign              DC.B    '$',0
000012C6= 2B 00                    184  plussign                DC.B    '+',0
000012C8= 2D 00                    185  minussign               DC.B    '-',0
000012CA= 2C 00                    186  commasign               DC.B    ',',0
000012CC= 2F 00                    187  backslashsigh           DC.B    '/',0
000012CE= 28 00                    188  openparen               DC.B    '(',0
000012D0= 29 00                    189  closeparen              DC.B    ')',0
000012D2= 20 00                    190  space                   DC.B    ' ',0   
000012D4= 2E 42 00                 191  size_b                  DC.B    '.B',0
000012D7= 2E 57 00                 192  size_w                  DC.B    '.W',0        
000012DA= 2E 4C 00                 193  size_l                  DC.B    '.L',0
000012DD                           194  
000012DD                           195  linecount               DS.B    1       *storeage for lines on a screen
000012DE= 01                       196  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012E0                           197  location_startData      DS.L    1       *location on where to start reading data
000012E4                           198  location_endData        DS.L    1       *location on where to end reading data
000012E8                           199  table_length            DS.B    1       *Number of spaces in the table to print to console
000012E9                           200  
000012E9                           201  
000012E9                           202  -------------------- end include --------------------
000012E9                           203             
000012E9                           204  EXIT                 
000012EA  FFFF FFFF                205         SIMHALT   
000012EE                           206  
000012EE                           207  
000012EE                           208  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012EE  4EF9 0000134E            209  jmp_table      JMP         code0000
000012F4                           210                  *ADDI
000012F4                           211  
000012F4  4EF9 00001362            212                 JMP         code0001
000012FA                           213  
000012FA  4EF9 00001368            214                 JMP         code0010
00001300                           215  
00001300  4EF9 0000136E            216                 JMP         code0011
00001306                           217  
00001306  4EF9 00001374            218                 JMP         code0100
0000130C                           219                             
0000130C  4EF9 000013A8            220                 JMP         code0101
00001312                           221                 * ADDQ
00001312                           222                  
00001312                           223        
00001312  4EF9 000013AE            224                 JMP         code0110
00001318                           225                 * BCC
00001318                           226                 * BGT
00001318                           227                 * BLE
00001318                           228                 
00001318  4EF9 000013B4            229                 JMP         code0111
0000131E                           230                 * MOVEQ
0000131E                           231  
0000131E  4EF9 000013BA            232                 JMP         code1000
00001324                           233                 * DIVU
00001324                           234                 * OR
00001324                           235  
00001324  4EF9 000013CC            236                 JMP         code1001
0000132A                           237                  *SUB
0000132A  4EF9 000013D2            238                 JMP         code1010
00001330                           239                 
00001330  4EF9 000013D8            240                 JMP         code1011
00001336                           241                 * CMP
00001336                           242                 
00001336  4EF9 000013DE            243                 JMP         code1100
0000133C                           244                 * MULS
0000133C                           245                 * AND
0000133C                           246          
0000133C  4EF9 000013F0            247                 JMP         code1101
00001342                           248                 *ADD
00001342                           249                 *ADDA
00001342  4EF9 0000143C            250                 JMP         code1110
00001348                           251                 * ASR
00001348                           252                 * ASL
00001348                           253                 * LSL
00001348                           254                 * LSR
00001348                           255                 * ROL
00001348                           256                 * ROR
00001348                           257  
00001348  4EF9 0000146C            258                 JMP         code1111
0000134E                           259  
0000134E                           260  
0000134E                           261  code0000      
0000134E  4EB9 00001970            262                 JSR          bits5to8 // RETURNS INTO D3
00001354  B6BC 00000006            263                 CMP.L        #%0110, D3
0000135A  6600 0720                264                 BNE          INVALID_OP
0000135E  6000 01CC                265                 BRA          ADDI  
00001362                           266  
00001362                           267  code0001      
00001362  4EB9 00001A7C            268                 JSR       INVALID_OP
00001368                           269  
00001368  4EB9 00001A7C            270  code0010        JSR       INVALID_OP
0000136E                           271  
0000136E  4EB9 00001A7C            272  code0011        JSR       INVALID_OP
00001374                           273  
00001374                           274  code0100       
00001374  4EB9 00001B10            275                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000137A                           276                  
0000137A                           277                 *NOP
0000137A  C47C 0FFF                278                 AND     #%0000111111111111,D2
0000137E  B4BC 00000E71            279                 CMP.L   #%000111001110001, D2
00001384  6700 0710                280                 BEQ     NOP
00001388                           281                 
00001388                           282                 *RTS
00001388  C47C 0FFF                283                 AND     #%0000111111111111,D2
0000138C  B4BC 00000E75            284                 CMP.L   #%0000111001110101, D2
00001392  6700 0710                285                 BEQ     RTS
00001396                           286  
00001396                           287                 *JSR
00001396  C47C 0FC0                288                 AND     #%0000111111000000,D2
0000139A  B4BC 00000E80            289                 CMP.L   #%0000111010000000,D2
000013A0  6700 0710                290                 BEQ     JSR
000013A4                           291                 
000013A4                           292                 * MOVEM
000013A4                           293                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000013A4                           294                ** AND     #%0000111110000000,D2
000013A4                           295                 * DATA REGISTER
000013A4                           296                ** CMP.L   #%0000100010000000, D2
000013A4                           297                 ** JSR      MOVEM
000013A4                           298                 * ADDRESS REGISTER (DECREMENTED)
000013A4                           299                 ** CMP.L  #%0000110010000000, D2
000013A4                           300                 ** JSR    MOVEM
000013A4                           301                  
000013A4                           302                  ** TO DO: BRANCH IF INVALID OPCODE
000013A4                           303                  *LEA - if it's not the top codes, it's LEA
000013A4  6000 022A                304                  BRA     LEA
000013A8                           305  code0101      
000013A8                           306  
000013A8  4EB9 000016BA            307                  JSR   ADDQ
000013AE                           308  
000013AE  4EB9 00001A7C            309  code0110         JSR       INVALID_OP
000013B4                           310  
000013B4                           311  code0111       
000013B4  4EB9 00001730            312                  JSR       MOVEQ
000013BA                           313  
000013BA                           314  code1000      
000013BA  4EB9 00001982            315                  JSR        bits8to10
000013C0  B67C 0003                316                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013C4  6700 038E                317                  BEQ        DIVU
000013C8  6000 03AA                318                  BRA        OR       ** OTHERWISE OR
000013CC                           319                  
000013CC                           320  
000013CC                           321  code1001       
000013CC  4EB9 00001790            322                 JSR         SUB
000013D2  4EB9 00001A7C            323  code1010       JSR       INVALID_OP
000013D8                           324  
000013D8                           325  code1011       
000013D8  4EB9 000017B0            326                 JSR         CMP
000013DE                           327  
000013DE                           328  code1100      
000013DE  4EB9 00001982            329                  JSR        bits8to10
000013E4  B67C 0007                330                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013E8  6700 03E6                331                  BEQ        MULS
000013EC  6000 0402                332                  BRA        AND       ** OTHERWISE AND
000013F0                           333  
000013F0                           334  code1101       
000013F0  4EB9 00001B10            335                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013F6                           336                 *ADDA
000013F6  4EB9 00001982            337                 JSR      bits8to10
000013FC  B67C 0003                338                 CMP      #%011, D3  ** WORD
00001400  6700 0070                339                 BEQ      ADDA
00001404  B67C 0007                340                 CMP      #%111, D3   ** LONG
00001408  6700 0068                341                 BEQ      ADDA
0000140C                           342                 
0000140C                           343                 *ADD
0000140C  B67C 0000                344                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00001410  6700 0086                345                 BEQ      ADD
00001414  B67C 0001                346                 CMP      #%001, D3   ** WORD TO DATA REGISTER
00001418  6700 007E                347                 BEQ      ADD
0000141C  B67C 0002                348                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001420  6700 0076                349                 BEQ      ADD
00001424  B67C 0004                350                 CMP      #%100, D3   ** BYTE TO EA
00001428  6700 006E                351                 BEQ      ADD
0000142C  B67C 0005                352                 CMP      #%101, D3   ** WORD TO EA
00001430  6700 0066                353                 BEQ      ADD
00001434  B67C 0006                354                 CMP      #%110, D3   ** LONG TO EA
00001438  6700 005E                355                 BEQ      ADD
0000143C                           356                 
0000143C                           357  
0000143C                           358  code1110       
0000143C                           359                  * ASR
0000143C  4EB9 000019C6            360                  JSR     bits1to10
00001442  B67C 0383                361                  CMP     #%1110000011,D3
00001446  6700 03C8                362                  BEQ     ASR
0000144A                           363                  
0000144A                           364                  * ASL
0000144A  B67C 0387                365                  CMP     #%1110000111,D3
0000144E  6700 03DC                366                  BEQ     ASL
00001452                           367                  
00001452                           368                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001452                           369                  * LSL
00001452  4244                     370                  CLR     D4
00001454  2803                     371                  MOVE.L  D3,D4
00001456  C8BC 00A98671            372                  AND.L   #11110001,D4
0000145C  B87C 01C7                373                  CMP     #%111000111,D4
00001460  6700 03E6                374                  BEQ     LSL
00001464                           375                  
00001464                           376                  * LSR
00001464  B67C 038B                377                  CMP     #%1110001011,D3
00001468  6700 03FA                378                  BEQ     LSR
0000146C                           379                  
0000146C                           380                  * ROL
0000146C                           381                  
0000146C                           382                  * ROR
0000146C                           383  
0000146C  4EB9 00001A7C            384  code1111       JSR       INVALID_OP
00001472                           385  
00001472                           386  ADDA    
00001472  4EB9 0000147C            387                 JSR     ADDA_BUFFER
00001478  6000 06BC                388                 BRA     PRINT_BUFFER
0000147C                           389                  
0000147C                           390  ADDA_BUFFER
0000147C  1CFC 0041                391                 MOVE.B   #'A',(A6)+
00001480  1CFC 0044                392                 MOVE.B   #'D', (A6)+  
00001484  1CFC 0044                393                 MOVE.B   #'D', (A6)+
00001488  1CFC 0041                394                 MOVE.B   #'A', (A6)+
0000148C  4EB9 00001C74            395                 JSR      GETSIZE_ADDA
00001492  1CFC 0020                396                 MOVE.B   #' ', (A6)+
00001496  4E75                     397                 RTS
00001498                           398                 
00001498                           399                 
00001498                           400                 
00001498                           401  *********************************************               
00001498                           402  ADD    
00001498  4EB9 000014A0            403                 JSR     ADD_BUFFER
0000149E  4E75                     404                 RTS
000014A0                           405                  
000014A0                           406  ADD_BUFFER
000014A0  1CFC 0041                407                 MOVE.B   #'A',(A6)+
000014A4  1CFC 0044                408                 MOVE.B   #'D', (A6)+  
000014A8  1CFC 0044                409                 MOVE.B   #'D', (A6)+
000014AC  4EB9 00001BB2            410                 JSR      GETSIZE_ADD
000014B2                           411                 
000014B2                           412                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014B2                           413                 
000014B2  BC7C 0001                414                 CMP      #1,D6
000014B6  6600 0018                415                 BNE      ADD_DIRECTION_REVERSED
000014BA  4EB9 000014E6            416                 JSR      ADD_SRC
000014C0  1CFC 002C                417                 MOVE.B   #',', (A6)+
000014C4  1CFC 0020                418                 MOVE.B   #' ', (A6)+
000014C8  4EB9 0000150A            419                 JSR      ADD_DEST
000014CE  4E75                     420                 RTS
000014D0                           421                 
000014D0                           422                 
000014D0                           423  ADD_DIRECTION_REVERSED
000014D0                           424  
000014D0  4246                     425                 CLR      D6
000014D2  4EB9 0000150A            426                 JSR      ADD_DEST
000014D8  1CFC 002C                427                 MOVE.B   #',', (A6)+
000014DC  1CFC 0020                428                 MOVE.B   #' ', (A6)+
000014E0  4EB9 000014E6            429                 JSR      ADD_SRC             
000014E6                           430                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014E6                           431                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014E6                           432                 
000014E6                           433  ***********************************************        
000014E6                           434  
000014E6                           435  
000014E6                           436  
000014E6                           437  ****************************************************************************************
000014E6                           438  ADD_SRC
000014E6                           439  
000014E6  4EB9 00001994            440                  JSR    bits11to13
000014EC  3803                     441                  MOVE   D3,D4
000014EE  41F9 00001880            442                  LEA     jmp_mode,A0    *Index into the table
000014F4  C6FC 0006                443                  MULU   #6,D3
000014F8  4EB0 3000                444                  JSR    0(A0,D3)     
000014FC  4EB9 000019A6            445                  JSR    bits14to16
00001502  4EB9 000018B0            446                  JSR    insert_num
00001508  4E75                     447                  RTS
0000150A                           448  
0000150A                           449  
0000150A                           450  
0000150A                           451  
0000150A                           452  
0000150A                           453  ADD_DEST
0000150A  363C 0000                454                  MOVE.W #%000,D3     ;Can only have a data register.
0000150E  3803                     455                  MOVE   D3,D4
00001510  41F9 00001880            456                  LEA     jmp_mode,A0    *Index into the table
00001516  C6FC 0006                457                  MULU    #6,D3       *Form offset     
0000151A  4EB0 3000                458                  JSR     0(A0,D3)   *Jump indirect with index
0000151E                           459                  
0000151E  4EB9 0000195C            460                  JSR     bits5to7
00001524  4EB9 000018B0            461                  JSR     insert_num
0000152A  4E75                     462                  RTS
0000152C                           463                          
0000152C                           464  
0000152C                           465  
0000152C                           466  
0000152C                           467  ADDI
0000152C  4EB9 000015B4            468                  JSR     ADDI_BUFFER
00001532  4EB9 00001542            469                  JSR     ADDI_SRC
00001538  4EB9 00001550            470                  JSR     ADDI_DES
0000153E  6000 05F6                471                  BRA     PRINT_BUFFER
00001542                           472                  
00001542                           473  ADDI_SRC                        
00001542  1CFC 0023                474                  MOVE.B  #'#', (A6)+
00001546  1CFC 002C                475                  MOVE.B  #',', (A6)+
0000154A  1CFC 0020                476                  MOVE.B  #' ', (A6)+
0000154E  4E75                     477                  RTS
00001550                           478                    ** TODO: IMPLEMENT THIS IN EA
00001550                           479                  ** Immediate field—Data immediately following the instruction.
00001550                           480                  **If size = 00, the data is the low-order byte of the immediate word.
00001550                           481                  **If size = 01, the data is the entire immediate word.
00001550                           482                  **If size = 10, the data is the next two immediate words. 
00001550                           483  ADDI_DES
00001550                           484                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001550                           485                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001550  4EB9 00001994            486                 JSR      bits11to13
00001556  B67C 0001                487                 CMP      #%001, D3 **AN
0000155A  6700 051C                488                 BEQ      INVALID_EA
0000155E  B67C 0005                489                 CMP      #%101, D3 **COMPLICATED
00001562  6700 0514                490                 BEQ      INVALID_EA
00001566  B67C 0006                491                 CMP      #%110, D3 **COMPLICATED
0000156A  6700 050C                492                 BEQ      INVALID_EA
0000156E                           493                 
0000156E  4EB9 000019B6            494                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001574  B67C 003C                495                 CMP      #%111100,D3 // immediate data
00001578  6700 04FE                496                 BEQ      INVALID_EA
0000157C  B67C 003A                497                 CMP      #%111010,D3 // complicated
00001580  6700 04F6                498                 BEQ      INVALID_EA
00001584  B67C 003B                499                 CMP      #%111011,D3 // complicated
00001588  6700 04EE                500                 BEQ      INVALID_EA
0000158C                           501                 
0000158C  4EB9 00001994            502                 JSR      bits11to13 ** grab bits to jump with\
00001592  3803                     503                 MOVE     D3,D4
00001594  41F9 00001880            504                 LEA     jmp_mode,A0    *Index into the table
0000159A  C6FC 0006                505                 MULU    #6,D3       *Form offset     
0000159E  4EB0 3000                506                 JSR     0(A0,D3)   *Jump indirect with index
000015A2                           507                 
000015A2  4243                     508                 CLR     D3
000015A4  4EB9 000019A6            509                 JSR     bits14to16
000015AA  4EB9 000018B0            510                 JSR     insert_num
000015B0  4244                     511                 CLR     D4
000015B2                           512                 
000015B2  4E75                     513                 RTS
000015B4                           514                 
000015B4                           515                             
000015B4                           516  ADDI_BUFFER
000015B4  1CFC 0041                517                 MOVE.B   #'A',(A6)+
000015B8  1CFC 0044                518                 MOVE.B   #'D', (A6)+  
000015BC  1CFC 0044                519                 MOVE.B   #'D', (A6)+
000015C0  1CFC 0049                520                 MOVE.B   #'I', (A6)+
000015C4                           521                 
000015C4  4EB9 00001C3A            522                 JSR      GETSIZE_ADDI
000015CA                           523                 
000015CA                           524                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015CA                           525                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015CA  1CFC 0020                526                 MOVE.B   #' ', (A6)+
000015CE  4E75                     527                 RTS
000015D0                           528                              
000015D0                           529  LEA
000015D0  4EB9 00001982            530                 JSR      bits8to10   // 1 1 1
000015D6  B47C 0007                531                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015DA  6600 04A0                532                 BNE      INVALID_OP
000015DE  4EB9 000015F2            533                 JSR      LEA_BUFFER
000015E4  4EB9 00001604            534                 JSR      LEA_SRC
000015EA  4EB9 00001696            535                 JSR      LEA_DEST
000015F0  4E75                     536                 RTS
000015F2                           537                 
000015F2                           538  LEA_BUFFER 
000015F2  1CFC 004C                539                 MOVE.B   #'L',(A6)+
000015F6  1CFC 0045                540                 MOVE.B   #'E', (A6)+  
000015FA  1CFC 0041                541                 MOVE.B   #'A', (A6)+
000015FE  1CFC 0020                542                 MOVE.B   #' ', (A6)+
00001602  4E75                     543                 RTS
00001604                           544            
00001604                           545  LEA_SRC
00001604                           546              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00001604  4EB9 00001994            547              JSR      bits11to13  // source mode - D3
0000160A  B67C 0000                548              CMP      #%000, D3
0000160E  6700 0468                549              BEQ      INVALID_EA
00001612  B67C 0001                550              CMP      #%001, D3
00001616  6700 0460                551              BEQ      INVALID_EA
0000161A  B67C 0003                552              CMP      #%011, D3
0000161E  6700 0458                553              BEQ      INVALID_EA
00001622  B67C 0004                554              CMP      #%100, D3
00001626  6700 0450                555              BEQ      INVALID_EA
0000162A  B67C 0005                556              CMP      #%101, D3
0000162E  6700 0448                557              BEQ      INVALID_EA
00001632  B67C 0006                558              CMP      #%110, D3
00001636  6700 0440                559              BEQ      INVALID_EA
0000163A                           560  
0000163A                           561              
0000163A                           562              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
0000163A  4EB9 000019A6            563              JSR      bits14to16 // source register - d4
00001640  B67C 0004                564              CMP      #%100, D3
00001644  6700 0432                565              BEQ      INVALID_EA
00001648  B67C 0002                566              CMP      #%010, D3
0000164C  6700 042A                567              BEQ      INVALID_EA
00001650  B67C 0003                568              CMP      #%011, D3
00001654  6700 0422                569              BEQ      INVALID_EA
00001658                           570              
00001658                           571  
00001658  4EB9 000019B6            572               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000165E  B67C 003C                573               CMP      #%111100,D3 // immediate data
00001662  6700 0414                574               BEQ      INVALID_EA
00001666  B67C 003A                575               CMP      #%111010,D3 // complicated
0000166A  6700 040C                576               BEQ      INVALID_EA
0000166E  B67C 003B                577               CMP      #%111011,D3 // complicated
00001672  6700 0404                578               BEQ      INVALID_EA
00001676                           579     
00001676  4EB9 00001994            580               JSR      bits11to13 ** grab mode bits to jump with
0000167C  3803                     581               MOVE    D3,D4
0000167E                           582  
0000167E  41F9 00001880            583               LEA     jmp_mode,A0    *Index into the table
00001684  C6FC 0006                584               MULU    #6,D3       *Form offset     
00001688  4EB0 3000                585               JSR     0(A0,D3)   *Jump indirect with index
0000168C                           586   
0000168C  1CFC 002C                587               MOVE.B     #',', (A6)+
00001690  1CFC 0020                588               MOVE.B     #' ', (A6)+
00001694                           589  
00001694  4E75                     590               RTS
00001696                           591               
00001696                           592  LEA_DEST    
00001696  4244                     593                  CLR     D4
00001698  41F9 00001880            594                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
0000169E  363C 0001                595                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
000016A2  3803                     596                  MOVE    D3,D4
000016A4  C6FC 0006                597                  MULU    #6,D3       *Form offset     
000016A8  4EB0 3000                598                  JSR     0(A0,D3)   *Jump indirect with index
000016AC                           599                  
000016AC  4EB9 0000195C            600                  JSR     bits5to7
000016B2  4EB9 000018B0            601                  JSR     insert_num
000016B8                           602                  
000016B8  4E75                     603                  RTS
000016BA                           604  
000016BA                           605  
000016BA                           606  ADDQ
000016BA  4EB9 00001718            607                  JSR     ADDQ_BUFFER
000016C0  4EB9 000016D6            608                  JSR     ADDQ_SRC
000016C6  1CFC 002C                609                  MOVE.B  #',',(A6)+
000016CA  1CFC 0020                610                  MOVE.B  #' ',(A6)+
000016CE  4EB9 000016EE            611                  JSR     ADDQ_DEST
000016D4  4E75                     612                  RTS                 ;BRA     PRINT_BUFFER
000016D6                           613  
000016D6                           614  ADDQ_SRC
000016D6  4EB9 0000195C            615                  JSR     bits5to7
000016DC  1CFC 0023                616                  MOVE.B  #'#',(A6)+
000016E0  183C 0000                617                  MOVE.B  #%000,D4
000016E4  4EB9 000018B0            618                  JSR     insert_num
000016EA  4244                     619                  CLR     D4
000016EC  4E75                     620                  RTS
000016EE                           621                  
000016EE                           622  ADDQ_DEST
000016EE  4EB9 00001994            623                 JSR      bits11to13
000016F4  3803                     624                 MOVE     D3,D4
000016F6  41F9 00001880            625                 LEA     jmp_mode,A0    *Index into the table
000016FC  C6FC 0006                626                 MULU    #6,D3       *Form offset     
00001700  4EB0 3000                627                 JSR     0(A0,D3)   *Jump indirect with index
00001704  4243                     628                 CLR     D3
00001706  4EB9 000019A6            629                 JSR     bits14to16
0000170C  4EB9 000018B0            630                 JSR     insert_num
00001712  4244                     631                 CLR     D4
00001714  4243                     632                 CLR     D3
00001716  4E75                     633                 RTS
00001718                           634                 
00001718                           635  
00001718                           636  ADDQ_BUFFER
00001718  1CFC 0041                637                 MOVE.B   #'A',(A6)+
0000171C  1CFC 0044                638                 MOVE.B   #'D', (A6)+  
00001720  1CFC 0044                639                 MOVE.B   #'D', (A6)+
00001724  1CFC 0051                640                 MOVE.B   #'Q', (A6)+
00001728  4EB9 00001B78            641                 JSR      GETSIZE_ADDQ
0000172E                           642                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
0000172E                           643                 ** VALID SIZES ARE B (00),W (01) ,L (10)
0000172E  4E75                     644                 RTS               
00001730                           645                 
00001730                           646  MOVEQ
00001730  4EB9 0000173A            647                  JSR     MOVEQ_BUFFER
00001736  6000 03FE                648                  BRA     PRINT_BUFFER
0000173A                           649  
0000173A                           650  MOVEQ_BUFFER
0000173A  1CFC 004D                651                 MOVE.B   #'M',(A6)+
0000173E  1CFC 004F                652                 MOVE.B   #'O', (A6)+  
00001742  1CFC 0056                653                 MOVE.B   #'V', (A6)+
00001746  1CFC 0045                654                 MOVE.B   #'E', (A6)+
0000174A  1CFC 0051                655                 MOVE.B   #'Q', (A6)+
0000174E  1CFC 0020                656                 MOVE.B   #' ', (A6)+
00001752  4E75                     657                 RTS
00001754                           658  
00001754                           659  DIVU
00001754  4EB9 0000175E            660                  JSR     DIVU_BUFFER
0000175A  6000 03DA                661                  BRA     PRINT_BUFFER
0000175E                           662  
0000175E                           663  DIVU_BUFFER
0000175E  1CFC 0044                664                 MOVE.B   #'D',(A6)+
00001762  1CFC 0049                665                 MOVE.B   #'I', (A6)+  
00001766  1CFC 0056                666                 MOVE.B   #'V', (A6)+
0000176A  1CFC 0055                667                 MOVE.B   #'U', (A6)+
0000176E  1CFC 0020                668                 MOVE.B   #' ', (A6)+
00001772  4E75                     669                 RTS  
00001774                           670  OR    
00001774  4EB9 0000177E            671                 JSR     OR_BUFFER
0000177A  6000 03BA                672                 BRA     PRINT_BUFFER
0000177E                           673                  
0000177E                           674  OR_BUFFER
0000177E  1CFC 004F                675                 MOVE.B   #'O',(A6)+
00001782  1CFC 0052                676                 MOVE.B   #'R', (A6)+  
00001786  1CFC 002E                677                 MOVE.B   #'.', (A6)+
0000178A                           678                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000178A                           679                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000178A                           680                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000178A  1CFC 0020                681                 MOVE.B   #' ', (A6)+
0000178E  4E75                     682                 RTS   
00001790                           683  
00001790                           684  SUB   
00001790  4EB9 0000179A            685                 JSR     SUB_BUFFER
00001796  6000 039E                686                 BRA     PRINT_BUFFER               
0000179A                           687  
0000179A                           688  SUB_BUFFER
0000179A  1CFC 0053                689                 MOVE.B   #'S',(A6)+
0000179E  1CFC 0055                690                 MOVE.B   #'U', (A6)+  
000017A2  1CFC 0042                691                 MOVE.B   #'B', (A6)+
000017A6  1CFC 002E                692                 MOVE.B   #'.', (A6)+
000017AA                           693                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017AA                           694                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017AA                           695                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017AA  1CFC 0020                696                 MOVE.B   #' ', (A6)+
000017AE  4E75                     697                 RTS  
000017B0                           698  CMP   
000017B0  4EB9 000017BA            699                 JSR     CMP_BUFFER
000017B6  6000 037E                700                 BRA     PRINT_BUFFER
000017BA                           701                  
000017BA                           702  CMP_BUFFER
000017BA  1CFC 0043                703                 MOVE.B   #'C',(A6)+
000017BE  1CFC 004D                704                 MOVE.B   #'M', (A6)+  
000017C2  1CFC 0050                705                 MOVE.B   #'P', (A6)+
000017C6  1CFC 002E                706                 MOVE.B   #'.', (A6)+
000017CA                           707                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017CA                           708                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017CA                           709                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017CA  1CFC 0020                710                 MOVE.B   #' ', (A6)+
000017CE  4E75                     711                 RTS   
000017D0                           712                 
000017D0                           713  MULS
000017D0  4EB9 000017DA            714                  JSR     MULS_BUFFER
000017D6  6000 035E                715                  BRA     PRINT_BUFFER
000017DA                           716  
000017DA                           717  MULS_BUFFER
000017DA  1CFC 004D                718                 MOVE.B   #'M',(A6)+
000017DE  1CFC 0055                719                 MOVE.B   #'U', (A6)+  
000017E2  1CFC 004C                720                 MOVE.B   #'L', (A6)+
000017E6  1CFC 0053                721                 MOVE.B   #'S', (A6)+
000017EA  1CFC 0020                722                 MOVE.B   #' ', (A6)+
000017EE  4E75                     723                 RTS
000017F0                           724  
000017F0                           725  AND    
000017F0  4EB9 000017FA            726                 JSR     AND_BUFFER
000017F6  6000 033E                727                 BRA     PRINT_BUFFER
000017FA                           728                  
000017FA                           729  AND_BUFFER
000017FA  1CFC 0041                730                 MOVE.B   #'A',(A6)+
000017FE  1CFC 004E                731                 MOVE.B   #'N', (A6)+  
00001802  1CFC 0044                732                 MOVE.B   #'D', (A6)+
00001806  1CFC 002E                733                 MOVE.B   #'.', (A6)+
0000180A                           734                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000180A                           735                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000180A                           736                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000180A  1CFC 0020                737                 MOVE.B   #' ', (A6)+
0000180E  4E75                     738                 RTS    
00001810                           739  
00001810                           740  ASR     
00001810  4EB9 0000181A            741                  JSR     ASR_BUFFER
00001816  6000 031E                742                  BRA     PRINT_BUFFER
0000181A                           743  
0000181A                           744  ASR_BUFFER
0000181A  1CFC 0041                745                 MOVE.B   #'A',(A6)+
0000181E  1CFC 0053                746                 MOVE.B   #'S', (A6)+  
00001822  1CFC 0052                747                 MOVE.B   #'R', (A6)+
00001826  1CFC 0020                748                 MOVE.B   #' ', (A6)+
0000182A  4E75                     749                 RTS      
0000182C                           750  
0000182C                           751  ASL     
0000182C  4EB9 00001836            752                  JSR     ASL_BUFFER
00001832  6000 0302                753                  BRA     PRINT_BUFFER
00001836                           754  
00001836                           755  ASL_BUFFER
00001836  1CFC 0041                756                 MOVE.B   #'A',(A6)+
0000183A  1CFC 0053                757                 MOVE.B   #'S', (A6)+  
0000183E  1CFC 004C                758                 MOVE.B   #'L', (A6)+
00001842  1CFC 0020                759                 MOVE.B   #' ', (A6)+
00001846  4E75                     760                 RTS     
00001848                           761  
00001848                           762  LSL     
00001848  4EB9 00001852            763                  JSR     LSL_BUFFER
0000184E  6000 02E6                764                  BRA     PRINT_BUFFER
00001852                           765  
00001852                           766  LSL_BUFFER
00001852  1CFC 004C                767                 MOVE.B   #'L',(A6)+
00001856  1CFC 0053                768                 MOVE.B   #'S', (A6)+  
0000185A  1CFC 004C                769                 MOVE.B   #'L', (A6)+
0000185E  1CFC 0020                770                 MOVE.B   #' ', (A6)+
00001862  4E75                     771                 RTS     
00001864                           772  
00001864                           773  LSR     
00001864  4EB9 0000186E            774                  JSR     LSR_BUFFER
0000186A  6000 02CA                775                  BRA     PRINT_BUFFER
0000186E                           776  
0000186E                           777  LSR_BUFFER
0000186E  1CFC 004C                778                 MOVE.B   #'L',(A6)+
00001872  1CFC 0053                779                 MOVE.B   #'S', (A6)+  
00001876  1CFC 0052                780                 MOVE.B   #'R', (A6)+
0000187A  1CFC 0020                781                 MOVE.B   #' ', (A6)+
0000187E  4E75                     782                 RTS       
00001880                           783                 
00001880                           784  jmp_mode
00001880  4EF9 000019D8            785                  JMP     MODE000  ** DN
00001886  4EF9 000019DE            786                  JMP     MODE001  ** AN
0000188C  4EF9 000019E6            787                  JMP     MODE010  ** (AN)
00001892  4EF9 000019F0            788                  JMP     MODE011  ** (AN)+   
00001898  4EF9 000019FA            789                  JMP     MODE100  ** -(AN)
0000189E  4EF9 00001A08            790                  JMP     MODE101  **INVALID
000018A4  4EF9 00001A12            791                  JMP     MODE110  **INVALID
000018AA  4EF9 00001A1C            792                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000018B0                           793  
000018B0                           794                  
000018B0                           795  insert_num
000018B0                           796                  
000018B0                           797                  ;get number from D3
000018B0  B67C 0000                798                  CMP     #%000,D3       ;0
000018B4  6600 000A                799                  BNE     ONE         
000018B8  1CFC 0030                800                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000018BC  6000 006E                801                  BRA     FINISHER
000018C0                           802                  
000018C0  B67C 0001                803  ONE             CMP     #%001,D3       ;1
000018C4  6600 000A                804                  BNE     TWO 
000018C8  1CFC 0031                805                  MOVE.B  #'1',(A6)+
000018CC  6000 005E                806                  BRA     FINISHER
000018D0                           807  
000018D0                           808                  
000018D0  B67C 0002                809  TWO             CMP     #%010,D3        ;2
000018D4  6600 000A                810                  BNE     THREE
000018D8  1CFC 0032                811                  MOVE.B  #'2',(A6)+
000018DC  6000 004E                812                  BRA     FINISHER
000018E0                           813                  
000018E0  B67C 0003                814  THREE           CMP     #%011,D3        ;3
000018E4  6600 000A                815                  BNE     FOUR
000018E8  1CFC 0033                816                  MOVE.B  #'3',(A6)+
000018EC  6000 003E                817                  BRA     FINISHER
000018F0                           818                  
000018F0  B67C 0004                819  FOUR            CMP     #%100,D3        ;4
000018F4  6600 000A                820                  BNE     FIVE
000018F8  1CFC 0034                821                  MOVE.B  #'4',(A6)+
000018FC  6000 002E                822                  BRA     FINISHER
00001900                           823                  
00001900  B67C 0005                824  FIVE            CMP     #%101,D3        ;5
00001904  6600 000A                825                  BNE     SIX
00001908  1CFC 0035                826                  MOVE.B  #'5',(A6)+
0000190C  6000 001E                827                  BRA     FINISHER
00001910                           828                  
00001910  B67C 0006                829  SIX             CMP     #%110,D3        ;6
00001914  6600 000A                830                  BNE     SEVEN
00001918  1CFC 0036                831                  MOVE.B  #'6',(A6)+
0000191C  6000 000E                832                  BRA     FINISHER
00001920                           833                  
00001920  B67C 0007                834  SEVEN           CMP     #%111,D3        ;7
00001924  1CFC 0037                835                  MOVE.B  #'7',(A6)+
00001928  6000 0002                836                  BRA     FINISHER
0000192C                           837                  
0000192C                           838  FINISHER                
0000192C                           839                  
0000192C                           840                  ;check D4, do we need to do stuff?
0000192C  B87C 0002                841                  CMP     #%010,D4
00001930  6600 0008                842                  BNE     POSTINCR
00001934  1CFC 0029                843                  MOVE.B  #')',(A6)+
00001938  4E75                     844                  RTS
0000193A                           845                  
0000193A  B87C 0003                846  POSTINCR        CMP     #%011,D4
0000193E  6600 000C                847                  BNE     ONEPAREN
00001942  1CFC 0029                848                  MOVE.B  #')',(A6)+
00001946  1CFC 002B                849                  MOVE.B  #'+',(A6)+
0000194A  4E75                     850                  RTS
0000194C                           851                  
0000194C  B87C 0004                852  ONEPAREN        CMP     #%100,D4
00001950  6600 0008                853                  BNE     DONE
00001954  1CFC 0029                854                  MOVE.B  #')',(A6)+                
00001958                           855  
00001958  4244                     856                  CLR     D4
0000195A  4E75                     857  DONE            RTS
0000195C                           858  
0000195C                           859          
0000195C                           860                 
0000195C                           861  bits5to7
0000195C  4243                     862                 CLR      D3
0000195E  4EB9 00001B10            863                 JSR      COPY_OPCODE  // opcode copied to D2
00001964  C47C 0E00                864                 AND      #%0000111000000000, D2
00001968  E09A                     865                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000196A  E29A                     866                 ROR.L    #1, D2
0000196C  3602                     867                 MOVE.W   D2,D3 // moving isolated bits into d3
0000196E  4E75                     868                 RTS
00001970                           869                 
00001970                           870  bits5to8
00001970  4243                     871                 CLR      D3
00001972  4EB9 00001B10            872                 JSR      COPY_OPCODE  // opcode copied to D2
00001978  C47C 0F00                873                 AND      #%0000111100000000, D2
0000197C  E09A                     874                 ROR.L    #8, D2          // rotate bits so isolated at the end
0000197E  3602                     875                 MOVE.W   D2,D3 // moving isolated bits into d3
00001980  4E75                     876                 RTS
00001982                           877                 
00001982                           878  bits8to10
00001982  4243                     879                 CLR      D3
00001984  4EB9 00001B10            880                 JSR      COPY_OPCODE  // opcode copied to D2
0000198A  C47C 01C0                881                 AND      #%0000000111000000, D2
0000198E  EC9A                     882                 ROR.L    #6, D2          // rotate bits so isolated at the end
00001990  3602                     883                 MOVE.W   D2,D3 // moving isolated bits into d3
00001992  4E75                     884                 RTS               
00001994                           885             
00001994                           886  bits11to13
00001994  4243                     887                 CLR      D3
00001996  4EB9 00001B10            888                 JSR      COPY_OPCODE  // opcode copied to D2
0000199C  C47C 0038                889                 AND      #%0000000000111000, D2
000019A0  E69A                     890                 ROR.L    #3, D2          // rotate bits so isolated at the end
000019A2  3602                     891                 MOVE.W   D2,D3 // moving isolated bits into d3
000019A4  4E75                     892                 RTS
000019A6                           893             
000019A6                           894  bits14to16
000019A6  4243                     895                 CLR      D3
000019A8  4EB9 00001B10            896                 JSR      COPY_OPCODE  // opcode copied to D2
000019AE  C47C 0007                897                 AND      #%0000000000000111, D2
000019B2  3602                     898                 MOVE.W   D2,D3 // moving isolated bits into d3
000019B4  4E75                     899                 RTS
000019B6                           900  bits11to16
000019B6  4243                     901                 CLR      D3
000019B8  4EB9 00001B10            902                 JSR      COPY_OPCODE  // opcode copied to D2
000019BE  C47C 003F                903                 AND      #%0000000000111111, D2
000019C2  3602                     904                 MOVE.W   D2,D3 // moving isolated bits into d3
000019C4  4E75                     905                 RTS
000019C6                           906  bits1to10
000019C6  4243                     907                 CLR      D3
000019C8  4EB9 00001B10            908                 JSR      COPY_OPCODE  // opcode copied to D2
000019CE  C47C FFC0                909                 AND      #%1111111111000000, D2
000019D2  EC9A                     910                 ROR.L    #6, D2
000019D4  3602                     911                 MOVE.W   D2,D3 // moving isolated bits into d3
000019D6  4E75                     912                 RTS
000019D8                           913  ** DN       
000019D8                           914  MODE000         
000019D8  1CFC 0044                915                  MOVE.B  #'D',(A6)+     
000019DC  4E75                     916                  RTS
000019DE                           917  
000019DE                           918  ** AN
000019DE                           919  MODE001         
000019DE  4EB9 00001A30            920                  JSR ADDRESS_BUFFER  
000019E4  4E75                     921                  RTS      
000019E6                           922  
000019E6                           923   ** (AN)
000019E6                           924  MODE010         
000019E6  1CFC 0028                925                  MOVE.B  #'(', (A6)+
000019EA  1CFC 0041                926                  MOVE.B  #'A',(A6)+  
000019EE  4E75                     927                  RTS      
000019F0                           928  
000019F0                           929  ** (AN)+ 
000019F0                           930  MODE011         
000019F0  1CFC 0028                931                  MOVE.B  #'(', (A6)+
000019F4  1CFC 0041                932                  MOVE.B  #'A',(A6)+ 
000019F8  4E75                     933                  RTS       
000019FA                           934  
000019FA                           935   ** -(AN)
000019FA                           936  MODE100         
000019FA  1CFC 002D                937                  MOVE.B  #'-', (A6)+
000019FE  1CFC 0028                938                  MOVE.B  #'(', (A6)+
00001A02  1CFC 0041                939                  MOVE.B  #'A',(A6)+
00001A06  4E75                     940                  RTS
00001A08                           941                  
00001A08                           942  **INVALID               
00001A08                           943  MODE101         
00001A08  1CFC 0028                944                  MOVE.B  #'(', (A6)+
00001A0C  1CFC 0041                945                  MOVE.B  #'A',(A6)+ 
00001A10  4E75                     946                  RTS
00001A12                           947                  
00001A12                           948  **INVALID
00001A12                           949  MODE110         
00001A12  1CFC 0028                950                  MOVE.B  #'(', (A6)+
00001A16  1CFC 0041                951                  MOVE.B  #'A',(A6)+
00001A1A  4E75                     952                  RTS  
00001A1C                           953  
00001A1C                           954  ** ABSOLUTE AND IMMEDIATE            
00001A1C                           955  MODE111         
00001A1C                           956                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00001A1C  1CFC 0024                957                 MOVE.B   #'$', (A6)+  
00001A20  4EB9 00001B52            958                 JSR      PRINT_DEREF_ADDRESS
00001A26  544A                     959                 ADD.W    #2, A2
00001A28  4EB9 00001B52            960                 JSR      PRINT_DEREF_ADDRESS
00001A2E  4E75                     961                 RTS            
00001A30                           962                                          
00001A30                           963  ADDRESS_BUFFER
00001A30  1CFC 0041                964                  MOVE.B  #'A',(A6)+ 
00001A34  4E75                     965                  RTS
00001A36                           966                 
00001A36                           967  ABSOLUTE_BUFFER
00001A36  4243                     968                 CLR      D3
00001A38  3604                     969                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00001A3A  1CF8 0024                970                 MOVE.B   '$', (A6)+
00001A3E  B67C 0000                971                 CMP.W    #%000, D3
00001A42  6700 0010                972                 BEQ      ABSOLUTE_WORD_BUFFER
00001A46  4243                     973                 CLR      D3
00001A48  3604                     974                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00001A4A  B67C 0001                975                 CMP.W    #%001, D3
00001A4E  6700 0016                976                 BEQ      ABSOLUTE_LONG_BUFFER
00001A52  4E75                     977                 RTS
00001A54                           978                 
00001A54                           979  ABSOLUTE_WORD_BUFFER
00001A54                           980                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A54                           981                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A54  1CFC 0046                982                         MOVE.B #'F', (A6)+ 
00001A58  1CFC 0046                983                         MOVE.B #'F', (A6)+ 
00001A5C  1CFC 0046                984                         MOVE.B #'F', (A6)+ 
00001A60  1CFC 0046                985                         MOVE.B #'F', (A6)+ 
00001A64  4E75                     986                         RTS       
00001A66                           987                    
00001A66                           988  ABSOLUTE_LONG_BUFFER       
00001A66                           989                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A66                           990                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A66  1CFC 0047                991                         MOVE.B #'G', (A6)+ 
00001A6A  1CFC 0047                992                         MOVE.B #'G', (A6)+ 
00001A6E  1CFC 0047                993                         MOVE.B #'G', (A6)+ 
00001A72  1CFC 0047                994                         MOVE.B #'G', (A6)+
00001A76  4E75                     995                         RTS 
00001A78                           996  
00001A78                           997  INVALID_EA  
00001A78                           998                  * TODO: IMPLEMENT
00001A78                           999                  *** CLEAR OUT A6
00001A78                          1000                  ** PUT INVALID MESSAGE INTO A6
00001A78  6000 F86F               1001                  BRA EXIT
00001A7C                          1002  INVALID_OP  
00001A7C                          1003                  ** TODO: IMPLEMENT
00001A7C                          1004                 *** CLEAR OUT A6
00001A7C                          1005                  ** PUT INVALID MESSAGE INTO A6
00001A7C  1CFC 0044               1006                      MOVE.B #'D', (A6)+
00001A80  1CFC 0041               1007                      MOVE.B #'A', (A6)+
00001A84  1CFC 0054               1008                      MOVE.B #'T', (A6)+
00001A88  1CFC 0041               1009                      MOVE.B #'A', (A6)+ 
00001A8C  1CFC 0020               1010                      MOVE.B #' ', (A6)+ 
00001A90  4EB9 00001B52           1011                      JSR     PRINT_DEREF_ADDRESS
00001A96                          1012            
00001A96                          1013                  
00001A96  43F8 122B               1014  NOP                 LEA     NOP_disp,A1          
00001A9A  103C 000E               1015                      MOVE.B  #14,D0
00001A9E  4E4F                    1016                      TRAP    #15
00001AA0  6000 F847               1017                      BRA     EXIT
00001AA4                          1018                   
00001AA4                          1019  RTS      
00001AA4  43F8 1292               1020                      LEA     RTS_disp,A1          
00001AA8  103C 000E               1021                      MOVE.B  #14,D0
00001AAC  4E4F                    1022                      TRAP    #15 
00001AAE  6000 F839               1023                      BRA     EXIT
00001AB2                          1024  JSR      
00001AB2  4DF9 00001CCC           1025                      LEA     BUFFER, A6
00001AB8  1CFC 004A               1026                      MOVE.B #'J', (A6)+
00001ABC  1CFC 0053               1027                      MOVE.B #'S', (A6)+
00001AC0  1CFC 0052               1028                      MOVE.B #'R', (A6)+
00001AC4  1CFC 0020               1029                      MOVE.B #' ', (A6)+
00001AC8  43F9 00001CCC           1030                      LEA     BUFFER, A1
00001ACE                          1031                      ** BITS 10 - 12 MODE       
00001ACE                          1032                      ** BITS 13 - 16 REGISTER
00001ACE  103C 000E               1033                      MOVE.B  #14,D0
00001AD2  4E4F                    1034                      TRAP    #15 
00001AD4  6000 F813               1035                      BRA     EXIT
00001AD8                          1036                    
00001AD8                          1037  MOVEM      
00001AD8                          1038                     
00001AD8                          1039                      ** SIZE SUBROUTINE
00001AD8                          1040                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001AD8  C47C 0040               1041                      AND #%0000000001000000,D2 
00001ADC                          1042                      * WORD
00001ADC  B4BC 00000040           1043                      CMP.L   #%0000000001000000,D2
00001AE2  4EB9 00001AF8           1044                      JSR     MOVEM_W 
00001AE8                          1045                      *LONG
00001AE8  B4BC 00000040           1046                      CMP.L   #%0000000001000000,D2 
00001AEE                          1047                     ** JSR     MOVEM_L
00001AEE  103C 000E               1048                      MOVE.B  #14,D0
00001AF2  4E4F                    1049                      TRAP    #15
00001AF4  6000 F7F3               1050                      BRA     EXIT 
00001AF8                          1051                      
00001AF8                          1052  MOVEM_W 
00001AF8  43F8 1240               1053                       LEA     MOVEM_disp,A1
00001AFC                          1054                      * PRINT MOVEM
00001AFC  103C 000E               1055                       MOVE.B  #14,D0
00001B00  4E4F                    1056                       TRAP    #15
00001B02                          1057          
00001B02                          1058                      * PRINT WORD PORTION
00001B02  41F8 12D7               1059                       LEA     size_w, A0
00001B06  103C 000E               1060                       MOVE.B  #14,D0
00001B0A  4E4F                    1061                       TRAP    #15 
00001B0C                          1062          
00001B0C  6000 F7DB               1063                       BRA     EXIT 
00001B10                          1064       
00001B10                          1065     
00001B10                          1066  COPY_OPCODE 
00001B10                          1067                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001B10  4242                    1068                       CLR    D2  
00001B12  3405                    1069                       MOVE.W D5,D2 
00001B14  4E75                    1070                       RTS  
00001B16                          1071  
00001B16                          1072  PRINT_ADDRESS     
00001B16  4242                    1073                   CLR         D2
00001B18  143C 0010               1074                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B1C  220A                    1075                   MOVE.L      A2,D1        
00001B1E  103C 000F               1076                   MOVE.B      #15,D0          
00001B22  4E4F                    1077                   TRAP        #15            
00001B24  1CFC 0020               1078                   MOVE.B      #' ', (A6)+
00001B28  1CFC 0020               1079                   MOVE.B      #' ', (A6)+
00001B2C  1CFC 0020               1080                   MOVE.B      #' ', (A6)+
00001B30  1CFC 0020               1081                   MOVE.B      #' ', (A6)+
00001B34  4E75                    1082                   RTS     
00001B36                          1083  PRINT_BUFFER    
00001B36  1CFC 0000               1084                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B3A  43F9 00001CCC           1085                 LEA      BUFFER, A1
00001B40  303C 000E               1086                 MOVE.W   #14,D0
00001B44  4E4F                    1087                 TRAP     #15
00001B46  43F8 121B               1088                 LEA     linebreak,A1            *appends line at the end of the user input
00001B4A  103C 000E               1089                 MOVE.B  #14,D0
00001B4E  4E4F                    1090                 TRAP    #15
00001B50  4E75                    1091                 RTS  
00001B52                          1092  
00001B52                          1093  PRINT_DEREF_ADDRESS
00001B52  1CFC 0000               1094                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B56  43F9 00001CCC           1095                 LEA      BUFFER, A1
00001B5C  303C 000E               1096                 MOVE.W   #14,D0
00001B60  4E4F                    1097                 TRAP     #15
00001B62  4DF9 00001CCC           1098                 LEA      BUFFER, A6
00001B68  4242                    1099                 CLR         D2
00001B6A  143C 0010               1100                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B6E  3212                    1101                 MOVE.W      (A2),D1        // PRINT INVALID HEX OPCODE        
00001B70  103C 000F               1102                 MOVE.B      #15,D0          
00001B74  4E4F                    1103                 TRAP        #15 
00001B76  4E75                    1104                 RTS
00001B78                          1105  
00001B78                          1106  
00001B78                          1107   ***************************
00001B78                          1108  
00001B78                          1109  GETSIZE_ADDQ
00001B78                          1110                   
00001B78                          1111                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00001B78                          1112                 
00001B78  4EB8 1982               1113             JSR      bits8to10
00001B7C  B67C 0000               1114             CMP      #%000,D3
00001B80  6600 000C               1115             BNE      ADDQ_NOTBYTE
00001B84  4EB9 00001C9C           1116             JSR      SIZEISBYTE
00001B8A  4243                    1117             CLR      D3
00001B8C  4E75                    1118             RTS
00001B8E                          1119             
00001B8E                          1120  ADDQ_NOTBYTE
00001B8E  B67C 0001               1121             CMP      #%001,D3
00001B92  6600 000C               1122             BNE      ADDQ_NOTWORD
00001B96  4EB9 00001CAC           1123             JSR      SIZEISWORD
00001B9C  4243                    1124             CLR      D3
00001B9E  4E75                    1125             RTS
00001BA0                          1126             
00001BA0                          1127  ADDQ_NOTWORD
00001BA0  B67C 0002               1128             CMP      #%010,D3
00001BA4  6600 FED2               1129             BNE      INVALID_EA
00001BA8  4EB9 00001CBC           1130             JSR      SIZEISLONG
00001BAE  4243                    1131             CLR      D3
00001BB0  4E75                    1132             RTS
00001BB2                          1133                   
00001BB2                          1134                                   
00001BB2                          1135  ****************************
00001BB2                          1136  ****************************
00001BB2                          1137                     
00001BB2                          1138  ****************************
00001BB2                          1139  
00001BB2                          1140                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001BB2                          1141                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001BB2                          1142                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001BB2                          1143  GETSIZE_ADD
00001BB2  4EB8 1982               1144              JSR     bits8to10
00001BB6  B67C 0000               1145              CMP     #%000,D3
00001BBA  6600 0010               1146              BNE     ADD_NOTBYTE
00001BBE  4EB9 00001C9C           1147              JSR     SIZEISBYTE
00001BC4  3C3C 0001               1148              MOVE    #1,D6
00001BC8  4243                    1149              CLR     D3
00001BCA  4E75                    1150              RTS
00001BCC                          1151          
00001BCC                          1152  ADD_NOTBYTE 
00001BCC  B67C 0001               1153              CMP     #%001,D3
00001BD0  6600 0010               1154              BNE     ADD_NOTWORD
00001BD4  4EB9 00001CAC           1155              JSR     SIZEISWORD
00001BDA  3C3C 0001               1156              MOVE    #1,D6
00001BDE  4243                    1157              CLR     D3
00001BE0  4E75                    1158              RTS
00001BE2                          1159              
00001BE2                          1160  ADD_NOTWORD
00001BE2  B67C 0002               1161              CMP     #%010,D3
00001BE6  6600 0010               1162              BNE     ADD_NOTLEFT
00001BEA  4EB9 00001CBC           1163              JSR     SIZEISLONG
00001BF0  3C3C 0001               1164              MOVE    #1,D6
00001BF4  4243                    1165              CLR     D3
00001BF6  4E75                    1166              RTS
00001BF8                          1167              
00001BF8                          1168  ADD_NOTLEFT     ;check other direction
00001BF8  B67C 0004               1169              CMP     #%100,D3
00001BFC  6600 0010               1170              BNE     ADD_NOTRIGHTBYTE
00001C00  4EB9 00001C9C           1171              JSR     SIZEISBYTE
00001C06  3C3C 0002               1172              MOVE    #2,D6
00001C0A  4243                    1173              CLR     D3
00001C0C  4E75                    1174              RTS
00001C0E                          1175              
00001C0E                          1176  ADD_NOTRIGHTBYTE
00001C0E  B67C 0005               1177              CMP     #%101,D3
00001C12  6600 0010               1178              BNE     ADD_NOTRIGHTWORD
00001C16  4EB9 00001CAC           1179              JSR     SIZEISWORD
00001C1C  3C3C 0002               1180              MOVE    #2,D6
00001C20  4243                    1181              CLR     D3
00001C22  4E75                    1182              RTS
00001C24                          1183  
00001C24                          1184  ADD_NOTRIGHTWORD
00001C24  B67C 0006               1185              CMP     #%110,D3
00001C28  6600 FE4E               1186              BNE     INVALID_EA
00001C2C  4EB9 00001CBC           1187              JSR     SIZEISLONG
00001C32  3C3C 0002               1188              MOVE    #2,D6
00001C36  4243                    1189              CLR     D3
00001C38  4E75                    1190              RTS 
00001C3A                          1191                               
00001C3A                          1192                       
00001C3A                          1193                       
00001C3A                          1194  *****************************                  
00001C3A                          1195  GETSIZE_ADDI
00001C3A  4EB8 1982               1196          JSR     bits8to10
00001C3E  B67C 0000               1197          CMP     #%000,D3
00001C42  6600 000C               1198          BNE     ADDI_NOTBYTE
00001C46  4EB9 00001C9C           1199          JSR     SIZEISBYTE
00001C4C  4243                    1200          CLR     D3
00001C4E  4E75                    1201          RTS
00001C50                          1202  
00001C50                          1203  ADDI_NOTBYTE
00001C50  B67C 0001               1204          CMP     #%001,D3
00001C54  6600 000C               1205          BNE     ADDI_NOTWORD
00001C58  4EB9 00001CAC           1206          JSR     SIZEISWORD
00001C5E  4243                    1207          CLR     D3
00001C60  4E75                    1208          RTS
00001C62                          1209          
00001C62                          1210  ADDI_NOTWORD
00001C62  B67C 0002               1211          CMP     #%010,D3
00001C66  6600 FE10               1212          BNE     INVALID_EA
00001C6A  4EB9 00001CBC           1213          JSR     SIZEISLONG
00001C70  4243                    1214          CLR     D3
00001C72  4E75                    1215          RTS
00001C74                          1216          
00001C74                          1217                              
00001C74                          1218                       
00001C74                          1219  ********************************          
00001C74                          1220                       
00001C74                          1221                       
00001C74                          1222  ********************************                     
00001C74                          1223  GETSIZE_ADDA
00001C74  4EB8 1982               1224          JSR     bits8to10
00001C78  B67C 0003               1225          CMP     #%011,D3
00001C7C  6600 000C               1226          BNE     ADDA_NOTWORD
00001C80  4EB9 00001CAC           1227          JSR     SIZEISWORD
00001C86  4243                    1228          CLR     D3
00001C88  4E75                    1229          RTS
00001C8A                          1230          
00001C8A                          1231  
00001C8A                          1232          
00001C8A                          1233  ADDA_NOTWORD
00001C8A  B67C 0007               1234          CMP     #%111,D3
00001C8E  6600 FDE8               1235          BNE     INVALID_EA
00001C92  4EB9 00001CBC           1236          JSR     SIZEISLONG
00001C98  4243                    1237          CLR     D3
00001C9A  4E75                    1238          RTS
00001C9C                          1239  **********************************        
00001C9C                          1240      
00001C9C                          1241  SIZEISBYTE
00001C9C  1CFC 002E               1242         MOVE.B   #'.',(A6)+
00001CA0  1CFC 0042               1243         MOVE.B   #'B',(A6)+
00001CA4  1CFC 0020               1244         MOVE.B   #' ',(A6)+
00001CA8  4243                    1245         CLR      D3
00001CAA  4E75                    1246         RTS
00001CAC                          1247  
00001CAC                          1248  SIZEISWORD    
00001CAC  1CFC 002E               1249         MOVE.B   #'.',(A6)+
00001CB0  1CFC 0057               1250         MOVE.B   #'W',(A6)+
00001CB4  1CFC 0020               1251         MOVE.B   #' ',(A6)+
00001CB8  4243                    1252         CLR      D3
00001CBA  4E75                    1253         RTS
00001CBC                          1254                  
00001CBC                          1255  SIZEISLONG    
00001CBC  1CFC 002E               1256         MOVE.B   #'.',(A6)+
00001CC0  1CFC 004C               1257         MOVE.B   #'L',(A6)+
00001CC4  1CFC 0020               1258         MOVE.B   #' ',(A6)+
00001CC8                          1259  
00001CC8  4243                    1260         CLR      D3
00001CCA  4E75                    1261         RTS
00001CCC                          1262                  
00001CCC                          1263       
00001CCC= 00000001                1264  BUFFER DC.L 1     
00001CD0                          1265      INCLUDE 'helpers.x68'
00001CD0  1019                    1266  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001CD2  4EB9 00001CEA           1267                          JSR     sub_breakDownAs     *breaks down ASCII code
00001CD8  D280                    1268                          ADD.L   D0,D1               *load that char into D1
00001CDA  0C11 0000               1269                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001CDE  6700 0006               1270                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001CE2  E989                    1271                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001CE4  60EA                    1272                          BRA     sub_AsToHeLoop      *loops through again
00001CE6                          1273                          
00001CE6  2E01                    1274  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001CE8  4E75                    1275                          RTS
00001CEA  B03C 0030               1276  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001CEE  6D00 002A               1277                          BLT     as_ERROR                        
00001CF2                          1278                          
00001CF2  B03C 0039               1279                          CMP.B    #$39,D0            *is it an A-F letter?
00001CF6  6E00 000C               1280                          BGT     as_LETTER
00001CFA                          1281                          
00001CFA  6000 0002               1282                          BRA     as_NUMBER
00001CFE                          1283                                                 
00001CFE  0400 0030               1284  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001D02  4E75                    1285                          RTS
00001D04                          1286                          
00001D04  B03C 0041               1287  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001D08  6D00 0010               1288                          BLT     as_ERROR
00001D0C                          1289                          
00001D0C  B03C 0046               1290                          CMP.B     #$46, D0
00001D10  6E00 0008               1291                          BGT     as_ERROR
00001D14                          1292                          
00001D14  0400 0037               1293                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001D18  4E75                    1294                          RTS
00001D1A                          1295                          
00001D1A  43F9 65727200           1296  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001D20  103C 000D               1297                          MOVE.B  #13,D0
00001D24  4E4F                    1298                          TRAP    #15  
00001D26                          1299  sub_StartReadingData    
00001D26  0801 0000               1300                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001D2A  6600 0006               1301                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001D2E                          1302                          
00001D2E  7E00                    1303                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001D30  4E75                    1304  srdFinish               RTS
00001D32                          1305  
00001D32  43F8 1164               1306  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D36  103C 000E               1307                          MOVE.B  #14,D0
00001D3A  4E4F                    1308                          TRAP    #15
00001D3C                          1309                          
00001D3C  7E01                    1310                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D3E  60F0                    1311                          BRA     srdFinish
00001D40                          1312  sub_EndReadingData  
00001D40  0801 0000               1313                          BTST    #0,D1               *checks if LSB is 1, 
00001D44  6600 0018               1314                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001D48                          1315                          
00001D48  B5CB                    1316                          CMP.L   A3,A2               *end address must be greater than start address
00001D4A  6E00 0004               1317                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001D4E                          1318  
00001D4E  4E75                    1319  erdFinish               RTS
00001D50                          1320  
00001D50  43F8 118B               1321  erdFailAddrOrder        LEA     addr_order_check,A1
00001D54  103C 000E               1322                          MOVE.B  #14,D0
00001D58  4E4F                    1323                          TRAP    #15
00001D5A                          1324                          
00001D5A  7E01                    1325                          MOVE.L  #1,D7
00001D5C  60F0                    1326                          BRA     erdFinish
00001D5E                          1327  
00001D5E  43F8 1164               1328  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001D62  103C 000E               1329                          MOVE.B  #14,D0
00001D66  4E4F                    1330                          TRAP    #15
00001D68                          1331                          
00001D68  7E01                    1332                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001D6A  60E2                    1333                          BRA     erdFinish
00001D6C                          1334                          
00001D6C                          1335  
00001D6C                          1336  
00001D6C                          1337  
00001D6C                          1338  
00001D6C                          1339  
00001D6C                          1340  
00001D6C                          1341  
00001D6C                          1342  
00001D6C                          1343  -------------------- end include --------------------
00001D6C                          1344      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     1A36
ABSOLUTE_LONG_BUFFER  1A66
ABSOLUTE_WORD_BUFFER  1A54
ADD                 1498
ADDA                1472
ADDA_BUFFER         147C
ADDA_DISP           124A
ADDA_NOTWORD        1C8A
ADDI                152C
ADDI_BUFFER         15B4
ADDI_DES            1550
ADDI_DISP           124F
ADDI_NOTBYTE        1C50
ADDI_NOTWORD        1C62
ADDI_SRC            1542
ADDQ                16BA
ADDQ_BUFFER         1718
ADDQ_DEST           16EE
ADDQ_DISP           1254
ADDQ_NOTBYTE        1B8E
ADDQ_NOTWORD        1BA0
ADDQ_SRC            16D6
ADDRESS_BUFFER      1A30
ADDR_ODDBIT_MSG     1164
ADDR_ORDER_CHECK    118B
ADD_BUFFER          14A0
ADD_DEST            150A
ADD_DIRECTION_REVERSED  14D0
ADD_DISP            1246
ADD_NOTBYTE         1BCC
ADD_NOTLEFT         1BF8
ADD_NOTRIGHTBYTE    1C0E
ADD_NOTRIGHTWORD    1C24
ADD_NOTWORD         1BE2
ADD_SRC             14E6
AND                 17F0
AND_BUFFER          17FA
AND_DISP            126F
ASL                 182C
ASL_BUFFER          1836
ASL_DISP            127E
ASR                 1810
ASR_BUFFER          181A
ASR_DISP            1282
AS_ERROR            1D1A
AS_LETTER           1D04
AS_NUMBER           1CFE
ATHENDLOOP          1CE6
BACKSLASHSIGH       12CC
BCC_DISP            1296
BGT_DISP            129A
BITS11TO13          1994
BITS11TO16          19B6
BITS14TO16          19A6
BITS1TO10           19C6
BITS5TO7            195C
BITS5TO8            1970
BITS8TO10           1982
BLE_DISP            129E
BUFFER              1CCC
CLOSEPAREN          12D0
CLR_DISP            126B
CMP                 17B0
CMP_BUFFER          17BA
CODE0000            134E
CODE0001            1362
CODE0010            1368
CODE0011            136E
CODE0100            1374
CODE0101            13A8
CODE0110            13AE
CODE0111            13B4
CODE1000            13BA
CODE1001            13CC
CODE1010            13D2
CODE1011            13D8
CODE1100            13DE
CODE1101            13F0
CODE1110            143C
CODE1111            146C
COMMASIGN           12CA
COPY_OPCODE         1B10
CR                  D
DIVU                1754
DIVU_BUFFER         175E
DIVU_DISP           1262
DOLLARSIGN          12C4
DONE                195A
ENDTEST_MSG         11DF
ERDFAILADDRODDB     1D5E
ERDFAILADDRORDER    1D50
ERDFINISH           1D4E
EXIT                12E9
FINISHER            192C
FIVE                1900
FOUR                18F0
GETSIZE_ADD         1BB2
GETSIZE_ADDA        1C74
GETSIZE_ADDI        1C3A
GETSIZE_ADDQ        1B78
HEXATABLE           12A2
INPUT_BUFFER        12DE
INSERT_NUM          18B0
INVALIDEA_DISP      1223
INVALID_DISP        121E
INVALID_EA          1A78
INVALID_OP          1A7C
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            1880
JMP_TABLE           12EE
JSR                 1AB2
JSR_DISP            128E
LEA                 15D0
LEA_BUFFER          15F2
LEA_DEST            1696
LEA_DISP            1267
LEA_SRC             1604
LF                  A
LINEBREAK           121B
LINECOUNT           12DD
LOCATION_ENDDATA    12E4
LOCATION_END_MSG    1147
LOCATION_STARTDATA  12E0
LOCATION_START_MSG  1128
LSL                 1848
LSL_BUFFER          1852
LSL_DISP            1276
LSR                 1864
LSR_BUFFER          186E
LSR_DISP            127A
MAIN_LOOP           108E
MINUSSIGN           12C8
MODE000             19D8
MODE001             19DE
MODE010             19E6
MODE011             19F0
MODE100             19FA
MODE101             1A08
MODE110             1A12
MODE111             1A1C
MOVEA_DISP          1234
MOVEM               1AD8
MOVEM_DISP          1240
MOVEM_W             1AF8
MOVEQ               1730
MOVEQ_BUFFER        173A
MOVEQ_DISP          123A
MOVE_DISP           122F
MULS                17D0
MULS_BUFFER         17DA
MULS_DISP           125D
NOP                 1A96
NOP_DISP            122B
ONE                 18C0
ONEPAREN            194C
OPENPAREN           12CE
OR                  1774
OR_BUFFER           177E
OR_DISP             1273
PAUSE_MSG           11C5
PLUSSIGN            12C6
POSTINCR            193A
POUNDSIGN           12C2
PRINT_ADDRESS       1B16
PRINT_BUFFER        1B36
PRINT_DEREF_ADDRESS  1B52
ROL_DISP            1286
ROR_DISP            128A
RTS                 1AA4
RTS_DISP            1292
SEVEN               1920
SIX                 1910
SIZEISBYTE          1C9C
SIZEISLONG          1CBC
SIZEISWORD          1CAC
SIZE_B              12D4
SIZE_L              12DA
SIZE_W              12D7
SPACE               12D2
SRDFAILADDRODDB     1D32
SRDFINISH           1D30
START               1000
SUB                 1790
SUB_ASTOHELOOP      1CD0
SUB_BREAKDOWNAS     1CEA
SUB_BUFFER          179A
SUB_DISP            1259
SUB_ENDREADINGDATA  1D40
SUB_STARTREADINGDATA  1D26
TABLE_LENGTH        12E8
THREE               18E0
TWO                 18D0
WELCOME_MSG         10C4
