00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 1:00:26 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D5 - CURRENT OPCODE
00000000                             3  ***
00000000                             4  ***
00000000                             5  
00000000                             6  
00006000                             7  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  5201                       8                     ADDQ.B  #$1,D1      
00006002                             9                   
00006002  41F9 00006252             10                   LEA     jmp_table,A0    *Index into the table
00006008  4DF9 000069FA             11                   LEA     BUFFER, A6      * Load buffer into A6
0000600E  4283                      12                   CLR.L   D3              *Zero it
00006010                            13                   * TEST OPCODES
00006010                            14                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006010                            15                   ; MOVE.W  #$4E71,D3 * NOP
00006010                            16                   ; MOVE.W  #$4E75,D3 * RTS
00006010                            17                   ; MOVE.W  #$4EB0,D3 * JSR
00006010                            18                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006010                            19                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
00006010  363C D5FC                 20                    MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
00006014                            21                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006014                            22                   ; MOVE.W    #$5201,D3    *ADDQ
00006014                            23  
00006014                            24                   ; MOVE.W     #$7E70, D3 *MOVEQ
00006014                            25                   ; MOVE.W     #$80C0, D3 *DIVU
00006014                            26                   ; MOVE.W     #$8000, D3 * OR
00006014                            27                   ; MOVE.W        #$9000, D3 * SUB
00006014                            28                   ; MOVE.W        #$B000, D3 * CMP
00006014                            29                   ; MOVE.W        #$C1C0, D3 * MULS
00006014                            30                   ; MOVE.W        #$C000, D3 * AND
00006014                            31                   ; MOVE.W        #$E0F8, D3  *ASR
00006014                            32                   ; MOVE.W        #$E1E2, D3  *ASL
00006014  363C E393                 33                   MOVE.W        #$E393, D3  *LSL
00006018                            34                   ;MOVE.W        #$E2DC, D3  *LSR
00006018                            35  
00006018                            36                   
00006018  3A03                      37                   MOVE.W  D3,D5
0000601A  183C 000C                 38                   MOVE.B  #12,D4          *Shift 12 bits to the right  
0000601E                            39  
0000601E                            40             
0000601E  E86B                      41                   LSR.W   D4,D3       *Move the bits
00006020  C6FC 0006                 42                   MULU    #6,D3       *Form offset     
00006024  4EB0 3000                 43                   JSR     0(A0,D3)   *Jump indirect with index
00006028                            44                  
00006028                            45      INCLUDE 'definitions.x68'
00006028                            46  
00006028  =0000000D                 47  CR              EQU     $0D         carriage return
00006028  =0000000A                 48  LF              EQU     $0A         line feed
00006028= 43 53 53 20 34 32 ...     49  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
0000604C= 42 79 20 54 65 61 ...     50                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
0000608C= 45 6E 74 65 72 20 ...     51  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060AB= 45 6E 74 65 72 20 ...     52  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060C8= 41 64 64 72 65 73 ...     53  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
000060EF= 45 6E 64 69 6E 67 ...     54  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
00006129= 50 72 65 73 73 20 ...     55  pause_msg           DC.B    'Press enter to continue!',CR,LF
00006143= 52 65 61 63 68 65 ...     56  endTest_msg         DC.B    'Reached end of test data.', CR,LF
0000615E= 54 72 79 20 61 6E ...     57                      DC.B    'Try another location? (yes/no): ',0
0000617F= 0D 0A 00                  58  linebreak           DC.B    CR,LF,0
00006182                            59                      
00006182= 44 41 54 41 00            60  Invalid_disp        DC.B    'DATA',0
00006187= 57 52 4F 4E 47 45 ...     61  InvalidEA_disp      DC.B    'WRONGEA',0
0000618F                            62  
0000618F= 4E 4F 50 00               63  NOP_disp            DC.B    'NOP',0
00006193= 4D 4F 56 45 00            64  MOVE_disp           DC.B    'MOVE',0
00006198= 4D 4F 56 45 41 00         65  MOVEA_disp          DC.B    'MOVEA',0
0000619E= 4D 4F 56 45 51 00         66  MOVEQ_disp          DC.B    'MOVEQ',0
000061A4= 4D 4F 56 45 4D 00         67  MOVEM_disp          DC.B    'MOVEM',0
000061AA= 41 44 44 00               68  ADD_disp            DC.B    'ADD',0
000061AE= 41 44 44 41 00            69  ADDA_disp           DC.B    'ADDA',0
000061B3= 41 44 44 49 00            70  ADDI_disp           DC.B    'ADDI',0
000061B8= 41 44 44 51 00            71  ADDQ_disp           DC.B    'ADDQ',0
000061BD= 53 55 42 00               72  SUB_disp            DC.B    'SUB',0
000061C1= 4D 55 4C 53 00            73  MULS_disp           DC.B    'MULS',0
000061C6= 44 49 56 55 00            74  DIVU_disp           DC.B    'DIVU',0
000061CB= 4C 45 41 00               75  LEA_disp            DC.B    'LEA',0
000061CF= 43 4C 52 00               76  CLR_disp            DC.B    'CLR',0
000061D3= 41 4E 44 00               77  AND_disp            DC.B    'AND',0
000061D7= 4F 52 00                  78  OR_disp             DC.B    'OR',0
000061DA= 4C 53 4C 00               79  LSL_disp            DC.B    'LSL',0
000061DE= 4C 53 52 00               80  LSR_disp            DC.B    'LSR',0
000061E2= 41 53 4C 00               81  ASL_disp            DC.B    'ASL',0
000061E6= 41 53 52 00               82  ASR_disp            DC.B    'ASR',0
000061EA= 52 4F 4C 00               83  ROL_disp            DC.B    'ROL',0
000061EE= 52 4F 52 00               84  ROR_disp            DC.B    'ROR',0
000061F2= 4A 53 52 00               85  JSR_disp            DC.B    'JSR',0
000061F6= 52 54 53 00               86  RTS_disp            DC.B    'RTS',0
000061FA= 42 43 43 00               87  BCC_disp            DC.B    'BCC',0
000061FE= 42 47 54 00               88  BGT_disp            DC.B    'BGT',0    
00006202= 42 4C 45 00               89  BLE_disp            DC.b    'BLE',0
00006206                            90  
00006206                            91  
00006206= 30 00                     92  hexaTable               DC.B    '0',0
00006208= 31 00                     93                          DC.B    '1',0
0000620A= 32 00                     94                          DC.B    '2',0
0000620C= 33 00                     95                          DC.B    '3',0
0000620E= 34 00                     96                          DC.B    '4',0
00006210= 35 00                     97                          DC.B    '5',0
00006212= 36 00                     98                          DC.B    '6',0
00006214= 37 00                     99                          DC.B    '7',0
00006216= 38 00                    100                          DC.B    '8',0
00006218= 39 00                    101                          DC.B    '9',0
0000621A= 41 00                    102                          DC.B    'A',0
0000621C= 42 00                    103                          DC.B    'B',0
0000621E= 43 00                    104                          DC.B    'C',0
00006220= 44 00                    105                          DC.B    'D',0
00006222= 45 00                    106                          DC.B    'E',0
00006224= 46 00                    107                          DC.B    'F',0
00006226= 23 00                    108  poundsign               DC.B    '#',0
00006228= 24 00                    109  dollarsign              DC.B    '$',0
0000622A= 2B 00                    110  plussign                DC.B    '+',0
0000622C= 2D 00                    111  minussign               DC.B    '-',0
0000622E= 2C 00                    112  commasign               DC.B    ',',0
00006230= 2F 00                    113  backslashsigh           DC.B    '/',0
00006232= 28 00                    114  openparen               DC.B    '(',0
00006234= 29 00                    115  closeparen              DC.B    ')',0
00006236= 20 00                    116  space                   DC.B    ' ',0   
00006238= 2E 42 00                 117  size_b                  DC.B    '.B',0
0000623B= 2E 57 00                 118  size_w                  DC.B    '.W',0        
0000623E= 2E 4C 00                 119  size_l                  DC.B    '.L',0
00006241                           120  
00006241                           121  linecount               DS.B    1       *storeage for lines on a screen
00006242= 01                       122  input_buffer            DC.B    1       *creates input buffer for ASCII string
00006244                           123  location_startData      DS.L    1       *location on where to start reading data
00006248                           124  location_endData        DS.L    1       *location on where to end reading data
0000624C                           125  table_length            DS.B    1       *Number of spaces in the table to print to console
0000624D                           126  
0000624D                           127  
0000624D                           128  -------------------- end include --------------------
0000624D                           129             
0000624D                           130  EXIT                 
0000624E  FFFF FFFF                131         SIMHALT   
00006252                           132  
00006252                           133  
00006252                           134  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
00006252  4EF9 000062B2            135  jmp_table      JMP         code0000
00006258                           136                  *ADDI
00006258                           137  
00006258  4EF9 000062C6            138                 JMP         code0001
0000625E                           139  
0000625E  4EF9 000062CA            140                 JMP         code0010
00006264                           141  
00006264  4EF9 000062CE            142                 JMP         code0011
0000626A                           143  
0000626A  4EF9 000062D2            144                 JMP         code0100
00006270                           145                             
00006270  4EF9 00006306            146                 JMP         code0101
00006276                           147                 * ADDQ
00006276                           148                  
00006276                           149        
00006276  4EF9 0000630C            150                 JMP         code0110
0000627C                           151                 * BCC
0000627C                           152                 * BGT
0000627C                           153                 * BLE
0000627C                           154                 
0000627C  4EF9 00006310            155                 JMP         code0111
00006282                           156                 * MOVEQ
00006282                           157  
00006282  4EF9 00006316            158                 JMP         code1000
00006288                           159                 * DIVU
00006288                           160                 * OR
00006288                           161  
00006288  4EF9 00006328            162                 JMP         code1001
0000628E                           163                  *SUB
0000628E  4EF9 0000632E            164                 JMP         code1010
00006294                           165                 
00006294  4EF9 00006332            166                 JMP         code1011
0000629A                           167                 * CMP
0000629A                           168                 
0000629A  4EF9 00006338            169                 JMP         code1100
000062A0                           170                 * MULS
000062A0                           171                 * AND
000062A0                           172          
000062A0  4EF9 0000634A            173                 JMP         code1101
000062A6                           174                 *ADD
000062A6                           175                 *ADDA
000062A6  4EF9 00006396            176                 JMP         code1110
000062AC                           177                 * ASR
000062AC                           178                 * ASL
000062AC                           179                 * LSL
000062AC                           180                 * LSR
000062AC                           181                 * ROL
000062AC                           182                 * ROR
000062AC                           183  
000062AC  4EF9 000063C6            184                 JMP         code1111
000062B2                           185  
000062B2                           186  
000062B2                           187  code0000      
000062B2  4EB9 000067F2            188                 JSR          bits5to8 // RETURNS INTO D3
000062B8  B6BC 00000006            189                 CMP.L        #%0110, D3
000062BE  6600 0636                190                 BNE          INVALID_OP
000062C2  6000 014C                191                 BRA          ADDI  
000062C6                           192  
000062C6  4E72 2700                193  code0001       STOP        #$2700
000062CA                           194  
000062CA  4E72 2700                195  code0010       STOP        #$2700
000062CE                           196  
000062CE  4E72 2700                197  code0011       STOP        #$2700
000062D2                           198  
000062D2                           199  code0100       
000062D2  4EB9 00006974            200                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062D8                           201                  
000062D8                           202                 *NOP
000062D8  C47C 0FFF                203                 AND     #%0000111111111111,D2
000062DC  B4BC 00000E71            204                 CMP.L   #%000111001110001, D2
000062E2  6700 0616                205                 BEQ     NOP
000062E6                           206                 
000062E6                           207                 *RTS
000062E6  C47C 0FFF                208                 AND     #%0000111111111111,D2
000062EA  B4BC 00000E75            209                 CMP.L   #%0000111001110101, D2
000062F0  6700 0616                210                 BEQ     RTS
000062F4                           211  
000062F4                           212                 *JSR
000062F4  C47C 0FC0                213                 AND     #%0000111111000000,D2
000062F8  B4BC 00000E80            214                 CMP.L   #%0000111010000000,D2
000062FE  6700 0616                215                 BEQ     JSR
00006302                           216                 
00006302                           217                 * MOVEM
00006302                           218                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00006302                           219                ** AND     #%0000111110000000,D2
00006302                           220                 * DATA REGISTER
00006302                           221                ** CMP.L   #%0000100010000000, D2
00006302                           222                 ** JSR      MOVEM
00006302                           223                 * ADDRESS REGISTER (DECREMENTED)
00006302                           224                 ** CMP.L  #%0000110010000000, D2
00006302                           225                 ** JSR    MOVEM
00006302                           226                  
00006302                           227                  ** TO DO: BRANCH IF INVALID OPCODE
00006302                           228                  *LEA - if it's not the top codes, it's LEA
00006302  6000 0196                229                  BRA     LEA
00006306                           230  code0101      
00006306                           231  
00006306  4EB9 00006592            232                  JSR   ADDQ
0000630C                           233  
0000630C  4E72 2700                234  code0110        STOP        #$2700
00006310                           235  
00006310                           236  code0111       
00006310  4EB9 000065B2            237                  JSR       MOVEQ
00006316                           238  
00006316                           239  
00006316                           240  code1000      
00006316  4EB9 00006804            241                  JSR        bits8to10
0000631C  B67C 0003                242                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
00006320  6700 02B4                243                  BEQ        DIVU
00006324  6000 02D0                244                  BRA        OR       ** OTHERWISE OR
00006328                           245                  
00006328                           246  
00006328                           247  code1001       
00006328  4EB9 00006612            248                 JSR         SUB
0000632E  4E72 2700                249  code1010       STOP        #$2700
00006332                           250  
00006332                           251  code1011       
00006332  4EB9 00006632            252                 JSR         CMP
00006338                           253  
00006338                           254  code1100      
00006338  4EB9 00006804            255                  JSR        bits8to10
0000633E  B67C 0007                256                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
00006342  6700 030E                257                  BEQ        MULS
00006346  6000 032A                258                  BRA        AND       ** OTHERWISE AND
0000634A                           259  
0000634A                           260  code1101       
0000634A  4EB9 00006974            261                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
00006350                           262                 *ADDA
00006350  4EB9 00006804            263                 JSR      bits8to10
00006356  B67C 0003                264                 CMP      #%011, D3  ** WORD
0000635A  6700 006E                265                 BEQ      ADDA
0000635E  B67C 0007                266                 CMP      #%111, D3   ** LONG
00006362  6700 0066                267                 BEQ      ADDA
00006366                           268                 
00006366                           269                 *ADD
00006366  B67C 0000                270                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
0000636A  6700 0084                271                 BEQ      ADD
0000636E  B67C 0001                272                 CMP      #%001, D3   ** WORD TO DATA REGISTER
00006372  6700 007C                273                 BEQ      ADD
00006376  B67C 0002                274                 CMP      #%010, D3   ** LONG TO DATA REGISTER
0000637A  6700 0074                275                 BEQ      ADD
0000637E  B67C 0004                276                 CMP      #%100, D3   ** BYTE TO EA
00006382  6700 006C                277                 BEQ      ADD
00006386  B67C 0005                278                 CMP      #%101, D3   ** WORD TO EA
0000638A  6700 0064                279                 BEQ      ADD
0000638E  B67C 0006                280                 CMP      #%110, D3   ** LONG TO EA
00006392  6700 005C                281                 BEQ      ADD
00006396                           282                 
00006396                           283  
00006396                           284  code1110       
00006396                           285                  * ASR
00006396  4EB9 00006848            286                  JSR     bits1to10
0000639C  B67C 0383                287                  CMP     #%1110000011,D3
000063A0  6700 02F0                288                  BEQ     ASR
000063A4                           289                  
000063A4                           290                  * ASL
000063A4  B67C 0387                291                  CMP     #%1110000111,D3
000063A8  6700 0304                292                  BEQ     ASL
000063AC                           293                  
000063AC                           294                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
000063AC                           295                  * LSL
000063AC  4244                     296                  CLR     D4
000063AE  2803                     297                  MOVE.L  D3,D4
000063B0  C8BC 00A98671            298                  AND.L   #11110001,D4
000063B6  B87C 01C7                299                  CMP     #%111000111,D4
000063BA  6700 030E                300                  BEQ     LSL
000063BE                           301                  
000063BE                           302                  * LSR
000063BE  B67C 038B                303                  CMP     #%1110001011,D3
000063C2  6700 0322                304                  BEQ     LSR
000063C6                           305                  
000063C6                           306                  * ROL
000063C6                           307                  
000063C6                           308                  * ROR
000063C6                           309  
000063C6  4E72 2700                310  code1111       STOP        #$2700
000063CA                           311  
000063CA                           312  ADDA    
000063CA  4EB9 000063D4            313                 JSR     ADDA_BUFFER
000063D0  6000 050C                314                 BRA     PRINT_BUFFER
000063D4                           315                  
000063D4                           316  ADDA_BUFFER
000063D4  1CFC 0041                317                 MOVE.B   #'A',(A6)+
000063D8  1CFC 0044                318                 MOVE.B   #'D', (A6)+  
000063DC  1CFC 0044                319                 MOVE.B   #'D', (A6)+
000063E0  1CFC 0041                320                 MOVE.B   #'A', (A6)+
000063E4  4EB9 000069B4            321                 JSR      GETSIZE_ADDA
000063EA  1CFC 0020                322                 MOVE.B   #' ', (A6)+
000063EE  4E75                     323                 RTS
000063F0                           324                 
000063F0                           325  ADD    
000063F0  4EB9 000063FA            326                 JSR     ADD_BUFFER
000063F6  6000 04E6                327                 BRA     PRINT_BUFFER
000063FA                           328                  
000063FA                           329  ADD_BUFFER
000063FA  1CFC 0041                330                 MOVE.B   #'A',(A6)+
000063FE  1CFC 0044                331                 MOVE.B   #'D', (A6)+  
00006402  1CFC 0044                332                 MOVE.B   #'D', (A6)+
00006406  1CFC 002E                333                 MOVE.B   #'.', (A6)+
0000640A                           334                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000640A                           335                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000640A                           336                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000640A  1CFC 0020                337                 MOVE.B   #' ', (A6)+
0000640E  4E75                     338                 RTS               
00006410                           339  ADDI
00006410  4EB9 0000647E            340                  JSR     ADDI_BUFFER
00006416  4EB9 00006426            341                  JSR     ADDI_SRC
0000641C  4EB9 0000642C            342                  JSR     ADDI_DES
00006422  6000 04BA                343                  BRA     PRINT_BUFFER
00006426                           344                  
00006426                           345  ADDI_SRC                        
00006426  1CFC 0023                346                  MOVE.B  #'#', (A6)+
0000642A  4E75                     347                  RTS
0000642C                           348                    ** TODO: IMPLEMENT THIS IN EA
0000642C                           349                  ** Immediate field—Data immediately following the instruction.
0000642C                           350                  **If size = 00, the data is the low-order byte of the immediate word.
0000642C                           351                  **If size = 01, the data is the entire immediate word.
0000642C                           352                  **If size = 10, the data is the next two immediate words. 
0000642C                           353  ADDI_DES
0000642C                           354                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
0000642C                           355                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
0000642C  4EB9 00006816            356                 JSR      bits11to13
00006432  B67C 0001                357                 CMP      #%001, D3 **AN
00006436  6700 04BA                358                 BEQ      INVALID_EA
0000643A  B67C 0005                359                 CMP      #%101, D3 **COMPLICATED
0000643E  6700 04B2                360                 BEQ      INVALID_EA
00006442  B67C 0006                361                 CMP      #%110, D3 **COMPLICATED
00006446  6700 04AA                362                 BEQ      INVALID_EA
0000644A                           363                 
0000644A  4EB9 00006838            364                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00006450  B67C 003C                365                 CMP      #%111100,D3 // immediate data
00006454  6700 049C                366                 BEQ      INVALID_EA
00006458  B67C 003A                367                 CMP      #%111010,D3 // complicated
0000645C  6700 0494                368                 BEQ      INVALID_EA
00006460  B67C 003B                369                 CMP      #%111011,D3 // complicated
00006464  6700 048C                370                 BEQ      INVALID_EA
00006468                           371                 
00006468  4EB9 00006816            372                 JSR      bits11to13 ** grab bits to jump with
0000646E  41F9 00006702            373                 LEA     jmp_mode,A0    *Index into the table
00006474  C6FC 0006                374                 MULU    #6,D3       *Form offset     
00006478  4EB0 3000                375                 JSR     0(A0,D3)   *Jump indirect with index
0000647C  4E75                     376                 RTS
0000647E                           377                 
0000647E                           378                             
0000647E                           379  ADDI_BUFFER
0000647E  1CFC 0041                380                 MOVE.B   #'A',(A6)+
00006482  1CFC 0044                381                 MOVE.B   #'D', (A6)+  
00006486  1CFC 0044                382                 MOVE.B   #'D', (A6)+
0000648A  1CFC 0049                383                 MOVE.B   #'I', (A6)+
0000648E                           384                 
0000648E  4EB9 0000697A            385                 JSR      GETSIZE_ADDI
00006494                           386                 
00006494                           387                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
00006494                           388                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006494  1CFC 0020                389                 MOVE.B   #' ', (A6)+
00006498  4E75                     390                 RTS
0000649A                           391                              
0000649A                           392  LEA
0000649A  4EB9 00006804            393                 JSR      bits8to10   // 1 1 1
000064A0  B47C 0007                394                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000064A4  6600 0450                395                 BNE      INVALID_OP
000064A8  4EB9 000064BE            396                 JSR      LEA_BUFFER
000064AE  4EB9 000064D0            397                 JSR      LEA_SRC
000064B4  4EB9 0000656E            398                 JSR      LEA_DEST
000064BA  6000 0422                399                 BRA      PRINT_BUFFER
000064BE                           400                 
000064BE                           401  LEA_BUFFER 
000064BE  1CFC 004C                402                 MOVE.B   #'L',(A6)+
000064C2  1CFC 0045                403                 MOVE.B   #'E', (A6)+  
000064C6  1CFC 0041                404                 MOVE.B   #'A', (A6)+
000064CA  1CFC 0020                405                 MOVE.B   #' ', (A6)+
000064CE  4E75                     406                 RTS
000064D0                           407            
000064D0                           408  LEA_SRC
000064D0                           409              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
000064D0  4EB9 00006816            410              JSR      bits11to13  // source mode - D3
000064D6  B67C 0000                411              CMP      #%000, D3
000064DA  6700 0416                412              BEQ      INVALID_EA
000064DE  B67C 0001                413              CMP      #%001, D3
000064E2  6700 040E                414              BEQ      INVALID_EA
000064E6  B67C 0003                415              CMP      #%011, D3
000064EA  6700 0406                416              BEQ      INVALID_EA
000064EE  B67C 0004                417              CMP      #%100, D3
000064F2  6700 03FE                418              BEQ      INVALID_EA
000064F6  B67C 0005                419              CMP      #%101, D3
000064FA  6700 03F6                420              BEQ      INVALID_EA
000064FE  B67C 0006                421              CMP      #%110, D3
00006502  6700 03EE                422              BEQ      INVALID_EA
00006506                           423  
00006506                           424              
00006506                           425              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
00006506  4EB9 00006828            426              JSR      bits14to16 // source register - d4
0000650C  B67C 0004                427              CMP      #%100, D3
00006510  6700 03E0                428              BEQ      INVALID_EA
00006514  B67C 0002                429              CMP      #%010, D3
00006518  6700 03D8                430              BEQ      INVALID_EA
0000651C  B67C 0003                431              CMP      #%011, D3
00006520  6700 03D0                432              BEQ      INVALID_EA
00006524                           433              
00006524                           434  
00006524  4EB9 00006838            435               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000652A  B67C 003C                436               CMP      #%111100,D3 // immediate data
0000652E  6700 03C2                437               BEQ      INVALID_EA
00006532  B67C 003A                438               CMP      #%111010,D3 // complicated
00006536  6700 03BA                439               BEQ      INVALID_EA
0000653A  B67C 003B                440               CMP      #%111011,D3 // complicated
0000653E  6700 03B2                441               BEQ      INVALID_EA
00006542                           442     
00006542  4EB9 00006816            443               JSR      bits11to13 ** grab mode bits to jump with
00006548                           444  
00006548  41F9 00006702            445               LEA     jmp_mode,A0    *Index into the table
0000654E  C6FC 0006                446               MULU    #6,D3       *Form offset     
00006552  4EB0 3000                447               JSR     0(A0,D3)   *Jump indirect with index
00006556                           448               
00006556                           449  
00006556  4243                     450               CLR     D3
00006558  4EB9 00006828            451               JSR     bits14to16
0000655E  4EB9 00006732            452               JSR     insert_num
00006564                           453               
00006564  1CFC 002C                454               MOVE.B     #',', (A6)+
00006568  1CFC 0020                455               MOVE.B     #' ', (A6)+
0000656C                           456  
0000656C  4E75                     457               RTS
0000656E                           458               
0000656E                           459  LEA_DEST    
0000656E  4244                     460                  CLR     D4
00006570  41F9 00006702            461                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
00006576  363C 0001                462                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
0000657A  3803                     463                  MOVE    D3,D4
0000657C  C6FC 0006                464                  MULU    #6,D3       *Form offset     
00006580  4EB0 3000                465                  JSR     0(A0,D3)   *Jump indirect with index
00006584                           466                  
00006584  4EB9 000067DE            467                  JSR     bits5to7
0000658A  4EB9 00006732            468                  JSR     insert_num
00006590                           469                  
00006590  4E75                     470                  RTS
00006592                           471  
00006592                           472  
00006592                           473  ADDQ
00006592  4EB9 0000659C            474                  JSR     ADDQ_BUFFER
00006598  6000 0344                475                  BRA     PRINT_BUFFER
0000659C                           476  
0000659C                           477  ADDQ_BUFFER
0000659C  1CFC 0041                478                 MOVE.B   #'A',(A6)+
000065A0  1CFC 0044                479                 MOVE.B   #'D', (A6)+  
000065A4  1CFC 0044                480                 MOVE.B   #'D', (A6)+
000065A8  1CFC 0051                481                 MOVE.B   #'Q', (A6)+
000065AC                           482                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
000065AC                           483                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000065AC  1CFC 0020                484                 MOVE.B   #' ', (A6)+
000065B0  4E75                     485                 RTS
000065B2                           486                 
000065B2                           487  MOVEQ
000065B2  4EB9 000065BC            488                  JSR     MOVEQ_BUFFER
000065B8  6000 0324                489                  BRA     PRINT_BUFFER
000065BC                           490  
000065BC                           491  MOVEQ_BUFFER
000065BC  1CFC 004D                492                 MOVE.B   #'M',(A6)+
000065C0  1CFC 004F                493                 MOVE.B   #'O', (A6)+  
000065C4  1CFC 0056                494                 MOVE.B   #'V', (A6)+
000065C8  1CFC 0045                495                 MOVE.B   #'E', (A6)+
000065CC  1CFC 0051                496                 MOVE.B   #'Q', (A6)+
000065D0  1CFC 0020                497                 MOVE.B   #' ', (A6)+
000065D4  4E75                     498                 RTS
000065D6                           499  
000065D6                           500  DIVU
000065D6  4EB9 000065E0            501                  JSR     DIVU_BUFFER
000065DC  6000 0300                502                  BRA     PRINT_BUFFER
000065E0                           503  
000065E0                           504  DIVU_BUFFER
000065E0  1CFC 0044                505                 MOVE.B   #'D',(A6)+
000065E4  1CFC 0049                506                 MOVE.B   #'I', (A6)+  
000065E8  1CFC 0056                507                 MOVE.B   #'V', (A6)+
000065EC  1CFC 0055                508                 MOVE.B   #'U', (A6)+
000065F0  1CFC 0020                509                 MOVE.B   #' ', (A6)+
000065F4  4E75                     510                 RTS  
000065F6                           511  OR    
000065F6  4EB9 00006600            512                 JSR     OR_BUFFER
000065FC  6000 02E0                513                 BRA     PRINT_BUFFER
00006600                           514                  
00006600                           515  OR_BUFFER
00006600  1CFC 004F                516                 MOVE.B   #'O',(A6)+
00006604  1CFC 0052                517                 MOVE.B   #'R', (A6)+  
00006608  1CFC 002E                518                 MOVE.B   #'.', (A6)+
0000660C                           519                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000660C                           520                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000660C                           521                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000660C  1CFC 0020                522                 MOVE.B   #' ', (A6)+
00006610  4E75                     523                 RTS   
00006612                           524  
00006612                           525  SUB   
00006612  4EB9 0000661C            526                 JSR     SUB_BUFFER
00006618  6000 02C4                527                 BRA     PRINT_BUFFER               
0000661C                           528  
0000661C                           529  SUB_BUFFER
0000661C  1CFC 0053                530                 MOVE.B   #'S',(A6)+
00006620  1CFC 0055                531                 MOVE.B   #'U', (A6)+  
00006624  1CFC 0042                532                 MOVE.B   #'B', (A6)+
00006628  1CFC 002E                533                 MOVE.B   #'.', (A6)+
0000662C                           534                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000662C                           535                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000662C                           536                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000662C  1CFC 0020                537                 MOVE.B   #' ', (A6)+
00006630  4E75                     538                 RTS  
00006632                           539  CMP   
00006632  4EB9 0000663C            540                 JSR     CMP_BUFFER
00006638  6000 02A4                541                 BRA     PRINT_BUFFER
0000663C                           542                  
0000663C                           543  CMP_BUFFER
0000663C  1CFC 0043                544                 MOVE.B   #'C',(A6)+
00006640  1CFC 004D                545                 MOVE.B   #'M', (A6)+  
00006644  1CFC 0050                546                 MOVE.B   #'P', (A6)+
00006648  1CFC 002E                547                 MOVE.B   #'.', (A6)+
0000664C                           548                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000664C                           549                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000664C                           550                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000664C  1CFC 0020                551                 MOVE.B   #' ', (A6)+
00006650  4E75                     552                 RTS   
00006652                           553                 
00006652                           554  MULS
00006652  4EB9 0000665C            555                  JSR     MULS_BUFFER
00006658  6000 0284                556                  BRA     PRINT_BUFFER
0000665C                           557  
0000665C                           558  MULS_BUFFER
0000665C  1CFC 004D                559                 MOVE.B   #'M',(A6)+
00006660  1CFC 0055                560                 MOVE.B   #'U', (A6)+  
00006664  1CFC 004C                561                 MOVE.B   #'L', (A6)+
00006668  1CFC 0053                562                 MOVE.B   #'S', (A6)+
0000666C  1CFC 0020                563                 MOVE.B   #' ', (A6)+
00006670  4E75                     564                 RTS
00006672                           565  
00006672                           566  AND    
00006672  4EB9 0000667C            567                 JSR     AND_BUFFER
00006678  6000 0264                568                 BRA     PRINT_BUFFER
0000667C                           569                  
0000667C                           570  AND_BUFFER
0000667C  1CFC 0041                571                 MOVE.B   #'A',(A6)+
00006680  1CFC 004E                572                 MOVE.B   #'N', (A6)+  
00006684  1CFC 0044                573                 MOVE.B   #'D', (A6)+
00006688  1CFC 002E                574                 MOVE.B   #'.', (A6)+
0000668C                           575                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
0000668C                           576                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000668C                           577                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000668C  1CFC 0020                578                 MOVE.B   #' ', (A6)+
00006690  4E75                     579                 RTS    
00006692                           580  
00006692                           581  ASR     
00006692  4EB9 0000669C            582                  JSR     ASR_BUFFER
00006698  6000 0244                583                  BRA     PRINT_BUFFER
0000669C                           584  
0000669C                           585  ASR_BUFFER
0000669C  1CFC 0041                586                 MOVE.B   #'A',(A6)+
000066A0  1CFC 0053                587                 MOVE.B   #'S', (A6)+  
000066A4  1CFC 0052                588                 MOVE.B   #'R', (A6)+
000066A8  1CFC 0020                589                 MOVE.B   #' ', (A6)+
000066AC  4E75                     590                 RTS      
000066AE                           591  
000066AE                           592  ASL     
000066AE  4EB9 000066B8            593                  JSR     ASL_BUFFER
000066B4  6000 0228                594                  BRA     PRINT_BUFFER
000066B8                           595  
000066B8                           596  ASL_BUFFER
000066B8  1CFC 0041                597                 MOVE.B   #'A',(A6)+
000066BC  1CFC 0053                598                 MOVE.B   #'S', (A6)+  
000066C0  1CFC 004C                599                 MOVE.B   #'L', (A6)+
000066C4  1CFC 0020                600                 MOVE.B   #' ', (A6)+
000066C8  4E75                     601                 RTS     
000066CA                           602  
000066CA                           603  LSL     
000066CA  4EB9 000066D4            604                  JSR     LSL_BUFFER
000066D0  6000 020C                605                  BRA     PRINT_BUFFER
000066D4                           606  
000066D4                           607  LSL_BUFFER
000066D4  1CFC 004C                608                 MOVE.B   #'L',(A6)+
000066D8  1CFC 0053                609                 MOVE.B   #'S', (A6)+  
000066DC  1CFC 004C                610                 MOVE.B   #'L', (A6)+
000066E0  1CFC 0020                611                 MOVE.B   #' ', (A6)+
000066E4  4E75                     612                 RTS     
000066E6                           613  
000066E6                           614  LSR     
000066E6  4EB9 000066F0            615                  JSR     LSR_BUFFER
000066EC  6000 01F0                616                  BRA     PRINT_BUFFER
000066F0                           617  
000066F0                           618  LSR_BUFFER
000066F0  1CFC 004C                619                 MOVE.B   #'L',(A6)+
000066F4  1CFC 0053                620                 MOVE.B   #'S', (A6)+  
000066F8  1CFC 0052                621                 MOVE.B   #'R', (A6)+
000066FC  1CFC 0020                622                 MOVE.B   #' ', (A6)+
00006700  4E75                     623                 RTS       
00006702                           624                 
00006702                           625  jmp_mode
00006702  4EF9 0000685A            626                  JMP     MODE000  ** DN
00006708  4EF9 00006862            627                  JMP     MODE001  ** AN
0000670E  4EF9 0000686A            628                  JMP     MODE010  ** (AN)
00006714  4EF9 00006874            629                  JMP     MODE011  ** (AN)+   
0000671A  4EF9 0000687C            630                  JMP     MODE100  ** -(AN)
00006720  4EF9 00006884            631                  JMP     MODE101  **INVALID
00006726  4EF9 0000688C            632                  JMP     MODE110  **INVALID
0000672C  4EF9 00006894            633                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
00006732                           634  
00006732                           635                  
00006732                           636  insert_num
00006732                           637                  
00006732                           638                  ;get number from D3
00006732  B67C 0000                639                  CMP     #%000,D3       ;0
00006736  6600 000A                640                  BNE     ONE         
0000673A  1CFC 0030                641                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
0000673E  6000 006E                642                  BRA     FINISHER
00006742                           643                  
00006742  B67C 0001                644  ONE             CMP     #%001,D3       ;1
00006746  6600 000A                645                  BNE     TWO 
0000674A  1CFC 0031                646                  MOVE.B  #'1',(A6)+
0000674E  6000 005E                647                  BRA     FINISHER
00006752                           648  
00006752                           649                  
00006752  B67C 0002                650  TWO             CMP     #%010,D3        ;2
00006756  6600 000A                651                  BNE     THREE
0000675A  1CFC 0032                652                  MOVE.B  #'2',(A6)+
0000675E  6000 004E                653                  BRA     FINISHER
00006762                           654                  
00006762  B67C 0003                655  THREE           CMP     #%011,D3        ;3
00006766  6600 000A                656                  BNE     FOUR
0000676A  1CFC 0033                657                  MOVE.B  #'3',(A6)+
0000676E  6000 003E                658                  BRA     FINISHER
00006772                           659                  
00006772  B67C 0004                660  FOUR            CMP     #%100,D3        ;4
00006776  6600 000A                661                  BNE     FIVE
0000677A  1CFC 0034                662                  MOVE.B  #'4',(A6)+
0000677E  6000 002E                663                  BRA     FINISHER
00006782                           664                  
00006782  B67C 0005                665  FIVE            CMP     #%101,D3        ;5
00006786  6600 000A                666                  BNE     SIX
0000678A  1CFC 0035                667                  MOVE.B  #'5',(A6)+
0000678E  6000 001E                668                  BRA     FINISHER
00006792                           669                  
00006792  B67C 0006                670  SIX             CMP     #%110,D3        ;6
00006796  6600 000A                671                  BNE     SEVEN
0000679A  1CFC 0036                672                  MOVE.B  #'6',(A6)+
0000679E  6000 000E                673                  BRA     FINISHER
000067A2                           674                  
000067A2  B67C 0007                675  SEVEN           CMP     #%111,D3        ;7
000067A6  1CFC 0037                676                  MOVE.B  #'7',(A6)+
000067AA  6000 0002                677                  BRA     FINISHER
000067AE                           678                  
000067AE                           679  FINISHER                
000067AE                           680                  
000067AE                           681                  ;check D4, do we need to do stuff?
000067AE  B87C 0002                682                  CMP     #%010,D4
000067B2  6600 0008                683                  BNE     POSTINCR
000067B6  1CFC 0029                684                  MOVE.B  #')',(A6)+
000067BA  4E75                     685                  RTS
000067BC                           686                  
000067BC  B87C 0003                687  POSTINCR        CMP     #%011,D4
000067C0  6600 000C                688                  BNE     ONEPAREN
000067C4  1CFC 0029                689                  MOVE.B  #')',(A6)+
000067C8  1CFC 002B                690                  MOVE.B  #'+',(A6)+
000067CC  4E75                     691                  RTS
000067CE                           692                  
000067CE  B87C 0004                693  ONEPAREN        CMP     #%100,D4
000067D2  6600 0008                694                  BNE     DONE
000067D6  1CFC 0029                695                  MOVE.B  #')',(A6)+                
000067DA                           696  
000067DA  4244                     697                  CLR     D4
000067DC  4E75                     698  DONE            RTS
000067DE                           699  
000067DE                           700          
000067DE                           701                 
000067DE                           702  bits5to7
000067DE  4243                     703                 CLR      D3
000067E0  4EB9 00006974            704                 JSR      COPY_OPCODE  // opcode copied to D2
000067E6  C47C 0E00                705                 AND      #%0000111000000000, D2
000067EA  E09A                     706                 ROR.L    #8, D2          // rotate bits so isolated at the end
000067EC  E29A                     707                 ROR.L    #1, D2
000067EE  3602                     708                 MOVE.W   D2,D3 // moving isolated bits into d3
000067F0  4E75                     709                 RTS
000067F2                           710                 
000067F2                           711  bits5to8
000067F2  4243                     712                 CLR      D3
000067F4  4EB9 00006974            713                 JSR      COPY_OPCODE  // opcode copied to D2
000067FA  C47C 0F00                714                 AND      #%0000111100000000, D2
000067FE  E09A                     715                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006800  3602                     716                 MOVE.W   D2,D3 // moving isolated bits into d3
00006802  4E75                     717                 RTS
00006804                           718                 
00006804                           719  bits8to10
00006804  4243                     720                 CLR      D3
00006806  4EB9 00006974            721                 JSR      COPY_OPCODE  // opcode copied to D2
0000680C  C47C 01C0                722                 AND      #%0000000111000000, D2
00006810  EC9A                     723                 ROR.L    #6, D2          // rotate bits so isolated at the end
00006812  3602                     724                 MOVE.W   D2,D3 // moving isolated bits into d3
00006814  4E75                     725                 RTS               
00006816                           726             
00006816                           727  bits11to13
00006816  4243                     728                 CLR      D3
00006818  4EB9 00006974            729                 JSR      COPY_OPCODE  // opcode copied to D2
0000681E  C47C 0038                730                 AND      #%0000000000111000, D2
00006822  E69A                     731                 ROR.L    #3, D2          // rotate bits so isolated at the end
00006824  3602                     732                 MOVE.W   D2,D3 // moving isolated bits into d3
00006826  4E75                     733                 RTS
00006828                           734             
00006828                           735  bits14to16
00006828  4243                     736                 CLR      D3
0000682A  4EB9 00006974            737                 JSR      COPY_OPCODE  // opcode copied to D2
00006830  C47C 0007                738                 AND      #%0000000000000111, D2
00006834  3602                     739                 MOVE.W   D2,D3 // moving isolated bits into d3
00006836  4E75                     740                 RTS
00006838                           741  bits11to16
00006838  4243                     742                 CLR      D3
0000683A  4EB9 00006974            743                 JSR      COPY_OPCODE  // opcode copied to D2
00006840  C47C 003F                744                 AND      #%0000000000111111, D2
00006844  3602                     745                 MOVE.W   D2,D3 // moving isolated bits into d3
00006846  4E75                     746                 RTS
00006848                           747  bits1to10
00006848  4243                     748                 CLR      D3
0000684A  4EB9 00006974            749                 JSR      COPY_OPCODE  // opcode copied to D2
00006850  C47C FFC0                750                 AND      #%1111111111000000, D2
00006854  EC9A                     751                 ROR.L    #6, D2
00006856  3602                     752                 MOVE.W   D2,D3 // moving isolated bits into d3
00006858  4E75                     753                 RTS
0000685A                           754  ** DN       
0000685A                           755  MODE000         
0000685A  1CFC 0028                756                  MOVE.B  #'(', (A6)+
0000685E  1CFC 0041                757                  MOVE.B  #'A',(A6)+     
00006862                           758  
00006862                           759  ** AN
00006862                           760  MODE001         
00006862  4EB9 0000689C            761                  JSR ADDRESS_BUFFER  
00006868  4E75                     762                  RTS      
0000686A                           763  
0000686A                           764   ** (AN)
0000686A                           765  MODE010         
0000686A  1CFC 0028                766                  MOVE.B  #'(', (A6)+
0000686E  1CFC 0041                767                  MOVE.B  #'A',(A6)+  
00006872  4E75                     768                  RTS      
00006874                           769  
00006874                           770  ** (AN)+ 
00006874                           771  MODE011         
00006874  1CFC 0028                772                  MOVE.B  #'(', (A6)+
00006878  1CFC 0041                773                  MOVE.B  #'A',(A6)+        
0000687C                           774  
0000687C                           775   ** -(AN)
0000687C                           776  MODE100         
0000687C  1CFC 0028                777                  MOVE.B  #'(', (A6)+
00006880  1CFC 0041                778                  MOVE.B  #'A',(A6)+
00006884                           779                  
00006884                           780  **INVALID               
00006884                           781  MODE101         
00006884  1CFC 0028                782                  MOVE.B  #'(', (A6)+
00006888  1CFC 0041                783                  MOVE.B  #'A',(A6)+ 
0000688C                           784                  
0000688C                           785  **INVALID
0000688C                           786  MODE110         
0000688C  1CFC 0028                787                  MOVE.B  #'(', (A6)+
00006890  1CFC 0041                788                  MOVE.B  #'A',(A6)+  
00006894                           789  
00006894                           790  ** ABSOLUTE AND IMMEDIATE            
00006894                           791  MODE111         
00006894                           792                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00006894  4EB9 000068A2            793                 JSR ABSOLUTE_BUFFER  
0000689A  4E75                     794                 RTS            
0000689C                           795                                          
0000689C                           796  ADDRESS_BUFFER
0000689C  1CFC 0041                797                  MOVE.B  #'A',(A6)+ 
000068A0  4E75                     798                  RTS
000068A2                           799                 
000068A2                           800  ABSOLUTE_BUFFER
000068A2  4243                     801                 CLR      D3
000068A4  3604                     802                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000068A6  1CF8 0024                803                 MOVE.B   '$', (A6)+
000068AA  B67C 0000                804                 CMP.W    #%000, D3
000068AE  6700 000E                805                 BEQ      ABSOLUTE_WORD_BUFFER
000068B2  4243                     806                 CLR      D3
000068B4  3604                     807                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
000068B6  B67C 0001                808                 CMP.W    #%001, D3
000068BA  6700 0012                809                 BEQ      ABSOLUTE_LONG_BUFFER
000068BE                           810                 
000068BE                           811  ABSOLUTE_WORD_BUFFER
000068BE                           812                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
000068BE                           813                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
000068BE  1CFC 0046                814                         MOVE.B #'F', (A6)+ 
000068C2  1CFC 0046                815                         MOVE.B #'F', (A6)+ 
000068C6  1CFC 0046                816                         MOVE.B #'F', (A6)+ 
000068CA  1CFC 0046                817                         MOVE.B #'F', (A6)+   
000068CE                           818  ABSOLUTE_LONG_BUFFER       
000068CE                           819                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
000068CE                           820                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
000068CE  1CFC 0047                821                         MOVE.B #'G', (A6)+ 
000068D2  1CFC 0047                822                         MOVE.B #'G', (A6)+ 
000068D6  1CFC 0047                823                         MOVE.B #'G', (A6)+ 
000068DA  1CFC 0047                824                         MOVE.B #'G', (A6)+ 
000068DE                           825                                                      
000068DE                           826  
000068DE                           827  PRINT_BUFFER    
000068DE  1CFC 0000                828                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
000068E2  43F9 000069FA            829                 LEA      BUFFER, A1
000068E8  303C 000E                830                 MOVE.W   #14,D0
000068EC  4E4F                     831                 TRAP     #15
000068EE  6000 F95D                832                 BRA EXIT
000068F2                           833                 
000068F2                           834                 
000068F2                           835  
000068F2                           836  INVALID_EA  
000068F2                           837                  * TODO: IMPLEMENT
000068F2                           838                  *** CLEAR OUT A6
000068F2                           839                  ** PUT INVALID MESSAGE INTO A6
000068F2  6000 F959                840                  BRA EXIT
000068F6                           841  INVALID_OP  
000068F6                           842                  ** TODO: IMPLEMENT
000068F6                           843                 *** CLEAR OUT A6
000068F6                           844                  ** PUT INVALID MESSAGE INTO A6
000068F6  6000 F955                845                  BRA EXIT             
000068FA                           846                  
000068FA  43F8 618F                847  NOP                 LEA     NOP_disp,A1          
000068FE  103C 000E                848                      MOVE.B  #14,D0
00006902  4E4F                     849                      TRAP    #15
00006904  6000 F947                850                      BRA     EXIT
00006908                           851                   
00006908                           852  RTS      
00006908  43F8 61F6                853                      LEA     RTS_disp,A1          
0000690C  103C 000E                854                      MOVE.B  #14,D0
00006910  4E4F                     855                      TRAP    #15 
00006912  6000 F939                856                      BRA     EXIT
00006916                           857  JSR      
00006916  4DF9 000069FA            858                      LEA     BUFFER, A6
0000691C  1CFC 004A                859                      MOVE.B #'J', (A6)+
00006920  1CFC 0053                860                      MOVE.B #'S', (A6)+
00006924  1CFC 0052                861                      MOVE.B #'R', (A6)+
00006928  1CFC 0020                862                      MOVE.B #' ', (A6)+
0000692C  43F9 000069FA            863                      LEA     BUFFER, A1
00006932                           864                      ** BITS 10 - 12 MODE       
00006932                           865                      ** BITS 13 - 16 REGISTER
00006932  103C 000E                866                      MOVE.B  #14,D0
00006936  4E4F                     867                      TRAP    #15 
00006938  6000 F913                868                      BRA     EXIT
0000693C                           869                    
0000693C                           870  MOVEM      
0000693C                           871                     
0000693C                           872                      ** SIZE SUBROUTINE
0000693C                           873                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
0000693C  C47C 0040                874                      AND #%0000000001000000,D2 
00006940                           875                      * WORD
00006940  B4BC 00000040            876                      CMP.L   #%0000000001000000,D2
00006946  4EB9 0000695C            877                      JSR     MOVEM_W 
0000694C                           878                      *LONG
0000694C  B4BC 00000040            879                      CMP.L   #%0000000001000000,D2 
00006952                           880                     ** JSR     MOVEM_L
00006952  103C 000E                881                      MOVE.B  #14,D0
00006956  4E4F                     882                      TRAP    #15
00006958  6000 F8F3                883                      BRA     EXIT 
0000695C                           884                      
0000695C                           885  MOVEM_W 
0000695C  43F8 61A4                886                       LEA     MOVEM_disp,A1
00006960                           887                      * PRINT MOVEM
00006960  103C 000E                888                       MOVE.B  #14,D0
00006964  4E4F                     889                       TRAP    #15
00006966                           890          
00006966                           891                      * PRINT WORD PORTION
00006966  41F8 623B                892                       LEA     size_w, A0
0000696A  103C 000E                893                       MOVE.B  #14,D0
0000696E  4E4F                     894                       TRAP    #15 
00006970                           895          
00006970  6000 F8DB                896                       BRA     EXIT 
00006974                           897       
00006974                           898     
00006974                           899  COPY_OPCODE 
00006974                           900                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00006974  4242                     901                       CLR    D2  
00006976  3405                     902                       MOVE.W D5,D2 
00006978  4E75                     903                       RTS  
0000697A                           904                       
0000697A                           905  *****************************                  
0000697A                           906  GETSIZE_ADDI
0000697A  4EB8 6804                907          JSR     bits8to10
0000697E  B67C 0000                908          CMP     #%000,D3
00006982  6600 000C                909          BNE     ADDI_NOTBYTE
00006986  4EB9 000069DC            910          JSR     SIZEISBYTE
0000698C  4243                     911          CLR     D3
0000698E  4E75                     912          RTS
00006990                           913  
00006990                           914  ADDI_NOTBYTE
00006990  B67C 0001                915          CMP     #%001,D3
00006994  6600 000C                916          BNE     ADDI_NOTWORD
00006998  4EB9 000069E6            917          JSR     SIZEISWORD
0000699E  4243                     918          CLR     D3
000069A0  4E75                     919          RTS
000069A2                           920          
000069A2                           921  ADDI_NOTWORD
000069A2  B67C 0002                922          CMP     #%010,D3
000069A6  6600 FF4A                923          BNE     INVALID_EA
000069AA  4EB9 000069F0            924          JSR     SIZEISLONG
000069B0  4243                     925          CLR     D3
000069B2  4E75                     926          RTS
000069B4                           927          
000069B4                           928                              
000069B4                           929                       
000069B4                           930  ********************************          
000069B4                           931                       
000069B4                           932                       
000069B4                           933  ********************************                     
000069B4                           934  GETSIZE_ADDA
000069B4  4EB8 6804                935          JSR     bits8to10
000069B8  B67C 0003                936          CMP     #%011,D3
000069BC  6600 000C                937          BNE     ADDA_NOTWORD
000069C0  4EB9 000069E6            938          JSR     SIZEISWORD
000069C6  4243                     939          CLR     D3
000069C8  4E75                     940          RTS
000069CA                           941          
000069CA                           942  
000069CA                           943          
000069CA                           944  ADDA_NOTWORD
000069CA  B67C 0007                945          CMP     #%111,D3
000069CE  6600 FF22                946          BNE     INVALID_EA
000069D2  4EB9 000069F0            947          JSR     SIZEISLONG
000069D8  4243                     948          CLR     D3
000069DA  4E75                     949          RTS
000069DC                           950  **********************************        
000069DC                           951      
000069DC                           952  SIZEISBYTE
000069DC  1CFC 002E                953         MOVE.B   #'.',(A6)+
000069E0  1CFC 0042                954         MOVE.B   #'B',(A6)+
000069E4  4E75                     955         RTS
000069E6                           956  
000069E6                           957  SIZEISWORD    
000069E6  1CFC 002E                958         MOVE.B   #'.',(A6)+
000069EA  1CFC 0057                959         MOVE.B   #'W',(A6)+
000069EE  4E75                     960         RTS
000069F0                           961                  
000069F0                           962  SIZEISLONG    
000069F0  1CFC 002E                963         MOVE.B   #'.',(A6)+
000069F4  1CFC 004C                964         MOVE.B   #'L',(A6)+
000069F8  4E75                     965         RTS
000069FA                           966                  
000069FA                           967       
000069FA= 20 20 20 20 20 00        968  BUFFER DC.B '     ',0     
00006A00                           969        
00006A00                           970  
00006A00                           971      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     68A2
ABSOLUTE_LONG_BUFFER  68CE
ABSOLUTE_WORD_BUFFER  68BE
ADD                 63F0
ADDA                63CA
ADDA_BUFFER         63D4
ADDA_DISP           61AE
ADDA_NOTWORD        69CA
ADDI                6410
ADDI_BUFFER         647E
ADDI_DES            642C
ADDI_DISP           61B3
ADDI_NOTBYTE        6990
ADDI_NOTWORD        69A2
ADDI_SRC            6426
ADDQ                6592
ADDQ_BUFFER         659C
ADDQ_DISP           61B8
ADDRESS_BUFFER      689C
ADDR_ODDBIT_MSG     60C8
ADDR_ORDER_CHECK    60EF
ADD_BUFFER          63FA
ADD_DISP            61AA
AND                 6672
AND_BUFFER          667C
AND_DISP            61D3
ASL                 66AE
ASL_BUFFER          66B8
ASL_DISP            61E2
ASR                 6692
ASR_BUFFER          669C
ASR_DISP            61E6
BACKSLASHSIGH       6230
BCC_DISP            61FA
BGT_DISP            61FE
BITS11TO13          6816
BITS11TO16          6838
BITS14TO16          6828
BITS1TO10           6848
BITS5TO7            67DE
BITS5TO8            67F2
BITS8TO10           6804
BLE_DISP            6202
BUFFER              69FA
CLOSEPAREN          6234
CLR_DISP            61CF
CMP                 6632
CMP_BUFFER          663C
CODE0000            62B2
CODE0001            62C6
CODE0010            62CA
CODE0011            62CE
CODE0100            62D2
CODE0101            6306
CODE0110            630C
CODE0111            6310
CODE1000            6316
CODE1001            6328
CODE1010            632E
CODE1011            6332
CODE1100            6338
CODE1101            634A
CODE1110            6396
CODE1111            63C6
COMMASIGN           622E
COPY_OPCODE         6974
CR                  D
DIVU                65D6
DIVU_BUFFER         65E0
DIVU_DISP           61C6
DOLLARSIGN          6228
DONE                67DC
ENDTEST_MSG         6143
EXIT                624D
FINISHER            67AE
FIVE                6782
FOUR                6772
GETSIZE_ADDA        69B4
GETSIZE_ADDI        697A
HEXATABLE           6206
INPUT_BUFFER        6242
INSERT_NUM          6732
INVALIDEA_DISP      6187
INVALID_DISP        6182
INVALID_EA          68F2
INVALID_OP          68F6
JMP_MODE            6702
JMP_TABLE           6252
JSR                 6916
JSR_DISP            61F2
LEA                 649A
LEA_BUFFER          64BE
LEA_DEST            656E
LEA_DISP            61CB
LEA_SRC             64D0
LF                  A
LINEBREAK           617F
LINECOUNT           6241
LOCATION_ENDDATA    6248
LOCATION_END_MSG    60AB
LOCATION_STARTDATA  6244
LOCATION_START_MSG  608C
LSL                 66CA
LSL_BUFFER          66D4
LSL_DISP            61DA
LSR                 66E6
LSR_BUFFER          66F0
LSR_DISP            61DE
MINUSSIGN           622C
MODE000             685A
MODE001             6862
MODE010             686A
MODE011             6874
MODE100             687C
MODE101             6884
MODE110             688C
MODE111             6894
MOVEA_DISP          6198
MOVEM               693C
MOVEM_DISP          61A4
MOVEM_W             695C
MOVEQ               65B2
MOVEQ_BUFFER        65BC
MOVEQ_DISP          619E
MOVE_DISP           6193
MULS                6652
MULS_BUFFER         665C
MULS_DISP           61C1
NOP                 68FA
NOP_DISP            618F
ONE                 6742
ONEPAREN            67CE
OPENPAREN           6232
OR                  65F6
OR_BUFFER           6600
OR_DISP             61D7
PAUSE_MSG           6129
PLUSSIGN            622A
POSTINCR            67BC
POUNDSIGN           6226
PRINT_BUFFER        68DE
ROL_DISP            61EA
ROR_DISP            61EE
RTS                 6908
RTS_DISP            61F6
SEVEN               67A2
SIX                 6792
SIZEISBYTE          69DC
SIZEISLONG          69F0
SIZEISWORD          69E6
SIZE_B              6238
SIZE_L              623E
SIZE_W              623B
SPACE               6236
START               6000
SUB                 6612
SUB_BUFFER          661C
SUB_DISP            61BD
TABLE_LENGTH        624C
THREE               6762
TWO                 6752
WELCOME_MSG         6028
