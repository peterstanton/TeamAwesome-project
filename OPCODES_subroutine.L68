00006000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 9:47:43 PM

00000000                             1  *** D3 - ISOLATED BITS FOR COMPARISONS
00000000                             2  *** D4 - MODE
00000000                             3  *** D5 - CURRENT OPCODE
00000000                             4  *** D6 - 
00000000                             5  ***
00000000                             6  
00000000                             7  
00006000                             8  START    ORG   $6000                 LEA     $A000,SP        *Load the SP
00006000  4EB9 00006006              9                                    JSR MAIN_LOOP
00006006                            10  
00006006                            11  *** D3 - ISOLATED BITS FOR COMPARISONS
00006006                            12  *** D4 - MODE
00006006                            13  *** D5 - CURRENT OPCODE
00006006                            14  ***
00006006                            15  *** 
00006006                            16  MAIN_LOOP
00006006  41F9 00006268             17                   LEA     jmp_table,A0    *Index into the table
0000600C  4DF9 00006BBE             18                   LEA     BUFFER, A6      * Load buffer into A6
00006012  4283                      19                   CLR.L   D3              *Zero it
00006014                            20                  ; MOVE.W  (A2), D3
00006014                            21  
00006014                            22                   * TEST OPCODES
00006014                            23                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
00006014                            24                   ;MOVE.W  #$4E71,D3 * NOP
00006014                            25                   ; MOVE.W  #$4E75,D3 * RTS
00006014                            26                   ; MOVE.W  #$4EB0,D3 * JSR
00006014                            27                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
00006014                            28                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
00006014  363C D5FC                 29                   MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
00006018                            30                   ; MOVE.W  #$D64A, D3  * ADD.W A2,D3
00006018                            31  
00006018                            32                   ; MOVE.W    #$5201,D3    *ADDQ
00006018                            33  
00006018                            34                   ; MOVE.W     #$7E70, D3 *MOVEQ
00006018                            35                   ; MOVE.W     #$80C0, D3 *DIVU
00006018                            36                   ; MOVE.W     #$8000, D3 * OR
00006018                            37                   ; MOVE.W        #$9000, D3 * SUB
00006018                            38                   ; MOVE.W        #$B000, D3 * CMP
00006018                            39                   ; MOVE.W        #$C1C0, D3 * MULS
00006018                            40                   ; MOVE.W        #$C000, D3 * AND
00006018                            41                   ; MOVE.W        #$E0F8, D3  *ASR
00006018                            42                   ; MOVE.W        #$E1E2, D3  *ASL
00006018                            43                   ; MOVE.W        #$E393, D3  *LSL
00006018                            44                   ; MOVE.W        #$E2DC, D3  *LSR
00006018                            45  
00006018  4EB9 00006A42             46                   JSR    PRINT_ADDRESS
0000601E  544A                      47                   ADD.W   #2,A2 * Can safely increment the current address by a word
00006020  3A03                      48                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
00006022  183C 000C                 49                   MOVE.B  #12,D4      *Shift 12 bits to the right  
00006026  E86B                      50                   LSR.W   D4,D3       *Move the bits
00006028  C6FC 0006                 51                   MULU    #6,D3       *Form offset     
0000602C  4EB0 3000                 52                   JSR     0(A0,D3)   *Jump indirect with index
00006030  4EB9 00006A62             53                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
00006036  B4CB                      54                   CMP     A3,A2
00006038  6E00 0229                 55                   BGT     EXIT
0000603C  60C8                      56                   BRA     MAIN_LOOP
0000603E                            57                   
0000603E                            58                                  
0000603E                            59      INCLUDE 'definitions.x68'
0000603E                            60  
0000603E  =0000000D                 61  CR              EQU     $0D         carriage return
0000603E  =0000000A                 62  LF              EQU     $0A         line feed
0000603E= 43 53 53 20 34 32 ...     63  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
00006062= 42 79 20 54 65 61 ...     64                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
000060A2= 45 6E 74 65 72 20 ...     65  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
000060C1= 45 6E 74 65 72 20 ...     66  location_end_msg    DC.B    'Enter End location address',CR,LF,0
000060DE= 41 64 64 72 65 73 ...     67  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
00006105= 45 6E 64 69 6E 67 ...     68  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
0000613F= 50 72 65 73 73 20 ...     69  pause_msg           DC.B    'Press enter to continue!',CR,LF
00006159= 52 65 61 63 68 65 ...     70  endTest_msg         DC.B    'Reached end of test data.', CR,LF
00006174= 54 72 79 20 61 6E ...     71                      DC.B    'Try another location? (yes/no): ',0
00006195= 0D 0A 00                  72  linebreak           DC.B    CR,LF,0
00006198                            73                      
00006198= 44 41 54 41 00            74  Invalid_disp        DC.B    'DATA',0
0000619D= 57 52 4F 4E 47 45 ...     75  InvalidEA_disp      DC.B    'WRONGEA',0
000061A5                            76  
000061A5= 4E 4F 50 00               77  NOP_disp            DC.B    'NOP',0
000061A9= 4D 4F 56 45 00            78  MOVE_disp           DC.B    'MOVE',0
000061AE= 4D 4F 56 45 41 00         79  MOVEA_disp          DC.B    'MOVEA',0
000061B4= 4D 4F 56 45 51 00         80  MOVEQ_disp          DC.B    'MOVEQ',0
000061BA= 4D 4F 56 45 4D 00         81  MOVEM_disp          DC.B    'MOVEM',0
000061C0= 41 44 44 00               82  ADD_disp            DC.B    'ADD',0
000061C4= 41 44 44 41 00            83  ADDA_disp           DC.B    'ADDA',0
000061C9= 41 44 44 49 00            84  ADDI_disp           DC.B    'ADDI',0
000061CE= 41 44 44 51 00            85  ADDQ_disp           DC.B    'ADDQ',0
000061D3= 53 55 42 00               86  SUB_disp            DC.B    'SUB',0
000061D7= 4D 55 4C 53 00            87  MULS_disp           DC.B    'MULS',0
000061DC= 44 49 56 55 00            88  DIVU_disp           DC.B    'DIVU',0
000061E1= 4C 45 41 00               89  LEA_disp            DC.B    'LEA',0
000061E5= 43 4C 52 00               90  CLR_disp            DC.B    'CLR',0
000061E9= 41 4E 44 00               91  AND_disp            DC.B    'AND',0
000061ED= 4F 52 00                  92  OR_disp             DC.B    'OR',0
000061F0= 4C 53 4C 00               93  LSL_disp            DC.B    'LSL',0
000061F4= 4C 53 52 00               94  LSR_disp            DC.B    'LSR',0
000061F8= 41 53 4C 00               95  ASL_disp            DC.B    'ASL',0
000061FC= 41 53 52 00               96  ASR_disp            DC.B    'ASR',0
00006200= 52 4F 4C 00               97  ROL_disp            DC.B    'ROL',0
00006204= 52 4F 52 00               98  ROR_disp            DC.B    'ROR',0
00006208= 4A 53 52 00               99  JSR_disp            DC.B    'JSR',0
0000620C= 52 54 53 00              100  RTS_disp            DC.B    'RTS',0
00006210= 42 43 43 00              101  BCC_disp            DC.B    'BCC',0
00006214= 42 47 54 00              102  BGT_disp            DC.B    'BGT',0    
00006218= 42 4C 45 00              103  BLE_disp            DC.b    'BLE',0
0000621C                           104  
0000621C                           105  
0000621C= 30 00                    106  hexaTable               DC.B    '0',0
0000621E= 31 00                    107                          DC.B    '1',0
00006220= 32 00                    108                          DC.B    '2',0
00006222= 33 00                    109                          DC.B    '3',0
00006224= 34 00                    110                          DC.B    '4',0
00006226= 35 00                    111                          DC.B    '5',0
00006228= 36 00                    112                          DC.B    '6',0
0000622A= 37 00                    113                          DC.B    '7',0
0000622C= 38 00                    114                          DC.B    '8',0
0000622E= 39 00                    115                          DC.B    '9',0
00006230= 41 00                    116                          DC.B    'A',0
00006232= 42 00                    117                          DC.B    'B',0
00006234= 43 00                    118                          DC.B    'C',0
00006236= 44 00                    119                          DC.B    'D',0
00006238= 45 00                    120                          DC.B    'E',0
0000623A= 46 00                    121                          DC.B    'F',0
0000623C= 23 00                    122  poundsign               DC.B    '#',0
0000623E= 24 00                    123  dollarsign              DC.B    '$',0
00006240= 2B 00                    124  plussign                DC.B    '+',0
00006242= 2D 00                    125  minussign               DC.B    '-',0
00006244= 2C 00                    126  commasign               DC.B    ',',0
00006246= 2F 00                    127  backslashsigh           DC.B    '/',0
00006248= 28 00                    128  openparen               DC.B    '(',0
0000624A= 29 00                    129  closeparen              DC.B    ')',0
0000624C= 20 00                    130  space                   DC.B    ' ',0   
0000624E= 2E 42 00                 131  size_b                  DC.B    '.B',0
00006251= 2E 57 00                 132  size_w                  DC.B    '.W',0        
00006254= 2E 4C 00                 133  size_l                  DC.B    '.L',0
00006257                           134  
00006257                           135  linecount               DS.B    1       *storeage for lines on a screen
00006258= 01                       136  input_buffer            DC.B    1       *creates input buffer for ASCII string
0000625A                           137  location_startData      DS.L    1       *location on where to start reading data
0000625E                           138  location_endData        DS.L    1       *location on where to end reading data
00006262                           139  table_length            DS.B    1       *Number of spaces in the table to print to console
00006263                           140  
00006263                           141  
00006263                           142  -------------------- end include --------------------
00006263                           143             
00006263                           144  EXIT                 
00006264  FFFF FFFF                145         SIMHALT   
00006268                           146  
00006268                           147  
00006268                           148  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
00006268  4EF9 000062C8            149  jmp_table      JMP         code0000
0000626E                           150                  *ADDI
0000626E                           151  
0000626E  4EF9 000062DC            152                 JMP         code0001
00006274                           153  
00006274  4EF9 000062E0            154                 JMP         code0010
0000627A                           155  
0000627A  4EF9 000062E4            156                 JMP         code0011
00006280                           157  
00006280  4EF9 000062E8            158                 JMP         code0100
00006286                           159                             
00006286  4EF9 0000631C            160                 JMP         code0101
0000628C                           161                 * ADDQ
0000628C                           162                  
0000628C                           163        
0000628C  4EF9 00006322            164                 JMP         code0110
00006292                           165                 * BCC
00006292                           166                 * BGT
00006292                           167                 * BLE
00006292                           168                 
00006292  4EF9 00006326            169                 JMP         code0111
00006298                           170                 * MOVEQ
00006298                           171  
00006298  4EF9 0000632C            172                 JMP         code1000
0000629E                           173                 * DIVU
0000629E                           174                 * OR
0000629E                           175  
0000629E  4EF9 0000633E            176                 JMP         code1001
000062A4                           177                  *SUB
000062A4  4EF9 00006344            178                 JMP         code1010
000062AA                           179                 
000062AA  4EF9 00006348            180                 JMP         code1011
000062B0                           181                 * CMP
000062B0                           182                 
000062B0  4EF9 0000634E            183                 JMP         code1100
000062B6                           184                 * MULS
000062B6                           185                 * AND
000062B6                           186          
000062B6  4EF9 00006360            187                 JMP         code1101
000062BC                           188                 *ADD
000062BC                           189                 *ADDA
000062BC  4EF9 000063AC            190                 JMP         code1110
000062C2                           191                 * ASR
000062C2                           192                 * ASL
000062C2                           193                 * LSL
000062C2                           194                 * LSR
000062C2                           195                 * ROL
000062C2                           196                 * ROR
000062C2                           197  
000062C2  4EF9 000063DC            198                 JMP         code1111
000062C8                           199  
000062C8                           200  
000062C8                           201  code0000      
000062C8  4EB9 00006898            202                 JSR          bits5to8 // RETURNS INTO D3
000062CE  B6BC 00000006            203                 CMP.L        #%0110, D3
000062D4  6600 06CE                204                 BNE          INVALID_OP
000062D8  6000 01D0                205                 BRA          ADDI  
000062DC                           206  
000062DC  4E72 2700                207  code0001       STOP        #$2700
000062E0                           208  
000062E0  4E72 2700                209  code0010       STOP        #$2700
000062E4                           210  
000062E4  4E72 2700                211  code0011       STOP        #$2700
000062E8                           212  
000062E8                           213  code0100       
000062E8  4EB9 00006A3C            214                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000062EE                           215                  
000062EE                           216                 *NOP
000062EE  C47C 0FFF                217                 AND     #%0000111111111111,D2
000062F2  B4BC 00000E71            218                 CMP.L   #%000111001110001, D2
000062F8  6700 06C8                219                 BEQ     NOP
000062FC                           220                 
000062FC                           221                 *RTS
000062FC  C47C 0FFF                222                 AND     #%0000111111111111,D2
00006300  B4BC 00000E75            223                 CMP.L   #%0000111001110101, D2
00006306  6700 06C8                224                 BEQ     RTS
0000630A                           225  
0000630A                           226                 *JSR
0000630A  C47C 0FC0                227                 AND     #%0000111111000000,D2
0000630E  B4BC 00000E80            228                 CMP.L   #%0000111010000000,D2
00006314  6700 06C8                229                 BEQ     JSR
00006318                           230                 
00006318                           231                 * MOVEM
00006318                           232                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00006318                           233                ** AND     #%0000111110000000,D2
00006318                           234                 * DATA REGISTER
00006318                           235                ** CMP.L   #%0000100010000000, D2
00006318                           236                 ** JSR      MOVEM
00006318                           237                 * ADDRESS REGISTER (DECREMENTED)
00006318                           238                 ** CMP.L  #%0000110010000000, D2
00006318                           239                 ** JSR    MOVEM
00006318                           240                  
00006318                           241                  ** TO DO: BRANCH IF INVALID OPCODE
00006318                           242                  *LEA - if it's not the top codes, it's LEA
00006318  6000 0234                243                  BRA     LEA
0000631C                           244  code0101      
0000631C                           245  
0000631C  4EB9 00006638            246                  JSR   ADDQ
00006322                           247  
00006322  4E72 2700                248  code0110        STOP        #$2700
00006326                           249  
00006326                           250  code0111       
00006326  4EB9 00006658            251                  JSR       MOVEQ
0000632C                           252  
0000632C                           253  code1000      
0000632C  4EB9 000068AA            254                  JSR        bits8to10
00006332  B67C 0003                255                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
00006336  6700 0344                256                  BEQ        DIVU
0000633A  6000 0360                257                  BRA        OR       ** OTHERWISE OR
0000633E                           258                  
0000633E                           259  
0000633E                           260  code1001       
0000633E  4EB9 000066B8            261                 JSR         SUB
00006344  4E72 2700                262  code1010       STOP        #$2700
00006348                           263  
00006348                           264  code1011       
00006348  4EB9 000066D8            265                 JSR         CMP
0000634E                           266  
0000634E                           267  code1100      
0000634E  4EB9 000068AA            268                  JSR        bits8to10
00006354  B67C 0007                269                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
00006358  6700 039E                270                  BEQ        MULS
0000635C  6000 03BA                271                  BRA        AND       ** OTHERWISE AND
00006360                           272  
00006360                           273  code1101       
00006360  4EB9 00006A3C            274                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
00006366                           275                 *ADDA
00006366  4EB9 000068AA            276                 JSR      bits8to10
0000636C  B67C 0003                277                 CMP      #%011, D3  ** WORD
00006370  6700 006E                278                 BEQ      ADDA
00006374  B67C 0007                279                 CMP      #%111, D3   ** LONG
00006378  6700 0066                280                 BEQ      ADDA
0000637C                           281                 
0000637C                           282                 *ADD
0000637C  B67C 0000                283                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00006380  6700 0084                284                 BEQ      ADD
00006384  B67C 0001                285                 CMP      #%001, D3   ** WORD TO DATA REGISTER
00006388  6700 007C                286                 BEQ      ADD
0000638C  B67C 0002                287                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00006390  6700 0074                288                 BEQ      ADD
00006394  B67C 0004                289                 CMP      #%100, D3   ** BYTE TO EA
00006398  6700 006C                290                 BEQ      ADD
0000639C  B67C 0005                291                 CMP      #%101, D3   ** WORD TO EA
000063A0  6700 0064                292                 BEQ      ADD
000063A4  B67C 0006                293                 CMP      #%110, D3   ** LONG TO EA
000063A8  6700 005C                294                 BEQ      ADD
000063AC                           295                 
000063AC                           296  
000063AC                           297  code1110       
000063AC                           298                  * ASR
000063AC  4EB9 000068EE            299                  JSR     bits1to10
000063B2  B67C 0383                300                  CMP     #%1110000011,D3
000063B6  6700 0380                301                  BEQ     ASR
000063BA                           302                  
000063BA                           303                  * ASL
000063BA  B67C 0387                304                  CMP     #%1110000111,D3
000063BE  6700 0394                305                  BEQ     ASL
000063C2                           306                  
000063C2                           307                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
000063C2                           308                  * LSL
000063C2  4244                     309                  CLR     D4
000063C4  2803                     310                  MOVE.L  D3,D4
000063C6  C8BC 00A98671            311                  AND.L   #11110001,D4
000063CC  B87C 01C7                312                  CMP     #%111000111,D4
000063D0  6700 039E                313                  BEQ     LSL
000063D4                           314                  
000063D4                           315                  * LSR
000063D4  B67C 038B                316                  CMP     #%1110001011,D3
000063D8  6700 03B2                317                  BEQ     LSR
000063DC                           318                  
000063DC                           319                  * ROL
000063DC                           320                  
000063DC                           321                  * ROR
000063DC                           322  
000063DC  4E72 2700                323  code1111       STOP        #$2700
000063E0                           324  
000063E0                           325  ADDA    
000063E0  4EB9 000063EA            326                 JSR     ADDA_BUFFER
000063E6  6000 067A                327                 BRA     PRINT_BUFFER
000063EA                           328                  
000063EA                           329  ADDA_BUFFER
000063EA  1CFC 0041                330                 MOVE.B   #'A',(A6)+
000063EE  1CFC 0044                331                 MOVE.B   #'D', (A6)+  
000063F2  1CFC 0044                332                 MOVE.B   #'D', (A6)+
000063F6  1CFC 0041                333                 MOVE.B   #'A', (A6)+
000063FA  4EB9 00006B66            334                 JSR      GETSIZE_ADDA
00006400  1CFC 0020                335                 MOVE.B   #' ', (A6)+
00006404  4E75                     336                 RTS
00006406                           337                 
00006406                           338                 
00006406                           339                 
00006406                           340  *********************************************               
00006406                           341  ADD    
00006406  4EB9 00006410            342                 JSR     ADD_BUFFER
0000640C  6000 0654                343                 BRA     PRINT_BUFFER
00006410                           344                  
00006410                           345  ADD_BUFFER
00006410  1CFC 0041                346                 MOVE.B   #'A',(A6)+
00006414  1CFC 0044                347                 MOVE.B   #'D', (A6)+  
00006418  1CFC 0044                348                 MOVE.B   #'D', (A6)+
0000641C  4EB9 00006AA4            349                 JSR      GETSIZE_ADD
00006422                           350                 
00006422                           351                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
00006422                           352                 
00006422  BC7C 0001                353                 CMP      #1,D6
00006426  6600 001A                354                 BNE      ADD_DIRECTION_REVERSED
0000642A  4EB9 00006464            355                 JSR      ADD_SRC
00006430  1CFC 002C                356                 MOVE.B   #',', (A6)+
00006434  1CFC 0020                357                 MOVE.B   #' ', (A6)+
00006438  4EB9 00006488            358                 JSR      ADD_DEST
0000643E  6000 001C                359                 BRA      ADD_DONE
00006442                           360                 
00006442                           361                 
00006442                           362  ADD_DIRECTION_REVERSED
00006442                           363  
00006442  4246                     364                 CLR      D6
00006444  4EB9 00006488            365                 JSR      ADD_DEST
0000644A  1CFC 002C                366                 MOVE.B   #',', (A6)+
0000644E  1CFC 0020                367                 MOVE.B   #' ', (A6)+
00006452  4EB9 00006464            368                 JSR      ADD_SRC
00006458  6000 0002                369                 BRA      ADD_DONE              
0000645C                           370                 
0000645C                           371                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
0000645C                           372                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
0000645C                           373                 
0000645C                           374  ADD_DONE       
0000645C  4246                     375                 CLR      D6
0000645E  4EB9 00006A62            376                 JSR     PRINT_BUFFER
00006464                           377  
00006464                           378                  
00006464                           379  
00006464                           380  ***********************************************        
00006464                           381  
00006464                           382  
00006464                           383  
00006464                           384  ****************************************************************************************
00006464                           385  ADD_SRC
00006464                           386  
00006464  4EB9 000068BC            387                  JSR    bits11to13
0000646A  3803                     388                  MOVE   D3,D4
0000646C  41F9 000067A8            389                  LEA     jmp_mode,A0    *Index into the table
00006472  C6FC 0006                390                  MULU   #6,D3
00006476  4EB0 3000                391                  JSR    0(A0,D3)     
0000647A  4EB9 000068CE            392                  JSR    bits14to16
00006480  4EB9 000067D8            393                  JSR    insert_num
00006486  4E75                     394                  RTS
00006488                           395  
00006488                           396  
00006488                           397  
00006488                           398  
00006488                           399  
00006488                           400  ADD_DEST
00006488  363C 0000                401                  MOVE.W #%000,D3     ;Can only have a data register.
0000648C  3803                     402                  MOVE   D3,D4
0000648E  41F9 000067A8            403                  LEA     jmp_mode,A0    *Index into the table
00006494  C6FC 0006                404                  MULU    #6,D3       *Form offset     
00006498  4EB0 3000                405                  JSR     0(A0,D3)   *Jump indirect with index
0000649C                           406                  
0000649C  4EB9 00006884            407                  JSR     bits5to7
000064A2  4EB9 000067D8            408                  JSR     insert_num
000064A8  4E75                     409                  RTS
000064AA                           410                          
000064AA                           411  
000064AA                           412  
000064AA                           413  
000064AA                           414  ADDI
000064AA  4EB9 00006532            415                  JSR     ADDI_BUFFER
000064B0  4EB9 000064C0            416                  JSR     ADDI_SRC
000064B6  4EB9 000064CE            417                  JSR     ADDI_DES
000064BC  6000 05A4                418                  BRA     PRINT_BUFFER
000064C0                           419                  
000064C0                           420  ADDI_SRC                        
000064C0  1CFC 0023                421                  MOVE.B  #'#', (A6)+
000064C4  1CFC 002C                422                  MOVE.B  #',', (A6)+
000064C8  1CFC 0020                423                  MOVE.B  #' ', (A6)+
000064CC  4E75                     424                  RTS
000064CE                           425                    ** TODO: IMPLEMENT THIS IN EA
000064CE                           426                  ** Immediate field—Data immediately following the instruction.
000064CE                           427                  **If size = 00, the data is the low-order byte of the immediate word.
000064CE                           428                  **If size = 01, the data is the entire immediate word.
000064CE                           429                  **If size = 10, the data is the next two immediate words. 
000064CE                           430  ADDI_DES
000064CE                           431                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
000064CE                           432                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
000064CE  4EB9 000068BC            433                 JSR      bits11to13
000064D4  B67C 0001                434                 CMP      #%001, D3 **AN
000064D8  6700 04C6                435                 BEQ      INVALID_EA
000064DC  B67C 0005                436                 CMP      #%101, D3 **COMPLICATED
000064E0  6700 04BE                437                 BEQ      INVALID_EA
000064E4  B67C 0006                438                 CMP      #%110, D3 **COMPLICATED
000064E8  6700 04B6                439                 BEQ      INVALID_EA
000064EC                           440                 
000064EC  4EB9 000068DE            441                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000064F2  B67C 003C                442                 CMP      #%111100,D3 // immediate data
000064F6  6700 04A8                443                 BEQ      INVALID_EA
000064FA  B67C 003A                444                 CMP      #%111010,D3 // complicated
000064FE  6700 04A0                445                 BEQ      INVALID_EA
00006502  B67C 003B                446                 CMP      #%111011,D3 // complicated
00006506  6700 0498                447                 BEQ      INVALID_EA
0000650A                           448                 
0000650A  4EB9 000068BC            449                 JSR      bits11to13 ** grab bits to jump with\
00006510  3803                     450                 MOVE     D3,D4
00006512  41F9 000067A8            451                 LEA     jmp_mode,A0    *Index into the table
00006518  C6FC 0006                452                 MULU    #6,D3       *Form offset     
0000651C  4EB0 3000                453                 JSR     0(A0,D3)   *Jump indirect with index
00006520                           454                 
00006520  4243                     455                 CLR     D3
00006522  4EB9 000068CE            456                 JSR     bits14to16
00006528  4EB9 000067D8            457                 JSR     insert_num
0000652E  4244                     458                 CLR     D4
00006530                           459                 
00006530  4E75                     460                 RTS
00006532                           461                 
00006532                           462                             
00006532                           463  ADDI_BUFFER
00006532  1CFC 0041                464                 MOVE.B   #'A',(A6)+
00006536  1CFC 0044                465                 MOVE.B   #'D', (A6)+  
0000653A  1CFC 0044                466                 MOVE.B   #'D', (A6)+
0000653E  1CFC 0049                467                 MOVE.B   #'I', (A6)+
00006542                           468                 
00006542  4EB9 00006B2C            469                 JSR      GETSIZE_ADDI
00006548                           470                 
00006548                           471                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
00006548                           472                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006548  1CFC 0020                473                 MOVE.B   #' ', (A6)+
0000654C  4E75                     474                 RTS
0000654E                           475                              
0000654E                           476  LEA
0000654E  4EB9 000068AA            477                 JSR      bits8to10   // 1 1 1
00006554  B47C 0007                478                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
00006558  6600 044A                479                 BNE      INVALID_OP
0000655C  4EB9 00006570            480                 JSR      LEA_BUFFER
00006562  4EB9 00006582            481                 JSR      LEA_SRC
00006568  4EB9 00006614            482                 JSR      LEA_DEST
0000656E  4E75                     483                 RTS
00006570                           484                 
00006570                           485  LEA_BUFFER 
00006570  1CFC 004C                486                 MOVE.B   #'L',(A6)+
00006574  1CFC 0045                487                 MOVE.B   #'E', (A6)+  
00006578  1CFC 0041                488                 MOVE.B   #'A', (A6)+
0000657C  1CFC 0020                489                 MOVE.B   #' ', (A6)+
00006580  4E75                     490                 RTS
00006582                           491            
00006582                           492  LEA_SRC
00006582                           493              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00006582  4EB9 000068BC            494              JSR      bits11to13  // source mode - D3
00006588  B67C 0000                495              CMP      #%000, D3
0000658C  6700 0412                496              BEQ      INVALID_EA
00006590  B67C 0001                497              CMP      #%001, D3
00006594  6700 040A                498              BEQ      INVALID_EA
00006598  B67C 0003                499              CMP      #%011, D3
0000659C  6700 0402                500              BEQ      INVALID_EA
000065A0  B67C 0004                501              CMP      #%100, D3
000065A4  6700 03FA                502              BEQ      INVALID_EA
000065A8  B67C 0005                503              CMP      #%101, D3
000065AC  6700 03F2                504              BEQ      INVALID_EA
000065B0  B67C 0006                505              CMP      #%110, D3
000065B4  6700 03EA                506              BEQ      INVALID_EA
000065B8                           507  
000065B8                           508              
000065B8                           509              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
000065B8  4EB9 000068CE            510              JSR      bits14to16 // source register - d4
000065BE  B67C 0004                511              CMP      #%100, D3
000065C2  6700 03DC                512              BEQ      INVALID_EA
000065C6  B67C 0002                513              CMP      #%010, D3
000065CA  6700 03D4                514              BEQ      INVALID_EA
000065CE  B67C 0003                515              CMP      #%011, D3
000065D2  6700 03CC                516              BEQ      INVALID_EA
000065D6                           517              
000065D6                           518  
000065D6  4EB9 000068DE            519               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
000065DC  B67C 003C                520               CMP      #%111100,D3 // immediate data
000065E0  6700 03BE                521               BEQ      INVALID_EA
000065E4  B67C 003A                522               CMP      #%111010,D3 // complicated
000065E8  6700 03B6                523               BEQ      INVALID_EA
000065EC  B67C 003B                524               CMP      #%111011,D3 // complicated
000065F0  6700 03AE                525               BEQ      INVALID_EA
000065F4                           526     
000065F4  4EB9 000068BC            527               JSR      bits11to13 ** grab mode bits to jump with
000065FA  3803                     528               MOVE    D3,D4
000065FC                           529  
000065FC  41F9 000067A8            530               LEA     jmp_mode,A0    *Index into the table
00006602  C6FC 0006                531               MULU    #6,D3       *Form offset     
00006606  4EB0 3000                532               JSR     0(A0,D3)   *Jump indirect with index
0000660A                           533   
0000660A  1CFC 002C                534               MOVE.B     #',', (A6)+
0000660E  1CFC 0020                535               MOVE.B     #' ', (A6)+
00006612                           536  
00006612  4E75                     537               RTS
00006614                           538               
00006614                           539  LEA_DEST    
00006614  4244                     540                  CLR     D4
00006616  41F9 000067A8            541                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
0000661C  363C 0001                542                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
00006620  3803                     543                  MOVE    D3,D4
00006622  C6FC 0006                544                  MULU    #6,D3       *Form offset     
00006626  4EB0 3000                545                  JSR     0(A0,D3)   *Jump indirect with index
0000662A                           546                  
0000662A  4EB9 00006884            547                  JSR     bits5to7
00006630  4EB9 000067D8            548                  JSR     insert_num
00006636                           549                  
00006636  4E75                     550                  RTS
00006638                           551  
00006638                           552  
00006638                           553  ADDQ
00006638  4EB9 00006642            554                  JSR     ADDQ_BUFFER
0000663E  6000 0422                555                  BRA     PRINT_BUFFER
00006642                           556  
00006642                           557  ADDQ_BUFFER
00006642  1CFC 0041                558                 MOVE.B   #'A',(A6)+
00006646  1CFC 0044                559                 MOVE.B   #'D', (A6)+  
0000664A  1CFC 0044                560                 MOVE.B   #'D', (A6)+
0000664E  1CFC 0051                561                 MOVE.B   #'Q', (A6)+
00006652                           562                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
00006652                           563                 ** VALID SIZES ARE B (00),W (01) ,L (10)
00006652  1CFC 0020                564                 MOVE.B   #' ', (A6)+
00006656  4E75                     565                 RTS
00006658                           566                 
00006658                           567  MOVEQ
00006658  4EB9 00006662            568                  JSR     MOVEQ_BUFFER
0000665E  6000 0402                569                  BRA     PRINT_BUFFER
00006662                           570  
00006662                           571  MOVEQ_BUFFER
00006662  1CFC 004D                572                 MOVE.B   #'M',(A6)+
00006666  1CFC 004F                573                 MOVE.B   #'O', (A6)+  
0000666A  1CFC 0056                574                 MOVE.B   #'V', (A6)+
0000666E  1CFC 0045                575                 MOVE.B   #'E', (A6)+
00006672  1CFC 0051                576                 MOVE.B   #'Q', (A6)+
00006676  1CFC 0020                577                 MOVE.B   #' ', (A6)+
0000667A  4E75                     578                 RTS
0000667C                           579  
0000667C                           580  DIVU
0000667C  4EB9 00006686            581                  JSR     DIVU_BUFFER
00006682  6000 03DE                582                  BRA     PRINT_BUFFER
00006686                           583  
00006686                           584  DIVU_BUFFER
00006686  1CFC 0044                585                 MOVE.B   #'D',(A6)+
0000668A  1CFC 0049                586                 MOVE.B   #'I', (A6)+  
0000668E  1CFC 0056                587                 MOVE.B   #'V', (A6)+
00006692  1CFC 0055                588                 MOVE.B   #'U', (A6)+
00006696  1CFC 0020                589                 MOVE.B   #' ', (A6)+
0000669A  4E75                     590                 RTS  
0000669C                           591  OR    
0000669C  4EB9 000066A6            592                 JSR     OR_BUFFER
000066A2  6000 03BE                593                 BRA     PRINT_BUFFER
000066A6                           594                  
000066A6                           595  OR_BUFFER
000066A6  1CFC 004F                596                 MOVE.B   #'O',(A6)+
000066AA  1CFC 0052                597                 MOVE.B   #'R', (A6)+  
000066AE  1CFC 002E                598                 MOVE.B   #'.', (A6)+
000066B2                           599                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066B2                           600                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066B2                           601                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066B2  1CFC 0020                602                 MOVE.B   #' ', (A6)+
000066B6  4E75                     603                 RTS   
000066B8                           604  
000066B8                           605  SUB   
000066B8  4EB9 000066C2            606                 JSR     SUB_BUFFER
000066BE  6000 03A2                607                 BRA     PRINT_BUFFER               
000066C2                           608  
000066C2                           609  SUB_BUFFER
000066C2  1CFC 0053                610                 MOVE.B   #'S',(A6)+
000066C6  1CFC 0055                611                 MOVE.B   #'U', (A6)+  
000066CA  1CFC 0042                612                 MOVE.B   #'B', (A6)+
000066CE  1CFC 002E                613                 MOVE.B   #'.', (A6)+
000066D2                           614                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066D2                           615                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066D2                           616                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066D2  1CFC 0020                617                 MOVE.B   #' ', (A6)+
000066D6  4E75                     618                 RTS  
000066D8                           619  CMP   
000066D8  4EB9 000066E2            620                 JSR     CMP_BUFFER
000066DE  6000 0382                621                 BRA     PRINT_BUFFER
000066E2                           622                  
000066E2                           623  CMP_BUFFER
000066E2  1CFC 0043                624                 MOVE.B   #'C',(A6)+
000066E6  1CFC 004D                625                 MOVE.B   #'M', (A6)+  
000066EA  1CFC 0050                626                 MOVE.B   #'P', (A6)+
000066EE  1CFC 002E                627                 MOVE.B   #'.', (A6)+
000066F2                           628                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000066F2                           629                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000066F2                           630                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000066F2  1CFC 0020                631                 MOVE.B   #' ', (A6)+
000066F6  4E75                     632                 RTS   
000066F8                           633                 
000066F8                           634  MULS
000066F8  4EB9 00006702            635                  JSR     MULS_BUFFER
000066FE  6000 0362                636                  BRA     PRINT_BUFFER
00006702                           637  
00006702                           638  MULS_BUFFER
00006702  1CFC 004D                639                 MOVE.B   #'M',(A6)+
00006706  1CFC 0055                640                 MOVE.B   #'U', (A6)+  
0000670A  1CFC 004C                641                 MOVE.B   #'L', (A6)+
0000670E  1CFC 0053                642                 MOVE.B   #'S', (A6)+
00006712  1CFC 0020                643                 MOVE.B   #' ', (A6)+
00006716  4E75                     644                 RTS
00006718                           645  
00006718                           646  AND    
00006718  4EB9 00006722            647                 JSR     AND_BUFFER
0000671E  6000 0342                648                 BRA     PRINT_BUFFER
00006722                           649                  
00006722                           650  AND_BUFFER
00006722  1CFC 0041                651                 MOVE.B   #'A',(A6)+
00006726  1CFC 004E                652                 MOVE.B   #'N', (A6)+  
0000672A  1CFC 0044                653                 MOVE.B   #'D', (A6)+
0000672E  1CFC 002E                654                 MOVE.B   #'.', (A6)+
00006732                           655                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006732                           656                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006732                           657                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006732  1CFC 0020                658                 MOVE.B   #' ', (A6)+
00006736  4E75                     659                 RTS    
00006738                           660  
00006738                           661  ASR     
00006738  4EB9 00006742            662                  JSR     ASR_BUFFER
0000673E  6000 0322                663                  BRA     PRINT_BUFFER
00006742                           664  
00006742                           665  ASR_BUFFER
00006742  1CFC 0041                666                 MOVE.B   #'A',(A6)+
00006746  1CFC 0053                667                 MOVE.B   #'S', (A6)+  
0000674A  1CFC 0052                668                 MOVE.B   #'R', (A6)+
0000674E  1CFC 0020                669                 MOVE.B   #' ', (A6)+
00006752  4E75                     670                 RTS      
00006754                           671  
00006754                           672  ASL     
00006754  4EB9 0000675E            673                  JSR     ASL_BUFFER
0000675A  6000 0306                674                  BRA     PRINT_BUFFER
0000675E                           675  
0000675E                           676  ASL_BUFFER
0000675E  1CFC 0041                677                 MOVE.B   #'A',(A6)+
00006762  1CFC 0053                678                 MOVE.B   #'S', (A6)+  
00006766  1CFC 004C                679                 MOVE.B   #'L', (A6)+
0000676A  1CFC 0020                680                 MOVE.B   #' ', (A6)+
0000676E  4E75                     681                 RTS     
00006770                           682  
00006770                           683  LSL     
00006770  4EB9 0000677A            684                  JSR     LSL_BUFFER
00006776  6000 02EA                685                  BRA     PRINT_BUFFER
0000677A                           686  
0000677A                           687  LSL_BUFFER
0000677A  1CFC 004C                688                 MOVE.B   #'L',(A6)+
0000677E  1CFC 0053                689                 MOVE.B   #'S', (A6)+  
00006782  1CFC 004C                690                 MOVE.B   #'L', (A6)+
00006786  1CFC 0020                691                 MOVE.B   #' ', (A6)+
0000678A  4E75                     692                 RTS     
0000678C                           693  
0000678C                           694  LSR     
0000678C  4EB9 00006796            695                  JSR     LSR_BUFFER
00006792  6000 02CE                696                  BRA     PRINT_BUFFER
00006796                           697  
00006796                           698  LSR_BUFFER
00006796  1CFC 004C                699                 MOVE.B   #'L',(A6)+
0000679A  1CFC 0053                700                 MOVE.B   #'S', (A6)+  
0000679E  1CFC 0052                701                 MOVE.B   #'R', (A6)+
000067A2  1CFC 0020                702                 MOVE.B   #' ', (A6)+
000067A6  4E75                     703                 RTS       
000067A8                           704                 
000067A8                           705  jmp_mode
000067A8  4EF9 00006900            706                  JMP     MODE000  ** DN
000067AE  4EF9 00006906            707                  JMP     MODE001  ** AN
000067B4  4EF9 0000690E            708                  JMP     MODE010  ** (AN)
000067BA  4EF9 00006918            709                  JMP     MODE011  ** (AN)+   
000067C0  4EF9 00006922            710                  JMP     MODE100  ** -(AN)
000067C6  4EF9 00006930            711                  JMP     MODE101  **INVALID
000067CC  4EF9 0000693A            712                  JMP     MODE110  **INVALID
000067D2  4EF9 00006944            713                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
000067D8                           714  
000067D8                           715                  
000067D8                           716  insert_num
000067D8                           717                  
000067D8                           718                  ;get number from D3
000067D8  B67C 0000                719                  CMP     #%000,D3       ;0
000067DC  6600 000A                720                  BNE     ONE         
000067E0  1CFC 0030                721                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
000067E4  6000 006E                722                  BRA     FINISHER
000067E8                           723                  
000067E8  B67C 0001                724  ONE             CMP     #%001,D3       ;1
000067EC  6600 000A                725                  BNE     TWO 
000067F0  1CFC 0031                726                  MOVE.B  #'1',(A6)+
000067F4  6000 005E                727                  BRA     FINISHER
000067F8                           728  
000067F8                           729                  
000067F8  B67C 0002                730  TWO             CMP     #%010,D3        ;2
000067FC  6600 000A                731                  BNE     THREE
00006800  1CFC 0032                732                  MOVE.B  #'2',(A6)+
00006804  6000 004E                733                  BRA     FINISHER
00006808                           734                  
00006808  B67C 0003                735  THREE           CMP     #%011,D3        ;3
0000680C  6600 000A                736                  BNE     FOUR
00006810  1CFC 0033                737                  MOVE.B  #'3',(A6)+
00006814  6000 003E                738                  BRA     FINISHER
00006818                           739                  
00006818  B67C 0004                740  FOUR            CMP     #%100,D3        ;4
0000681C  6600 000A                741                  BNE     FIVE
00006820  1CFC 0034                742                  MOVE.B  #'4',(A6)+
00006824  6000 002E                743                  BRA     FINISHER
00006828                           744                  
00006828  B67C 0005                745  FIVE            CMP     #%101,D3        ;5
0000682C  6600 000A                746                  BNE     SIX
00006830  1CFC 0035                747                  MOVE.B  #'5',(A6)+
00006834  6000 001E                748                  BRA     FINISHER
00006838                           749                  
00006838  B67C 0006                750  SIX             CMP     #%110,D3        ;6
0000683C  6600 000A                751                  BNE     SEVEN
00006840  1CFC 0036                752                  MOVE.B  #'6',(A6)+
00006844  6000 000E                753                  BRA     FINISHER
00006848                           754                  
00006848  B67C 0007                755  SEVEN           CMP     #%111,D3        ;7
0000684C  1CFC 0037                756                  MOVE.B  #'7',(A6)+
00006850  6000 0002                757                  BRA     FINISHER
00006854                           758                  
00006854                           759  FINISHER                
00006854                           760                  
00006854                           761                  ;check D4, do we need to do stuff?
00006854  B87C 0002                762                  CMP     #%010,D4
00006858  6600 0008                763                  BNE     POSTINCR
0000685C  1CFC 0029                764                  MOVE.B  #')',(A6)+
00006860  4E75                     765                  RTS
00006862                           766                  
00006862  B87C 0003                767  POSTINCR        CMP     #%011,D4
00006866  6600 000C                768                  BNE     ONEPAREN
0000686A  1CFC 0029                769                  MOVE.B  #')',(A6)+
0000686E  1CFC 002B                770                  MOVE.B  #'+',(A6)+
00006872  4E75                     771                  RTS
00006874                           772                  
00006874  B87C 0004                773  ONEPAREN        CMP     #%100,D4
00006878  6600 0008                774                  BNE     DONE
0000687C  1CFC 0029                775                  MOVE.B  #')',(A6)+                
00006880                           776  
00006880  4244                     777                  CLR     D4
00006882  4E75                     778  DONE            RTS
00006884                           779  
00006884                           780          
00006884                           781                 
00006884                           782  bits5to7
00006884  4243                     783                 CLR      D3
00006886  4EB9 00006A3C            784                 JSR      COPY_OPCODE  // opcode copied to D2
0000688C  C47C 0E00                785                 AND      #%0000111000000000, D2
00006890  E09A                     786                 ROR.L    #8, D2          // rotate bits so isolated at the end
00006892  E29A                     787                 ROR.L    #1, D2
00006894  3602                     788                 MOVE.W   D2,D3 // moving isolated bits into d3
00006896  4E75                     789                 RTS
00006898                           790                 
00006898                           791  bits5to8
00006898  4243                     792                 CLR      D3
0000689A  4EB9 00006A3C            793                 JSR      COPY_OPCODE  // opcode copied to D2
000068A0  C47C 0F00                794                 AND      #%0000111100000000, D2
000068A4  E09A                     795                 ROR.L    #8, D2          // rotate bits so isolated at the end
000068A6  3602                     796                 MOVE.W   D2,D3 // moving isolated bits into d3
000068A8  4E75                     797                 RTS
000068AA                           798                 
000068AA                           799  bits8to10
000068AA  4243                     800                 CLR      D3
000068AC  4EB9 00006A3C            801                 JSR      COPY_OPCODE  // opcode copied to D2
000068B2  C47C 01C0                802                 AND      #%0000000111000000, D2
000068B6  EC9A                     803                 ROR.L    #6, D2          // rotate bits so isolated at the end
000068B8  3602                     804                 MOVE.W   D2,D3 // moving isolated bits into d3
000068BA  4E75                     805                 RTS               
000068BC                           806             
000068BC                           807  bits11to13
000068BC  4243                     808                 CLR      D3
000068BE  4EB9 00006A3C            809                 JSR      COPY_OPCODE  // opcode copied to D2
000068C4  C47C 0038                810                 AND      #%0000000000111000, D2
000068C8  E69A                     811                 ROR.L    #3, D2          // rotate bits so isolated at the end
000068CA  3602                     812                 MOVE.W   D2,D3 // moving isolated bits into d3
000068CC  4E75                     813                 RTS
000068CE                           814             
000068CE                           815  bits14to16
000068CE  4243                     816                 CLR      D3
000068D0  4EB9 00006A3C            817                 JSR      COPY_OPCODE  // opcode copied to D2
000068D6  C47C 0007                818                 AND      #%0000000000000111, D2
000068DA  3602                     819                 MOVE.W   D2,D3 // moving isolated bits into d3
000068DC  4E75                     820                 RTS
000068DE                           821  bits11to16
000068DE  4243                     822                 CLR      D3
000068E0  4EB9 00006A3C            823                 JSR      COPY_OPCODE  // opcode copied to D2
000068E6  C47C 003F                824                 AND      #%0000000000111111, D2
000068EA  3602                     825                 MOVE.W   D2,D3 // moving isolated bits into d3
000068EC  4E75                     826                 RTS
000068EE                           827  bits1to10
000068EE  4243                     828                 CLR      D3
000068F0  4EB9 00006A3C            829                 JSR      COPY_OPCODE  // opcode copied to D2
000068F6  C47C FFC0                830                 AND      #%1111111111000000, D2
000068FA  EC9A                     831                 ROR.L    #6, D2
000068FC  3602                     832                 MOVE.W   D2,D3 // moving isolated bits into d3
000068FE  4E75                     833                 RTS
00006900                           834  ** DN       
00006900                           835  MODE000         
00006900  1CFC 0044                836                  MOVE.B  #'D',(A6)+     
00006904  4E75                     837                  RTS
00006906                           838  
00006906                           839  ** AN
00006906                           840  MODE001         
00006906  4EB9 00006958            841                  JSR ADDRESS_BUFFER  
0000690C  4E75                     842                  RTS      
0000690E                           843  
0000690E                           844   ** (AN)
0000690E                           845  MODE010         
0000690E  1CFC 0028                846                  MOVE.B  #'(', (A6)+
00006912  1CFC 0041                847                  MOVE.B  #'A',(A6)+  
00006916  4E75                     848                  RTS      
00006918                           849  
00006918                           850  ** (AN)+ 
00006918                           851  MODE011         
00006918  1CFC 0028                852                  MOVE.B  #'(', (A6)+
0000691C  1CFC 0041                853                  MOVE.B  #'A',(A6)+ 
00006920  4E75                     854                  RTS       
00006922                           855  
00006922                           856   ** -(AN)
00006922                           857  MODE100         
00006922  1CFC 002D                858                  MOVE.B  #'-', (A6)+
00006926  1CFC 0028                859                  MOVE.B  #'(', (A6)+
0000692A  1CFC 0041                860                  MOVE.B  #'A',(A6)+
0000692E  4E75                     861                  RTS
00006930                           862                  
00006930                           863  **INVALID               
00006930                           864  MODE101         
00006930  1CFC 0028                865                  MOVE.B  #'(', (A6)+
00006934  1CFC 0041                866                  MOVE.B  #'A',(A6)+ 
00006938  4E75                     867                  RTS
0000693A                           868                  
0000693A                           869  **INVALID
0000693A                           870  MODE110         
0000693A  1CFC 0028                871                  MOVE.B  #'(', (A6)+
0000693E  1CFC 0041                872                  MOVE.B  #'A',(A6)+
00006942  4E75                     873                  RTS  
00006944                           874  
00006944                           875  ** ABSOLUTE AND IMMEDIATE            
00006944                           876  MODE111         
00006944                           877                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
00006944  1CFC 0024                878                 MOVE.B   #'$', (A6)+  
00006948  4EB9 00006A7E            879                 JSR      PRINT_DEREF_ADDRESS
0000694E  544A                     880                 ADD.W    #2, A2
00006950  4EB9 00006A7E            881                 JSR      PRINT_DEREF_ADDRESS
00006956  4E75                     882                 RTS            
00006958                           883                                          
00006958                           884  ADDRESS_BUFFER
00006958  1CFC 0041                885                  MOVE.B  #'A',(A6)+ 
0000695C  4E75                     886                  RTS
0000695E                           887                 
0000695E                           888  ABSOLUTE_BUFFER
0000695E  4243                     889                 CLR      D3
00006960  3604                     890                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
00006962  1CF8 0024                891                 MOVE.B   '$', (A6)+
00006966  B67C 0000                892                 CMP.W    #%000, D3
0000696A  6700 0010                893                 BEQ      ABSOLUTE_WORD_BUFFER
0000696E  4243                     894                 CLR      D3
00006970  3604                     895                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
00006972  B67C 0001                896                 CMP.W    #%001, D3
00006976  6700 0016                897                 BEQ      ABSOLUTE_LONG_BUFFER
0000697A  4E75                     898                 RTS
0000697C                           899                 
0000697C                           900  ABSOLUTE_WORD_BUFFER
0000697C                           901                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
0000697C                           902                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
0000697C  1CFC 0046                903                         MOVE.B #'F', (A6)+ 
00006980  1CFC 0046                904                         MOVE.B #'F', (A6)+ 
00006984  1CFC 0046                905                         MOVE.B #'F', (A6)+ 
00006988  1CFC 0046                906                         MOVE.B #'F', (A6)+ 
0000698C  4E75                     907                         RTS       
0000698E                           908                    
0000698E                           909  ABSOLUTE_LONG_BUFFER       
0000698E                           910                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
0000698E                           911                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
0000698E  1CFC 0047                912                         MOVE.B #'G', (A6)+ 
00006992  1CFC 0047                913                         MOVE.B #'G', (A6)+ 
00006996  1CFC 0047                914                         MOVE.B #'G', (A6)+ 
0000699A  1CFC 0047                915                         MOVE.B #'G', (A6)+
0000699E  4E75                     916                         RTS 
000069A0                           917  
000069A0                           918  INVALID_EA  
000069A0                           919                  * TODO: IMPLEMENT
000069A0                           920                  *** CLEAR OUT A6
000069A0                           921                  ** PUT INVALID MESSAGE INTO A6
000069A0  6000 F8C1                922                  BRA EXIT
000069A4                           923  INVALID_OP  
000069A4                           924                  ** TODO: IMPLEMENT
000069A4                           925                 *** CLEAR OUT A6
000069A4                           926                  ** PUT INVALID MESSAGE INTO A6
000069A4  1CFC 0044                927                      MOVE.B #'D', (A6)+
000069A8  1CFC 0041                928                      MOVE.B #'A', (A6)+
000069AC  1CFC 0054                929                      MOVE.B #'T', (A6)+
000069B0  1CFC 0041                930                      MOVE.B #'A', (A6)+ 
000069B4  1CFC 0020                931                      MOVE.B #' ', (A6)+ 
000069B8  4EB9 00006A7E            932                      JSR     PRINT_DEREF_ADDRESS
000069BE  6000 F8A3                933                      BRA     EXIT
000069C2                           934            
000069C2                           935                  
000069C2  43F8 61A5                936  NOP                 LEA     NOP_disp,A1          
000069C6  103C 000E                937                      MOVE.B  #14,D0
000069CA  4E4F                     938                      TRAP    #15
000069CC  6000 F895                939                      BRA     EXIT
000069D0                           940                   
000069D0                           941  RTS      
000069D0  43F8 620C                942                      LEA     RTS_disp,A1          
000069D4  103C 000E                943                      MOVE.B  #14,D0
000069D8  4E4F                     944                      TRAP    #15 
000069DA  6000 F887                945                      BRA     EXIT
000069DE                           946  JSR      
000069DE  4DF9 00006BBE            947                      LEA     BUFFER, A6
000069E4  1CFC 004A                948                      MOVE.B #'J', (A6)+
000069E8  1CFC 0053                949                      MOVE.B #'S', (A6)+
000069EC  1CFC 0052                950                      MOVE.B #'R', (A6)+
000069F0  1CFC 0020                951                      MOVE.B #' ', (A6)+
000069F4  43F9 00006BBE            952                      LEA     BUFFER, A1
000069FA                           953                      ** BITS 10 - 12 MODE       
000069FA                           954                      ** BITS 13 - 16 REGISTER
000069FA  103C 000E                955                      MOVE.B  #14,D0
000069FE  4E4F                     956                      TRAP    #15 
00006A00  6000 F861                957                      BRA     EXIT
00006A04                           958                    
00006A04                           959  MOVEM      
00006A04                           960                     
00006A04                           961                      ** SIZE SUBROUTINE
00006A04                           962                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00006A04  C47C 0040                963                      AND #%0000000001000000,D2 
00006A08                           964                      * WORD
00006A08  B4BC 00000040            965                      CMP.L   #%0000000001000000,D2
00006A0E  4EB9 00006A24            966                      JSR     MOVEM_W 
00006A14                           967                      *LONG
00006A14  B4BC 00000040            968                      CMP.L   #%0000000001000000,D2 
00006A1A                           969                     ** JSR     MOVEM_L
00006A1A  103C 000E                970                      MOVE.B  #14,D0
00006A1E  4E4F                     971                      TRAP    #15
00006A20  6000 F841                972                      BRA     EXIT 
00006A24                           973                      
00006A24                           974  MOVEM_W 
00006A24  43F8 61BA                975                       LEA     MOVEM_disp,A1
00006A28                           976                      * PRINT MOVEM
00006A28  103C 000E                977                       MOVE.B  #14,D0
00006A2C  4E4F                     978                       TRAP    #15
00006A2E                           979          
00006A2E                           980                      * PRINT WORD PORTION
00006A2E  41F8 6251                981                       LEA     size_w, A0
00006A32  103C 000E                982                       MOVE.B  #14,D0
00006A36  4E4F                     983                       TRAP    #15 
00006A38                           984          
00006A38  6000 F829                985                       BRA     EXIT 
00006A3C                           986       
00006A3C                           987     
00006A3C                           988  COPY_OPCODE 
00006A3C                           989                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00006A3C  4242                     990                       CLR    D2  
00006A3E  3405                     991                       MOVE.W D5,D2 
00006A40  4E75                     992                       RTS  
00006A42                           993  
00006A42                           994  PRINT_ADDRESS     
00006A42  4242                     995                   CLR         D2
00006A44  143C 0010                996                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00006A48  220A                     997                   MOVE.L      A2,D1        
00006A4A  103C 000F                998                   MOVE.B      #15,D0          
00006A4E  4E4F                     999                   TRAP        #15            
00006A50  1CFC 0020               1000                   MOVE.B      #' ', (A6)+
00006A54  1CFC 0020               1001                   MOVE.B      #' ', (A6)+
00006A58  1CFC 0020               1002                   MOVE.B      #' ', (A6)+
00006A5C  1CFC 0020               1003                   MOVE.B      #' ', (A6)+
00006A60  4E75                    1004                   RTS     
00006A62                          1005  PRINT_BUFFER    
00006A62  1CFC 0000               1006                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00006A66  43F9 00006BBE           1007                 LEA      BUFFER, A1
00006A6C  303C 000E               1008                 MOVE.W   #14,D0
00006A70  4E4F                    1009                 TRAP     #15
00006A72  43F8 6195               1010                 LEA     linebreak,A1            *appends line at the end of the user input
00006A76  103C 000E               1011                 MOVE.B  #14,D0
00006A7A  4E4F                    1012                 TRAP    #15
00006A7C  4E75                    1013                 RTS  
00006A7E                          1014  
00006A7E                          1015  PRINT_DEREF_ADDRESS
00006A7E  1CFC 0000               1016                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00006A82  43F9 00006BBE           1017                 LEA      BUFFER, A1
00006A88  303C 000E               1018                 MOVE.W   #14,D0
00006A8C  4E4F                    1019                 TRAP     #15
00006A8E  4DF9 00006BBE           1020                 LEA      BUFFER, A6
00006A94  4242                    1021                 CLR         D2
00006A96  143C 0010               1022                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00006A9A  3212                    1023                 MOVE.W      (A2),D1        // PRINT INVALID HEX OPCODE        
00006A9C  103C 000F               1024                 MOVE.B      #15,D0          
00006AA0  4E4F                    1025                 TRAP        #15 
00006AA2  4E75                    1026                 RTS
00006AA4                          1027   
00006AA4                          1028                     
00006AA4                          1029  ****************************
00006AA4                          1030  
00006AA4                          1031                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00006AA4                          1032                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00006AA4                          1033                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00006AA4                          1034  GETSIZE_ADD
00006AA4  4EB8 68AA               1035              JSR     bits8to10
00006AA8  B67C 0000               1036              CMP     #%000,D3
00006AAC  6600 0010               1037              BNE     ADD_NOTBYTE
00006AB0  4EB9 00006B8E           1038              JSR     SIZEISBYTE
00006AB6  3C3C 0001               1039              MOVE    #1,D6
00006ABA  4243                    1040              CLR     D3
00006ABC  4E75                    1041              RTS
00006ABE                          1042          
00006ABE                          1043  ADD_NOTBYTE 
00006ABE  B67C 0001               1044              CMP     #%001,D3
00006AC2  6600 0010               1045              BNE     ADD_NOTWORD
00006AC6  4EB9 00006B9E           1046              JSR     SIZEISWORD
00006ACC  3C3C 0001               1047              MOVE    #1,D6
00006AD0  4243                    1048              CLR     D3
00006AD2  4E75                    1049              RTS
00006AD4                          1050              
00006AD4                          1051  ADD_NOTWORD
00006AD4  B67C 0002               1052              CMP     #%010,D3
00006AD8  6600 0010               1053              BNE     ADD_NOTLEFT
00006ADC  4EB9 00006BAE           1054              JSR     SIZEISLONG
00006AE2  3C3C 0001               1055              MOVE    #1,D6
00006AE6  4243                    1056              CLR     D3
00006AE8  4E75                    1057              RTS
00006AEA                          1058              
00006AEA                          1059  ADD_NOTLEFT     ;check other direction
00006AEA  B67C 0004               1060              CMP     #%100,D3
00006AEE  6600 0010               1061              BNE     ADD_NOTRIGHTBYTE
00006AF2  4EB9 00006B8E           1062              JSR     SIZEISBYTE
00006AF8  3C3C 0002               1063              MOVE    #2,D6
00006AFC  4243                    1064              CLR     D3
00006AFE  4E75                    1065              RTS
00006B00                          1066              
00006B00                          1067  ADD_NOTRIGHTBYTE
00006B00  B67C 0005               1068              CMP     #%101,D3
00006B04  6600 0010               1069              BNE     ADD_NOTRIGHTWORD
00006B08  4EB9 00006B9E           1070              JSR     SIZEISWORD
00006B0E  3C3C 0002               1071              MOVE    #2,D6
00006B12  4243                    1072              CLR     D3
00006B14  4E75                    1073              RTS
00006B16                          1074  
00006B16                          1075  ADD_NOTRIGHTWORD
00006B16  B67C 0006               1076              CMP     #%110,D3
00006B1A  6600 FE84               1077              BNE     INVALID_EA
00006B1E  4EB9 00006BAE           1078              JSR     SIZEISLONG
00006B24  3C3C 0002               1079              MOVE    #2,D6
00006B28  4243                    1080              CLR     D3
00006B2A  4E75                    1081              RTS 
00006B2C                          1082                               
00006B2C                          1083                       
00006B2C                          1084                       
00006B2C                          1085  *****************************                  
00006B2C                          1086  GETSIZE_ADDI
00006B2C  4EB8 68AA               1087          JSR     bits8to10
00006B30  B67C 0000               1088          CMP     #%000,D3
00006B34  6600 000C               1089          BNE     ADDI_NOTBYTE
00006B38  4EB9 00006B8E           1090          JSR     SIZEISBYTE
00006B3E  4243                    1091          CLR     D3
00006B40  4E75                    1092          RTS
00006B42                          1093  
00006B42                          1094  ADDI_NOTBYTE
00006B42  B67C 0001               1095          CMP     #%001,D3
00006B46  6600 000C               1096          BNE     ADDI_NOTWORD
00006B4A  4EB9 00006B9E           1097          JSR     SIZEISWORD
00006B50  4243                    1098          CLR     D3
00006B52  4E75                    1099          RTS
00006B54                          1100          
00006B54                          1101  ADDI_NOTWORD
00006B54  B67C 0002               1102          CMP     #%010,D3
00006B58  6600 FE46               1103          BNE     INVALID_EA
00006B5C  4EB9 00006BAE           1104          JSR     SIZEISLONG
00006B62  4243                    1105          CLR     D3
00006B64  4E75                    1106          RTS
00006B66                          1107          
00006B66                          1108                              
00006B66                          1109                       
00006B66                          1110  ********************************          
00006B66                          1111                       
00006B66                          1112                       
00006B66                          1113  ********************************                     
00006B66                          1114  GETSIZE_ADDA
00006B66  4EB8 68AA               1115          JSR     bits8to10
00006B6A  B67C 0003               1116          CMP     #%011,D3
00006B6E  6600 000C               1117          BNE     ADDA_NOTWORD
00006B72  4EB9 00006B9E           1118          JSR     SIZEISWORD
00006B78  4243                    1119          CLR     D3
00006B7A  4E75                    1120          RTS
00006B7C                          1121          
00006B7C                          1122  
00006B7C                          1123          
00006B7C                          1124  ADDA_NOTWORD
00006B7C  B67C 0007               1125          CMP     #%111,D3
00006B80  6600 FE1E               1126          BNE     INVALID_EA
00006B84  4EB9 00006BAE           1127          JSR     SIZEISLONG
00006B8A  4243                    1128          CLR     D3
00006B8C  4E75                    1129          RTS
00006B8E                          1130  **********************************        
00006B8E                          1131      
00006B8E                          1132  SIZEISBYTE
00006B8E  1CFC 002E               1133         MOVE.B   #'.',(A6)+
00006B92  1CFC 0042               1134         MOVE.B   #'B',(A6)+
00006B96  1CFC 0020               1135         MOVE.B   #' ',(A6)+
00006B9A  4243                    1136         CLR      D3
00006B9C  4E75                    1137         RTS
00006B9E                          1138  
00006B9E                          1139  SIZEISWORD    
00006B9E  1CFC 002E               1140         MOVE.B   #'.',(A6)+
00006BA2  1CFC 0057               1141         MOVE.B   #'W',(A6)+
00006BA6  1CFC 0020               1142         MOVE.B   #' ',(A6)+
00006BAA  4243                    1143         CLR      D3
00006BAC  4E75                    1144         RTS
00006BAE                          1145                  
00006BAE                          1146  SIZEISLONG    
00006BAE  1CFC 002E               1147         MOVE.B   #'.',(A6)+
00006BB2  1CFC 004C               1148         MOVE.B   #'L',(A6)+
00006BB6  1CFC 0020               1149         MOVE.B   #' ',(A6)+
00006BBA                          1150  
00006BBA  4243                    1151         CLR      D3
00006BBC  4E75                    1152         RTS
00006BBE                          1153                  
00006BBE                          1154       
00006BBE= 00000001                1155  BUFFER DC.L 1     
00006BC2                          1156      INCLUDE 'helpers.x68'
00006BC2  1019                    1157  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00006BC4  4EB9 00006BDC           1158                          JSR     sub_breakDownAs     *breaks down ASCII code
00006BCA  D280                    1159                          ADD.L   D0,D1               *load that char into D1
00006BCC  0C11 0000               1160                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00006BD0  6700 0006               1161                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00006BD4  E989                    1162                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00006BD6  60EA                    1163                          BRA     sub_AsToHeLoop      *loops through again
00006BD8                          1164                          
00006BD8  2E01                    1165  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00006BDA  4E75                    1166                          RTS
00006BDC  B03C 0030               1167  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00006BE0  6D00 002A               1168                          BLT     as_ERROR                        
00006BE4                          1169                          
00006BE4  B03C 0039               1170                          CMP.B    #$39,D0            *is it an A-F letter?
00006BE8  6E00 000C               1171                          BGT     as_LETTER
00006BEC                          1172                          
00006BEC  6000 0002               1173                          BRA     as_NUMBER
00006BF0                          1174                                                 
00006BF0  0400 0030               1175  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00006BF4  4E75                    1176                          RTS
00006BF6                          1177                          
00006BF6  B03C 0041               1178  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00006BFA  6D00 0010               1179                          BLT     as_ERROR
00006BFE                          1180                          
00006BFE  B03C 0046               1181                          CMP.B     #$46, D0
00006C02  6E00 0008               1182                          BGT     as_ERROR
00006C06                          1183                          
00006C06  0400 0037               1184                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00006C0A  4E75                    1185                          RTS
00006C0C                          1186                          
00006C0C  43F9 65727200           1187  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00006C12  103C 000D               1188                          MOVE.B  #13,D0
00006C16  4E4F                    1189                          TRAP    #15  
00006C18                          1190  sub_StartReadingData    
00006C18  0801 0000               1191                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00006C1C  6600 0006               1192                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00006C20                          1193                          
00006C20  7E00                    1194                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00006C22  4E75                    1195  srdFinish               RTS
00006C24                          1196  
00006C24  43F8 60DE               1197  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00006C28  103C 000E               1198                          MOVE.B  #14,D0
00006C2C  4E4F                    1199                          TRAP    #15
00006C2E                          1200                          
00006C2E  7E01                    1201                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00006C30  60F0                    1202                          BRA     srdFinish
00006C32                          1203  sub_EndReadingData  
00006C32  0801 0000               1204                          BTST    #0,D1               *checks if LSB is 1, 
00006C36  6600 0018               1205                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00006C3A                          1206                          
00006C3A  B5CB                    1207                          CMP.L   A3,A2               *end address must be greater than start address
00006C3C  6E00 0004               1208                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00006C40                          1209  
00006C40  4E75                    1210  erdFinish               RTS
00006C42                          1211  
00006C42  43F8 6105               1212  erdFailAddrOrder        LEA     addr_order_check,A1
00006C46  103C 000E               1213                          MOVE.B  #14,D0
00006C4A  4E4F                    1214                          TRAP    #15
00006C4C                          1215                          
00006C4C  7E01                    1216                          MOVE.L  #1,D7
00006C4E  60F0                    1217                          BRA     erdFinish
00006C50                          1218  
00006C50  43F8 60DE               1219  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00006C54  103C 000E               1220                          MOVE.B  #14,D0
00006C58  4E4F                    1221                          TRAP    #15
00006C5A                          1222                          
00006C5A  7E01                    1223                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00006C5C  60E2                    1224                          BRA     erdFinish
00006C5E                          1225                          
00006C5E                          1226  
00006C5E                          1227  
00006C5E                          1228  
00006C5E                          1229  
00006C5E                          1230  
00006C5E                          1231  
00006C5E                          1232  
00006C5E                          1233  
00006C5E                          1234  -------------------- end include --------------------
00006C5E                          1235      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     695E
ABSOLUTE_LONG_BUFFER  698E
ABSOLUTE_WORD_BUFFER  697C
ADD                 6406
ADDA                63E0
ADDA_BUFFER         63EA
ADDA_DISP           61C4
ADDA_NOTWORD        6B7C
ADDI                64AA
ADDI_BUFFER         6532
ADDI_DES            64CE
ADDI_DISP           61C9
ADDI_NOTBYTE        6B42
ADDI_NOTWORD        6B54
ADDI_SRC            64C0
ADDQ                6638
ADDQ_BUFFER         6642
ADDQ_DISP           61CE
ADDRESS_BUFFER      6958
ADDR_ODDBIT_MSG     60DE
ADDR_ORDER_CHECK    6105
ADD_BUFFER          6410
ADD_DEST            6488
ADD_DIRECTION_REVERSED  6442
ADD_DISP            61C0
ADD_DONE            645C
ADD_NOTBYTE         6ABE
ADD_NOTLEFT         6AEA
ADD_NOTRIGHTBYTE    6B00
ADD_NOTRIGHTWORD    6B16
ADD_NOTWORD         6AD4
ADD_SRC             6464
AND                 6718
AND_BUFFER          6722
AND_DISP            61E9
ASL                 6754
ASL_BUFFER          675E
ASL_DISP            61F8
ASR                 6738
ASR_BUFFER          6742
ASR_DISP            61FC
AS_ERROR            6C0C
AS_LETTER           6BF6
AS_NUMBER           6BF0
ATHENDLOOP          6BD8
BACKSLASHSIGH       6246
BCC_DISP            6210
BGT_DISP            6214
BITS11TO13          68BC
BITS11TO16          68DE
BITS14TO16          68CE
BITS1TO10           68EE
BITS5TO7            6884
BITS5TO8            6898
BITS8TO10           68AA
BLE_DISP            6218
BUFFER              6BBE
CLOSEPAREN          624A
CLR_DISP            61E5
CMP                 66D8
CMP_BUFFER          66E2
CODE0000            62C8
CODE0001            62DC
CODE0010            62E0
CODE0011            62E4
CODE0100            62E8
CODE0101            631C
CODE0110            6322
CODE0111            6326
CODE1000            632C
CODE1001            633E
CODE1010            6344
CODE1011            6348
CODE1100            634E
CODE1101            6360
CODE1110            63AC
CODE1111            63DC
COMMASIGN           6244
COPY_OPCODE         6A3C
CR                  D
DIVU                667C
DIVU_BUFFER         6686
DIVU_DISP           61DC
DOLLARSIGN          623E
DONE                6882
ENDTEST_MSG         6159
ERDFAILADDRODDB     6C50
ERDFAILADDRORDER    6C42
ERDFINISH           6C40
EXIT                6263
FINISHER            6854
FIVE                6828
FOUR                6818
GETSIZE_ADD         6AA4
GETSIZE_ADDA        6B66
GETSIZE_ADDI        6B2C
HEXATABLE           621C
INPUT_BUFFER        6258
INSERT_NUM          67D8
INVALIDEA_DISP      619D
INVALID_DISP        6198
INVALID_EA          69A0
INVALID_OP          69A4
JMP_MODE            67A8
JMP_TABLE           6268
JSR                 69DE
JSR_DISP            6208
LEA                 654E
LEA_BUFFER          6570
LEA_DEST            6614
LEA_DISP            61E1
LEA_SRC             6582
LF                  A
LINEBREAK           6195
LINECOUNT           6257
LOCATION_ENDDATA    625E
LOCATION_END_MSG    60C1
LOCATION_STARTDATA  625A
LOCATION_START_MSG  60A2
LSL                 6770
LSL_BUFFER          677A
LSL_DISP            61F0
LSR                 678C
LSR_BUFFER          6796
LSR_DISP            61F4
MAIN_LOOP           6006
MINUSSIGN           6242
MODE000             6900
MODE001             6906
MODE010             690E
MODE011             6918
MODE100             6922
MODE101             6930
MODE110             693A
MODE111             6944
MOVEA_DISP          61AE
MOVEM               6A04
MOVEM_DISP          61BA
MOVEM_W             6A24
MOVEQ               6658
MOVEQ_BUFFER        6662
MOVEQ_DISP          61B4
MOVE_DISP           61A9
MULS                66F8
MULS_BUFFER         6702
MULS_DISP           61D7
NOP                 69C2
NOP_DISP            61A5
ONE                 67E8
ONEPAREN            6874
OPENPAREN           6248
OR                  669C
OR_BUFFER           66A6
OR_DISP             61ED
PAUSE_MSG           613F
PLUSSIGN            6240
POSTINCR            6862
POUNDSIGN           623C
PRINT_ADDRESS       6A42
PRINT_BUFFER        6A62
PRINT_DEREF_ADDRESS  6A7E
ROL_DISP            6200
ROR_DISP            6204
RTS                 69D0
RTS_DISP            620C
SEVEN               6848
SIX                 6838
SIZEISBYTE          6B8E
SIZEISLONG          6BAE
SIZEISWORD          6B9E
SIZE_B              624E
SIZE_L              6254
SIZE_W              6251
SPACE               624C
SRDFAILADDRODDB     6C24
SRDFINISH           6C22
START               6000
SUB                 66B8
SUB_ASTOHELOOP      6BC2
SUB_BREAKDOWNAS     6BDC
SUB_BUFFER          66C2
SUB_DISP            61D3
SUB_ENDREADINGDATA  6C32
SUB_STARTREADINGDATA  6C18
TABLE_LENGTH        6262
THREE               6808
TWO                 67F8
WELCOME_MSG         603E
