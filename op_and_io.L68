00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2017 10:22:19 PM

00001000                             1  START  ORG $1000
00001000                             2  *-----------------------------------------------------------
00001000                             3  * Title      :
00001000                             4  * Written by :
00001000                             5  * Date       :
00001000                             6  * Description:
00001000                             7  *-----------------------------------------------------------
00001000                             8  *Displays welcome message
00001000  43F9 000010C4              9                  LEA     welcome_msg, A1
00001006  103C 000D                 10                  MOVE.B  #13,D0
0000100A  4E4F                      11                  TRAP    #15
0000100C                            12  *-----------------------------------------------------------
0000100C                            13  *Gets the starting and ending inputs
0000100C                            14  *First, the start address prompt and location
0000100C  43F9 00001128             15  IO_StartLoop    LEA     location_start_msg,A1
00001012  103C 000E                 16                  MOVE.B  #14,D0
00001016  4E4F                      17                  TRAP    #15
00001018                            18  
00001018                            19  *Gets the user input for start locatioin                
00001018  43F9 000012DE             20                  LEA     input_buffer,A1
0000101E  103C 0002                 21                  MOVE.B  #2,D0
00001022  4E4F                      22                  TRAP    #15
00001024                            23                  
00001024                            24  *Converts that ASCII input into hexadecimal
00001024  4280                      25                  CLR.L   D0
00001026  4281                      26                  CLR.L   D1
00001028                            27                  
00001028  4EB9 00001C40             28                  JSR     sub_AsToHeLoop          
0000102E  2441                      29                  MOVEA.L  D1, A2
00001030  284A                      30                  MOVEA.L  A2,A4
00001032  548C                      31                  ADD.L    #$2,A4
00001034                            32                  
00001034  43F9 0000121B             33                  LEA     linebreak,A1            *appends line at the end of the user input
0000103A  103C 000E                 34                  MOVE.B  #14,D0
0000103E  4E4F                      35                  TRAP    #15
00001040                            36                  
00001040                            37                  
00001040  4EB9 00001C96             38                  JSR    sub_StartReadingData    *checks the validity of the start address
00001046  BE3C 0001                 39                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
0000104A  67C0                      40                  BEQ    IO_StartLoop            *starts loop over due to invalidity
0000104C                            41  *-----------------------------------------------------------
0000104C                            42  *Gets the starting and ending inputs
0000104C                            43  *Second, gets the ending address prompt and location
0000104C  43F9 00001147             44  IO_EndLoop      LEA     location_end_msg,A1
00001052  103C 000E                 45                  MOVE.B  #14,D0
00001056  4E4F                      46                  TRAP    #15
00001058                            47  
00001058                            48  *Gets the user input for start locatioin                
00001058  43F9 000012DE             49                  LEA     input_buffer,A1
0000105E  103C 0002                 50                  MOVE.B  #2,D0
00001062  4E4F                      51                  TRAP    #15
00001064                            52                  
00001064                            53  *Converts that ASCII input into hexadecimal
00001064  4280                      54                  CLR.L   D0
00001066  4281                      55                  CLR.L   D1
00001068                            56                  
00001068  4EB9 00001C40             57                  JSR     sub_AstoHeLoop          
0000106E  2641                      58                  MOVEA.L D1, A3
00001070                            59                  
00001070  43F9 0000121B             60                  LEA     linebreak,A1            *appends line at the end of the user input
00001076  103C 000E                 61                  MOVE.B  #14,D0
0000107A  4E4F                      62                  TRAP    #15
0000107C                            63                  
0000107C                            64                  
0000107C  4EB9 00001CB0             65                  JSR    sub_endReadingData    *checks the validity of the start address
00001082  BE3C 0001                 66                  CMP.B  #1, D7                  *checks of subroutine returned 1, if so then invalid
00001086  6784                      67                  BEQ    IO_StartLoop            *starts loop over due to invalidity
00001088                            68  *-----------------------------------------------------------
00001088  4EB9 0000108E             69                  JSR MAIN_LOOP
0000108E                            70  
0000108E                            71  *** D3 - ISOLATED BITS FOR COMPARISONS
0000108E                            72  *** D4 - MODE
0000108E                            73  *** D5 - CURRENT OPCODE
0000108E                            74  ***
0000108E                            75  *** 
0000108E                            76  MAIN_LOOP
0000108E  41F9 000012EE             77                   LEA     jmp_table,A0    *Index into the table
00001094  4DF9 00001C3C             78                   LEA     BUFFER, A6      * Load buffer into A6
0000109A  4283                      79                   CLR.L   D3              *Zero it
0000109C  3612                      80                   MOVE.W  (A2), D3
0000109E                            81  
0000109E                            82                   * TEST OPCODES
0000109E                            83                   ; MOVE.W  #$45D7,D3 * LEA (A7), A2
0000109E                            84                   ;MOVE.W  #$4E71,D3 * NOP
0000109E                            85                   ; MOVE.W  #$4E75,D3 * RTS
0000109E                            86                   ; MOVE.W  #$4EB0,D3 * JSR
0000109E                            87                   ; MOVE.W  #$0642,D3   *ADDI.W  #1000,D2
0000109E                            88                   ; MOVE.W  #$D4FC,D3   *ADDA.W   #1000, A2
0000109E                            89                   ; MOVE.W  #$D5FC,D3   *ADDA.L   #1000, A2
0000109E  363C D64A                 90                   MOVE.W  #$D64A, D3  * ADD.W A2,D3
000010A2                            91  
000010A2                            92                   ; MOVE.W    #$5201,D3    *ADDQ
000010A2                            93  
000010A2                            94                   ; MOVE.W     #$7E70, D3 *MOVEQ
000010A2                            95                   ; MOVE.W     #$80C0, D3 *DIVU
000010A2                            96                   ; MOVE.W     #$8000, D3 * OR
000010A2                            97                   ; MOVE.W        #$9000, D3 * SUB
000010A2                            98                   ; MOVE.W        #$B000, D3 * CMP
000010A2                            99                   ; MOVE.W        #$C1C0, D3 * MULS
000010A2                           100                   ; MOVE.W        #$C000, D3 * AND
000010A2                           101                   ; MOVE.W        #$E0F8, D3  *ASR
000010A2                           102                   ; MOVE.W        #$E1E2, D3  *ASL
000010A2                           103                   ; MOVE.W        #$E393, D3  *LSL
000010A2                           104                   ; MOVE.W        #$E2DC, D3  *LSR
000010A2                           105  
000010A2  4EB9 00001AC0            106                   JSR    PRINT_ADDRESS
000010A8  544A                     107                   ADD.W   #2,A2 * Can safely increment the current address by a word
000010AA  3A03                     108                   MOVE.W  D3,D5       * Before manipulating opcode, store in D5 
000010AC  183C 000C                109                   MOVE.B  #12,D4      *Shift 12 bits to the right  
000010B0  E86B                     110                   LSR.W   D4,D3       *Move the bits
000010B2  C6FC 0006                111                   MULU    #6,D3       *Form offset     
000010B6  4EB0 3000                112                   JSR     0(A0,D3)   *Jump indirect with index
000010BA  4EB9 00001AE0            113                   JSR     PRINT_BUFFER * GOT OPCODE AND EA LINE, PRINT IT
000010C0                           114                   ;CMP     A3,A2
000010C0                           115                   ;BGT     EXIT
000010C0                           116                   ;BRA     MAIN_LOOP
000010C0  6000 0227                117                   BRA      EXIT
000010C4                           118                                  
000010C4                           119      INCLUDE 'definitions.x68'
000010C4                           120  
000010C4  =0000000D                121  CR              EQU     $0D         carriage return
000010C4  =0000000A                122  LF              EQU     $0A         line feed
000010C4= 43 53 53 20 34 32 ...    123  welcome_msg         DC.B    'CSS 422 Disassembler Final Project',CR,LF
000010E8= 42 79 20 54 65 61 ...    124                      DC.B    'By Team Awesome (Olga Rocheeva, Dwina Solihin, Peter Stanton)',CR,LF,0
00001128= 45 6E 74 65 72 20 ...    125  location_start_msg  DC.B    'Enter Start location address',CR,LF,0
00001147= 45 6E 74 65 72 20 ...    126  location_end_msg    DC.B    'Enter End location address',CR,LF,0
00001164= 41 64 64 72 65 73 ...    127  addr_oddBit_msg     DC.B    'Address cannot end on an odd byte.',CR,LF,CR,LF,0
0000118B= 45 6E 64 69 6E 67 ...    128  addr_order_check    DC.B    'Ending Address cannot go before the starting address.',CR,LF,CR,LF,0
000011C5= 50 72 65 73 73 20 ...    129  pause_msg           DC.B    'Press enter to continue!',CR,LF
000011DF= 52 65 61 63 68 65 ...    130  endTest_msg         DC.B    'Reached end of test data.', CR,LF
000011FA= 54 72 79 20 61 6E ...    131                      DC.B    'Try another location? (yes/no): ',0
0000121B= 0D 0A 00                 132  linebreak           DC.B    CR,LF,0
0000121E                           133                      
0000121E= 44 41 54 41 00           134  Invalid_disp        DC.B    'DATA',0
00001223= 57 52 4F 4E 47 45 ...    135  InvalidEA_disp      DC.B    'WRONGEA',0
0000122B                           136  
0000122B= 4E 4F 50 00              137  NOP_disp            DC.B    'NOP',0
0000122F= 4D 4F 56 45 00           138  MOVE_disp           DC.B    'MOVE',0
00001234= 4D 4F 56 45 41 00        139  MOVEA_disp          DC.B    'MOVEA',0
0000123A= 4D 4F 56 45 51 00        140  MOVEQ_disp          DC.B    'MOVEQ',0
00001240= 4D 4F 56 45 4D 00        141  MOVEM_disp          DC.B    'MOVEM',0
00001246= 41 44 44 00              142  ADD_disp            DC.B    'ADD',0
0000124A= 41 44 44 41 00           143  ADDA_disp           DC.B    'ADDA',0
0000124F= 41 44 44 49 00           144  ADDI_disp           DC.B    'ADDI',0
00001254= 41 44 44 51 00           145  ADDQ_disp           DC.B    'ADDQ',0
00001259= 53 55 42 00              146  SUB_disp            DC.B    'SUB',0
0000125D= 4D 55 4C 53 00           147  MULS_disp           DC.B    'MULS',0
00001262= 44 49 56 55 00           148  DIVU_disp           DC.B    'DIVU',0
00001267= 4C 45 41 00              149  LEA_disp            DC.B    'LEA',0
0000126B= 43 4C 52 00              150  CLR_disp            DC.B    'CLR',0
0000126F= 41 4E 44 00              151  AND_disp            DC.B    'AND',0
00001273= 4F 52 00                 152  OR_disp             DC.B    'OR',0
00001276= 4C 53 4C 00              153  LSL_disp            DC.B    'LSL',0
0000127A= 4C 53 52 00              154  LSR_disp            DC.B    'LSR',0
0000127E= 41 53 4C 00              155  ASL_disp            DC.B    'ASL',0
00001282= 41 53 52 00              156  ASR_disp            DC.B    'ASR',0
00001286= 52 4F 4C 00              157  ROL_disp            DC.B    'ROL',0
0000128A= 52 4F 52 00              158  ROR_disp            DC.B    'ROR',0
0000128E= 4A 53 52 00              159  JSR_disp            DC.B    'JSR',0
00001292= 52 54 53 00              160  RTS_disp            DC.B    'RTS',0
00001296= 42 43 43 00              161  BCC_disp            DC.B    'BCC',0
0000129A= 42 47 54 00              162  BGT_disp            DC.B    'BGT',0    
0000129E= 42 4C 45 00              163  BLE_disp            DC.b    'BLE',0
000012A2                           164  
000012A2                           165  
000012A2= 30 00                    166  hexaTable               DC.B    '0',0
000012A4= 31 00                    167                          DC.B    '1',0
000012A6= 32 00                    168                          DC.B    '2',0
000012A8= 33 00                    169                          DC.B    '3',0
000012AA= 34 00                    170                          DC.B    '4',0
000012AC= 35 00                    171                          DC.B    '5',0
000012AE= 36 00                    172                          DC.B    '6',0
000012B0= 37 00                    173                          DC.B    '7',0
000012B2= 38 00                    174                          DC.B    '8',0
000012B4= 39 00                    175                          DC.B    '9',0
000012B6= 41 00                    176                          DC.B    'A',0
000012B8= 42 00                    177                          DC.B    'B',0
000012BA= 43 00                    178                          DC.B    'C',0
000012BC= 44 00                    179                          DC.B    'D',0
000012BE= 45 00                    180                          DC.B    'E',0
000012C0= 46 00                    181                          DC.B    'F',0
000012C2= 23 00                    182  poundsign               DC.B    '#',0
000012C4= 24 00                    183  dollarsign              DC.B    '$',0
000012C6= 2B 00                    184  plussign                DC.B    '+',0
000012C8= 2D 00                    185  minussign               DC.B    '-',0
000012CA= 2C 00                    186  commasign               DC.B    ',',0
000012CC= 2F 00                    187  backslashsigh           DC.B    '/',0
000012CE= 28 00                    188  openparen               DC.B    '(',0
000012D0= 29 00                    189  closeparen              DC.B    ')',0
000012D2= 20 00                    190  space                   DC.B    ' ',0   
000012D4= 2E 42 00                 191  size_b                  DC.B    '.B',0
000012D7= 2E 57 00                 192  size_w                  DC.B    '.W',0        
000012DA= 2E 4C 00                 193  size_l                  DC.B    '.L',0
000012DD                           194  
000012DD                           195  linecount               DS.B    1       *storeage for lines on a screen
000012DE= 01                       196  input_buffer            DC.B    1       *creates input buffer for ASCII string
000012E0                           197  location_startData      DS.L    1       *location on where to start reading data
000012E4                           198  location_endData        DS.L    1       *location on where to end reading data
000012E8                           199  table_length            DS.B    1       *Number of spaces in the table to print to console
000012E9                           200  
000012E9                           201  
000012E9                           202  -------------------- end include --------------------
000012E9                           203             
000012E9                           204  EXIT                 
000012EA  FFFF FFFF                205         SIMHALT   
000012EE                           206  
000012EE                           207  
000012EE                           208  **TODO: PRINT INVALID OPCODES FOR REMAINING JMPS
000012EE  4EF9 0000134E            209  jmp_table      JMP         code0000
000012F4                           210                  *ADDI
000012F4                           211  
000012F4  4EF9 00001362            212                 JMP         code0001
000012FA                           213  
000012FA  4EF9 00001368            214                 JMP         code0010
00001300                           215  
00001300  4EF9 0000136E            216                 JMP         code0011
00001306                           217  
00001306  4EF9 00001374            218                 JMP         code0100
0000130C                           219                             
0000130C  4EF9 000013A8            220                 JMP         code0101
00001312                           221                 * ADDQ
00001312                           222                  
00001312                           223        
00001312  4EF9 000013AE            224                 JMP         code0110
00001318                           225                 * BCC
00001318                           226                 * BGT
00001318                           227                 * BLE
00001318                           228                 
00001318  4EF9 000013B4            229                 JMP         code0111
0000131E                           230                 * MOVEQ
0000131E                           231  
0000131E  4EF9 000013BA            232                 JMP         code1000
00001324                           233                 * DIVU
00001324                           234                 * OR
00001324                           235  
00001324  4EF9 000013CC            236                 JMP         code1001
0000132A                           237                  *SUB
0000132A  4EF9 000013D2            238                 JMP         code1010
00001330                           239                 
00001330  4EF9 000013D8            240                 JMP         code1011
00001336                           241                 * CMP
00001336                           242                 
00001336  4EF9 000013DE            243                 JMP         code1100
0000133C                           244                 * MULS
0000133C                           245                 * AND
0000133C                           246          
0000133C  4EF9 000013F0            247                 JMP         code1101
00001342                           248                 *ADD
00001342                           249                 *ADDA
00001342  4EF9 0000143C            250                 JMP         code1110
00001348                           251                 * ASR
00001348                           252                 * ASL
00001348                           253                 * LSL
00001348                           254                 * LSR
00001348                           255                 * ROL
00001348                           256                 * ROR
00001348                           257  
00001348  4EF9 0000146C            258                 JMP         code1111
0000134E                           259  
0000134E                           260  
0000134E                           261  code0000      
0000134E  4EB9 0000191A            262                 JSR          bits5to8 // RETURNS INTO D3
00001354  B6BC 00000006            263                 CMP.L        #%0110, D3
0000135A  6600 06CA                264                 BNE          INVALID_OP
0000135E  6000 01CC                265                 BRA          ADDI  
00001362                           266  
00001362                           267  code0001      
00001362  4EB9 00001A26            268                 JSR       INVALID_OP
00001368                           269  
00001368  4EB9 00001A26            270  code0010        JSR       INVALID_OP
0000136E                           271  
0000136E  4EB9 00001A26            272  code0011        JSR       INVALID_OP
00001374                           273  
00001374                           274  code0100       
00001374  4EB9 00001ABA            275                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
0000137A                           276                  
0000137A                           277                 *NOP
0000137A  C47C 0FFF                278                 AND     #%0000111111111111,D2
0000137E  B4BC 00000E71            279                 CMP.L   #%000111001110001, D2
00001384  6700 06BA                280                 BEQ     NOP
00001388                           281                 
00001388                           282                 *RTS
00001388  C47C 0FFF                283                 AND     #%0000111111111111,D2
0000138C  B4BC 00000E75            284                 CMP.L   #%0000111001110101, D2
00001392  6700 06BA                285                 BEQ     RTS
00001396                           286  
00001396                           287                 *JSR
00001396  C47C 0FC0                288                 AND     #%0000111111000000,D2
0000139A  B4BC 00000E80            289                 CMP.L   #%0000111010000000,D2
000013A0  6700 06BA                290                 BEQ     JSR
000013A4                           291                 
000013A4                           292                 * MOVEM
000013A4                           293                  ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
000013A4                           294                ** AND     #%0000111110000000,D2
000013A4                           295                 * DATA REGISTER
000013A4                           296                ** CMP.L   #%0000100010000000, D2
000013A4                           297                 ** JSR      MOVEM
000013A4                           298                 * ADDRESS REGISTER (DECREMENTED)
000013A4                           299                 ** CMP.L  #%0000110010000000, D2
000013A4                           300                 ** JSR    MOVEM
000013A4                           301                  
000013A4                           302                  ** TO DO: BRANCH IF INVALID OPCODE
000013A4                           303                  *LEA - if it's not the top codes, it's LEA
000013A4  6000 022A                304                  BRA     LEA
000013A8                           305  code0101      
000013A8                           306  
000013A8  4EB9 000016BA            307                  JSR   ADDQ
000013AE                           308  
000013AE  4EB9 00001A26            309  code0110         JSR       INVALID_OP
000013B4                           310  
000013B4                           311  code0111       
000013B4  4EB9 000016DA            312                  JSR       MOVEQ
000013BA                           313  
000013BA                           314  code1000      
000013BA  4EB9 0000192C            315                  JSR        bits8to10
000013C0  B67C 0003                316                  CMP        #%011, D3  ** ONLY TIME IT'S DIVU
000013C4  6700 0338                317                  BEQ        DIVU
000013C8  6000 0354                318                  BRA        OR       ** OTHERWISE OR
000013CC                           319                  
000013CC                           320  
000013CC                           321  code1001       
000013CC  4EB9 0000173A            322                 JSR         SUB
000013D2  4EB9 00001A26            323  code1010       JSR       INVALID_OP
000013D8                           324  
000013D8                           325  code1011       
000013D8  4EB9 0000175A            326                 JSR         CMP
000013DE                           327  
000013DE                           328  code1100      
000013DE  4EB9 0000192C            329                  JSR        bits8to10
000013E4  B67C 0007                330                  CMP        #%111, D3  ** ONLY TIME IT'S MULS
000013E8  6700 0390                331                  BEQ        MULS
000013EC  6000 03AC                332                  BRA        AND       ** OTHERWISE AND
000013F0                           333  
000013F0                           334  code1101       
000013F0  4EB9 00001ABA            335                 JSR COPY_OPCODE // Makes a copy of Opcode into d2
000013F6                           336                 *ADDA
000013F6  4EB9 0000192C            337                 JSR      bits8to10
000013FC  B67C 0003                338                 CMP      #%011, D3  ** WORD
00001400  6700 0070                339                 BEQ      ADDA
00001404  B67C 0007                340                 CMP      #%111, D3   ** LONG
00001408  6700 0068                341                 BEQ      ADDA
0000140C                           342                 
0000140C                           343                 *ADD
0000140C  B67C 0000                344                 CMP      #%000, D3   ** BYTE TO DATA REGISTER
00001410  6700 0086                345                 BEQ      ADD
00001414  B67C 0001                346                 CMP      #%001, D3   ** WORD TO DATA REGISTER
00001418  6700 007E                347                 BEQ      ADD
0000141C  B67C 0002                348                 CMP      #%010, D3   ** LONG TO DATA REGISTER
00001420  6700 0076                349                 BEQ      ADD
00001424  B67C 0004                350                 CMP      #%100, D3   ** BYTE TO EA
00001428  6700 006E                351                 BEQ      ADD
0000142C  B67C 0005                352                 CMP      #%101, D3   ** WORD TO EA
00001430  6700 0066                353                 BEQ      ADD
00001434  B67C 0006                354                 CMP      #%110, D3   ** LONG TO EA
00001438  6700 005E                355                 BEQ      ADD
0000143C                           356                 
0000143C                           357  
0000143C                           358  code1110       
0000143C                           359                  * ASR
0000143C  4EB9 00001970            360                  JSR     bits1to10
00001442  B67C 0383                361                  CMP     #%1110000011,D3
00001446  6700 0372                362                  BEQ     ASR
0000144A                           363                  
0000144A                           364                  * ASL
0000144A  B67C 0387                365                  CMP     #%1110000111,D3
0000144E  6700 0386                366                  BEQ     ASL
00001452                           367                  
00001452                           368                  ** TODO: MASK REGISTERS AND FIND SIZE RIGHT AWAY
00001452                           369                  * LSL
00001452  4244                     370                  CLR     D4
00001454  2803                     371                  MOVE.L  D3,D4
00001456  C8BC 00A98671            372                  AND.L   #11110001,D4
0000145C  B87C 01C7                373                  CMP     #%111000111,D4
00001460  6700 0390                374                  BEQ     LSL
00001464                           375                  
00001464                           376                  * LSR
00001464  B67C 038B                377                  CMP     #%1110001011,D3
00001468  6700 03A4                378                  BEQ     LSR
0000146C                           379                  
0000146C                           380                  * ROL
0000146C                           381                  
0000146C                           382                  * ROR
0000146C                           383  
0000146C  4EB9 00001A26            384  code1111       JSR       INVALID_OP
00001472                           385  
00001472                           386  ADDA    
00001472  4EB9 0000147C            387                 JSR     ADDA_BUFFER
00001478  6000 0666                388                 BRA     PRINT_BUFFER
0000147C                           389                  
0000147C                           390  ADDA_BUFFER
0000147C  1CFC 0041                391                 MOVE.B   #'A',(A6)+
00001480  1CFC 0044                392                 MOVE.B   #'D', (A6)+  
00001484  1CFC 0044                393                 MOVE.B   #'D', (A6)+
00001488  1CFC 0041                394                 MOVE.B   #'A', (A6)+
0000148C  4EB9 00001BE4            395                 JSR      GETSIZE_ADDA
00001492  1CFC 0020                396                 MOVE.B   #' ', (A6)+
00001496  4E75                     397                 RTS
00001498                           398                 
00001498                           399                 
00001498                           400                 
00001498                           401  *********************************************               
00001498                           402  ADD    
00001498  4EB9 000014A0            403                 JSR     ADD_BUFFER
0000149E  4E75                     404                 RTS
000014A0                           405                  
000014A0                           406  ADD_BUFFER
000014A0  1CFC 0041                407                 MOVE.B   #'A',(A6)+
000014A4  1CFC 0044                408                 MOVE.B   #'D', (A6)+  
000014A8  1CFC 0044                409                 MOVE.B   #'D', (A6)+
000014AC  4EB9 00001B22            410                 JSR      GETSIZE_ADD
000014B2                           411                 
000014B2                           412                 ;Okay, the directionality bit in D6 should determine which order we should process bits in?
000014B2                           413                 
000014B2  BC7C 0001                414                 CMP      #1,D6
000014B6  6600 0018                415                 BNE      ADD_DIRECTION_REVERSED
000014BA  4EB9 000014E6            416                 JSR      ADD_SRC
000014C0  1CFC 002C                417                 MOVE.B   #',', (A6)+
000014C4  1CFC 0020                418                 MOVE.B   #' ', (A6)+
000014C8  4EB9 0000150A            419                 JSR      ADD_DEST
000014CE  4E75                     420                 RTS
000014D0                           421                 
000014D0                           422                 
000014D0                           423  ADD_DIRECTION_REVERSED
000014D0                           424  
000014D0  4246                     425                 CLR      D6
000014D2  4EB9 0000150A            426                 JSR      ADD_DEST
000014D8  1CFC 002C                427                 MOVE.B   #',', (A6)+
000014DC  1CFC 0020                428                 MOVE.B   #' ', (A6)+
000014E0  4EB9 000014E6            429                 JSR      ADD_SRC             
000014E6                           430                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000014E6                           431                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000014E6                           432                 
000014E6                           433  ***********************************************        
000014E6                           434  
000014E6                           435  
000014E6                           436  
000014E6                           437  ****************************************************************************************
000014E6                           438  ADD_SRC
000014E6                           439  
000014E6  4EB9 0000193E            440                  JSR    bits11to13
000014EC  3803                     441                  MOVE   D3,D4
000014EE  41F9 0000182A            442                  LEA     jmp_mode,A0    *Index into the table
000014F4  C6FC 0006                443                  MULU   #6,D3
000014F8  4EB0 3000                444                  JSR    0(A0,D3)     
000014FC  4EB9 00001950            445                  JSR    bits14to16
00001502  4EB9 0000185A            446                  JSR    insert_num
00001508  4E75                     447                  RTS
0000150A                           448  
0000150A                           449  
0000150A                           450  
0000150A                           451  
0000150A                           452  
0000150A                           453  ADD_DEST
0000150A  363C 0000                454                  MOVE.W #%000,D3     ;Can only have a data register.
0000150E  3803                     455                  MOVE   D3,D4
00001510  41F9 0000182A            456                  LEA     jmp_mode,A0    *Index into the table
00001516  C6FC 0006                457                  MULU    #6,D3       *Form offset     
0000151A  4EB0 3000                458                  JSR     0(A0,D3)   *Jump indirect with index
0000151E                           459                  
0000151E  4EB9 00001906            460                  JSR     bits5to7
00001524  4EB9 0000185A            461                  JSR     insert_num
0000152A  4E75                     462                  RTS
0000152C                           463                          
0000152C                           464  
0000152C                           465  
0000152C                           466  
0000152C                           467  ADDI
0000152C  4EB9 000015B4            468                  JSR     ADDI_BUFFER
00001532  4EB9 00001542            469                  JSR     ADDI_SRC
00001538  4EB9 00001550            470                  JSR     ADDI_DES
0000153E  6000 05A0                471                  BRA     PRINT_BUFFER
00001542                           472                  
00001542                           473  ADDI_SRC                        
00001542  1CFC 0023                474                  MOVE.B  #'#', (A6)+
00001546  1CFC 002C                475                  MOVE.B  #',', (A6)+
0000154A  1CFC 0020                476                  MOVE.B  #' ', (A6)+
0000154E  4E75                     477                  RTS
00001550                           478                    ** TODO: IMPLEMENT THIS IN EA
00001550                           479                  ** Immediate field—Data immediately following the instruction.
00001550                           480                  **If size = 00, the data is the low-order byte of the immediate word.
00001550                           481                  **If size = 01, the data is the entire immediate word.
00001550                           482                  **If size = 10, the data is the next two immediate words. 
00001550                           483  ADDI_DES
00001550                           484                  * LATER BITS ARE DESTINATION (11 TO 13 FOR MODE, 14 TO 16 FOR REGISTER)
00001550                           485                  ** INVALID INCLUDE AN, IMMEDIATE AND TYPICAL INVALIDS
00001550  4EB9 0000193E            486                 JSR      bits11to13
00001556  B67C 0001                487                 CMP      #%001, D3 **AN
0000155A  6700 04C6                488                 BEQ      INVALID_EA
0000155E  B67C 0005                489                 CMP      #%101, D3 **COMPLICATED
00001562  6700 04BE                490                 BEQ      INVALID_EA
00001566  B67C 0006                491                 CMP      #%110, D3 **COMPLICATED
0000156A  6700 04B6                492                 BEQ      INVALID_EA
0000156E                           493                 
0000156E  4EB9 00001960            494                 JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
00001574  B67C 003C                495                 CMP      #%111100,D3 // immediate data
00001578  6700 04A8                496                 BEQ      INVALID_EA
0000157C  B67C 003A                497                 CMP      #%111010,D3 // complicated
00001580  6700 04A0                498                 BEQ      INVALID_EA
00001584  B67C 003B                499                 CMP      #%111011,D3 // complicated
00001588  6700 0498                500                 BEQ      INVALID_EA
0000158C                           501                 
0000158C  4EB9 0000193E            502                 JSR      bits11to13 ** grab bits to jump with\
00001592  3803                     503                 MOVE     D3,D4
00001594  41F9 0000182A            504                 LEA     jmp_mode,A0    *Index into the table
0000159A  C6FC 0006                505                 MULU    #6,D3       *Form offset     
0000159E  4EB0 3000                506                 JSR     0(A0,D3)   *Jump indirect with index
000015A2                           507                 
000015A2  4243                     508                 CLR     D3
000015A4  4EB9 00001950            509                 JSR     bits14to16
000015AA  4EB9 0000185A            510                 JSR     insert_num
000015B0  4244                     511                 CLR     D4
000015B2                           512                 
000015B2  4E75                     513                 RTS
000015B4                           514                 
000015B4                           515                             
000015B4                           516  ADDI_BUFFER
000015B4  1CFC 0041                517                 MOVE.B   #'A',(A6)+
000015B8  1CFC 0044                518                 MOVE.B   #'D', (A6)+  
000015BC  1CFC 0044                519                 MOVE.B   #'D', (A6)+
000015C0  1CFC 0049                520                 MOVE.B   #'I', (A6)+
000015C4                           521                 
000015C4  4EB9 00001BAA            522                 JSR      GETSIZE_ADDI
000015CA                           523                 
000015CA                           524                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10   
000015CA                           525                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000015CA  1CFC 0020                526                 MOVE.B   #' ', (A6)+
000015CE  4E75                     527                 RTS
000015D0                           528                              
000015D0                           529  LEA
000015D0  4EB9 0000192C            530                 JSR      bits8to10   // 1 1 1
000015D6  B47C 0007                531                 CMP      #7, D2 // if the returned bits are not 7, it's not LEA
000015DA  6600 044A                532                 BNE      INVALID_OP
000015DE  4EB9 000015F2            533                 JSR      LEA_BUFFER
000015E4  4EB9 00001604            534                 JSR      LEA_SRC
000015EA  4EB9 00001696            535                 JSR      LEA_DEST
000015F0  4E75                     536                 RTS
000015F2                           537                 
000015F2                           538  LEA_BUFFER 
000015F2  1CFC 004C                539                 MOVE.B   #'L',(A6)+
000015F6  1CFC 0045                540                 MOVE.B   #'E', (A6)+  
000015FA  1CFC 0041                541                 MOVE.B   #'A', (A6)+
000015FE  1CFC 0020                542                 MOVE.B   #' ', (A6)+
00001602  4E75                     543                 RTS
00001604                           544            
00001604                           545  LEA_SRC
00001604                           546              *INVALID SRCS ARE DN, AN, (AN)+, -(AN), 101 (COMPLICATED, 110, #DATA
00001604  4EB9 0000193E            547              JSR      bits11to13  // source mode - D3
0000160A  B67C 0000                548              CMP      #%000, D3
0000160E  6700 0412                549              BEQ      INVALID_EA
00001612  B67C 0001                550              CMP      #%001, D3
00001616  6700 040A                551              BEQ      INVALID_EA
0000161A  B67C 0003                552              CMP      #%011, D3
0000161E  6700 0402                553              BEQ      INVALID_EA
00001622  B67C 0004                554              CMP      #%100, D3
00001626  6700 03FA                555              BEQ      INVALID_EA
0000162A  B67C 0005                556              CMP      #%101, D3
0000162E  6700 03F2                557              BEQ      INVALID_EA
00001632  B67C 0006                558              CMP      #%110, D3
00001636  6700 03EA                559              BEQ      INVALID_EA
0000163A                           560  
0000163A                           561              
0000163A                           562              * CHECK ON REGISTER BITS TO SEE IF NOW ABSOLUTE WORD OR LONG
0000163A  4EB9 00001950            563              JSR      bits14to16 // source register - d4
00001640  B67C 0004                564              CMP      #%100, D3
00001644  6700 03DC                565              BEQ      INVALID_EA
00001648  B67C 0002                566              CMP      #%010, D3
0000164C  6700 03D4                567              BEQ      INVALID_EA
00001650  B67C 0003                568              CMP      #%011, D3
00001654  6700 03CC                569              BEQ      INVALID_EA
00001658                           570              
00001658                           571  
00001658  4EB9 00001960            572               JSR      bits11to16 // check mode and register, invalid if immediate or 111010, 111011
0000165E  B67C 003C                573               CMP      #%111100,D3 // immediate data
00001662  6700 03BE                574               BEQ      INVALID_EA
00001666  B67C 003A                575               CMP      #%111010,D3 // complicated
0000166A  6700 03B6                576               BEQ      INVALID_EA
0000166E  B67C 003B                577               CMP      #%111011,D3 // complicated
00001672  6700 03AE                578               BEQ      INVALID_EA
00001676                           579     
00001676  4EB9 0000193E            580               JSR      bits11to13 ** grab mode bits to jump with
0000167C  3803                     581               MOVE    D3,D4
0000167E                           582  
0000167E  41F9 0000182A            583               LEA     jmp_mode,A0    *Index into the table
00001684  C6FC 0006                584               MULU    #6,D3       *Form offset     
00001688  4EB0 3000                585               JSR     0(A0,D3)   *Jump indirect with index
0000168C                           586   
0000168C  1CFC 002C                587               MOVE.B     #',', (A6)+
00001690  1CFC 0020                588               MOVE.B     #' ', (A6)+
00001694                           589  
00001694  4E75                     590               RTS
00001696                           591               
00001696                           592  LEA_DEST    
00001696  4244                     593                  CLR     D4
00001698  41F9 0000182A            594                  LEA     jmp_mode,A0    * LOAD MODE TABLE FOR JUMPING            
0000169E  363C 0001                595                  MOVE.W  #%001,D3    * LEA CAN ONLY HAVE AN AS DESTINATION
000016A2  3803                     596                  MOVE    D3,D4
000016A4  C6FC 0006                597                  MULU    #6,D3       *Form offset     
000016A8  4EB0 3000                598                  JSR     0(A0,D3)   *Jump indirect with index
000016AC                           599                  
000016AC  4EB9 00001906            600                  JSR     bits5to7
000016B2  4EB9 0000185A            601                  JSR     insert_num
000016B8                           602                  
000016B8  4E75                     603                  RTS
000016BA                           604  
000016BA                           605  
000016BA                           606  ADDQ
000016BA  4EB9 000016C4            607                  JSR     ADDQ_BUFFER
000016C0  6000 041E                608                  BRA     PRINT_BUFFER
000016C4                           609  
000016C4                           610  ADDQ_BUFFER
000016C4  1CFC 0041                611                 MOVE.B   #'A',(A6)+
000016C8  1CFC 0044                612                 MOVE.B   #'D', (A6)+  
000016CC  1CFC 0044                613                 MOVE.B   #'D', (A6)+
000016D0  1CFC 0051                614                 MOVE.B   #'Q', (A6)+
000016D4                           615                 ** TODO: ADD SIZE BASED ON BITS 9 TO 10
000016D4                           616                 ** VALID SIZES ARE B (00),W (01) ,L (10)
000016D4  1CFC 0020                617                 MOVE.B   #' ', (A6)+
000016D8  4E75                     618                 RTS
000016DA                           619                 
000016DA                           620  MOVEQ
000016DA  4EB9 000016E4            621                  JSR     MOVEQ_BUFFER
000016E0  6000 03FE                622                  BRA     PRINT_BUFFER
000016E4                           623  
000016E4                           624  MOVEQ_BUFFER
000016E4  1CFC 004D                625                 MOVE.B   #'M',(A6)+
000016E8  1CFC 004F                626                 MOVE.B   #'O', (A6)+  
000016EC  1CFC 0056                627                 MOVE.B   #'V', (A6)+
000016F0  1CFC 0045                628                 MOVE.B   #'E', (A6)+
000016F4  1CFC 0051                629                 MOVE.B   #'Q', (A6)+
000016F8  1CFC 0020                630                 MOVE.B   #' ', (A6)+
000016FC  4E75                     631                 RTS
000016FE                           632  
000016FE                           633  DIVU
000016FE  4EB9 00001708            634                  JSR     DIVU_BUFFER
00001704  6000 03DA                635                  BRA     PRINT_BUFFER
00001708                           636  
00001708                           637  DIVU_BUFFER
00001708  1CFC 0044                638                 MOVE.B   #'D',(A6)+
0000170C  1CFC 0049                639                 MOVE.B   #'I', (A6)+  
00001710  1CFC 0056                640                 MOVE.B   #'V', (A6)+
00001714  1CFC 0055                641                 MOVE.B   #'U', (A6)+
00001718  1CFC 0020                642                 MOVE.B   #' ', (A6)+
0000171C  4E75                     643                 RTS  
0000171E                           644  OR    
0000171E  4EB9 00001728            645                 JSR     OR_BUFFER
00001724  6000 03BA                646                 BRA     PRINT_BUFFER
00001728                           647                  
00001728                           648  OR_BUFFER
00001728  1CFC 004F                649                 MOVE.B   #'O',(A6)+
0000172C  1CFC 0052                650                 MOVE.B   #'R', (A6)+  
00001730  1CFC 002E                651                 MOVE.B   #'.', (A6)+
00001734                           652                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001734                           653                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001734                           654                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001734  1CFC 0020                655                 MOVE.B   #' ', (A6)+
00001738  4E75                     656                 RTS   
0000173A                           657  
0000173A                           658  SUB   
0000173A  4EB9 00001744            659                 JSR     SUB_BUFFER
00001740  6000 039E                660                 BRA     PRINT_BUFFER               
00001744                           661  
00001744                           662  SUB_BUFFER
00001744  1CFC 0053                663                 MOVE.B   #'S',(A6)+
00001748  1CFC 0055                664                 MOVE.B   #'U', (A6)+  
0000174C  1CFC 0042                665                 MOVE.B   #'B', (A6)+
00001750  1CFC 002E                666                 MOVE.B   #'.', (A6)+
00001754                           667                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001754                           668                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001754                           669                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001754  1CFC 0020                670                 MOVE.B   #' ', (A6)+
00001758  4E75                     671                 RTS  
0000175A                           672  CMP   
0000175A  4EB9 00001764            673                 JSR     CMP_BUFFER
00001760  6000 037E                674                 BRA     PRINT_BUFFER
00001764                           675                  
00001764                           676  CMP_BUFFER
00001764  1CFC 0043                677                 MOVE.B   #'C',(A6)+
00001768  1CFC 004D                678                 MOVE.B   #'M', (A6)+  
0000176C  1CFC 0050                679                 MOVE.B   #'P', (A6)+
00001770  1CFC 002E                680                 MOVE.B   #'.', (A6)+
00001774                           681                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001774                           682                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001774                           683                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001774  1CFC 0020                684                 MOVE.B   #' ', (A6)+
00001778  4E75                     685                 RTS   
0000177A                           686                 
0000177A                           687  MULS
0000177A  4EB9 00001784            688                  JSR     MULS_BUFFER
00001780  6000 035E                689                  BRA     PRINT_BUFFER
00001784                           690  
00001784                           691  MULS_BUFFER
00001784  1CFC 004D                692                 MOVE.B   #'M',(A6)+
00001788  1CFC 0055                693                 MOVE.B   #'U', (A6)+  
0000178C  1CFC 004C                694                 MOVE.B   #'L', (A6)+
00001790  1CFC 0053                695                 MOVE.B   #'S', (A6)+
00001794  1CFC 0020                696                 MOVE.B   #' ', (A6)+
00001798  4E75                     697                 RTS
0000179A                           698  
0000179A                           699  AND    
0000179A  4EB9 000017A4            700                 JSR     AND_BUFFER
000017A0  6000 033E                701                 BRA     PRINT_BUFFER
000017A4                           702                  
000017A4                           703  AND_BUFFER
000017A4  1CFC 0041                704                 MOVE.B   #'A',(A6)+
000017A8  1CFC 004E                705                 MOVE.B   #'N', (A6)+  
000017AC  1CFC 0044                706                 MOVE.B   #'D', (A6)+
000017B0  1CFC 002E                707                 MOVE.B   #'.', (A6)+
000017B4                           708                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
000017B4                           709                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
000017B4                           710                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
000017B4  1CFC 0020                711                 MOVE.B   #' ', (A6)+
000017B8  4E75                     712                 RTS    
000017BA                           713  
000017BA                           714  ASR     
000017BA  4EB9 000017C4            715                  JSR     ASR_BUFFER
000017C0  6000 031E                716                  BRA     PRINT_BUFFER
000017C4                           717  
000017C4                           718  ASR_BUFFER
000017C4  1CFC 0041                719                 MOVE.B   #'A',(A6)+
000017C8  1CFC 0053                720                 MOVE.B   #'S', (A6)+  
000017CC  1CFC 0052                721                 MOVE.B   #'R', (A6)+
000017D0  1CFC 0020                722                 MOVE.B   #' ', (A6)+
000017D4  4E75                     723                 RTS      
000017D6                           724  
000017D6                           725  ASL     
000017D6  4EB9 000017E0            726                  JSR     ASL_BUFFER
000017DC  6000 0302                727                  BRA     PRINT_BUFFER
000017E0                           728  
000017E0                           729  ASL_BUFFER
000017E0  1CFC 0041                730                 MOVE.B   #'A',(A6)+
000017E4  1CFC 0053                731                 MOVE.B   #'S', (A6)+  
000017E8  1CFC 004C                732                 MOVE.B   #'L', (A6)+
000017EC  1CFC 0020                733                 MOVE.B   #' ', (A6)+
000017F0  4E75                     734                 RTS     
000017F2                           735  
000017F2                           736  LSL     
000017F2  4EB9 000017FC            737                  JSR     LSL_BUFFER
000017F8  6000 02E6                738                  BRA     PRINT_BUFFER
000017FC                           739  
000017FC                           740  LSL_BUFFER
000017FC  1CFC 004C                741                 MOVE.B   #'L',(A6)+
00001800  1CFC 0053                742                 MOVE.B   #'S', (A6)+  
00001804  1CFC 004C                743                 MOVE.B   #'L', (A6)+
00001808  1CFC 0020                744                 MOVE.B   #' ', (A6)+
0000180C  4E75                     745                 RTS     
0000180E                           746  
0000180E                           747  LSR     
0000180E  4EB9 00001818            748                  JSR     LSR_BUFFER
00001814  6000 02CA                749                  BRA     PRINT_BUFFER
00001818                           750  
00001818                           751  LSR_BUFFER
00001818  1CFC 004C                752                 MOVE.B   #'L',(A6)+
0000181C  1CFC 0053                753                 MOVE.B   #'S', (A6)+  
00001820  1CFC 0052                754                 MOVE.B   #'R', (A6)+
00001824  1CFC 0020                755                 MOVE.B   #' ', (A6)+
00001828  4E75                     756                 RTS       
0000182A                           757                 
0000182A                           758  jmp_mode
0000182A  4EF9 00001982            759                  JMP     MODE000  ** DN
00001830  4EF9 00001988            760                  JMP     MODE001  ** AN
00001836  4EF9 00001990            761                  JMP     MODE010  ** (AN)
0000183C  4EF9 0000199A            762                  JMP     MODE011  ** (AN)+   
00001842  4EF9 000019A4            763                  JMP     MODE100  ** -(AN)
00001848  4EF9 000019B2            764                  JMP     MODE101  **INVALID
0000184E  4EF9 000019BC            765                  JMP     MODE110  **INVALID
00001854  4EF9 000019C6            766                  JMP     MODE111  ** ABSOLUTE AND IMMEDIATE
0000185A                           767  
0000185A                           768                  
0000185A                           769  insert_num
0000185A                           770                  
0000185A                           771                  ;get number from D3
0000185A  B67C 0000                772                  CMP     #%000,D3       ;0
0000185E  6600 000A                773                  BNE     ONE         
00001862  1CFC 0030                774                  MOVE.B  #'0',(A6)+      ;Put ASCII value in buffer.
00001866  6000 006E                775                  BRA     FINISHER
0000186A                           776                  
0000186A  B67C 0001                777  ONE             CMP     #%001,D3       ;1
0000186E  6600 000A                778                  BNE     TWO 
00001872  1CFC 0031                779                  MOVE.B  #'1',(A6)+
00001876  6000 005E                780                  BRA     FINISHER
0000187A                           781  
0000187A                           782                  
0000187A  B67C 0002                783  TWO             CMP     #%010,D3        ;2
0000187E  6600 000A                784                  BNE     THREE
00001882  1CFC 0032                785                  MOVE.B  #'2',(A6)+
00001886  6000 004E                786                  BRA     FINISHER
0000188A                           787                  
0000188A  B67C 0003                788  THREE           CMP     #%011,D3        ;3
0000188E  6600 000A                789                  BNE     FOUR
00001892  1CFC 0033                790                  MOVE.B  #'3',(A6)+
00001896  6000 003E                791                  BRA     FINISHER
0000189A                           792                  
0000189A  B67C 0004                793  FOUR            CMP     #%100,D3        ;4
0000189E  6600 000A                794                  BNE     FIVE
000018A2  1CFC 0034                795                  MOVE.B  #'4',(A6)+
000018A6  6000 002E                796                  BRA     FINISHER
000018AA                           797                  
000018AA  B67C 0005                798  FIVE            CMP     #%101,D3        ;5
000018AE  6600 000A                799                  BNE     SIX
000018B2  1CFC 0035                800                  MOVE.B  #'5',(A6)+
000018B6  6000 001E                801                  BRA     FINISHER
000018BA                           802                  
000018BA  B67C 0006                803  SIX             CMP     #%110,D3        ;6
000018BE  6600 000A                804                  BNE     SEVEN
000018C2  1CFC 0036                805                  MOVE.B  #'6',(A6)+
000018C6  6000 000E                806                  BRA     FINISHER
000018CA                           807                  
000018CA  B67C 0007                808  SEVEN           CMP     #%111,D3        ;7
000018CE  1CFC 0037                809                  MOVE.B  #'7',(A6)+
000018D2  6000 0002                810                  BRA     FINISHER
000018D6                           811                  
000018D6                           812  FINISHER                
000018D6                           813                  
000018D6                           814                  ;check D4, do we need to do stuff?
000018D6  B87C 0002                815                  CMP     #%010,D4
000018DA  6600 0008                816                  BNE     POSTINCR
000018DE  1CFC 0029                817                  MOVE.B  #')',(A6)+
000018E2  4E75                     818                  RTS
000018E4                           819                  
000018E4  B87C 0003                820  POSTINCR        CMP     #%011,D4
000018E8  6600 000C                821                  BNE     ONEPAREN
000018EC  1CFC 0029                822                  MOVE.B  #')',(A6)+
000018F0  1CFC 002B                823                  MOVE.B  #'+',(A6)+
000018F4  4E75                     824                  RTS
000018F6                           825                  
000018F6  B87C 0004                826  ONEPAREN        CMP     #%100,D4
000018FA  6600 0008                827                  BNE     DONE
000018FE  1CFC 0029                828                  MOVE.B  #')',(A6)+                
00001902                           829  
00001902  4244                     830                  CLR     D4
00001904  4E75                     831  DONE            RTS
00001906                           832  
00001906                           833          
00001906                           834                 
00001906                           835  bits5to7
00001906  4243                     836                 CLR      D3
00001908  4EB9 00001ABA            837                 JSR      COPY_OPCODE  // opcode copied to D2
0000190E  C47C 0E00                838                 AND      #%0000111000000000, D2
00001912  E09A                     839                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001914  E29A                     840                 ROR.L    #1, D2
00001916  3602                     841                 MOVE.W   D2,D3 // moving isolated bits into d3
00001918  4E75                     842                 RTS
0000191A                           843                 
0000191A                           844  bits5to8
0000191A  4243                     845                 CLR      D3
0000191C  4EB9 00001ABA            846                 JSR      COPY_OPCODE  // opcode copied to D2
00001922  C47C 0F00                847                 AND      #%0000111100000000, D2
00001926  E09A                     848                 ROR.L    #8, D2          // rotate bits so isolated at the end
00001928  3602                     849                 MOVE.W   D2,D3 // moving isolated bits into d3
0000192A  4E75                     850                 RTS
0000192C                           851                 
0000192C                           852  bits8to10
0000192C  4243                     853                 CLR      D3
0000192E  4EB9 00001ABA            854                 JSR      COPY_OPCODE  // opcode copied to D2
00001934  C47C 01C0                855                 AND      #%0000000111000000, D2
00001938  EC9A                     856                 ROR.L    #6, D2          // rotate bits so isolated at the end
0000193A  3602                     857                 MOVE.W   D2,D3 // moving isolated bits into d3
0000193C  4E75                     858                 RTS               
0000193E                           859             
0000193E                           860  bits11to13
0000193E  4243                     861                 CLR      D3
00001940  4EB9 00001ABA            862                 JSR      COPY_OPCODE  // opcode copied to D2
00001946  C47C 0038                863                 AND      #%0000000000111000, D2
0000194A  E69A                     864                 ROR.L    #3, D2          // rotate bits so isolated at the end
0000194C  3602                     865                 MOVE.W   D2,D3 // moving isolated bits into d3
0000194E  4E75                     866                 RTS
00001950                           867             
00001950                           868  bits14to16
00001950  4243                     869                 CLR      D3
00001952  4EB9 00001ABA            870                 JSR      COPY_OPCODE  // opcode copied to D2
00001958  C47C 0007                871                 AND      #%0000000000000111, D2
0000195C  3602                     872                 MOVE.W   D2,D3 // moving isolated bits into d3
0000195E  4E75                     873                 RTS
00001960                           874  bits11to16
00001960  4243                     875                 CLR      D3
00001962  4EB9 00001ABA            876                 JSR      COPY_OPCODE  // opcode copied to D2
00001968  C47C 003F                877                 AND      #%0000000000111111, D2
0000196C  3602                     878                 MOVE.W   D2,D3 // moving isolated bits into d3
0000196E  4E75                     879                 RTS
00001970                           880  bits1to10
00001970  4243                     881                 CLR      D3
00001972  4EB9 00001ABA            882                 JSR      COPY_OPCODE  // opcode copied to D2
00001978  C47C FFC0                883                 AND      #%1111111111000000, D2
0000197C  EC9A                     884                 ROR.L    #6, D2
0000197E  3602                     885                 MOVE.W   D2,D3 // moving isolated bits into d3
00001980  4E75                     886                 RTS
00001982                           887  ** DN       
00001982                           888  MODE000         
00001982  1CFC 0044                889                  MOVE.B  #'D',(A6)+     
00001986  4E75                     890                  RTS
00001988                           891  
00001988                           892  ** AN
00001988                           893  MODE001         
00001988  4EB9 000019DA            894                  JSR ADDRESS_BUFFER  
0000198E  4E75                     895                  RTS      
00001990                           896  
00001990                           897   ** (AN)
00001990                           898  MODE010         
00001990  1CFC 0028                899                  MOVE.B  #'(', (A6)+
00001994  1CFC 0041                900                  MOVE.B  #'A',(A6)+  
00001998  4E75                     901                  RTS      
0000199A                           902  
0000199A                           903  ** (AN)+ 
0000199A                           904  MODE011         
0000199A  1CFC 0028                905                  MOVE.B  #'(', (A6)+
0000199E  1CFC 0041                906                  MOVE.B  #'A',(A6)+ 
000019A2  4E75                     907                  RTS       
000019A4                           908  
000019A4                           909   ** -(AN)
000019A4                           910  MODE100         
000019A4  1CFC 002D                911                  MOVE.B  #'-', (A6)+
000019A8  1CFC 0028                912                  MOVE.B  #'(', (A6)+
000019AC  1CFC 0041                913                  MOVE.B  #'A',(A6)+
000019B0  4E75                     914                  RTS
000019B2                           915                  
000019B2                           916  **INVALID               
000019B2                           917  MODE101         
000019B2  1CFC 0028                918                  MOVE.B  #'(', (A6)+
000019B6  1CFC 0041                919                  MOVE.B  #'A',(A6)+ 
000019BA  4E75                     920                  RTS
000019BC                           921                  
000019BC                           922  **INVALID
000019BC                           923  MODE110         
000019BC  1CFC 0028                924                  MOVE.B  #'(', (A6)+
000019C0  1CFC 0041                925                  MOVE.B  #'A',(A6)+
000019C4  4E75                     926                  RTS  
000019C6                           927  
000019C6                           928  ** ABSOLUTE AND IMMEDIATE            
000019C6                           929  MODE111         
000019C6                           930                  *TO DO CHECK IF ABSOLUTE OR IMMEDIATE
000019C6  1CFC 0024                931                 MOVE.B   #'$', (A6)+  
000019CA  4EB9 00001AFC            932                 JSR      PRINT_DEREF_ADDRESS
000019D0  544A                     933                 ADD.W    #2, A2
000019D2  4EB9 00001AFC            934                 JSR      PRINT_DEREF_ADDRESS
000019D8  4E75                     935                 RTS            
000019DA                           936                                          
000019DA                           937  ADDRESS_BUFFER
000019DA  1CFC 0041                938                  MOVE.B  #'A',(A6)+ 
000019DE  4E75                     939                  RTS
000019E0                           940                 
000019E0                           941  ABSOLUTE_BUFFER
000019E0  4243                     942                 CLR      D3
000019E2  3604                     943                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON
000019E4  1CF8 0024                944                 MOVE.B   '$', (A6)+
000019E8  B67C 0000                945                 CMP.W    #%000, D3
000019EC  6700 0010                946                 BEQ      ABSOLUTE_WORD_BUFFER
000019F0  4243                     947                 CLR      D3
000019F2  3604                     948                 MOVE.W   D4,D3 // USE D3 FOR COMPARISON   
000019F4  B67C 0001                949                 CMP.W    #%001, D3
000019F8  6700 0016                950                 BEQ      ABSOLUTE_LONG_BUFFER
000019FC  4E75                     951                 RTS
000019FE                           952                 
000019FE                           953  ABSOLUTE_WORD_BUFFER
000019FE                           954                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
000019FE                           955                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
000019FE  1CFC 0046                956                         MOVE.B #'F', (A6)+ 
00001A02  1CFC 0046                957                         MOVE.B #'F', (A6)+ 
00001A06  1CFC 0046                958                         MOVE.B #'F', (A6)+ 
00001A0A  1CFC 0046                959                         MOVE.B #'F', (A6)+ 
00001A0E  4E75                     960                         RTS       
00001A10                           961                    
00001A10                           962  ABSOLUTE_LONG_BUFFER       
00001A10                           963                         *** TODO: SHOULD START AT THE CURRENT LOCATION AFTER OPCODE AND READ IN ADDRESS TO PRINT
00001A10                           964                         *** TODO: PROPERLY INCREMENT CURRENT ADDRESS
00001A10  1CFC 0047                965                         MOVE.B #'G', (A6)+ 
00001A14  1CFC 0047                966                         MOVE.B #'G', (A6)+ 
00001A18  1CFC 0047                967                         MOVE.B #'G', (A6)+ 
00001A1C  1CFC 0047                968                         MOVE.B #'G', (A6)+
00001A20  4E75                     969                         RTS 
00001A22                           970  
00001A22                           971  INVALID_EA  
00001A22                           972                  * TODO: IMPLEMENT
00001A22                           973                  *** CLEAR OUT A6
00001A22                           974                  ** PUT INVALID MESSAGE INTO A6
00001A22  6000 F8C5                975                  BRA EXIT
00001A26                           976  INVALID_OP  
00001A26                           977                  ** TODO: IMPLEMENT
00001A26                           978                 *** CLEAR OUT A6
00001A26                           979                  ** PUT INVALID MESSAGE INTO A6
00001A26  1CFC 0044                980                      MOVE.B #'D', (A6)+
00001A2A  1CFC 0041                981                      MOVE.B #'A', (A6)+
00001A2E  1CFC 0054                982                      MOVE.B #'T', (A6)+
00001A32  1CFC 0041                983                      MOVE.B #'A', (A6)+ 
00001A36  1CFC 0020                984                      MOVE.B #' ', (A6)+ 
00001A3A  4EB9 00001AFC            985                      JSR     PRINT_DEREF_ADDRESS
00001A40                           986            
00001A40                           987                  
00001A40  43F8 122B                988  NOP                 LEA     NOP_disp,A1          
00001A44  103C 000E                989                      MOVE.B  #14,D0
00001A48  4E4F                     990                      TRAP    #15
00001A4A  6000 F89D                991                      BRA     EXIT
00001A4E                           992                   
00001A4E                           993  RTS      
00001A4E  43F8 1292                994                      LEA     RTS_disp,A1          
00001A52  103C 000E                995                      MOVE.B  #14,D0
00001A56  4E4F                     996                      TRAP    #15 
00001A58  6000 F88F                997                      BRA     EXIT
00001A5C                           998  JSR      
00001A5C  4DF9 00001C3C            999                      LEA     BUFFER, A6
00001A62  1CFC 004A               1000                      MOVE.B #'J', (A6)+
00001A66  1CFC 0053               1001                      MOVE.B #'S', (A6)+
00001A6A  1CFC 0052               1002                      MOVE.B #'R', (A6)+
00001A6E  1CFC 0020               1003                      MOVE.B #' ', (A6)+
00001A72  43F9 00001C3C           1004                      LEA     BUFFER, A1
00001A78                          1005                      ** BITS 10 - 12 MODE       
00001A78                          1006                      ** BITS 13 - 16 REGISTER
00001A78  103C 000E               1007                      MOVE.B  #14,D0
00001A7C  4E4F                    1008                      TRAP    #15 
00001A7E  6000 F869               1009                      BRA     EXIT
00001A82                          1010                    
00001A82                          1011  MOVEM      
00001A82                          1012                     
00001A82                          1013                      ** SIZE SUBROUTINE
00001A82                          1014                      ** 0 1  0 0     1 | D | 0   0 1 | S M   Xn  
00001A82  C47C 0040               1015                      AND #%0000000001000000,D2 
00001A86                          1016                      * WORD
00001A86  B4BC 00000040           1017                      CMP.L   #%0000000001000000,D2
00001A8C  4EB9 00001AA2           1018                      JSR     MOVEM_W 
00001A92                          1019                      *LONG
00001A92  B4BC 00000040           1020                      CMP.L   #%0000000001000000,D2 
00001A98                          1021                     ** JSR     MOVEM_L
00001A98  103C 000E               1022                      MOVE.B  #14,D0
00001A9C  4E4F                    1023                      TRAP    #15
00001A9E  6000 F849               1024                      BRA     EXIT 
00001AA2                          1025                      
00001AA2                          1026  MOVEM_W 
00001AA2  43F8 1240               1027                       LEA     MOVEM_disp,A1
00001AA6                          1028                      * PRINT MOVEM
00001AA6  103C 000E               1029                       MOVE.B  #14,D0
00001AAA  4E4F                    1030                       TRAP    #15
00001AAC                          1031          
00001AAC                          1032                      * PRINT WORD PORTION
00001AAC  41F8 12D7               1033                       LEA     size_w, A0
00001AB0  103C 000E               1034                       MOVE.B  #14,D0
00001AB4  4E4F                    1035                       TRAP    #15 
00001AB6                          1036          
00001AB6  6000 F831               1037                       BRA     EXIT 
00001ABA                          1038       
00001ABA                          1039     
00001ABA                          1040  COPY_OPCODE 
00001ABA                          1041                       ** HOLDS COPY OF OPCODE TO BE MANIPULATED
00001ABA  4242                    1042                       CLR    D2  
00001ABC  3405                    1043                       MOVE.W D5,D2 
00001ABE  4E75                    1044                       RTS  
00001AC0                          1045  
00001AC0                          1046  PRINT_ADDRESS     
00001AC0  4242                    1047                   CLR         D2
00001AC2  143C 0010               1048                   MOVE.B      #16,D2          // Setup for Base-16 conversion
00001AC6  220A                    1049                   MOVE.L      A2,D1        
00001AC8  103C 000F               1050                   MOVE.B      #15,D0          
00001ACC  4E4F                    1051                   TRAP        #15            
00001ACE  1CFC 0020               1052                   MOVE.B      #' ', (A6)+
00001AD2  1CFC 0020               1053                   MOVE.B      #' ', (A6)+
00001AD6  1CFC 0020               1054                   MOVE.B      #' ', (A6)+
00001ADA  1CFC 0020               1055                   MOVE.B      #' ', (A6)+
00001ADE  4E75                    1056                   RTS     
00001AE0                          1057  PRINT_BUFFER    
00001AE0  1CFC 0000               1058                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001AE4  43F9 00001C3C           1059                 LEA      BUFFER, A1
00001AEA  303C 000E               1060                 MOVE.W   #14,D0
00001AEE  4E4F                    1061                 TRAP     #15
00001AF0  43F8 121B               1062                 LEA     linebreak,A1            *appends line at the end of the user input
00001AF4  103C 000E               1063                 MOVE.B  #14,D0
00001AF8  4E4F                    1064                 TRAP    #15
00001AFA  4E75                    1065                 RTS  
00001AFC                          1066  
00001AFC                          1067  PRINT_DEREF_ADDRESS
00001AFC  1CFC 0000               1068                 MOVE.B   #%0,  (A6)+ ** null terminate the string       
00001B00  43F9 00001C3C           1069                 LEA      BUFFER, A1
00001B06  303C 000E               1070                 MOVE.W   #14,D0
00001B0A  4E4F                    1071                 TRAP     #15
00001B0C  4DF9 00001C3C           1072                 LEA      BUFFER, A6
00001B12  4242                    1073                 CLR         D2
00001B14  143C 0010               1074                 MOVE.B      #16,D2          // Setup for Base-16 conversion
00001B18  3212                    1075                 MOVE.W      (A2),D1        // PRINT INVALID HEX OPCODE        
00001B1A  103C 000F               1076                 MOVE.B      #15,D0          
00001B1E  4E4F                    1077                 TRAP        #15 
00001B20  4E75                    1078                 RTS
00001B22                          1079   
00001B22                          1080                     
00001B22                          1081  ****************************
00001B22                          1082  
00001B22                          1083                 ** TODO: ADD SIZE BASED ON BITS 8 TO 10
00001B22                          1084                 ** VALID SIZES ARE B (000) , W (001) ,L (010) ---> <EA> + DN --> DN 
00001B22                          1085                                 ** B (100) , W (101) ,L (110) --->  DN + <EA> --> <EA> 
00001B22                          1086  GETSIZE_ADD
00001B22  4EB8 192C               1087              JSR     bits8to10
00001B26  B67C 0000               1088              CMP     #%000,D3
00001B2A  6600 0010               1089              BNE     ADD_NOTBYTE
00001B2E  4EB9 00001C0C           1090              JSR     SIZEISBYTE
00001B34  3C3C 0001               1091              MOVE    #1,D6
00001B38  4243                    1092              CLR     D3
00001B3A  4E75                    1093              RTS
00001B3C                          1094          
00001B3C                          1095  ADD_NOTBYTE 
00001B3C  B67C 0001               1096              CMP     #%001,D3
00001B40  6600 0010               1097              BNE     ADD_NOTWORD
00001B44  4EB9 00001C1C           1098              JSR     SIZEISWORD
00001B4A  3C3C 0001               1099              MOVE    #1,D6
00001B4E  4243                    1100              CLR     D3
00001B50  4E75                    1101              RTS
00001B52                          1102              
00001B52                          1103  ADD_NOTWORD
00001B52  B67C 0002               1104              CMP     #%010,D3
00001B56  6600 0010               1105              BNE     ADD_NOTLEFT
00001B5A  4EB9 00001C2C           1106              JSR     SIZEISLONG
00001B60  3C3C 0001               1107              MOVE    #1,D6
00001B64  4243                    1108              CLR     D3
00001B66  4E75                    1109              RTS
00001B68                          1110              
00001B68                          1111  ADD_NOTLEFT     ;check other direction
00001B68  B67C 0004               1112              CMP     #%100,D3
00001B6C  6600 0010               1113              BNE     ADD_NOTRIGHTBYTE
00001B70  4EB9 00001C0C           1114              JSR     SIZEISBYTE
00001B76  3C3C 0002               1115              MOVE    #2,D6
00001B7A  4243                    1116              CLR     D3
00001B7C  4E75                    1117              RTS
00001B7E                          1118              
00001B7E                          1119  ADD_NOTRIGHTBYTE
00001B7E  B67C 0005               1120              CMP     #%101,D3
00001B82  6600 0010               1121              BNE     ADD_NOTRIGHTWORD
00001B86  4EB9 00001C1C           1122              JSR     SIZEISWORD
00001B8C  3C3C 0002               1123              MOVE    #2,D6
00001B90  4243                    1124              CLR     D3
00001B92  4E75                    1125              RTS
00001B94                          1126  
00001B94                          1127  ADD_NOTRIGHTWORD
00001B94  B67C 0006               1128              CMP     #%110,D3
00001B98  6600 FE88               1129              BNE     INVALID_EA
00001B9C  4EB9 00001C2C           1130              JSR     SIZEISLONG
00001BA2  3C3C 0002               1131              MOVE    #2,D6
00001BA6  4243                    1132              CLR     D3
00001BA8  4E75                    1133              RTS 
00001BAA                          1134                               
00001BAA                          1135                       
00001BAA                          1136                       
00001BAA                          1137  *****************************                  
00001BAA                          1138  GETSIZE_ADDI
00001BAA  4EB8 192C               1139          JSR     bits8to10
00001BAE  B67C 0000               1140          CMP     #%000,D3
00001BB2  6600 000C               1141          BNE     ADDI_NOTBYTE
00001BB6  4EB9 00001C0C           1142          JSR     SIZEISBYTE
00001BBC  4243                    1143          CLR     D3
00001BBE  4E75                    1144          RTS
00001BC0                          1145  
00001BC0                          1146  ADDI_NOTBYTE
00001BC0  B67C 0001               1147          CMP     #%001,D3
00001BC4  6600 000C               1148          BNE     ADDI_NOTWORD
00001BC8  4EB9 00001C1C           1149          JSR     SIZEISWORD
00001BCE  4243                    1150          CLR     D3
00001BD0  4E75                    1151          RTS
00001BD2                          1152          
00001BD2                          1153  ADDI_NOTWORD
00001BD2  B67C 0002               1154          CMP     #%010,D3
00001BD6  6600 FE4A               1155          BNE     INVALID_EA
00001BDA  4EB9 00001C2C           1156          JSR     SIZEISLONG
00001BE0  4243                    1157          CLR     D3
00001BE2  4E75                    1158          RTS
00001BE4                          1159          
00001BE4                          1160                              
00001BE4                          1161                       
00001BE4                          1162  ********************************          
00001BE4                          1163                       
00001BE4                          1164                       
00001BE4                          1165  ********************************                     
00001BE4                          1166  GETSIZE_ADDA
00001BE4  4EB8 192C               1167          JSR     bits8to10
00001BE8  B67C 0003               1168          CMP     #%011,D3
00001BEC  6600 000C               1169          BNE     ADDA_NOTWORD
00001BF0  4EB9 00001C1C           1170          JSR     SIZEISWORD
00001BF6  4243                    1171          CLR     D3
00001BF8  4E75                    1172          RTS
00001BFA                          1173          
00001BFA                          1174  
00001BFA                          1175          
00001BFA                          1176  ADDA_NOTWORD
00001BFA  B67C 0007               1177          CMP     #%111,D3
00001BFE  6600 FE22               1178          BNE     INVALID_EA
00001C02  4EB9 00001C2C           1179          JSR     SIZEISLONG
00001C08  4243                    1180          CLR     D3
00001C0A  4E75                    1181          RTS
00001C0C                          1182  **********************************        
00001C0C                          1183      
00001C0C                          1184  SIZEISBYTE
00001C0C  1CFC 002E               1185         MOVE.B   #'.',(A6)+
00001C10  1CFC 0042               1186         MOVE.B   #'B',(A6)+
00001C14  1CFC 0020               1187         MOVE.B   #' ',(A6)+
00001C18  4243                    1188         CLR      D3
00001C1A  4E75                    1189         RTS
00001C1C                          1190  
00001C1C                          1191  SIZEISWORD    
00001C1C  1CFC 002E               1192         MOVE.B   #'.',(A6)+
00001C20  1CFC 0057               1193         MOVE.B   #'W',(A6)+
00001C24  1CFC 0020               1194         MOVE.B   #' ',(A6)+
00001C28  4243                    1195         CLR      D3
00001C2A  4E75                    1196         RTS
00001C2C                          1197                  
00001C2C                          1198  SIZEISLONG    
00001C2C  1CFC 002E               1199         MOVE.B   #'.',(A6)+
00001C30  1CFC 004C               1200         MOVE.B   #'L',(A6)+
00001C34  1CFC 0020               1201         MOVE.B   #' ',(A6)+
00001C38                          1202  
00001C38  4243                    1203         CLR      D3
00001C3A  4E75                    1204         RTS
00001C3C                          1205                  
00001C3C                          1206       
00001C3C= 00000001                1207  BUFFER DC.L 1     
00001C40                          1208      INCLUDE 'helpers.x68'
00001C40  1019                    1209  sub_AsToHeLoop          MOVE.B  (A1)+,D0            *gets first byte
00001C42  4EB9 00001C5A           1210                          JSR     sub_breakDownAs     *breaks down ASCII code
00001C48  D280                    1211                          ADD.L   D0,D1               *load that char into D1
00001C4A  0C11 0000               1212                          CMPI.B  #$0,(A1)            *checks if more needs to be broken down
00001C4E  6700 0006               1213                          BEQ     athEndLoop          *if no more is needed to be worked on, exits
00001C52  E989                    1214                          LSL.L   #$4,D1              *else, shift remaining char in D1 for next char
00001C54  60EA                    1215                          BRA     sub_AsToHeLoop      *loops through again
00001C56                          1216                          
00001C56  2E01                    1217  athEndLoop              MOVE.L  D1,D7               *hex number in D7
00001C58  4E75                    1218                          RTS
00001C5A  B03C 0030               1219  sub_breakDownAs         CMP.B     #$30,D0           *$is it a 0-9 digit or an a-f letter?
00001C5E  6D00 002A               1220                          BLT     as_ERROR                        
00001C62                          1221                          
00001C62  B03C 0039               1222                          CMP.B    #$39,D0            *is it an A-F letter?
00001C66  6E00 000C               1223                          BGT     as_LETTER
00001C6A                          1224                          
00001C6A  6000 0002               1225                          BRA     as_NUMBER
00001C6E                          1226                                                 
00001C6E  0400 0030               1227  as_number               SUB.B   #$30,D0             *subtract 30, used for digits
00001C72  4E75                    1228                          RTS
00001C74                          1229                          
00001C74  B03C 0041               1230  as_LETTER               CMP.B     #$41,D0           *letters A-F helper
00001C78  6D00 0010               1231                          BLT     as_ERROR
00001C7C                          1232                          
00001C7C  B03C 0046               1233                          CMP.B     #$46, D0
00001C80  6E00 0008               1234                          BGT     as_ERROR
00001C84                          1235                          
00001C84  0400 0037               1236                          SUBI.B  #$37,D0             *subtract 37, used for A-F
00001C88  4E75                    1237                          RTS
00001C8A                          1238                          
00001C8A  43F9 65727200           1239  as_ERROR                LEA     'err',A1            *will display error if conversion cannot happen
00001C90  103C 000D               1240                          MOVE.B  #13,D0
00001C94  4E4F                    1241                          TRAP    #15  
00001C96                          1242  sub_StartReadingData    
00001C96  0801 0000               1243                          BTST    #0,D1                   *checks if Least Significant Bit is 1, (looks at XNZVC and sees if Z is 1) 
00001C9A  6600 0006               1244                          BNE     srdFailAddrOddB         *if 1, then address is odd and invalid
00001C9E                          1245                          
00001C9E  7E00                    1246                          MOVE.L  #0,D7                   *if D7 equals 0, then address is valid
00001CA0  4E75                    1247  srdFinish               RTS
00001CA2                          1248  
00001CA2  43F8 1164               1249  srdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CA6  103C 000E               1250                          MOVE.B  #14,D0
00001CAA  4E4F                    1251                          TRAP    #15
00001CAC                          1252                          
00001CAC  7E01                    1253                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CAE  60F0                    1254                          BRA     srdFinish
00001CB0                          1255  sub_EndReadingData  
00001CB0  0801 0000               1256                          BTST    #0,D1               *checks if LSB is 1, 
00001CB4  6600 0018               1257                          BNE     erdFailAddrOddB     *if 1, then address is odd and invalid
00001CB8                          1258                          
00001CB8  B5CB                    1259                          CMP.L   A3,A2               *end address must be greater than start address
00001CBA  6E00 0004               1260                          BGT     erdFailAddrOrder    *if start addres is greater, go to error
00001CBE                          1261  
00001CBE  4E75                    1262  erdFinish               RTS
00001CC0                          1263  
00001CC0  43F8 118B               1264  erdFailAddrOrder        LEA     addr_order_check,A1
00001CC4  103C 000E               1265                          MOVE.B  #14,D0
00001CC8  4E4F                    1266                          TRAP    #15
00001CCA                          1267                          
00001CCA  7E01                    1268                          MOVE.L  #1,D7
00001CCC  60F0                    1269                          BRA     erdFinish
00001CCE                          1270  
00001CCE  43F8 1164               1271  erdFailAddrOddB         LEA     addr_oddBit_msg,A1
00001CD2  103C 000E               1272                          MOVE.B  #14,D0
00001CD6  4E4F                    1273                          TRAP    #15
00001CD8                          1274                          
00001CD8  7E01                    1275                          MOVE.L  #1,D7               *if D7 equals 1, then address is invalid
00001CDA  60E2                    1276                          BRA     erdFinish
00001CDC                          1277                          
00001CDC                          1278  
00001CDC                          1279  
00001CDC                          1280  
00001CDC                          1281  
00001CDC                          1282  
00001CDC                          1283  
00001CDC                          1284  
00001CDC                          1285  
00001CDC                          1286  -------------------- end include --------------------
00001CDC                          1287      END START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_BUFFER     19E0
ABSOLUTE_LONG_BUFFER  1A10
ABSOLUTE_WORD_BUFFER  19FE
ADD                 1498
ADDA                1472
ADDA_BUFFER         147C
ADDA_DISP           124A
ADDA_NOTWORD        1BFA
ADDI                152C
ADDI_BUFFER         15B4
ADDI_DES            1550
ADDI_DISP           124F
ADDI_NOTBYTE        1BC0
ADDI_NOTWORD        1BD2
ADDI_SRC            1542
ADDQ                16BA
ADDQ_BUFFER         16C4
ADDQ_DISP           1254
ADDRESS_BUFFER      19DA
ADDR_ODDBIT_MSG     1164
ADDR_ORDER_CHECK    118B
ADD_BUFFER          14A0
ADD_DEST            150A
ADD_DIRECTION_REVERSED  14D0
ADD_DISP            1246
ADD_NOTBYTE         1B3C
ADD_NOTLEFT         1B68
ADD_NOTRIGHTBYTE    1B7E
ADD_NOTRIGHTWORD    1B94
ADD_NOTWORD         1B52
ADD_SRC             14E6
AND                 179A
AND_BUFFER          17A4
AND_DISP            126F
ASL                 17D6
ASL_BUFFER          17E0
ASL_DISP            127E
ASR                 17BA
ASR_BUFFER          17C4
ASR_DISP            1282
AS_ERROR            1C8A
AS_LETTER           1C74
AS_NUMBER           1C6E
ATHENDLOOP          1C56
BACKSLASHSIGH       12CC
BCC_DISP            1296
BGT_DISP            129A
BITS11TO13          193E
BITS11TO16          1960
BITS14TO16          1950
BITS1TO10           1970
BITS5TO7            1906
BITS5TO8            191A
BITS8TO10           192C
BLE_DISP            129E
BUFFER              1C3C
CLOSEPAREN          12D0
CLR_DISP            126B
CMP                 175A
CMP_BUFFER          1764
CODE0000            134E
CODE0001            1362
CODE0010            1368
CODE0011            136E
CODE0100            1374
CODE0101            13A8
CODE0110            13AE
CODE0111            13B4
CODE1000            13BA
CODE1001            13CC
CODE1010            13D2
CODE1011            13D8
CODE1100            13DE
CODE1101            13F0
CODE1110            143C
CODE1111            146C
COMMASIGN           12CA
COPY_OPCODE         1ABA
CR                  D
DIVU                16FE
DIVU_BUFFER         1708
DIVU_DISP           1262
DOLLARSIGN          12C4
DONE                1904
ENDTEST_MSG         11DF
ERDFAILADDRODDB     1CCE
ERDFAILADDRORDER    1CC0
ERDFINISH           1CBE
EXIT                12E9
FINISHER            18D6
FIVE                18AA
FOUR                189A
GETSIZE_ADD         1B22
GETSIZE_ADDA        1BE4
GETSIZE_ADDI        1BAA
HEXATABLE           12A2
INPUT_BUFFER        12DE
INSERT_NUM          185A
INVALIDEA_DISP      1223
INVALID_DISP        121E
INVALID_EA          1A22
INVALID_OP          1A26
IO_ENDLOOP          104C
IO_STARTLOOP        100C
JMP_MODE            182A
JMP_TABLE           12EE
JSR                 1A5C
JSR_DISP            128E
LEA                 15D0
LEA_BUFFER          15F2
LEA_DEST            1696
LEA_DISP            1267
LEA_SRC             1604
LF                  A
LINEBREAK           121B
LINECOUNT           12DD
LOCATION_ENDDATA    12E4
LOCATION_END_MSG    1147
LOCATION_STARTDATA  12E0
LOCATION_START_MSG  1128
LSL                 17F2
LSL_BUFFER          17FC
LSL_DISP            1276
LSR                 180E
LSR_BUFFER          1818
LSR_DISP            127A
MAIN_LOOP           108E
MINUSSIGN           12C8
MODE000             1982
MODE001             1988
MODE010             1990
MODE011             199A
MODE100             19A4
MODE101             19B2
MODE110             19BC
MODE111             19C6
MOVEA_DISP          1234
MOVEM               1A82
MOVEM_DISP          1240
MOVEM_W             1AA2
MOVEQ               16DA
MOVEQ_BUFFER        16E4
MOVEQ_DISP          123A
MOVE_DISP           122F
MULS                177A
MULS_BUFFER         1784
MULS_DISP           125D
NOP                 1A40
NOP_DISP            122B
ONE                 186A
ONEPAREN            18F6
OPENPAREN           12CE
OR                  171E
OR_BUFFER           1728
OR_DISP             1273
PAUSE_MSG           11C5
PLUSSIGN            12C6
POSTINCR            18E4
POUNDSIGN           12C2
PRINT_ADDRESS       1AC0
PRINT_BUFFER        1AE0
PRINT_DEREF_ADDRESS  1AFC
ROL_DISP            1286
ROR_DISP            128A
RTS                 1A4E
RTS_DISP            1292
SEVEN               18CA
SIX                 18BA
SIZEISBYTE          1C0C
SIZEISLONG          1C2C
SIZEISWORD          1C1C
SIZE_B              12D4
SIZE_L              12DA
SIZE_W              12D7
SPACE               12D2
SRDFAILADDRODDB     1CA2
SRDFINISH           1CA0
START               1000
SUB                 173A
SUB_ASTOHELOOP      1C40
SUB_BREAKDOWNAS     1C5A
SUB_BUFFER          1744
SUB_DISP            1259
SUB_ENDREADINGDATA  1CB0
SUB_STARTREADINGDATA  1C96
TABLE_LENGTH        12E8
THREE               188A
TWO                 187A
WELCOME_MSG         10C4
